
TestLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eaac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800ec3c  0800ec3c  0001ec3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed9c  0800ed9c  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed9c  0800ed9c  0001ed9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eda4  0800eda4  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eda4  0800eda4  0001eda4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eda8  0800eda8  0001eda8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800edac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ba8  200000e8  0800ee94  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006c90  0800ee94  00026c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e8b2  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005a1e  00000000  00000000  0004e9ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fb8  00000000  00000000  000543e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d08  00000000  00000000  000563a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e906  00000000  00000000  000580a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e336  00000000  00000000  000869ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00102f35  00000000  00000000  000a4ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a7c19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008594  00000000  00000000  001a7c94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e8 	.word	0x200000e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec24 	.word	0x0800ec24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	0800ec24 	.word	0x0800ec24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4603      	mov	r3, r0
 800057a:	81fb      	strh	r3, [r7, #14]
 800057c:	460b      	mov	r3, r1
 800057e:	81bb      	strh	r3, [r7, #12]
 8000580:	4613      	mov	r3, r2
 8000582:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]

  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8000588:	f001 ff2c 	bl	80023e4 <AUDIO_IO_Init>

  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800058c:	89fb      	ldrh	r3, [r7, #14]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2201      	movs	r2, #1
 8000592:	2102      	movs	r1, #2
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fb01 	bl	8000b9c <CODEC_IO_Write>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	4413      	add	r3, r2
 80005a2:	617b      	str	r3, [r7, #20]

  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80005a4:	89bb      	ldrh	r3, [r7, #12]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d81b      	bhi.n	80005e4 <cs43l22_Init+0x74>
 80005ac:	a201      	add	r2, pc, #4	; (adr r2, 80005b4 <cs43l22_Init+0x44>)
 80005ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b2:	bf00      	nop
 80005b4:	080005c5 	.word	0x080005c5
 80005b8:	080005cd 	.word	0x080005cd
 80005bc:	080005d5 	.word	0x080005d5
 80005c0:	080005dd 	.word	0x080005dd
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 80005c4:	4b5b      	ldr	r3, [pc, #364]	; (8000734 <cs43l22_Init+0x1c4>)
 80005c6:	22fa      	movs	r2, #250	; 0xfa
 80005c8:	701a      	strb	r2, [r3, #0]
    break;
 80005ca:	e00f      	b.n	80005ec <cs43l22_Init+0x7c>

  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 80005cc:	4b59      	ldr	r3, [pc, #356]	; (8000734 <cs43l22_Init+0x1c4>)
 80005ce:	22af      	movs	r2, #175	; 0xaf
 80005d0:	701a      	strb	r2, [r3, #0]
    break;
 80005d2:	e00b      	b.n	80005ec <cs43l22_Init+0x7c>

  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 80005d4:	4b57      	ldr	r3, [pc, #348]	; (8000734 <cs43l22_Init+0x1c4>)
 80005d6:	22aa      	movs	r2, #170	; 0xaa
 80005d8:	701a      	strb	r2, [r3, #0]
    break;
 80005da:	e007      	b.n	80005ec <cs43l22_Init+0x7c>

  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 80005dc:	4b55      	ldr	r3, [pc, #340]	; (8000734 <cs43l22_Init+0x1c4>)
 80005de:	2205      	movs	r2, #5
 80005e0:	701a      	strb	r2, [r3, #0]
    break;
 80005e2:	e003      	b.n	80005ec <cs43l22_Init+0x7c>

  default:
    OutputDev = 0x05;
 80005e4:	4b53      	ldr	r3, [pc, #332]	; (8000734 <cs43l22_Init+0x1c4>)
 80005e6:	2205      	movs	r2, #5
 80005e8:	701a      	strb	r2, [r3, #0]
    break;
 80005ea:	bf00      	nop
  }

  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	b2d8      	uxtb	r0, r3
 80005f0:	4b50      	ldr	r3, [pc, #320]	; (8000734 <cs43l22_Init+0x1c4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	2104      	movs	r1, #4
 80005fa:	f000 facf 	bl	8000b9c <CODEC_IO_Write>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	4413      	add	r3, r2
 8000606:	617b      	str	r3, [r7, #20]

  /* Clock configuration: Auto detection */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000608:	89fb      	ldrh	r3, [r7, #14]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2281      	movs	r2, #129	; 0x81
 800060e:	2105      	movs	r1, #5
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fac3 	bl	8000b9c <CODEC_IO_Write>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	4413      	add	r3, r2
 800061e:	617b      	str	r3, [r7, #20]

  /* Set the Slave Mode and the audio Standard */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000620:	89fb      	ldrh	r3, [r7, #14]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2204      	movs	r2, #4
 8000626:	2106      	movs	r1, #6
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fab7 	bl	8000b9c <CODEC_IO_Write>
 800062e:	4603      	mov	r3, r0
 8000630:	461a      	mov	r2, r3
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	4413      	add	r3, r2
 8000636:	617b      	str	r3, [r7, #20]

  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000638:	7afa      	ldrb	r2, [r7, #11]
 800063a:	89fb      	ldrh	r3, [r7, #14]
 800063c:	4611      	mov	r1, r2
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f964 	bl	800090c <cs43l22_SetVolume>
 8000644:	4602      	mov	r2, r0
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	4413      	add	r3, r2
 800064a:	617b      	str	r3, [r7, #20]

  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 800064c:	89bb      	ldrh	r3, [r7, #12]
 800064e:	2b02      	cmp	r3, #2
 8000650:	d023      	beq.n	800069a <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000652:	89fb      	ldrh	r3, [r7, #14]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2206      	movs	r2, #6
 8000658:	210f      	movs	r1, #15
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fa9e 	bl	8000b9c <CODEC_IO_Write>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	4413      	add	r3, r2
 8000668:	617b      	str	r3, [r7, #20]

    /* Set the Speaker attenuation level */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 800066a:	89fb      	ldrh	r3, [r7, #14]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2200      	movs	r2, #0
 8000670:	2124      	movs	r1, #36	; 0x24
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fa92 	bl	8000b9c <CODEC_IO_Write>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	4413      	add	r3, r2
 8000680:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000682:	89fb      	ldrh	r3, [r7, #14]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2200      	movs	r2, #0
 8000688:	2125      	movs	r1, #37	; 0x25
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fa86 	bl	8000b9c <CODEC_IO_Write>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	4413      	add	r3, r2
 8000698:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */

  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 800069a:	89fb      	ldrh	r3, [r7, #14]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2200      	movs	r2, #0
 80006a0:	210a      	movs	r1, #10
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fa7a 	bl	8000b9c <CODEC_IO_Write>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	4413      	add	r3, r2
 80006b0:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80006b2:	89fb      	ldrh	r3, [r7, #14]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2204      	movs	r2, #4
 80006b8:	210e      	movs	r1, #14
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fa6e 	bl	8000b9c <CODEC_IO_Write>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	4413      	add	r3, r2
 80006c8:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 80006ca:	89fb      	ldrh	r3, [r7, #14]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2200      	movs	r2, #0
 80006d0:	2127      	movs	r1, #39	; 0x27
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fa62 	bl	8000b9c <CODEC_IO_Write>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	4413      	add	r3, r2
 80006e0:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 80006e2:	89fb      	ldrh	r3, [r7, #14]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	220f      	movs	r2, #15
 80006e8:	211f      	movs	r1, #31
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fa56 	bl	8000b9c <CODEC_IO_Write>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	4413      	add	r3, r2
 80006f8:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 80006fa:	89fb      	ldrh	r3, [r7, #14]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	220a      	movs	r2, #10
 8000700:	211a      	movs	r1, #26
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fa4a 	bl	8000b9c <CODEC_IO_Write>
 8000708:	4603      	mov	r3, r0
 800070a:	461a      	mov	r2, r3
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	220a      	movs	r2, #10
 8000718:	211b      	movs	r1, #27
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fa3e 	bl	8000b9c <CODEC_IO_Write>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	4413      	add	r3, r2
 8000728:	617b      	str	r3, [r7, #20]

  /* Return communication control value */
  return counter;
 800072a:	697b      	ldr	r3, [r7, #20]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000104 	.word	0x20000104

08000738 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 800073c:	f001 fe88 	bl	8002450 <AUDIO_IO_DeInit>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The CS43L22 ID
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800074e:	f001 fe49 	bl	80023e4 <AUDIO_IO_Init>

  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2101      	movs	r1, #1
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fed1 	bl	8002500 <AUDIO_IO_Read>
 800075e:	4603      	mov	r3, r0
 8000760:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	f023 0307 	bic.w	r3, r3, #7
 8000768:	73fb      	strb	r3, [r7, #15]

  return((uint32_t) Value);
 800076a:	7bfb      	ldrb	r3, [r7, #15]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	80fb      	strh	r3, [r7, #6]
 8000780:	4613      	mov	r3, r2
 8000782:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]

  if(Is_cs43l22_Stop == 1)
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <cs43l22_Play+0x70>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d123      	bne.n	80007d8 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2206      	movs	r2, #6
 8000796:	210e      	movs	r1, #14
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f9ff 	bl	8000b9c <CODEC_IO_Write>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	4413      	add	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]

    /* Enable Output device */
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f919 	bl	80009e4 <cs43l22_SetMute>
 80007b2:	4602      	mov	r2, r0
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4413      	add	r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]

    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	229e      	movs	r2, #158	; 0x9e
 80007c0:	2102      	movs	r1, #2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f9ea 	bl	8000b9c <CODEC_IO_Write>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	4413      	add	r3, r2
 80007d0:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <cs43l22_Play+0x70>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return communication control value */
  return counter;
 80007d8:	68fb      	ldr	r3, [r7, #12]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000030 	.word	0x20000030

080007e8 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]

  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	2101      	movs	r1, #1
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f8f2 	bl	80009e4 <cs43l22_SetMute>
 8000800:	4602      	mov	r2, r0
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	4413      	add	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]

  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2201      	movs	r2, #1
 800080e:	2102      	movs	r1, #2
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f9c3 	bl	8000b9c <CODEC_IO_Write>
 8000816:	4603      	mov	r3, r0
 8000818:	461a      	mov	r2, r3
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4413      	add	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]

  return counter;
 8000820:	68fb      	ldr	r3, [r7, #12]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f8ce 	bl	80009e4 <cs43l22_SetMute>
 8000848:	4602      	mov	r2, r0
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4413      	add	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	e002      	b.n	800085c <cs43l22_Resume+0x30>
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	3301      	adds	r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	2bfe      	cmp	r3, #254	; 0xfe
 8000860:	d9f9      	bls.n	8000856 <cs43l22_Resume+0x2a>

  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	b2d8      	uxtb	r0, r3
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <cs43l22_Resume+0x74>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	2104      	movs	r1, #4
 8000870:	f000 f994 	bl	8000b9c <CODEC_IO_Write>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4413      	add	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	229e      	movs	r2, #158	; 0x9e
 8000884:	2102      	movs	r1, #2
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f988 	bl	8000b9c <CODEC_IO_Write>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4413      	add	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]

  return counter;
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000104 	.word	0x20000104

080008a4 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]

  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80008b4:	88fb      	ldrh	r3, [r7, #6]
 80008b6:	2101      	movs	r1, #1
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 f893 	bl	80009e4 <cs43l22_SetMute>
 80008be:	4602      	mov	r2, r0
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4413      	add	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2204      	movs	r2, #4
 80008cc:	210e      	movs	r1, #14
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f964 	bl	8000b9c <CODEC_IO_Write>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]

  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	229f      	movs	r2, #159	; 0x9f
 80008e4:	2102      	movs	r1, #2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f958 	bl	8000b9c <CODEC_IO_Write>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4413      	add	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]

  Is_cs43l22_Stop = 1;
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <cs43l22_Stop+0x64>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
  return counter;
 80008fc:	68fb      	ldr	r3, [r7, #12]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000030 	.word	0x20000030

0800090c <cs43l22_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	460a      	mov	r2, r1
 8000916:	80fb      	strh	r3, [r7, #6]
 8000918:	4613      	mov	r3, r2
 800091a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000920:	797b      	ldrb	r3, [r7, #5]
 8000922:	2b64      	cmp	r3, #100	; 0x64
 8000924:	d80b      	bhi.n	800093e <cs43l22_SetVolume+0x32>
 8000926:	797a      	ldrb	r2, [r7, #5]
 8000928:	4613      	mov	r3, r2
 800092a:	021b      	lsls	r3, r3, #8
 800092c:	1a9b      	subs	r3, r3, r2
 800092e:	4a25      	ldr	r2, [pc, #148]	; (80009c4 <cs43l22_SetVolume+0xb8>)
 8000930:	fb82 1203 	smull	r1, r2, r2, r3
 8000934:	1152      	asrs	r2, r2, #5
 8000936:	17db      	asrs	r3, r3, #31
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	e000      	b.n	8000940 <cs43l22_SetVolume+0x34>
 800093e:	2364      	movs	r3, #100	; 0x64
 8000940:	72fb      	strb	r3, [r7, #11]

  if(Volume > 0xE6)
 8000942:	797b      	ldrb	r3, [r7, #5]
 8000944:	2be6      	cmp	r3, #230	; 0xe6
 8000946:	d91c      	bls.n	8000982 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7);
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	b2d8      	uxtb	r0, r3
 800094c:	7afb      	ldrb	r3, [r7, #11]
 800094e:	3319      	adds	r3, #25
 8000950:	b2db      	uxtb	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	2120      	movs	r1, #32
 8000956:	f000 f921 	bl	8000b9c <CODEC_IO_Write>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4413      	add	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	b2d8      	uxtb	r0, r3
 8000968:	7afb      	ldrb	r3, [r7, #11]
 800096a:	3319      	adds	r3, #25
 800096c:	b2db      	uxtb	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	2121      	movs	r1, #33	; 0x21
 8000972:	f000 f913 	bl	8000b9c <CODEC_IO_Write>
 8000976:	4603      	mov	r3, r0
 8000978:	461a      	mov	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	e01b      	b.n	80009ba <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19);
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	b2d8      	uxtb	r0, r3
 8000986:	7afb      	ldrb	r3, [r7, #11]
 8000988:	3319      	adds	r3, #25
 800098a:	b2db      	uxtb	r3, r3
 800098c:	461a      	mov	r2, r3
 800098e:	2120      	movs	r1, #32
 8000990:	f000 f904 	bl	8000b9c <CODEC_IO_Write>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4413      	add	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19);
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	b2d8      	uxtb	r0, r3
 80009a2:	7afb      	ldrb	r3, [r7, #11]
 80009a4:	3319      	adds	r3, #25
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	461a      	mov	r2, r3
 80009aa:	2121      	movs	r1, #33	; 0x21
 80009ac:	f000 f8f6 	bl	8000b9c <CODEC_IO_Write>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 80009ba:	68fb      	ldr	r3, [r7, #12]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	51eb851f 	.word	0x51eb851f

080009c8 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	80fb      	strh	r3, [r7, #6]
  return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]

  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d124      	bne.n	8000a44 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	22ff      	movs	r2, #255	; 0xff
 8000a00:	2104      	movs	r1, #4
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f8ca 	bl	8000b9c <CODEC_IO_Write>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2201      	movs	r2, #1
 8000a18:	2122      	movs	r1, #34	; 0x22
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f8be 	bl	8000b9c <CODEC_IO_Write>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2123      	movs	r1, #35	; 0x23
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f8b2 	bl	8000b9c <CODEC_IO_Write>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	e025      	b.n	8000a90 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2122      	movs	r1, #34	; 0x22
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 f8a5 	bl	8000b9c <CODEC_IO_Write>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	4413      	add	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2200      	movs	r2, #0
 8000a62:	2123      	movs	r1, #35	; 0x23
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 f899 	bl	8000b9c <CODEC_IO_Write>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4413      	add	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	b2d8      	uxtb	r0, r3
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <cs43l22_SetMute+0xb8>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	2104      	movs	r1, #4
 8000a82:	f000 f88b 	bl	8000b9c <CODEC_IO_Write>
 8000a86:	4603      	mov	r3, r0
 8000a88:	461a      	mov	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8000a90:	68fb      	ldr	r3, [r7, #12]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000104 	.word	0x20000104

08000aa0 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	460a      	mov	r2, r1
 8000aaa:	80fb      	strh	r3, [r7, #6]
 8000aac:	4613      	mov	r3, r2
 8000aae:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]

  switch (Output)
 8000ab4:	797b      	ldrb	r3, [r7, #5]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d84b      	bhi.n	8000b54 <cs43l22_SetOutputMode+0xb4>
 8000abc:	a201      	add	r2, pc, #4	; (adr r2, 8000ac4 <cs43l22_SetOutputMode+0x24>)
 8000abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac2:	bf00      	nop
 8000ac4:	08000ad5 	.word	0x08000ad5
 8000ac8:	08000af5 	.word	0x08000af5
 8000acc:	08000b15 	.word	0x08000b15
 8000ad0:	08000b35 	.word	0x08000b35
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	22fa      	movs	r2, #250	; 0xfa
 8000ada:	2104      	movs	r1, #4
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f85d 	bl	8000b9c <CODEC_IO_Write>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4413      	add	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8000aec:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <cs43l22_SetOutputMode+0xe0>)
 8000aee:	22fa      	movs	r2, #250	; 0xfa
 8000af0:	701a      	strb	r2, [r3, #0]
      break;
 8000af2:	e03f      	b.n	8000b74 <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	22af      	movs	r2, #175	; 0xaf
 8000afa:	2104      	movs	r1, #4
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f84d 	bl	8000b9c <CODEC_IO_Write>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4413      	add	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <cs43l22_SetOutputMode+0xe0>)
 8000b0e:	22af      	movs	r2, #175	; 0xaf
 8000b10:	701a      	strb	r2, [r3, #0]
      break;
 8000b12:	e02f      	b.n	8000b74 <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	22aa      	movs	r2, #170	; 0xaa
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f83d 	bl	8000b9c <CODEC_IO_Write>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461a      	mov	r2, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4413      	add	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <cs43l22_SetOutputMode+0xe0>)
 8000b2e:	22aa      	movs	r2, #170	; 0xaa
 8000b30:	701a      	strb	r2, [r3, #0]
      break;
 8000b32:	e01f      	b.n	8000b74 <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2205      	movs	r2, #5
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 f82d 	bl	8000b9c <CODEC_IO_Write>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <cs43l22_SetOutputMode+0xe0>)
 8000b4e:	2205      	movs	r2, #5
 8000b50:	701a      	strb	r2, [r3, #0]
      break;
 8000b52:	e00f      	b.n	8000b74 <cs43l22_SetOutputMode+0xd4>

    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2205      	movs	r2, #5
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f81d 	bl	8000b9c <CODEC_IO_Write>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4413      	add	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <cs43l22_SetOutputMode+0xe0>)
 8000b6e:	2205      	movs	r2, #5
 8000b70:	701a      	strb	r2, [r3, #0]
      break;
 8000b72:	bf00      	nop
  }
  return counter;
 8000b74:	68fb      	ldr	r3, [r7, #12]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000104 	.word	0x20000104

08000b84 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
  return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <CODEC_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	71bb      	strb	r3, [r7, #6]
 8000baa:	4613      	mov	r3, r2
 8000bac:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]

  AUDIO_IO_Write(Addr, Reg, Value);
 8000bb2:	797a      	ldrb	r2, [r7, #5]
 8000bb4:	79b9      	ldrb	r1, [r7, #6]
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fc89 	bl	80024d0 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	b2db      	uxtb	r3, r3
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000bd0:	4b39      	ldr	r3, [pc, #228]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000bd2:	4a3a      	ldr	r2, [pc, #232]	; (8000cbc <MX_DFSDM1_Init+0xf0>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000bd6:	4b38      	ldr	r3, [pc, #224]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000bdc:	4b36      	ldr	r3, [pc, #216]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000be2:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000be8:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = ENABLE;
 8000bee:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 8000bf4:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8000bfa:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000c00:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000c02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c06:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000c08:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000c0a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c0e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000c10:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000c12:	2240      	movs	r2, #64	; 0x40
 8000c14:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000c16:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000c1c:	4826      	ldr	r0, [pc, #152]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000c1e:	f003 fa0b 	bl	8004038 <HAL_DFSDM_FilterInit>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_DFSDM1_Init+0x60>
  {
    Error_Handler();
 8000c28:	f001 f800 	bl	8001c2c <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000c2c:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <MX_DFSDM1_Init+0xf4>)
 8000c2e:	4a25      	ldr	r2, [pc, #148]	; (8000cc4 <MX_DFSDM1_Init+0xf8>)
 8000c30:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000c32:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <MX_DFSDM1_Init+0xf4>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <MX_DFSDM1_Init+0xf4>)
 8000c3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c3e:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 4;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <MX_DFSDM1_Init+0xf4>)
 8000c42:	2204      	movs	r2, #4
 8000c44:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <MX_DFSDM1_Init+0xf4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <MX_DFSDM1_Init+0xf4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_DFSDM1_Init+0xf4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_DFSDM1_Init+0xf4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_DFSDM1_Init+0xf4>)
 8000c60:	2204      	movs	r2, #4
 8000c62:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_DFSDM1_Init+0xf4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 10;
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_DFSDM1_Init+0xf4>)
 8000c6c:	220a      	movs	r2, #10
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_DFSDM1_Init+0xf4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 2;
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_DFSDM1_Init+0xf4>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000c7c:	4810      	ldr	r0, [pc, #64]	; (8000cc0 <MX_DFSDM1_Init+0xf4>)
 8000c7e:	f003 f907 	bl	8003e90 <HAL_DFSDM_ChannelInit>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_DFSDM1_Init+0xc0>
  {
    Error_Handler();
 8000c88:	f000 ffd0 	bl	8001c2c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <MX_DFSDM1_Init+0xfc>)
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000c92:	f003 faab 	bl	80041ec <HAL_DFSDM_FilterConfigRegChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_DFSDM1_Init+0xd4>
  {
    Error_Handler();
 8000c9c:	f000 ffc6 	bl	8001c2c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2) != HAL_OK)
 8000ca0:	4909      	ldr	r1, [pc, #36]	; (8000cc8 <MX_DFSDM1_Init+0xfc>)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_DFSDM1_Init+0xec>)
 8000ca4:	f003 fae7 	bl	8004276 <HAL_DFSDM_FilterConfigInjChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_DFSDM1_Init+0xe6>
  {
    Error_Handler();
 8000cae:	f000 ffbd 	bl	8001c2c <Error_Handler>
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200001bc 	.word	0x200001bc
 8000cbc:	40016100 	.word	0x40016100
 8000cc0:	20000258 	.word	0x20000258
 8000cc4:	40016040 	.word	0x40016040
 8000cc8:	00020004 	.word	0x00020004

08000ccc <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000ce4:	4b3a      	ldr	r3, [pc, #232]	; (8000dd0 <HAL_DFSDM_FilterMspInit+0x104>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d136      	bne.n	8000d5a <HAL_DFSDM_FilterMspInit+0x8e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000cec:	4b39      	ldr	r3, [pc, #228]	; (8000dd4 <HAL_DFSDM_FilterMspInit+0x108>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	4a38      	ldr	r2, [pc, #224]	; (8000dd4 <HAL_DFSDM_FilterMspInit+0x108>)
 8000cf4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000cf6:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <HAL_DFSDM_FilterMspInit+0x108>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10b      	bne.n	8000d16 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000cfe:	4b36      	ldr	r3, [pc, #216]	; (8000dd8 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d08:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0a:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d16:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	4a2f      	ldr	r2, [pc, #188]	; (8000dd8 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d22:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000d2e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d40:	2306      	movs	r3, #6
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4824      	ldr	r0, [pc, #144]	; (8000ddc <HAL_DFSDM_FilterMspInit+0x110>)
 8000d4c:	f004 f82e 	bl	8004dac <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_DFSDM_FilterMspInit+0x104>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_DFSDM_FilterMspInit+0x104>)
 8000d58:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <HAL_DFSDM_FilterMspInit+0x114>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d131      	bne.n	8000dc8 <HAL_DFSDM_FilterMspInit+0xfc>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000d66:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000d68:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d88:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d90:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000d94:	2220      	movs	r2, #32
 8000d96:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000da0:	4810      	ldr	r0, [pc, #64]	; (8000de4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000da2:	f003 fd8d 	bl	80048c0 <HAL_DMA_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_DFSDM_FilterMspInit+0xe4>
    {
      Error_Handler();
 8000dac:	f000 ff3e 	bl	8001c2c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000010c 	.word	0x2000010c
 8000dd4:	20000108 	.word	0x20000108
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	48001000 	.word	0x48001000
 8000de0:	40016100 	.word	0x40016100
 8000de4:	20000210 	.word	0x20000210
 8000de8:	40020044 	.word	0x40020044

08000dec <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <HAL_DFSDM_ChannelMspInit+0xa8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d13e      	bne.n	8000e8a <HAL_DFSDM_ChannelMspInit+0x9e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <HAL_DFSDM_ChannelMspInit+0xac>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <HAL_DFSDM_ChannelMspInit+0xac>)
 8000e14:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <HAL_DFSDM_ChannelMspInit+0xac>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d10b      	bne.n	8000e36 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <HAL_DFSDM_ChannelMspInit+0xb0>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e22:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <HAL_DFSDM_ChannelMspInit+0xb0>)
 8000e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e28:	6613      	str	r3, [r2, #96]	; 0x60
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <HAL_DFSDM_ChannelMspInit+0xb0>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_DFSDM_ChannelMspInit+0xb0>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <HAL_DFSDM_ChannelMspInit+0xb0>)
 8000e3c:	f043 0310 	orr.w	r3, r3, #16
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_DFSDM_ChannelMspInit+0xb0>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000e4e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e60:	2306      	movs	r3, #6
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000e6c:	f003 ff9e 	bl	8004dac <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	203d      	movs	r0, #61	; 0x3d
 8000e76:	f002 ffc6 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 8000e7a:	203d      	movs	r0, #61	; 0x3d
 8000e7c:	f002 ffdf 	bl	8003e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <HAL_DFSDM_ChannelMspInit+0xa8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3301      	adds	r3, #1
 8000e86:	4a03      	ldr	r2, [pc, #12]	; (8000e94 <HAL_DFSDM_ChannelMspInit+0xa8>)
 8000e88:	6013      	str	r3, [r2, #0]
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000010c 	.word	0x2000010c
 8000e98:	20000108 	.word	0x20000108
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48001000 	.word	0x48001000

08000ea4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_DMA_Init+0x60>)
 8000eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eae:	4a15      	ldr	r2, [pc, #84]	; (8000f04 <MX_DMA_Init+0x60>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6493      	str	r3, [r2, #72]	; 0x48
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_DMA_Init+0x60>)
 8000eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_DMA_Init+0x60>)
 8000ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <MX_DMA_Init+0x60>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6493      	str	r3, [r2, #72]	; 0x48
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <MX_DMA_Init+0x60>)
 8000ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	200e      	movs	r0, #14
 8000ee0:	f002 ff91 	bl	8003e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ee4:	200e      	movs	r0, #14
 8000ee6:	f002 ffaa 	bl	8003e3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2038      	movs	r0, #56	; 0x38
 8000ef0:	f002 ff89 	bl	8003e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000ef4:	2038      	movs	r0, #56	; 0x38
 8000ef6:	f002 ffa2 	bl	8003e3e <HAL_NVIC_EnableIRQ>

}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	; 0x30
 8000f0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1e:	4b92      	ldr	r3, [pc, #584]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a91      	ldr	r2, [pc, #580]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b8f      	ldr	r3, [pc, #572]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	4b8c      	ldr	r3, [pc, #560]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a8b      	ldr	r2, [pc, #556]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b89      	ldr	r3, [pc, #548]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	4b86      	ldr	r3, [pc, #536]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a85      	ldr	r2, [pc, #532]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b83      	ldr	r3, [pc, #524]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b80      	ldr	r3, [pc, #512]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a7f      	ldr	r2, [pc, #508]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b7d      	ldr	r3, [pc, #500]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b7a      	ldr	r3, [pc, #488]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a79      	ldr	r2, [pc, #484]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b77      	ldr	r3, [pc, #476]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	4b74      	ldr	r3, [pc, #464]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a73      	ldr	r2, [pc, #460]	; (8001168 <MX_GPIO_Init+0x260>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b71      	ldr	r3, [pc, #452]	; (8001168 <MX_GPIO_Init+0x260>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f240 1109 	movw	r1, #265	; 0x109
 8000fb4:	486d      	ldr	r0, [pc, #436]	; (800116c <MX_GPIO_Init+0x264>)
 8000fb6:	f004 f9ad 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	210c      	movs	r1, #12
 8000fbe:	486c      	ldr	r0, [pc, #432]	; (8001170 <MX_GPIO_Init+0x268>)
 8000fc0:	f004 f9a8 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fca:	486a      	ldr	r0, [pc, #424]	; (8001174 <MX_GPIO_Init+0x26c>)
 8000fcc:	f004 f9a2 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd6:	4867      	ldr	r0, [pc, #412]	; (8001174 <MX_GPIO_Init+0x26c>)
 8000fd8:	f004 f99c 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	4865      	ldr	r0, [pc, #404]	; (8001178 <MX_GPIO_Init+0x270>)
 8000fe2:	f004 f997 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	485b      	ldr	r0, [pc, #364]	; (800116c <MX_GPIO_Init+0x264>)
 8000ffe:	f003 fed5 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8001002:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001008:	4b5c      	ldr	r3, [pc, #368]	; (800117c <MX_GPIO_Init+0x274>)
 800100a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4857      	ldr	r0, [pc, #348]	; (8001174 <MX_GPIO_Init+0x26c>)
 8001018:	f003 fec8 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 800101c:	2307      	movs	r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	4851      	ldr	r0, [pc, #324]	; (8001174 <MX_GPIO_Init+0x26c>)
 8001030:	f003 febc 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 8001034:	232f      	movs	r3, #47	; 0x2f
 8001036:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800103c:	2302      	movs	r3, #2
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104a:	f003 feaf 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800104e:	2310      	movs	r3, #16
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001052:	4b4a      	ldr	r3, [pc, #296]	; (800117c <MX_GPIO_Init+0x274>)
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f003 fea2 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8001068:	2304      	movs	r3, #4
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001070:	2301      	movs	r3, #1
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	483c      	ldr	r0, [pc, #240]	; (8001170 <MX_GPIO_Init+0x268>)
 8001080:	f003 fe94 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8001084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108e:	2301      	movs	r3, #1
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4833      	ldr	r0, [pc, #204]	; (800116c <MX_GPIO_Init+0x264>)
 800109e:	f003 fe85 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 80010a2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	482e      	ldr	r0, [pc, #184]	; (8001174 <MX_GPIO_Init+0x26c>)
 80010bc:	f003 fe76 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 80010c0:	2305      	movs	r3, #5
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <MX_GPIO_Init+0x274>)
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4829      	ldr	r0, [pc, #164]	; (8001178 <MX_GPIO_Init+0x270>)
 80010d4:	f003 fe6a 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	4822      	ldr	r0, [pc, #136]	; (8001178 <MX_GPIO_Init+0x270>)
 80010f0:	f003 fe5c 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 80010f4:	2308      	movs	r3, #8
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4819      	ldr	r0, [pc, #100]	; (8001170 <MX_GPIO_Init+0x268>)
 800110c:	f003 fe4e 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8001110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_GPIO_Init+0x274>)
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	4812      	ldr	r0, [pc, #72]	; (8001170 <MX_GPIO_Init+0x268>)
 8001126:	f003 fe41 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 800112a:	2301      	movs	r3, #1
 800112c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	480a      	ldr	r0, [pc, #40]	; (800116c <MX_GPIO_Init+0x264>)
 8001142:	f003 fe33 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8001146:	2302      	movs	r3, #2
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_GPIO_Init+0x274>)
 800114c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_GPIO_Init+0x264>)
 800115a:	f003 fe27 	bl	8004dac <HAL_GPIO_Init>

}
 800115e:	bf00      	nop
 8001160:	3730      	adds	r7, #48	; 0x30
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000
 800116c:	48001000 	.word	0x48001000
 8001170:	48000400 	.word	0x48000400
 8001174:	48000800 	.word	0x48000800
 8001178:	48000c00 	.word	0x48000c00
 800117c:	10120000 	.word	0x10120000

08001180 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <MX_I2C1_Init+0x78>)
 8001188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_I2C1_Init+0x74>)
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <MX_I2C1_Init+0x7c>)
 800118e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001198:	2201      	movs	r2, #1
 800119a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_I2C1_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ba:	480e      	ldr	r0, [pc, #56]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011bc:	f005 fd69 	bl	8006c92 <HAL_I2C_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011c6:	f000 fd31 	bl	8001c2c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ca:	2100      	movs	r1, #0
 80011cc:	4809      	ldr	r0, [pc, #36]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011ce:	f006 fa77 	bl	80076c0 <HAL_I2CEx_ConfigAnalogFilter>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011d8:	f000 fd28 	bl	8001c2c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011dc:	2100      	movs	r1, #0
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011e0:	f006 fab9 	bl	8007756 <HAL_I2CEx_ConfigDigitalFilter>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ea:	f000 fd1f 	bl	8001c2c <Error_Handler>
  }

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000290 	.word	0x20000290
 80011f8:	40005400 	.word	0x40005400
 80011fc:	00909beb 	.word	0x00909beb

08001200 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_I2C2_Init+0x74>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_I2C2_Init+0x78>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909BEB;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_I2C2_Init+0x74>)
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <MX_I2C2_Init+0x7c>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_I2C2_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_I2C2_Init+0x74>)
 8001218:	2201      	movs	r2, #1
 800121a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_I2C2_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_I2C2_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C2_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C2_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C2_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <MX_I2C2_Init+0x74>)
 800123c:	f005 fd29 	bl	8006c92 <HAL_I2C_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001246:	f000 fcf1 	bl	8001c2c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <MX_I2C2_Init+0x74>)
 800124e:	f006 fa37 	bl	80076c0 <HAL_I2CEx_ConfigAnalogFilter>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001258:	f000 fce8 	bl	8001c2c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_I2C2_Init+0x74>)
 8001260:	f006 fa79 	bl	8007756 <HAL_I2CEx_ConfigDigitalFilter>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 fcdf 	bl	8001c2c <Error_Handler>
  }

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200002dc 	.word	0x200002dc
 8001278:	40005800 	.word	0x40005800
 800127c:	00909beb 	.word	0x00909beb

08001280 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a2e      	ldr	r2, [pc, #184]	; (8001358 <HAL_I2C_MspInit+0xd8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d128      	bne.n	80012f4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	4b2e      	ldr	r3, [pc, #184]	; (800135c <HAL_I2C_MspInit+0xdc>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a2d      	ldr	r2, [pc, #180]	; (800135c <HAL_I2C_MspInit+0xdc>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <HAL_I2C_MspInit+0xdc>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80012ba:	23c0      	movs	r3, #192	; 0xc0
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012be:	2312      	movs	r3, #18
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ca:	2304      	movs	r3, #4
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4822      	ldr	r0, [pc, #136]	; (8001360 <HAL_I2C_MspInit+0xe0>)
 80012d6:	f003 fd69 	bl	8004dac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_I2C_MspInit+0xdc>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	4a1f      	ldr	r2, [pc, #124]	; (800135c <HAL_I2C_MspInit+0xdc>)
 80012e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e4:	6593      	str	r3, [r2, #88]	; 0x58
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <HAL_I2C_MspInit+0xdc>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012f2:	e02d      	b.n	8001350 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a1a      	ldr	r2, [pc, #104]	; (8001364 <HAL_I2C_MspInit+0xe4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d128      	bne.n	8001350 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <HAL_I2C_MspInit+0xdc>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	4a16      	ldr	r2, [pc, #88]	; (800135c <HAL_I2C_MspInit+0xdc>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_I2C_MspInit+0xdc>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8001316:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800131a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800131c:	2312      	movs	r3, #18
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001320:	2301      	movs	r3, #1
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001328:	2304      	movs	r3, #4
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <HAL_I2C_MspInit+0xe0>)
 8001334:	f003 fd3a 	bl	8004dac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_I2C_MspInit+0xdc>)
 800133a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_I2C_MspInit+0xdc>)
 800133e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001342:	6593      	str	r3, [r2, #88]	; 0x58
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_I2C_MspInit+0xdc>)
 8001346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	bf00      	nop
 8001352:	3730      	adds	r7, #48	; 0x30
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40005400 	.word	0x40005400
 800135c:	40021000 	.word	0x40021000
 8001360:	48000400 	.word	0x48000400
 8001364:	40005800 	.word	0x40005800

08001368 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a15      	ldr	r2, [pc, #84]	; (80013cc <HAL_I2C_MspDeInit+0x64>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10e      	bne.n	8001398 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_I2C_MspDeInit+0x68>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <HAL_I2C_MspDeInit+0x68>)
 8001380:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001384:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	4812      	ldr	r0, [pc, #72]	; (80013d4 <HAL_I2C_MspDeInit+0x6c>)
 800138a:	f003 feb7 	bl	80050fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 800138e:	2180      	movs	r1, #128	; 0x80
 8001390:	4810      	ldr	r0, [pc, #64]	; (80013d4 <HAL_I2C_MspDeInit+0x6c>)
 8001392:	f003 feb3 	bl	80050fc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001396:	e014      	b.n	80013c2 <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <HAL_I2C_MspDeInit+0x70>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10f      	bne.n	80013c2 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_I2C_MspDeInit+0x68>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_I2C_MspDeInit+0x68>)
 80013a8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013ac:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(MFX_I2C_SLC_GPIO_Port, MFX_I2C_SLC_Pin);
 80013ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b2:	4808      	ldr	r0, [pc, #32]	; (80013d4 <HAL_I2C_MspDeInit+0x6c>)
 80013b4:	f003 fea2 	bl	80050fc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(MFX_I2C_SDA_GPIO_Port, MFX_I2C_SDA_Pin);
 80013b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HAL_I2C_MspDeInit+0x6c>)
 80013be:	f003 fe9d 	bl	80050fc <HAL_GPIO_DeInit>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40005400 	.word	0x40005400
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000400 	.word	0x48000400
 80013d8:	40005800 	.word	0x40005800

080013dc <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_LCD_Init+0x68>)
 80013e2:	4a19      	ldr	r2, [pc, #100]	; (8001448 <MX_LCD_Init+0x6c>)
 80013e4:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_LCD_Init+0x68>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_LCD_Init+0x68>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_LCD_Init+0x68>)
 80013f4:	220c      	movs	r2, #12
 80013f6:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_LCD_Init+0x68>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_LCD_Init+0x68>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_LCD_Init+0x68>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_LCD_Init+0x68>)
 800140c:	2200      	movs	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_LCD_Init+0x68>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_LCD_Init+0x68>)
 8001418:	2200      	movs	r2, #0
 800141a:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_LCD_Init+0x68>)
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_LCD_Init+0x68>)
 8001424:	2200      	movs	r2, #0
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_LCD_Init+0x68>)
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_LCD_Init+0x68>)
 8001430:	f006 f9de 	bl	80077f0 <HAL_LCD_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_LCD_Init+0x62>
  {
    Error_Handler();
 800143a:	f000 fbf7 	bl	8001c2c <Error_Handler>
  }

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000328 	.word	0x20000328
 8001448:	40002400 	.word	0x40002400

0800144c <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	; 0x30
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a44      	ldr	r2, [pc, #272]	; (800157c <HAL_LCD_MspInit+0x130>)
 800146a:	4293      	cmp	r3, r2
 800146c:	f040 8081 	bne.w	8001572 <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8001470:	4b43      	ldr	r3, [pc, #268]	; (8001580 <HAL_LCD_MspInit+0x134>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	4a42      	ldr	r2, [pc, #264]	; (8001580 <HAL_LCD_MspInit+0x134>)
 8001476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800147a:	6593      	str	r3, [r2, #88]	; 0x58
 800147c:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_LCD_MspInit+0x134>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001488:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_LCD_MspInit+0x134>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148c:	4a3c      	ldr	r2, [pc, #240]	; (8001580 <HAL_LCD_MspInit+0x134>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001494:	4b3a      	ldr	r3, [pc, #232]	; (8001580 <HAL_LCD_MspInit+0x134>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b37      	ldr	r3, [pc, #220]	; (8001580 <HAL_LCD_MspInit+0x134>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a4:	4a36      	ldr	r2, [pc, #216]	; (8001580 <HAL_LCD_MspInit+0x134>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_LCD_MspInit+0x134>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b8:	4b31      	ldr	r3, [pc, #196]	; (8001580 <HAL_LCD_MspInit+0x134>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	4a30      	ldr	r2, [pc, #192]	; (8001580 <HAL_LCD_MspInit+0x134>)
 80014be:	f043 0302 	orr.w	r3, r3, #2
 80014c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c4:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <HAL_LCD_MspInit+0x134>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <HAL_LCD_MspInit+0x134>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <HAL_LCD_MspInit+0x134>)
 80014d6:	f043 0308 	orr.w	r3, r3, #8
 80014da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014dc:	4b28      	ldr	r3, [pc, #160]	; (8001580 <HAL_LCD_MspInit+0x134>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 80014e8:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80014ec:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80014fa:	230b      	movs	r3, #11
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	481f      	ldr	r0, [pc, #124]	; (8001584 <HAL_LCD_MspInit+0x138>)
 8001506:	f003 fc51 	bl	8004dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 800150a:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800150e:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800151c:	230b      	movs	r3, #11
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4619      	mov	r1, r3
 8001526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152a:	f003 fc3f 	bl	8004dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 800152e:	f24f 2333 	movw	r3, #62003	; 0xf233
 8001532:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001540:	230b      	movs	r3, #11
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	480f      	ldr	r0, [pc, #60]	; (8001588 <HAL_LCD_MspInit+0x13c>)
 800154c:	f003 fc2e 	bl	8004dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8001550:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001554:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001562:	230b      	movs	r3, #11
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	4807      	ldr	r0, [pc, #28]	; (800158c <HAL_LCD_MspInit+0x140>)
 800156e:	f003 fc1d 	bl	8004dac <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 8001572:	bf00      	nop
 8001574:	3730      	adds	r7, #48	; 0x30
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40002400 	.word	0x40002400
 8001580:	40021000 	.word	0x40021000
 8001584:	48000800 	.word	0x48000800
 8001588:	48000400 	.word	0x48000400
 800158c:	48000c00 	.word	0x48000c00

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint32_t i;
  int index_cpy = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159a:	f002 fa99 	bl	8003ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159e:	f000 fa79 	bl	8001a94 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80015a2:	f7ff fc7f 	bl	8000ea4 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a6:	f7ff fcaf 	bl	8000f08 <MX_GPIO_Init>
  //MX_DMA_Init();
  MX_I2C1_Init();
 80015aa:	f7ff fde9 	bl	8001180 <MX_I2C1_Init>
  MX_I2C2_Init();
 80015ae:	f7ff fe27 	bl	8001200 <MX_I2C2_Init>
  MX_LCD_Init();
 80015b2:	f7ff ff13 	bl	80013dc <MX_LCD_Init>
  MX_QUADSPI_Init();
 80015b6:	f000 fb43 	bl	8001c40 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80015ba:	f000 fbd5 	bl	8001d68 <MX_SAI1_Init>
  MX_SPI2_Init();
 80015be:	f000 fca7 	bl	8001f10 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80015c2:	f002 f9e7 	bl	8003994 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80015c6:	f00c fc2d 	bl	800de24 <MX_USB_HOST_Init>
  MX_DFSDM1_Init();
 80015ca:	f7ff faff 	bl	8000bcc <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuff, 2048))
 80015ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015d2:	4991      	ldr	r1, [pc, #580]	; (8001818 <main+0x288>)
 80015d4:	4891      	ldr	r0, [pc, #580]	; (800181c <main+0x28c>)
 80015d6:	f002 fe7d 	bl	80042d4 <HAL_DFSDM_FilterRegularStart_DMA>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <main+0x54>
    {
         Error_Handler();
 80015e0:	f000 fb24 	bl	8001c2c <Error_Handler>
     }


  __HAL_SAI_ENABLE(&hsai_BlockA1);
 80015e4:	4b8e      	ldr	r3, [pc, #568]	; (8001820 <main+0x290>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b8d      	ldr	r3, [pc, #564]	; (8001820 <main+0x290>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015f2:	601a      	str	r2, [r3, #0]

      if(CS43L22_ID != cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS))
 80015f4:	4b8b      	ldr	r3, [pc, #556]	; (8001824 <main+0x294>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2094      	movs	r0, #148	; 0x94
 80015fa:	4798      	blx	r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	2be0      	cmp	r3, #224	; 0xe0
 8001600:	d001      	beq.n	8001606 <main+0x76>
        {
          Error_Handler();
 8001602:	f000 fb13 	bl	8001c2c <Error_Handler>
        }
      	audio_drv = &cs43l22_drv;
 8001606:	4b88      	ldr	r3, [pc, #544]	; (8001828 <main+0x298>)
 8001608:	4a86      	ldr	r2, [pc, #536]	; (8001824 <main+0x294>)
 800160a:	601a      	str	r2, [r3, #0]
        audio_drv->Reset(AUDIO_I2C_ADDRESS);
 800160c:	4b86      	ldr	r3, [pc, #536]	; (8001828 <main+0x298>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	2094      	movs	r0, #148	; 0x94
 8001614:	4798      	blx	r3
        if(0 != audio_drv->Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 90, AUDIO_FREQUENCY_44K))
 8001616:	4b84      	ldr	r3, [pc, #528]	; (8001828 <main+0x298>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681c      	ldr	r4, [r3, #0]
 800161c:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001620:	225a      	movs	r2, #90	; 0x5a
 8001622:	2102      	movs	r1, #2
 8001624:	2094      	movs	r0, #148	; 0x94
 8001626:	47a0      	blx	r4
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <main+0xa2>
        {
          Error_Handler();
 800162e:	f000 fafd 	bl	8001c2c <Error_Handler>
        }



        BSP_LCD_GLASS_Init();
 8001632:	f000 ff81 	bl	8002538 <BSP_LCD_GLASS_Init>


        if (QSPI_OK == BSP_QSPI_Init())
 8001636:	f001 fda5 	bl	8003184 <BSP_QSPI_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d13b      	bne.n	80016b8 <main+0x128>
        {
      	  pQSPI_Info.FlashSize          = (uint32_t)0x00;
 8001640:	4b7a      	ldr	r3, [pc, #488]	; (800182c <main+0x29c>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
      	  pQSPI_Info.EraseSectorSize    = (uint32_t)0x00;
 8001646:	4b79      	ldr	r3, [pc, #484]	; (800182c <main+0x29c>)
 8001648:	2200      	movs	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
      	  pQSPI_Info.EraseSectorsNumber = (uint32_t)0x00;
 800164c:	4b77      	ldr	r3, [pc, #476]	; (800182c <main+0x29c>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
      	  pQSPI_Info.ProgPageSize       = (uint32_t)0x00;
 8001652:	4b76      	ldr	r3, [pc, #472]	; (800182c <main+0x29c>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
      	  pQSPI_Info.ProgPagesNumber    = (uint32_t)0x00;
 8001658:	4b74      	ldr	r3, [pc, #464]	; (800182c <main+0x29c>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
      	  /* Read the QSPI memory info */
      	  BSP_QSPI_GetInfo(&pQSPI_Info);
 800165e:	4873      	ldr	r0, [pc, #460]	; (800182c <main+0x29c>)
 8001660:	f001 feea 	bl	8003438 <BSP_QSPI_GetInfo>

      	  /* Test the correctness */
      	  if((pQSPI_Info.FlashSize != 0x1000000) || (pQSPI_Info.EraseSectorSize != 0x1000)  ||
 8001664:	4b71      	ldr	r3, [pc, #452]	; (800182c <main+0x29c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800166c:	d113      	bne.n	8001696 <main+0x106>
 800166e:	4b6f      	ldr	r3, [pc, #444]	; (800182c <main+0x29c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001676:	d10e      	bne.n	8001696 <main+0x106>
      	    (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 4096) ||
 8001678:	4b6c      	ldr	r3, [pc, #432]	; (800182c <main+0x29c>)
 800167a:	68db      	ldr	r3, [r3, #12]
      	  if((pQSPI_Info.FlashSize != 0x1000000) || (pQSPI_Info.EraseSectorSize != 0x1000)  ||
 800167c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001680:	d109      	bne.n	8001696 <main+0x106>
      	    (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 4096) ||
 8001682:	4b6a      	ldr	r3, [pc, #424]	; (800182c <main+0x29c>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800168a:	d104      	bne.n	8001696 <main+0x106>
      	    (pQSPI_Info.ProgPagesNumber != 65536))
 800168c:	4b67      	ldr	r3, [pc, #412]	; (800182c <main+0x29c>)
 800168e:	691b      	ldr	r3, [r3, #16]
      	    (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 4096) ||
 8001690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001694:	d005      	beq.n	80016a2 <main+0x112>
      	  {
      		  BSP_LCD_GLASS_ScrollSentence((uint8_t *)"      QSPI GET INFO : FAILED.", 1, SCROLL_SPEED_HIGH);
 8001696:	2296      	movs	r2, #150	; 0x96
 8001698:	2101      	movs	r1, #1
 800169a:	4865      	ldr	r0, [pc, #404]	; (8001830 <main+0x2a0>)
 800169c:	f000 ffbe 	bl	800261c <BSP_LCD_GLASS_ScrollSentence>
 80016a0:	e00a      	b.n	80016b8 <main+0x128>
      	  }
      	  else
      	  {
      		  /*##-3- Erase QSPI memory ################################################*/
      		  if(BSP_QSPI_Erase_Block(WRITE_READ_ADDR) != QSPI_OK)
 80016a2:	2000      	movs	r0, #0
 80016a4:	f001 fe84 	bl	80033b0 <BSP_QSPI_Erase_Block>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <main+0x128>
      		  {
      			  BSP_LCD_GLASS_ScrollSentence((uint8_t *)"      QSPI ERASE : FAILED.", 1, SCROLL_SPEED_HIGH);
 80016ae:	2296      	movs	r2, #150	; 0x96
 80016b0:	2101      	movs	r1, #1
 80016b2:	4860      	ldr	r0, [pc, #384]	; (8001834 <main+0x2a4>)
 80016b4:	f000 ffb2 	bl	800261c <BSP_LCD_GLASS_ScrollSentence>
        }




        int index = 0; //ilosc wiadomosci
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if (tryb == -1)
 80016bc:	4b5e      	ldr	r3, [pc, #376]	; (8001838 <main+0x2a8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c4:	d102      	bne.n	80016cc <main+0x13c>
	  {
		  BSP_LCD_GLASS_DisplayString((uint8_t *)"WITAM");
 80016c6:	485d      	ldr	r0, [pc, #372]	; (800183c <main+0x2ac>)
 80016c8:	f000 ff70 	bl	80025ac <BSP_LCD_GLASS_DisplayString>
	  }
      	  switch(BSP_JOY_GetState())
 80016cc:	f000 fcee 	bl	80020ac <BSP_JOY_GetState>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d002      	beq.n	80016dc <main+0x14c>
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d004      	beq.n	80016e4 <main+0x154>
 80016da:	e007      	b.n	80016ec <main+0x15c>
      	  {
      	  case JOY_DOWN: //tryb odtwarzania
      		  tryb = 0;
 80016dc:	4b56      	ldr	r3, [pc, #344]	; (8001838 <main+0x2a8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
      		  break;
 80016e2:	e003      	b.n	80016ec <main+0x15c>
      	  case JOY_UP:
      		  tryb = 1;
 80016e4:	4b54      	ldr	r3, [pc, #336]	; (8001838 <main+0x2a8>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]
      		  break;
 80016ea:	bf00      	nop
      	  }
      	  while(tryb == 0) // nagrywanie
 80016ec:	e020      	b.n	8001730 <main+0x1a0>
      	  {
      		  BSP_LCD_GLASS_DisplayString("NAGRAJ");
 80016ee:	4854      	ldr	r0, [pc, #336]	; (8001840 <main+0x2b0>)
 80016f0:	f000 ff5c 	bl	80025ac <BSP_LCD_GLASS_DisplayString>
      		  if(BSP_JOY_GetState() == JOY_SEL)
 80016f4:	f000 fcda 	bl	80020ac <BSP_JOY_GetState>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d108      	bne.n	8001710 <main+0x180>
      		  {
      			  BSP_LCD_GLASS_Clear();
 80016fe:	f000 ff83 	bl	8002608 <BSP_LCD_GLASS_Clear>
      			  tryb = 3; // wybranie slota albo zaczecie nagrywania
 8001702:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <main+0x2a8>)
 8001704:	2203      	movs	r2, #3
 8001706:	601a      	str	r2, [r3, #0]
      			  HAL_Delay(200);
 8001708:	20c8      	movs	r0, #200	; 0xc8
 800170a:	f002 fa5d 	bl	8003bc8 <HAL_Delay>
 800170e:	e00f      	b.n	8001730 <main+0x1a0>
      		  }
      		  else if (BSP_JOY_GetState() == JOY_DOWN || BSP_JOY_GetState() == JOY_UP)
 8001710:	f000 fccc 	bl	80020ac <BSP_JOY_GetState>
 8001714:	4603      	mov	r3, r0
 8001716:	2b03      	cmp	r3, #3
 8001718:	d004      	beq.n	8001724 <main+0x194>
 800171a:	f000 fcc7 	bl	80020ac <BSP_JOY_GetState>
 800171e:	4603      	mov	r3, r0
 8001720:	2b04      	cmp	r3, #4
 8001722:	d105      	bne.n	8001730 <main+0x1a0>
      		  {
      			  tryb = 1;
 8001724:	4b44      	ldr	r3, [pc, #272]	; (8001838 <main+0x2a8>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]
      			  HAL_Delay(200);
 800172a:	20c8      	movs	r0, #200	; 0xc8
 800172c:	f002 fa4c 	bl	8003bc8 <HAL_Delay>
      	  while(tryb == 0) // nagrywanie
 8001730:	4b41      	ldr	r3, [pc, #260]	; (8001838 <main+0x2a8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0da      	beq.n	80016ee <main+0x15e>
      		  }
      	  }
      	  while(tryb == 1) //odtwarzanie
 8001738:	e020      	b.n	800177c <main+0x1ec>
      	  {
      		  BSP_LCD_GLASS_DisplayString("ODTWORZ");
 800173a:	4842      	ldr	r0, [pc, #264]	; (8001844 <main+0x2b4>)
 800173c:	f000 ff36 	bl	80025ac <BSP_LCD_GLASS_DisplayString>
      		  if(BSP_JOY_GetState() == JOY_SEL)
 8001740:	f000 fcb4 	bl	80020ac <BSP_JOY_GetState>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d108      	bne.n	800175c <main+0x1cc>
      		  {
      			  BSP_LCD_GLASS_Clear();
 800174a:	f000 ff5d 	bl	8002608 <BSP_LCD_GLASS_Clear>
      			  tryb = 2; // wybranie wiadomości
 800174e:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <main+0x2a8>)
 8001750:	2202      	movs	r2, #2
 8001752:	601a      	str	r2, [r3, #0]
      			  HAL_Delay(200);
 8001754:	20c8      	movs	r0, #200	; 0xc8
 8001756:	f002 fa37 	bl	8003bc8 <HAL_Delay>
 800175a:	e00f      	b.n	800177c <main+0x1ec>
      		  }
      		  else if (BSP_JOY_GetState() == JOY_DOWN || BSP_JOY_GetState() == JOY_UP)
 800175c:	f000 fca6 	bl	80020ac <BSP_JOY_GetState>
 8001760:	4603      	mov	r3, r0
 8001762:	2b03      	cmp	r3, #3
 8001764:	d004      	beq.n	8001770 <main+0x1e0>
 8001766:	f000 fca1 	bl	80020ac <BSP_JOY_GetState>
 800176a:	4603      	mov	r3, r0
 800176c:	2b04      	cmp	r3, #4
 800176e:	d105      	bne.n	800177c <main+0x1ec>
      		  {
      			  tryb = 0;
 8001770:	4b31      	ldr	r3, [pc, #196]	; (8001838 <main+0x2a8>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
      			  HAL_Delay(200);
 8001776:	20c8      	movs	r0, #200	; 0xc8
 8001778:	f002 fa26 	bl	8003bc8 <HAL_Delay>
      	  while(tryb == 1) //odtwarzanie
 800177c:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <main+0x2a8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d0da      	beq.n	800173a <main+0x1aa>
      		  }
      	  }
      	  while(tryb == 2)
 8001784:	e0ae      	b.n	80018e4 <main+0x354>
      	  {
      		 if (index == 0)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d107      	bne.n	800179c <main+0x20c>
      		 {
      			 BSP_LCD_GLASS_ScrollSentence((uint8_t *)"      NIE MA WIADOMOSCI.", 1, SCROLL_SPEED_HIGH);
 800178c:	2296      	movs	r2, #150	; 0x96
 800178e:	2101      	movs	r1, #1
 8001790:	482d      	ldr	r0, [pc, #180]	; (8001848 <main+0x2b8>)
 8001792:	f000 ff43 	bl	800261c <BSP_LCD_GLASS_ScrollSentence>
      			 tryb = 1;
 8001796:	4b28      	ldr	r3, [pc, #160]	; (8001838 <main+0x2a8>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]
      		 }
      		  uint8_t str_index[8];
      		  sprintf(str_index, "Wiad %d", index_cpy);
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	492a      	ldr	r1, [pc, #168]	; (800184c <main+0x2bc>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f00c fef0 	bl	800e588 <siprintf>
      		  BSP_LCD_GLASS_DisplayString(str_index);
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fefe 	bl	80025ac <BSP_LCD_GLASS_DisplayString>
      		  if(BSP_JOY_GetState() == JOY_UP)
 80017b0:	f000 fc7c 	bl	80020ac <BSP_JOY_GetState>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d10e      	bne.n	80017d8 <main+0x248>
      		  {
      			  if(index_cpy < 9 && index_cpy < index)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b08      	cmp	r3, #8
 80017be:	dc0b      	bgt.n	80017d8 <main+0x248>
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	da07      	bge.n	80017d8 <main+0x248>
      			  {
      				  index_cpy++;
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	3301      	adds	r3, #1
 80017cc:	61bb      	str	r3, [r7, #24]
      				  HAL_Delay(200);
 80017ce:	20c8      	movs	r0, #200	; 0xc8
 80017d0:	f002 f9fa 	bl	8003bc8 <HAL_Delay>
      				BSP_LCD_GLASS_Clear();
 80017d4:	f000 ff18 	bl	8002608 <BSP_LCD_GLASS_Clear>
      			  }
      		  }
      		  if(BSP_JOY_GetState() == JOY_DOWN)
 80017d8:	f000 fc68 	bl	80020ac <BSP_JOY_GetState>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d108      	bne.n	80017f4 <main+0x264>
      		  {
      			  if(index_cpy > 1)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	dd05      	ble.n	80017f4 <main+0x264>
      			  {
      				  index_cpy--;
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	61bb      	str	r3, [r7, #24]
      				  HAL_Delay(200);
 80017ee:	20c8      	movs	r0, #200	; 0xc8
 80017f0:	f002 f9ea 	bl	8003bc8 <HAL_Delay>

      			  }
      		  }

      		  if(BSP_JOY_GetState() == JOY_LEFT)
 80017f4:	f000 fc5a 	bl	80020ac <BSP_JOY_GetState>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d104      	bne.n	8001808 <main+0x278>
      		  {
      		 	BSP_LCD_GLASS_Clear();
 80017fe:	f000 ff03 	bl	8002608 <BSP_LCD_GLASS_Clear>
      		 	tryb = 1;
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <main+0x2a8>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]
      		  }

      		  if(BSP_JOY_GetState() == JOY_SEL)
 8001808:	f000 fc50 	bl	80020ac <BSP_JOY_GetState>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d168      	bne.n	80018e4 <main+0x354>
      			 {
      			  for(int j = 0; j<100; j++)
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	e049      	b.n	80018ac <main+0x31c>
 8001818:	20000364 	.word	0x20000364
 800181c:	200001bc 	.word	0x200001bc
 8001820:	200063f4 	.word	0x200063f4
 8001824:	20000000 	.word	0x20000000
 8001828:	20004364 	.word	0x20004364
 800182c:	2000011c 	.word	0x2000011c
 8001830:	0800ec3c 	.word	0x0800ec3c
 8001834:	0800ec5c 	.word	0x0800ec5c
 8001838:	20000034 	.word	0x20000034
 800183c:	0800ec78 	.word	0x0800ec78
 8001840:	0800ec80 	.word	0x0800ec80
 8001844:	0800ec88 	.word	0x0800ec88
 8001848:	0800ec90 	.word	0x0800ec90
 800184c:	0800ecac 	.word	0x0800ecac
      			  {
      				BSP_QSPI_Read(PlayBuff, WRITE_READ_ADDR+(BUFFER_SIZE*j)+(index_cpy-1)*BUFFER_SIZE*2, 2*BUFFER_SIZE);
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	3b01      	subs	r3, #1
 8001854:	005a      	lsls	r2, r3, #1
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4413      	add	r3, r2
 800185a:	02db      	lsls	r3, r3, #11
 800185c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001860:	4619      	mov	r1, r3
 8001862:	4881      	ldr	r0, [pc, #516]	; (8001a68 <main+0x4d8>)
 8001864:	f001 fce4 	bl	8003230 <BSP_QSPI_Read>
      				if(PlaybackStarted == 0)
 8001868:	4b80      	ldr	r3, [pc, #512]	; (8001a6c <main+0x4dc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d11a      	bne.n	80018a6 <main+0x316>
      				{
      					if(HAL_OK != HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *) &PlayBuff[0], 2*BUFFER_SIZE))
 8001870:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001874:	497c      	ldr	r1, [pc, #496]	; (8001a68 <main+0x4d8>)
 8001876:	487e      	ldr	r0, [pc, #504]	; (8001a70 <main+0x4e0>)
 8001878:	f009 fbf4 	bl	800b064 <HAL_SAI_Transmit_DMA>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <main+0x2f6>
      					{
      						Error_Handler();
 8001882:	f000 f9d3 	bl	8001c2c <Error_Handler>
      					}
      					if(0 != audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *) &PlayBuff[0], 2*BUFFER_SIZE))
 8001886:	4b7b      	ldr	r3, [pc, #492]	; (8001a74 <main+0x4e4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001890:	4975      	ldr	r1, [pc, #468]	; (8001a68 <main+0x4d8>)
 8001892:	2094      	movs	r0, #148	; 0x94
 8001894:	4798      	blx	r3
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <main+0x310>
      					{
      						Error_Handler();
 800189c:	f000 f9c6 	bl	8001c2c <Error_Handler>
      					}
      					PlaybackStarted = 1;
 80018a0:	4b72      	ldr	r3, [pc, #456]	; (8001a6c <main+0x4dc>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
      			  for(int j = 0; j<100; j++)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	3301      	adds	r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	2b63      	cmp	r3, #99	; 0x63
 80018b0:	ddce      	ble.n	8001850 <main+0x2c0>
      				}
      			  }
      			if(0 != audio_drv->Stop(AUDIO_I2C_ADDRESS, CODEC_PDWN_HW))
 80018b2:	4b70      	ldr	r3, [pc, #448]	; (8001a74 <main+0x4e4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2101      	movs	r1, #1
 80018ba:	2094      	movs	r0, #148	; 0x94
 80018bc:	4798      	blx	r3
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <main+0x338>
      					{
      				Error_Handler();
 80018c4:	f000 f9b2 	bl	8001c2c <Error_Handler>
      					}
      			if(HAL_SAI_DMAStop(&hsai_BlockA1) != HAL_OK)
 80018c8:	4869      	ldr	r0, [pc, #420]	; (8001a70 <main+0x4e0>)
 80018ca:	f009 fb11 	bl	800aef0 <HAL_SAI_DMAStop>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <main+0x348>
      			{
      				Error_Handler();
 80018d4:	f000 f9aa 	bl	8001c2c <Error_Handler>
      			}
      			PlaybackStarted = 0;
 80018d8:	4b64      	ldr	r3, [pc, #400]	; (8001a6c <main+0x4dc>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
      			  tryb = 1;
 80018de:	4b66      	ldr	r3, [pc, #408]	; (8001a78 <main+0x4e8>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
      	  while(tryb == 2)
 80018e4:	4b64      	ldr	r3, [pc, #400]	; (8001a78 <main+0x4e8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	f43f af4c 	beq.w	8001786 <main+0x1f6>
      			 }
      	  }
      	  while(tryb == 3)
 80018ee:	e0b4      	b.n	8001a5a <main+0x4ca>
      	  {
      		  if(BSP_JOY_GetState() == JOY_LEFT)
 80018f0:	f000 fbdc 	bl	80020ac <BSP_JOY_GetState>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d104      	bne.n	8001904 <main+0x374>
      		  {
      			  BSP_LCD_GLASS_Clear();
 80018fa:	f000 fe85 	bl	8002608 <BSP_LCD_GLASS_Clear>
      			  tryb = 1;
 80018fe:	4b5e      	ldr	r3, [pc, #376]	; (8001a78 <main+0x4e8>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]
      		  }

      		BSP_LCD_GLASS_ScrollSentence((uint8_t *)"      NAGRANIE.", 1, SCROLL_SPEED_HIGH);
 8001904:	2296      	movs	r2, #150	; 0x96
 8001906:	2101      	movs	r1, #1
 8001908:	485c      	ldr	r0, [pc, #368]	; (8001a7c <main+0x4ec>)
 800190a:	f000 fe87 	bl	800261c <BSP_LCD_GLASS_ScrollSentence>
      		BSP_LCD_GLASS_ScrollSentence((uint8_t *)"      NAGRANIE.", 1, SCROLL_SPEED_HIGH);
 800190e:	2296      	movs	r2, #150	; 0x96
 8001910:	2101      	movs	r1, #1
 8001912:	485a      	ldr	r0, [pc, #360]	; (8001a7c <main+0x4ec>)
 8001914:	f000 fe82 	bl	800261c <BSP_LCD_GLASS_ScrollSentence>
      		BSP_LCD_GLASS_ScrollSentence((uint8_t *)"      NAGRANIE.", 1, SCROLL_SPEED_HIGH);
 8001918:	2296      	movs	r2, #150	; 0x96
 800191a:	2101      	movs	r1, #1
 800191c:	4857      	ldr	r0, [pc, #348]	; (8001a7c <main+0x4ec>)
 800191e:	f000 fe7d 	bl	800261c <BSP_LCD_GLASS_ScrollSentence>

      		for(int k = 0; k < 100; k++)
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e082      	b.n	8001a2e <main+0x49e>
      		{
      		if(DmaRecHalfBuffCplt == 1)
 8001928:	4b55      	ldr	r3, [pc, #340]	; (8001a80 <main+0x4f0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d131      	bne.n	8001994 <main+0x404>
      		{
      		      				      /* Store values on Play buff */
      			for(i = 0; i < BUFFER_SIZE/2; i++)
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	e027      	b.n	8001986 <main+0x3f6>
      			{
      				filter_arr[2*i]     = SaturaLH((RecBuff[i] >> 8), -32768, 32767);
 8001936:	4a53      	ldr	r2, [pc, #332]	; (8001a84 <main+0x4f4>)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	121b      	asrs	r3, r3, #8
 8001940:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001944:	db0b      	blt.n	800195e <main+0x3ce>
 8001946:	4a4f      	ldr	r2, [pc, #316]	; (8001a84 <main+0x4f4>)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194e:	121b      	asrs	r3, r3, #8
 8001950:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001954:	4293      	cmp	r3, r2
 8001956:	bfa8      	it	ge
 8001958:	4613      	movge	r3, r2
 800195a:	b21a      	sxth	r2, r3
 800195c:	e000      	b.n	8001960 <main+0x3d0>
 800195e:	4a4a      	ldr	r2, [pc, #296]	; (8001a88 <main+0x4f8>)
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4949      	ldr	r1, [pc, #292]	; (8001a8c <main+0x4fc>)
 8001966:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      				filter_arr[(2*i)+1] = filter_arr[2*i];
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005a      	lsls	r2, r3, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	3301      	adds	r3, #1
 8001974:	4945      	ldr	r1, [pc, #276]	; (8001a8c <main+0x4fc>)
 8001976:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800197a:	4a44      	ldr	r2, [pc, #272]	; (8001a8c <main+0x4fc>)
 800197c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			for(i = 0; i < BUFFER_SIZE/2; i++)
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	3301      	adds	r3, #1
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198c:	d3d3      	bcc.n	8001936 <main+0x3a6>
      			}

      			DmaRecHalfBuffCplt  = 0;
 800198e:	4b3c      	ldr	r3, [pc, #240]	; (8001a80 <main+0x4f0>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
      		}
      		if(DmaRecBuffCplt == 1)
 8001994:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <main+0x500>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d132      	bne.n	8001a02 <main+0x472>
      		{
      			/* Store values on Play buff */
      			for(i = BUFFER_SIZE/2; i < BUFFER_SIZE; i++)
 800199c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e027      	b.n	80019f4 <main+0x464>
      			{
      				filter_arr[2*i]     = SaturaLH((RecBuff[i] >> 8), -32768, 32767);
 80019a4:	4a37      	ldr	r2, [pc, #220]	; (8001a84 <main+0x4f4>)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	121b      	asrs	r3, r3, #8
 80019ae:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80019b2:	db0b      	blt.n	80019cc <main+0x43c>
 80019b4:	4a33      	ldr	r2, [pc, #204]	; (8001a84 <main+0x4f4>)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	121b      	asrs	r3, r3, #8
 80019be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80019c2:	4293      	cmp	r3, r2
 80019c4:	bfa8      	it	ge
 80019c6:	4613      	movge	r3, r2
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	e000      	b.n	80019ce <main+0x43e>
 80019cc:	4a2e      	ldr	r2, [pc, #184]	; (8001a88 <main+0x4f8>)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	492e      	ldr	r1, [pc, #184]	; (8001a8c <main+0x4fc>)
 80019d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      				filter_arr[(2*i)+1] = filter_arr[2*i];
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005a      	lsls	r2, r3, #1
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	3301      	adds	r3, #1
 80019e2:	492a      	ldr	r1, [pc, #168]	; (8001a8c <main+0x4fc>)
 80019e4:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80019e8:	4a28      	ldr	r2, [pc, #160]	; (8001a8c <main+0x4fc>)
 80019ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			for(i = BUFFER_SIZE/2; i < BUFFER_SIZE; i++)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3301      	adds	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019fa:	d3d3      	bcc.n	80019a4 <main+0x414>
      			}

      			DmaRecBuffCplt  = 0;
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <main+0x500>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
      		}
      		if (BSP_QSPI_Write(filter_arr, WRITE_READ_ADDR+(BUFFER_SIZE*k*2)+index*100*2*BUFFER_SIZE, BUFFER_SIZE*2) != QSPI_OK) Error_Handler();
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	031b      	lsls	r3, r3, #12
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	f44f 21c8 	mov.w	r1, #409600	; 0x64000
 8001a0c:	fb01 f202 	mul.w	r2, r1, r2
 8001a10:	4413      	add	r3, r2
 8001a12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a16:	4619      	mov	r1, r3
 8001a18:	481c      	ldr	r0, [pc, #112]	; (8001a8c <main+0x4fc>)
 8001a1a:	f001 fc4b 	bl	80032b4 <BSP_QSPI_Write>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <main+0x498>
 8001a24:	f000 f902 	bl	8001c2c <Error_Handler>
      		for(int k = 0; k < 100; k++)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b63      	cmp	r3, #99	; 0x63
 8001a32:	f77f af79 	ble.w	8001928 <main+0x398>
      		}


      		BSP_LED_On(LED_GREEN);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f000 faec 	bl	8002014 <BSP_LED_On>
      		HAL_Delay(1000);
 8001a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a40:	f002 f8c2 	bl	8003bc8 <HAL_Delay>
      		BSP_LED_Off(LED_GREEN);
 8001a44:	2001      	movs	r0, #1
 8001a46:	f000 faff 	bl	8002048 <BSP_LED_Off>

      		tryb = 1;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <main+0x4e8>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
      		index++;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3301      	adds	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
      		index_cpy = index;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	61bb      	str	r3, [r7, #24]
      	  while(tryb == 3)
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <main+0x4e8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	f43f af46 	beq.w	80018f0 <main+0x360>
	  if (tryb == -1)
 8001a64:	e62a      	b.n	80016bc <main+0x12c>
 8001a66:	bf00      	nop
 8001a68:	20002364 	.word	0x20002364
 8001a6c:	20000118 	.word	0x20000118
 8001a70:	200063f4 	.word	0x200063f4
 8001a74:	20004364 	.word	0x20004364
 8001a78:	20000034 	.word	0x20000034
 8001a7c:	0800ecb4 	.word	0x0800ecb4
 8001a80:	20000110 	.word	0x20000110
 8001a84:	20000364 	.word	0x20000364
 8001a88:	ffff8000 	.word	0xffff8000
 8001a8c:	20004368 	.word	0x20004368
 8001a90:	20000114 	.word	0x20000114

08001a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0b8      	sub	sp, #224	; 0xe0
 8001a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a9e:	2244      	movs	r2, #68	; 0x44
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f00c fcb0 	bl	800e408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2288      	movs	r2, #136	; 0x88
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00c fca2 	bl	800e408 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ac4:	f006 f860 	bl	8007b88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ac8:	4b46      	ldr	r3, [pc, #280]	; (8001be4 <SystemClock_Config+0x150>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ace:	4a45      	ldr	r2, [pc, #276]	; (8001be4 <SystemClock_Config+0x150>)
 8001ad0:	f023 0318 	bic.w	r3, r3, #24
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001ad8:	231c      	movs	r3, #28
 8001ada:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001af6:	2360      	movs	r3, #96	; 0x60
 8001af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afc:	2302      	movs	r3, #2
 8001afe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001b0e:	2328      	movs	r3, #40	; 0x28
 8001b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b14:	2307      	movs	r3, #7
 8001b16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f007 f850 	bl	8008bd0 <HAL_RCC_OscConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b36:	f000 f879 	bl	8001c2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b40:	2303      	movs	r3, #3
 8001b42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b58:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f007 fc1c 	bl	800939c <HAL_RCC_ClockConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001b6a:	f000 f85f 	bl	8001c2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <SystemClock_Config+0x154>)
 8001b70:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001b90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b94:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b96:	2301      	movs	r3, #1
 8001b98:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 8001b9e:	2330      	movs	r3, #48	; 0x30
 8001ba0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8001ba2:	2311      	movs	r3, #17
 8001ba4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8001bae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bb2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f007 fdf4 	bl	80097a4 <HAL_RCCEx_PeriphCLKConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8001bc2:	f000 f833 	bl	8001c2c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bca:	f005 fffb 	bl	8007bc4 <HAL_PWREx_ControlVoltageScaling>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <SystemClock_Config+0x144>
  {
    Error_Handler();
 8001bd4:	f000 f82a 	bl	8001c2c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001bd8:	f008 fd50 	bl	800a67c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001bdc:	bf00      	nop
 8001bde:	37e0      	adds	r7, #224	; 0xe0
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000
 8001be8:	000328c2 	.word	0x000328c2

08001bec <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm1_filter0)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

	DmaRecHalfBuffCplt = 1;
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000110 	.word	0x20000110

08001c0c <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm1_filter0)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  DmaRecBuffCplt = 1;
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000114 	.word	0x20000114

08001c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	 while (1)
	  {
		  BSP_LED_Toggle(LED4);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f000 fa23 	bl	800207c <BSP_LED_Toggle>
		  HAL_Delay(1000);
 8001c36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c3a:	f001 ffc5 	bl	8003bc8 <HAL_Delay>
		  BSP_LED_Toggle(LED4);
 8001c3e:	e7f7      	b.n	8001c30 <Error_Handler+0x4>

08001c40 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_QUADSPI_Init+0x44>)
 8001c46:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <MX_QUADSPI_Init+0x48>)
 8001c48:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_QUADSPI_Init+0x44>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_QUADSPI_Init+0x44>)
 8001c52:	2204      	movs	r2, #4
 8001c54:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <MX_QUADSPI_Init+0x44>)
 8001c58:	2210      	movs	r2, #16
 8001c5a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_QUADSPI_Init+0x44>)
 8001c5e:	2218      	movs	r2, #24
 8001c60:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <MX_QUADSPI_Init+0x44>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_QUADSPI_Init+0x44>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_QUADSPI_Init+0x44>)
 8001c70:	f006 f82e 	bl	8007cd0 <HAL_QSPI_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001c7a:	f7ff ffd7 	bl	8001c2c <Error_Handler>
  }

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20006368 	.word	0x20006368
 8001c88:	a0001000 	.word	0xa0001000

08001c8c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <HAL_QSPI_MspInit+0x8c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d130      	bne.n	8001d10 <HAL_QSPI_MspInit+0x84>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_QSPI_MspInit+0x90>)
 8001cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb2:	4a1a      	ldr	r2, [pc, #104]	; (8001d1c <HAL_QSPI_MspInit+0x90>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb8:	6513      	str	r3, [r2, #80]	; 0x50
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_QSPI_MspInit+0x90>)
 8001cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_QSPI_MspInit+0x90>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <HAL_QSPI_MspInit+0x90>)
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_QSPI_MspInit+0x90>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8001cde:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001ce2:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001cf0:	230a      	movs	r3, #10
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4809      	ldr	r0, [pc, #36]	; (8001d20 <HAL_QSPI_MspInit+0x94>)
 8001cfc:	f003 f856 	bl	8004dac <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2100      	movs	r1, #0
 8001d04:	2047      	movs	r0, #71	; 0x47
 8001d06:	f002 f87e 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001d0a:	2047      	movs	r0, #71	; 0x47
 8001d0c:	f002 f897 	bl	8003e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */
  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001d10:	bf00      	nop
 8001d12:	3728      	adds	r7, #40	; 0x28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	a0001000 	.word	0xa0001000
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	48001000 	.word	0x48001000

08001d24 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_QSPI_MspDeInit+0x38>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d10d      	bne.n	8001d52 <HAL_QSPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_QSPI_MspDeInit+0x3c>)
 8001d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_QSPI_MspDeInit+0x3c>)
 8001d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d40:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8001d42:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001d46:	4807      	ldr	r0, [pc, #28]	; (8001d64 <HAL_QSPI_MspDeInit+0x40>)
 8001d48:	f003 f9d8 	bl	80050fc <HAL_GPIO_DeInit>
                          |QSPI_D2_Pin|QSPI_D3_Pin);

    /* QUADSPI interrupt Deinit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001d4c:	2047      	movs	r0, #71	; 0x47
 8001d4e:	f002 f884 	bl	8003e5a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	a0001000 	.word	0xa0001000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48001000 	.word	0x48001000

08001d68 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001d6e:	4a2b      	ldr	r2, [pc, #172]	; (8001e1c <MX_SAI1_Init+0xb4>)
 8001d70:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001d72:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001d78:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8001d7e:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001d84:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001d8a:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001d90:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d9c:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001da4:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8001daa:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001dac:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001db0:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 32;
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001dcc:	2220      	movs	r2, #32
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 16;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001dd2:	2210      	movs	r2, #16
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001dd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ddc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001de6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001dea:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 2;
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000003;
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001e00:	2203      	movs	r2, #3
 8001e02:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <MX_SAI1_Init+0xb0>)
 8001e06:	f008 ff03 	bl	800ac10 <HAL_SAI_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_SAI1_Init+0xac>
  {
    Error_Handler();
 8001e10:	f7ff ff0c 	bl	8001c2c <Error_Handler>
  }

}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200063f4 	.word	0x200063f4
 8001e1c:	40015404 	.word	0x40015404

08001e20 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a32      	ldr	r2, [pc, #200]	; (8001ef8 <HAL_SAI_MspInit+0xd8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d15e      	bne.n	8001ef0 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001e32:	4b32      	ldr	r3, [pc, #200]	; (8001efc <HAL_SAI_MspInit+0xdc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d113      	bne.n	8001e62 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001e3a:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_SAI_MspInit+0xe0>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3e:	4a30      	ldr	r2, [pc, #192]	; (8001f00 <HAL_SAI_MspInit+0xe0>)
 8001e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e44:	6613      	str	r3, [r2, #96]	; 0x60
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_SAI_MspInit+0xe0>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	204a      	movs	r0, #74	; 0x4a
 8001e58:	f001 ffd5 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001e5c:	204a      	movs	r0, #74	; 0x4a
 8001e5e:	f001 ffee 	bl	8003e3e <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <HAL_SAI_MspInit+0xdc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3301      	adds	r3, #1
 8001e68:	4a24      	ldr	r2, [pc, #144]	; (8001efc <HAL_SAI_MspInit+0xdc>)
 8001e6a:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8001e6c:	2374      	movs	r3, #116	; 0x74
 8001e6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001e7c:	230d      	movs	r3, #13
 8001e7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	4619      	mov	r1, r3
 8001e86:	481f      	ldr	r0, [pc, #124]	; (8001f04 <HAL_SAI_MspInit+0xe4>)
 8001e88:	f002 ff90 	bl	8004dac <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 8001e8c:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <HAL_SAI_MspInit+0xe8>)
 8001e8e:	4a1f      	ldr	r2, [pc, #124]	; (8001f0c <HAL_SAI_MspInit+0xec>)
 8001e90:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_SAI_MspInit+0xe8>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <HAL_SAI_MspInit+0xe8>)
 8001e9a:	2210      	movs	r2, #16
 8001e9c:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <HAL_SAI_MspInit+0xe8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001ea4:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_SAI_MspInit+0xe8>)
 8001ea6:	2280      	movs	r2, #128	; 0x80
 8001ea8:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_SAI_MspInit+0xe8>)
 8001eac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb0:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_SAI_MspInit+0xe8>)
 8001eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb8:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <HAL_SAI_MspInit+0xe8>)
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_SAI_MspInit+0xe8>)
 8001ec2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001ec8:	480f      	ldr	r0, [pc, #60]	; (8001f08 <HAL_SAI_MspInit+0xe8>)
 8001eca:	f002 fcf9 	bl	80048c0 <HAL_DMA_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8001ed4:	f7ff feaa 	bl	8001c2c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <HAL_SAI_MspInit+0xe8>)
 8001edc:	671a      	str	r2, [r3, #112]	; 0x70
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_SAI_MspInit+0xe8>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_SAI_MspInit+0xe8>)
 8001ee8:	66da      	str	r2, [r3, #108]	; 0x6c
 8001eea:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <HAL_SAI_MspInit+0xe8>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6293      	str	r3, [r2, #40]	; 0x28
    }
}
 8001ef0:	bf00      	nop
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40015404 	.word	0x40015404
 8001efc:	20000130 	.word	0x20000130
 8001f00:	40021000 	.word	0x40021000
 8001f04:	48001000 	.word	0x48001000
 8001f08:	200063ac 	.word	0x200063ac
 8001f0c:	40020408 	.word	0x40020408

08001f10 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f16:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <MX_SPI2_Init+0x78>)
 8001f18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f2e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f42:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f5e:	2207      	movs	r2, #7
 8001f60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_SPI2_Init+0x74>)
 8001f70:	f009 fbf9 	bl	800b766 <HAL_SPI_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001f7a:	f7ff fe57 	bl	8001c2c <Error_Handler>
  }

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20006478 	.word	0x20006478
 8001f88:	40003800 	.word	0x40003800

08001f8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a17      	ldr	r2, [pc, #92]	; (8002008 <HAL_SPI_MspInit+0x7c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d127      	bne.n	8001ffe <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fae:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_SPI_MspInit+0x80>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	4a16      	ldr	r2, [pc, #88]	; (800200c <HAL_SPI_MspInit+0x80>)
 8001fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_SPI_MspInit+0x80>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_SPI_MspInit+0x80>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	4a10      	ldr	r2, [pc, #64]	; (800200c <HAL_SPI_MspInit+0x80>)
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_SPI_MspInit+0x80>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001fde:	231a      	movs	r3, #26
 8001fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fee:	2305      	movs	r3, #5
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4805      	ldr	r0, [pc, #20]	; (8002010 <HAL_SPI_MspInit+0x84>)
 8001ffa:	f002 fed7 	bl	8004dac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ffe:	bf00      	nop
 8002000:	3728      	adds	r7, #40	; 0x28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40003800 	.word	0x40003800
 800200c:	40021000 	.word	0x40021000
 8002010:	48000c00 	.word	0x48000c00

08002014 <BSP_LED_On>:
  *     @arg LED4
  * @retval None
  */
#endif
void BSP_LED_On(Led_TypeDef Led)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	4a07      	ldr	r2, [pc, #28]	; (8002040 <BSP_LED_On+0x2c>)
 8002022:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <BSP_LED_On+0x30>)
 800202a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800202e:	2201      	movs	r2, #1
 8002030:	4619      	mov	r1, r3
 8002032:	f003 f96f 	bl	8005314 <HAL_GPIO_WritePin>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000038 	.word	0x20000038
 8002044:	0800ecc8 	.word	0x0800ecc8

08002048 <BSP_LED_Off>:
  *     @arg LED4
  * @retval None
  */
#endif
void BSP_LED_Off(Led_TypeDef Led)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <BSP_LED_Off+0x2c>)
 8002056:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	4a06      	ldr	r2, [pc, #24]	; (8002078 <BSP_LED_Off+0x30>)
 800205e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002062:	2200      	movs	r2, #0
 8002064:	4619      	mov	r1, r3
 8002066:	f003 f955 	bl	8005314 <HAL_GPIO_WritePin>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000038 	.word	0x20000038
 8002078:	0800ecc8 	.word	0x0800ecc8

0800207c <BSP_LED_Toggle>:
  *     @arg LED4
  * @retval None
  */
#endif
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <BSP_LED_Toggle+0x28>)
 800208a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <BSP_LED_Toggle+0x2c>)
 8002092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002096:	4619      	mov	r1, r3
 8002098:	f003 f954 	bl	8005344 <HAL_GPIO_TogglePin>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000038 	.word	0x20000038
 80020a8:	0800ecc8 	.word	0x0800ecc8

080020ac <BSP_JOY_GetState>:
*            @arg  JOY_LEFT
*            @arg  JOY_RIGHT
*            @arg  JOY_UP
*/
JOYState_TypeDef BSP_JOY_GetState(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
  JOYState_TypeDef joykey;

  for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	71fb      	strb	r3, [r7, #7]
 80020b6:	e012      	b.n	80020de <BSP_JOY_GetState+0x32>
  {
    if (HAL_GPIO_ReadPin(JOY_PORT[joykey], JOY_PIN[joykey]) == GPIO_PIN_SET)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <BSP_JOY_GetState+0x44>)
 80020bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <BSP_JOY_GetState+0x48>)
 80020c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f003 f90b 	bl	80052e4 <HAL_GPIO_ReadPin>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <BSP_JOY_GetState+0x2c>
    {
      /* Return Code Joystick key pressed */
      return joykey;
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	e006      	b.n	80020e6 <BSP_JOY_GetState+0x3a>
  for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	3301      	adds	r3, #1
 80020dc:	71fb      	strb	r3, [r7, #7]
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d9e9      	bls.n	80020b8 <BSP_JOY_GetState+0xc>
    }
  }

  /* No Joystick key pressed */
  return JOY_NONE;
 80020e4:	2305      	movs	r3, #5
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000040 	.word	0x20000040
 80020f4:	0800eccc 	.word	0x0800eccc

080020f8 <I2C1_Init>:
/**
  * @brief Discovery I2C1 Bus initialization
  * @retval None
  */
static void I2C1_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2c1Handle) == HAL_I2C_STATE_RESET)
 80020fc:	4812      	ldr	r0, [pc, #72]	; (8002148 <I2C1_Init+0x50>)
 80020fe:	f005 f8b5 	bl	800726c <HAL_I2C_GetState>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d11d      	bne.n	8002144 <I2C1_Init+0x4c>
  {
    I2c1Handle.Instance              = DISCOVERY_I2C1;
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <I2C1_Init+0x50>)
 800210a:	4a10      	ldr	r2, [pc, #64]	; (800214c <I2C1_Init+0x54>)
 800210c:	601a      	str	r2, [r3, #0]
    I2c1Handle.Init.Timing           = DISCOVERY_I2C1_TIMING;
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <I2C1_Init+0x50>)
 8002110:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <I2C1_Init+0x58>)
 8002112:	605a      	str	r2, [r3, #4]
    I2c1Handle.Init.OwnAddress1      = 0;
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <I2C1_Init+0x50>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
    I2c1Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <I2C1_Init+0x50>)
 800211c:	2201      	movs	r2, #1
 800211e:	60da      	str	r2, [r3, #12]
    I2c1Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <I2C1_Init+0x50>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
    I2c1Handle.Init.OwnAddress2      = 0;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <I2C1_Init+0x50>)
 8002128:	2200      	movs	r2, #0
 800212a:	615a      	str	r2, [r3, #20]
    I2c1Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <I2C1_Init+0x50>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
    I2c1Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <I2C1_Init+0x50>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit(&I2c1Handle);
 8002138:	4803      	ldr	r0, [pc, #12]	; (8002148 <I2C1_Init+0x50>)
 800213a:	f000 f80b 	bl	8002154 <I2C1_MspInit>
    HAL_I2C_Init(&I2c1Handle);
 800213e:	4802      	ldr	r0, [pc, #8]	; (8002148 <I2C1_Init+0x50>)
 8002140:	f004 fda7 	bl	8006c92 <HAL_I2C_Init>
  }
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000134 	.word	0x20000134
 800214c:	40005400 	.word	0x40005400
 8002150:	90112626 	.word	0x90112626

08002154 <I2C1_MspInit>:
  * @brief Discovery I2C1 MSP Initialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b0ae      	sub	sp, #184	; 0xb8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  /* IOSV bit MUST be set to access GPIO port G[2:15] */
  __HAL_RCC_PWR_CLK_ENABLE();
 800215c:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <I2C1_MspInit+0xf4>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	4a39      	ldr	r2, [pc, #228]	; (8002248 <I2C1_MspInit+0xf4>)
 8002162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002166:	6593      	str	r3, [r2, #88]	; 0x58
 8002168:	4b37      	ldr	r3, [pc, #220]	; (8002248 <I2C1_MspInit+0xf4>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8002174:	f005 fd8c 	bl	8007c90 <HAL_PWREx_EnableVddIO2>

  if (hi2c->Instance == DISCOVERY_I2C1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a33      	ldr	r2, [pc, #204]	; (800224c <I2C1_MspInit+0xf8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d15e      	bne.n	8002240 <I2C1_MspInit+0xec>
  {
    /*##-1- Configure the Discovery I2C clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002182:	2340      	movs	r3, #64	; 0x40
 8002184:	61fb      	str	r3, [r7, #28]
    RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8002186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800218a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	4618      	mov	r0, r3
 8002192:	f007 fb07 	bl	80097a4 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8002196:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <I2C1_MspInit+0xf4>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	4a2b      	ldr	r2, [pc, #172]	; (8002248 <I2C1_MspInit+0xf4>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a2:	4b29      	ldr	r3, [pc, #164]	; (8002248 <I2C1_MspInit+0xf4>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 80021ae:	4b26      	ldr	r3, [pc, #152]	; (8002248 <I2C1_MspInit+0xf4>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	4a25      	ldr	r2, [pc, #148]	; (8002248 <I2C1_MspInit+0xf4>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ba:	4b23      	ldr	r3, [pc, #140]	; (8002248 <I2C1_MspInit+0xf4>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN;
 80021c6:	23c0      	movs	r3, #192	; 0xc0
 80021c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 80021cc:	2312      	movs	r3, #18
 80021ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = GPIO_PULLUP;
 80021d2:	2301      	movs	r3, #1
 80021d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = GPIO_SPEED_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C1_SCL_SDA_AF;
 80021de:	2304      	movs	r3, #4
 80021e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C1_SCL_GPIO_PORT, &GPIO_InitStructure);
 80021e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021e8:	4619      	mov	r1, r3
 80021ea:	4819      	ldr	r0, [pc, #100]	; (8002250 <I2C1_MspInit+0xfc>)
 80021ec:	f002 fdde 	bl	8004dac <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C1 peripheral #######################################*/
    /* Enable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_ENABLE();
 80021f0:	4b15      	ldr	r3, [pc, #84]	; (8002248 <I2C1_MspInit+0xf4>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <I2C1_MspInit+0xf4>)
 80021f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021fa:	6593      	str	r3, [r2, #88]	; 0x58
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <I2C1_MspInit+0xf4>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <I2C1_MspInit+0xf4>)
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <I2C1_MspInit+0xf4>)
 800220e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002212:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <I2C1_MspInit+0xf4>)
 8002216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002218:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <I2C1_MspInit+0xf4>)
 800221a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800221e:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_EV_IRQn, 0x00, 0);
 8002220:	2200      	movs	r2, #0
 8002222:	2100      	movs	r1, #0
 8002224:	201f      	movs	r0, #31
 8002226:	f001 fdee 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_EV_IRQn);
 800222a:	201f      	movs	r0, #31
 800222c:	f001 fe07 	bl	8003e3e <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_ER_IRQn, 0x00, 0);
 8002230:	2200      	movs	r2, #0
 8002232:	2100      	movs	r1, #0
 8002234:	2020      	movs	r0, #32
 8002236:	f001 fde6 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_ER_IRQn);
 800223a:	2020      	movs	r0, #32
 800223c:	f001 fdff 	bl	8003e3e <HAL_NVIC_EnableIRQ>
  }
}
 8002240:	bf00      	nop
 8002242:	37b8      	adds	r7, #184	; 0xb8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	40005400 	.word	0x40005400
 8002250:	48000400 	.word	0x48000400

08002254 <I2C1_DeInit>:
/**
  * @brief Discovery I2C1 Bus Deitialization
  * @retval None
  */
static void I2C1_DeInit(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2c1Handle) != HAL_I2C_STATE_RESET)
 8002258:	4806      	ldr	r0, [pc, #24]	; (8002274 <I2C1_DeInit+0x20>)
 800225a:	f005 f807 	bl	800726c <HAL_I2C_GetState>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <I2C1_DeInit+0x1c>
  {
    /* Deinit the I2C */
    HAL_I2C_DeInit(&I2c1Handle);
 8002264:	4803      	ldr	r0, [pc, #12]	; (8002274 <I2C1_DeInit+0x20>)
 8002266:	f004 fda3 	bl	8006db0 <HAL_I2C_DeInit>
    I2C1_MspDeInit(&I2c1Handle);
 800226a:	4802      	ldr	r0, [pc, #8]	; (8002274 <I2C1_DeInit+0x20>)
 800226c:	f000 f804 	bl	8002278 <I2C1_MspDeInit>
  }
}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000134 	.word	0x20000134

08002278 <I2C1_MspDeInit>:
  * @brief Discovery I2C1 MSP Deinitialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance == DISCOVERY_I2C1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a24      	ldr	r2, [pc, #144]	; (8002318 <I2C1_MspDeInit+0xa0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d141      	bne.n	800230e <I2C1_MspDeInit+0x96>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <I2C1_MspDeInit+0xa4>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	4a23      	ldr	r2, [pc, #140]	; (800231c <I2C1_MspDeInit+0xa4>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002296:	4b21      	ldr	r3, [pc, #132]	; (800231c <I2C1_MspDeInit+0xa4>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <I2C1_MspDeInit+0xa4>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	4a1d      	ldr	r2, [pc, #116]	; (800231c <I2C1_MspDeInit+0xa4>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <I2C1_MspDeInit+0xa4>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]

    /* Deinit Rx/Tx pins */
    HAL_GPIO_DeInit(DISCOVERY_I2C1_SCL_GPIO_PORT, (DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN));
 80022ba:	21c0      	movs	r1, #192	; 0xc0
 80022bc:	4818      	ldr	r0, [pc, #96]	; (8002320 <I2C1_MspDeInit+0xa8>)
 80022be:	f002 ff1d 	bl	80050fc <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C1 peripheral ############################*/
    /* Force & Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 80022c2:	4b16      	ldr	r3, [pc, #88]	; (800231c <I2C1_MspDeInit+0xa4>)
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	4a15      	ldr	r2, [pc, #84]	; (800231c <I2C1_MspDeInit+0xa4>)
 80022c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022cc:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 80022ce:	4b13      	ldr	r3, [pc, #76]	; (800231c <I2C1_MspDeInit+0xa4>)
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	4a12      	ldr	r2, [pc, #72]	; (800231c <I2C1_MspDeInit+0xa4>)
 80022d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_DISABLE();
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <I2C1_MspDeInit+0xa4>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	4a0f      	ldr	r2, [pc, #60]	; (800231c <I2C1_MspDeInit+0xa4>)
 80022e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022e4:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C1 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_EV_IRQn);
 80022e6:	201f      	movs	r0, #31
 80022e8:	f001 fdb7 	bl	8003e5a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_ER_IRQn);
 80022ec:	2020      	movs	r0, #32
 80022ee:	f001 fdb4 	bl	8003e5a <HAL_NVIC_DisableIRQ>

    __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <I2C1_MspDeInit+0xa4>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	4a09      	ldr	r2, [pc, #36]	; (800231c <I2C1_MspDeInit+0xa4>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6593      	str	r3, [r2, #88]	; 0x58
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <I2C1_MspDeInit+0xa4>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_DisableVddIO2();
 800230a:	f005 fcd1 	bl	8007cb0 <HAL_PWREx_DisableVddIO2>
  }
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40005400 	.word	0x40005400
 800231c:	40021000 	.word	0x40021000
 8002320:	48000400 	.word	0x48000400

08002324 <I2C1_WriteBuffer>:
  * @param  pBuffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval None
  */
static HAL_StatusTypeDef I2C1_WriteBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af04      	add	r7, sp, #16
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	4603      	mov	r3, r0
 800232e:	81fb      	strh	r3, [r7, #14]
 8002330:	460b      	mov	r3, r1
 8002332:	81bb      	strh	r3, [r7, #12]
 8002334:	4613      	mov	r3, r2
 8002336:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <I2C1_WriteBuffer+0x4c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	8978      	ldrh	r0, [r7, #10]
 8002342:	89ba      	ldrh	r2, [r7, #12]
 8002344:	89f9      	ldrh	r1, [r7, #14]
 8002346:	9302      	str	r3, [sp, #8]
 8002348:	8c3b      	ldrh	r3, [r7, #32]
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4603      	mov	r3, r0
 8002352:	4808      	ldr	r0, [pc, #32]	; (8002374 <I2C1_WriteBuffer+0x50>)
 8002354:	f004 fd5c 	bl	8006e10 <HAL_I2C_Mem_Write>
 8002358:	4603      	mov	r3, r0
 800235a:	75fb      	strb	r3, [r7, #23]

/* Check the communication status */
  if(status != HAL_OK)
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <I2C1_WriteBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8002362:	f000 f833 	bl	80023cc <I2C1_Error>
  }
  return status;
 8002366:	7dfb      	ldrb	r3, [r7, #23]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000054 	.word	0x20000054
 8002374:	20000134 	.word	0x20000134

08002378 <I2C1_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C1_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af04      	add	r7, sp, #16
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	4603      	mov	r3, r0
 8002382:	81fb      	strh	r3, [r7, #14]
 8002384:	460b      	mov	r3, r1
 8002386:	81bb      	strh	r3, [r7, #12]
 8002388:	4613      	mov	r3, r2
 800238a:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <I2C1_ReadBuffer+0x4c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	8978      	ldrh	r0, [r7, #10]
 8002396:	89ba      	ldrh	r2, [r7, #12]
 8002398:	89f9      	ldrh	r1, [r7, #14]
 800239a:	9302      	str	r3, [sp, #8]
 800239c:	8c3b      	ldrh	r3, [r7, #32]
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	4603      	mov	r3, r0
 80023a6:	4808      	ldr	r0, [pc, #32]	; (80023c8 <I2C1_ReadBuffer+0x50>)
 80023a8:	f004 fe46 	bl	8007038 <HAL_I2C_Mem_Read>
 80023ac:	4603      	mov	r3, r0
 80023ae:	75fb      	strb	r3, [r7, #23]

/* Check the communication status */
  if(status != HAL_OK)
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <I2C1_ReadBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 80023b6:	f000 f809 	bl	80023cc <I2C1_Error>
  }
  return status;
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000054 	.word	0x20000054
 80023c8:	20000134 	.word	0x20000134

080023cc <I2C1_Error>:
/**
  * @brief Discovery I2C1 error treatment function
  * @retval None
  */
static void I2C1_Error (void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c1Handle);
 80023d0:	4803      	ldr	r0, [pc, #12]	; (80023e0 <I2C1_Error+0x14>)
 80023d2:	f004 fced 	bl	8006db0 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C1_Init();
 80023d6:	f7ff fe8f 	bl	80020f8 <I2C1_Init>
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000134 	.word	0x20000134

080023e4 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <AUDIO_IO_Init+0x64>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	4a16      	ldr	r2, [pc, #88]	; (8002448 <AUDIO_IO_Init+0x64>)
 80023f0:	f043 0310 	orr.w	r3, r3, #16
 80023f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <AUDIO_IO_Init+0x64>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	683b      	ldr	r3, [r7, #0]

  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8002402:	2308      	movs	r3, #8
 8002404:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002406:	2301      	movs	r3, #1
 8002408:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800240a:	2302      	movs	r3, #2
 800240c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	4619      	mov	r1, r3
 8002416:	480d      	ldr	r0, [pc, #52]	; (800244c <AUDIO_IO_Init+0x68>)
 8002418:	f002 fcc8 	bl	8004dac <HAL_GPIO_Init>

  /* I2C bus init */
  I2C1_Init();
 800241c:	f7ff fe6c 	bl	80020f8 <I2C1_Init>

  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8002420:	2200      	movs	r2, #0
 8002422:	2108      	movs	r1, #8
 8002424:	4809      	ldr	r0, [pc, #36]	; (800244c <AUDIO_IO_Init+0x68>)
 8002426:	f002 ff75 	bl	8005314 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 800242a:	2005      	movs	r0, #5
 800242c:	f001 fbcc 	bl	8003bc8 <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8002430:	2201      	movs	r2, #1
 8002432:	2108      	movs	r1, #8
 8002434:	4805      	ldr	r0, [pc, #20]	; (800244c <AUDIO_IO_Init+0x68>)
 8002436:	f002 ff6d 	bl	8005314 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 800243a:	2005      	movs	r0, #5
 800243c:	f001 fbc4 	bl	8003bc8 <HAL_Delay>
}
 8002440:	bf00      	nop
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	48001000 	.word	0x48001000

08002450 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)                       /* TO DO */
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0

  /***********************************************************************/
  /* In case of battery-supplied powered, there is no audio codec-based
     features available. Set audio codec I/O default setting */
  /***********************************************************************/
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002456:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <AUDIO_IO_DeInit+0x78>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245a:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <AUDIO_IO_DeInit+0x78>)
 800245c:	f043 0310 	orr.w	r3, r3, #16
 8002460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002462:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <AUDIO_IO_DeInit+0x78>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP  ;
 800246e:	2301      	movs	r3, #1
 8002470:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pin       = (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 8002472:	237c      	movs	r3, #124	; 0x7c
 8002474:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8002476:	2302      	movs	r3, #2
 8002478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4812      	ldr	r0, [pc, #72]	; (80024cc <AUDIO_IO_DeInit+0x7c>)
 8002484:	f002 fc92 	bl	8004dac <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	2104      	movs	r1, #4
 800248c:	480f      	ldr	r0, [pc, #60]	; (80024cc <AUDIO_IO_DeInit+0x7c>)
 800248e:	f002 ff41 	bl	8005314 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	2108      	movs	r1, #8
 8002496:	480d      	ldr	r0, [pc, #52]	; (80024cc <AUDIO_IO_DeInit+0x7c>)
 8002498:	f002 ff3c 	bl	8005314 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	2110      	movs	r1, #16
 80024a0:	480a      	ldr	r0, [pc, #40]	; (80024cc <AUDIO_IO_DeInit+0x7c>)
 80024a2:	f002 ff37 	bl	8005314 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2120      	movs	r1, #32
 80024aa:	4808      	ldr	r0, [pc, #32]	; (80024cc <AUDIO_IO_DeInit+0x7c>)
 80024ac:	f002 ff32 	bl	8005314 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2140      	movs	r1, #64	; 0x40
 80024b4:	4805      	ldr	r0, [pc, #20]	; (80024cc <AUDIO_IO_DeInit+0x7c>)
 80024b6:	f002 ff2d 	bl	8005314 <HAL_GPIO_WritePin>

  /* I2C bus Deinit */
  I2C1_DeInit();
 80024ba:	f7ff fecb 	bl	8002254 <I2C1_DeInit>
}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	48001000 	.word	0x48001000

080024d0 <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
 80024da:	460b      	mov	r3, r1
 80024dc:	71bb      	strb	r3, [r7, #6]
 80024de:	4613      	mov	r3, r2
 80024e0:	717b      	strb	r3, [r7, #5]
  I2C1_WriteBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	b298      	uxth	r0, r3
 80024e6:	79bb      	ldrb	r3, [r7, #6]
 80024e8:	b299      	uxth	r1, r3
 80024ea:	1d7a      	adds	r2, r7, #5
 80024ec:	2301      	movs	r3, #1
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	4613      	mov	r3, r2
 80024f2:	2201      	movs	r2, #1
 80024f4:	f7ff ff16 	bl	8002324 <I2C1_WriteBuffer>
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af02      	add	r7, sp, #8
 8002506:	4603      	mov	r3, r0
 8002508:	460a      	mov	r2, r1
 800250a:	71fb      	strb	r3, [r7, #7]
 800250c:	4613      	mov	r3, r2
 800250e:	71bb      	strb	r3, [r7, #6]
  uint8_t Read_Value = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]

  I2C1_ReadBuffer((uint16_t) Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Read_Value, 1);
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	b298      	uxth	r0, r3
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	b299      	uxth	r1, r3
 800251c:	f107 020f 	add.w	r2, r7, #15
 8002520:	2301      	movs	r3, #1
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	4613      	mov	r3, r2
 8002526:	2201      	movs	r2, #1
 8002528:	f7ff ff26 	bl	8002378 <I2C1_ReadBuffer>

  return Read_Value;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 800253e:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <BSP_LCD_GLASS_Init+0x70>)
 8002540:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 8002544:	2200      	movs	r2, #0
 8002546:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 800254a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800254e:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 8002552:	220c      	movs	r2, #12
 8002554:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8002556:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 8002558:	2240      	movs	r2, #64	; 0x40
 800255a:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 800255e:	2200      	movs	r2, #0
 8002560:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 8002564:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002568:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 800256c:	2200      	movs	r2, #0
 800256e:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 8002572:	2240      	movs	r2, #64	; 0x40
 8002574:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 8002578:	2200      	movs	r2, #0
 800257a:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 800257e:	2200      	movs	r2, #0
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 8002584:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002588:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 800258c:	2200      	movs	r2, #0
 800258e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 8002590:	4804      	ldr	r0, [pc, #16]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 8002592:	f000 f8f5 	bl	8002780 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 8002596:	4803      	ldr	r0, [pc, #12]	; (80025a4 <BSP_LCD_GLASS_Init+0x6c>)
 8002598:	f005 f92a 	bl	80077f0 <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 800259c:	f000 f834 	bl	8002608 <BSP_LCD_GLASS_Clear>
}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200064ec 	.word	0x200064ec
 80025a8:	40002400 	.word	0x40002400

080025ac <BSP_LCD_GLASS_DisplayString>:
  * @brief  Write a character string in the LCD RAM buffer.
  * @param  ptr: Pointer to string to display on the LCD Glass.
  * @retval None
  */
void BSP_LCD_GLASS_DisplayString(uint8_t* ptr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  DigitPosition_Typedef position = LCD_DIGIT_POSITION_1;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]

  /* Send the string character by character on lCD */
  while ((*ptr != 0) & (position <= LCD_DIGIT_POSITION_6))
 80025b8:	e00b      	b.n	80025d2 <BSP_LCD_GLASS_DisplayString+0x26>
  {
    /* Write one character on LCD */
    WriteChar(ptr, POINT_OFF, DOUBLEPOINT_OFF, position);
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2200      	movs	r2, #0
 80025be:	2100      	movs	r1, #0
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 fa5f 	bl	8002a84 <WriteChar>

    /* Point on the next character */
    ptr++;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3301      	adds	r3, #1
 80025ca:	607b      	str	r3, [r7, #4]

    /* Increment the character counter */
    position++;
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	3301      	adds	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
  while ((*ptr != 0) & (position <= LCD_DIGIT_POSITION_6))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bf14      	ite	ne
 80025da:	2301      	movne	r3, #1
 80025dc:	2300      	moveq	r3, #0
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	bf94      	ite	ls
 80025e6:	2301      	movls	r3, #1
 80025e8:	2300      	movhi	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	4013      	ands	r3, r2
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1e2      	bne.n	80025ba <BSP_LCD_GLASS_DisplayString+0xe>
  }
  /* Update the LCD display */
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <BSP_LCD_GLASS_DisplayString+0x58>)
 80025f6:	f005 fa6c 	bl	8007ad2 <HAL_LCD_UpdateDisplayRequest>
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200064ec 	.word	0x200064ec

08002608 <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <BSP_LCD_GLASS_Clear+0x10>)
 800260e:	f005 fa0a 	bl	8007a26 <HAL_LCD_Clear>
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200064ec 	.word	0x200064ec

0800261c <BSP_LCD_GLASS_ScrollSentence>:
  * @retval None
  * @note   Required preconditions: The LCD should be cleared before to start the
  *         write operation.
  */
void BSP_LCD_GLASS_ScrollSentence(uint8_t* ptr, uint16_t nScroll, uint16_t ScrollSpeed)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
 8002628:	4613      	mov	r3, r2
 800262a:	803b      	strh	r3, [r7, #0]
  uint8_t repetition = 0, nbrchar = 0, sizestr = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	75fb      	strb	r3, [r7, #23]
 8002630:	2300      	movs	r3, #0
 8002632:	75bb      	strb	r3, [r7, #22]
 8002634:	2300      	movs	r3, #0
 8002636:	757b      	strb	r3, [r7, #21]
  uint8_t* ptr1;
  uint8_t str[6] = "";
 8002638:	2300      	movs	r3, #0
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	2300      	movs	r3, #0
 800263e:	81bb      	strh	r3, [r7, #12]

  /* Reset interrupt variable in case key was press before entering function */
  bLCDGlass_KeyPressed = 0;
 8002640:	4b4e      	ldr	r3, [pc, #312]	; (800277c <BSP_LCD_GLASS_ScrollSentence+0x160>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]

  if(ptr == 0)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8092 	beq.w	8002772 <BSP_LCD_GLASS_ScrollSentence+0x156>
  {
    return;
  }

  /* To calculate end of string */
  for(ptr1 = ptr, sizestr = 0; *ptr1 != 0; sizestr++, ptr1++);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	2300      	movs	r3, #0
 8002654:	757b      	strb	r3, [r7, #21]
 8002656:	e005      	b.n	8002664 <BSP_LCD_GLASS_ScrollSentence+0x48>
 8002658:	7d7b      	ldrb	r3, [r7, #21]
 800265a:	3301      	adds	r3, #1
 800265c:	757b      	strb	r3, [r7, #21]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	3301      	adds	r3, #1
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f5      	bne.n	8002658 <BSP_LCD_GLASS_ScrollSentence+0x3c>

  ptr1 = ptr;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	613b      	str	r3, [r7, #16]

  BSP_LCD_GLASS_DisplayString(str);
 8002670:	f107 0308 	add.w	r3, r7, #8
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff99 	bl	80025ac <BSP_LCD_GLASS_DisplayString>
  HAL_Delay(ScrollSpeed);
 800267a:	883b      	ldrh	r3, [r7, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f001 faa3 	bl	8003bc8 <HAL_Delay>

  /* To shift the string for scrolling display*/
  for (repetition = 0; repetition < nScroll; repetition++)
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]
 8002686:	e06e      	b.n	8002766 <BSP_LCD_GLASS_ScrollSentence+0x14a>
  {
    for(nbrchar = 0; nbrchar < sizestr; nbrchar++)
 8002688:	2300      	movs	r3, #0
 800268a:	75bb      	strb	r3, [r7, #22]
 800268c:	e064      	b.n	8002758 <BSP_LCD_GLASS_ScrollSentence+0x13c>
    {
      *(str) =* (ptr1+((nbrchar+1)%sizestr));
 800268e:	7dbb      	ldrb	r3, [r7, #22]
 8002690:	3301      	adds	r3, #1
 8002692:	7d7a      	ldrb	r2, [r7, #21]
 8002694:	fb93 f1f2 	sdiv	r1, r3, r2
 8002698:	fb02 f201 	mul.w	r2, r2, r1
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	461a      	mov	r2, r3
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	723b      	strb	r3, [r7, #8]
      *(str+1) =* (ptr1+((nbrchar+2)%sizestr));
 80026a8:	7dbb      	ldrb	r3, [r7, #22]
 80026aa:	3302      	adds	r3, #2
 80026ac:	7d7a      	ldrb	r2, [r7, #21]
 80026ae:	fb93 f1f2 	sdiv	r1, r3, r2
 80026b2:	fb02 f201 	mul.w	r2, r2, r1
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	461a      	mov	r2, r3
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	727b      	strb	r3, [r7, #9]
      *(str+2) =* (ptr1+((nbrchar+3)%sizestr));
 80026c2:	7dbb      	ldrb	r3, [r7, #22]
 80026c4:	3303      	adds	r3, #3
 80026c6:	7d7a      	ldrb	r2, [r7, #21]
 80026c8:	fb93 f1f2 	sdiv	r1, r3, r2
 80026cc:	fb02 f201 	mul.w	r2, r2, r1
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	461a      	mov	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	72bb      	strb	r3, [r7, #10]
      *(str+3) =* (ptr1+((nbrchar+4)%sizestr));
 80026dc:	7dbb      	ldrb	r3, [r7, #22]
 80026de:	3304      	adds	r3, #4
 80026e0:	7d7a      	ldrb	r2, [r7, #21]
 80026e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80026e6:	fb02 f201 	mul.w	r2, r2, r1
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	461a      	mov	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	72fb      	strb	r3, [r7, #11]
      *(str+4) =* (ptr1+((nbrchar+5)%sizestr));
 80026f6:	7dbb      	ldrb	r3, [r7, #22]
 80026f8:	3305      	adds	r3, #5
 80026fa:	7d7a      	ldrb	r2, [r7, #21]
 80026fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8002700:	fb02 f201 	mul.w	r2, r2, r1
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	461a      	mov	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	733b      	strb	r3, [r7, #12]
      *(str+5) =* (ptr1+((nbrchar+6)%sizestr));
 8002710:	7dbb      	ldrb	r3, [r7, #22]
 8002712:	3306      	adds	r3, #6
 8002714:	7d7a      	ldrb	r2, [r7, #21]
 8002716:	fb93 f1f2 	sdiv	r1, r3, r2
 800271a:	fb02 f201 	mul.w	r2, r2, r1
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	461a      	mov	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	737b      	strb	r3, [r7, #13]
      BSP_LCD_GLASS_Clear();
 800272a:	f7ff ff6d 	bl	8002608 <BSP_LCD_GLASS_Clear>
      BSP_LCD_GLASS_DisplayString(str);
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ff3a 	bl	80025ac <BSP_LCD_GLASS_DisplayString>

      /* user button pressed stop the scrolling sentence */
      if(bLCDGlass_KeyPressed)
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <BSP_LCD_GLASS_ScrollSentence+0x160>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <BSP_LCD_GLASS_ScrollSentence+0x12e>
      {
        bLCDGlass_KeyPressed = 0;
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <BSP_LCD_GLASS_ScrollSentence+0x160>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
        return;
 8002748:	e014      	b.n	8002774 <BSP_LCD_GLASS_ScrollSentence+0x158>
      }
       HAL_Delay(ScrollSpeed);
 800274a:	883b      	ldrh	r3, [r7, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f001 fa3b 	bl	8003bc8 <HAL_Delay>
    for(nbrchar = 0; nbrchar < sizestr; nbrchar++)
 8002752:	7dbb      	ldrb	r3, [r7, #22]
 8002754:	3301      	adds	r3, #1
 8002756:	75bb      	strb	r3, [r7, #22]
 8002758:	7dba      	ldrb	r2, [r7, #22]
 800275a:	7d7b      	ldrb	r3, [r7, #21]
 800275c:	429a      	cmp	r2, r3
 800275e:	d396      	bcc.n	800268e <BSP_LCD_GLASS_ScrollSentence+0x72>
  for (repetition = 0; repetition < nScroll; repetition++)
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	3301      	adds	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
 8002766:	7dfb      	ldrb	r3, [r7, #23]
 8002768:	b29b      	uxth	r3, r3
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	429a      	cmp	r2, r3
 800276e:	d88b      	bhi.n	8002688 <BSP_LCD_GLASS_ScrollSentence+0x6c>
 8002770:	e000      	b.n	8002774 <BSP_LCD_GLASS_ScrollSentence+0x158>
    return;
 8002772:	bf00      	nop
    }
  }
}
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000180 	.word	0x20000180

08002780 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b0c0      	sub	sp, #256	; 0x100
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002788:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8002798:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800279c:	2244      	movs	r2, #68	; 0x44
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f00b fe31 	bl	800e408 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 80027a6:	f107 0320 	add.w	r3, r7, #32
 80027aa:	2288      	movs	r2, #136	; 0x88
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f00b fe2a 	bl	800e408 <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b4:	4b51      	ldr	r3, [pc, #324]	; (80028fc <LCD_MspInit+0x17c>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	4a50      	ldr	r2, [pc, #320]	; (80028fc <LCD_MspInit+0x17c>)
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027be:	6593      	str	r3, [r2, #88]	; 0x58
 80027c0:	4b4e      	ldr	r3, [pc, #312]	; (80028fc <LCD_MspInit+0x17c>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock soucre ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 80027cc:	2304      	movs	r3, #4
 80027ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 80027d8:	2301      	movs	r3, #1
 80027da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if(HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 80027de:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80027e2:	4618      	mov	r0, r3
 80027e4:	f006 f9f4 	bl	8008bd0 <HAL_RCC_OscConfig>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d000      	beq.n	80027f0 <LCD_MspInit+0x70>
  {
    while(1);
 80027ee:	e7fe      	b.n	80027ee <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f4:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80027f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 80027fe:	f107 0320 	add.w	r3, r7, #32
 8002802:	4618      	mov	r0, r3
 8002804:	f006 ffce 	bl	80097a4 <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002808:	4b3c      	ldr	r3, [pc, #240]	; (80028fc <LCD_MspInit+0x17c>)
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	4a3b      	ldr	r2, [pc, #236]	; (80028fc <LCD_MspInit+0x17c>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002814:	4b39      	ldr	r3, [pc, #228]	; (80028fc <LCD_MspInit+0x17c>)
 8002816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <LCD_MspInit+0x17c>)
 8002822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002824:	4a35      	ldr	r2, [pc, #212]	; (80028fc <LCD_MspInit+0x17c>)
 8002826:	f043 0302 	orr.w	r3, r3, #2
 800282a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800282c:	4b33      	ldr	r3, [pc, #204]	; (80028fc <LCD_MspInit+0x17c>)
 800282e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002838:	4b30      	ldr	r3, [pc, #192]	; (80028fc <LCD_MspInit+0x17c>)
 800283a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283c:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <LCD_MspInit+0x17c>)
 800283e:	f043 0304 	orr.w	r3, r3, #4
 8002842:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002844:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <LCD_MspInit+0x17c>)
 8002846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002850:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <LCD_MspInit+0x17c>)
 8002852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002854:	4a29      	ldr	r2, [pc, #164]	; (80028fc <LCD_MspInit+0x17c>)
 8002856:	f043 0308 	orr.w	r3, r3, #8
 800285a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <LCD_MspInit+0x17c>)
 800285e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8002868:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800286c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_HIGH;
 800287c:	2303      	movs	r3, #3
 800287e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8002882:	230b      	movs	r3, #11
 8002884:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8002888:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800288c:	4619      	mov	r1, r3
 800288e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002892:	f002 fa8b 	bl	8004dac <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8002896:	f24f 2333 	movw	r3, #62003	; 0xf233
 800289a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800289e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028a2:	4619      	mov	r1, r3
 80028a4:	4816      	ldr	r0, [pc, #88]	; (8002900 <LCD_MspInit+0x180>)
 80028a6:	f002 fa81 	bl	8004dac <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 80028aa:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80028ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80028b2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028b6:	4619      	mov	r1, r3
 80028b8:	4812      	ldr	r0, [pc, #72]	; (8002904 <LCD_MspInit+0x184>)
 80028ba:	f002 fa77 	bl	8004dac <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 80028be:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80028c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80028c6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028ca:	4619      	mov	r1, r3
 80028cc:	480e      	ldr	r0, [pc, #56]	; (8002908 <LCD_MspInit+0x188>)
 80028ce:	f002 fa6d 	bl	8004dac <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 80028d2:	2002      	movs	r0, #2
 80028d4:	f001 f978 	bl	8003bc8 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <LCD_MspInit+0x17c>)
 80028da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028dc:	4a07      	ldr	r2, [pc, #28]	; (80028fc <LCD_MspInit+0x17c>)
 80028de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e2:	6593      	str	r3, [r2, #88]	; 0x58
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <LCD_MspInit+0x17c>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
}
 80028f0:	bf00      	nop
 80028f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	48000400 	.word	0x48000400
 8002904:	48000800 	.word	0x48000800
 8002908:	48000c00 	.word	0x48000c00

0800290c <Convert>:
  *         of displayed character.
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @retval None
  */
static void Convert(uint8_t* Char, Point_Typedef Point, DoublePoint_Typedef Colon)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
 8002918:	4613      	mov	r3, r2
 800291a:	70bb      	strb	r3, [r7, #2]
  uint16_t ch = 0 ;
 800291c:	2300      	movs	r3, #0
 800291e:	81fb      	strh	r3, [r7, #14]
  uint8_t loop = 0, index = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	737b      	strb	r3, [r7, #13]
 8002924:	2300      	movs	r3, #0
 8002926:	733b      	strb	r3, [r7, #12]

  switch (*Char)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b2d      	cmp	r3, #45	; 0x2d
 800292e:	d03c      	beq.n	80029aa <Convert+0x9e>
 8002930:	2b2d      	cmp	r3, #45	; 0x2d
 8002932:	dc0f      	bgt.n	8002954 <Convert+0x48>
 8002934:	2b28      	cmp	r3, #40	; 0x28
 8002936:	d026      	beq.n	8002986 <Convert+0x7a>
 8002938:	2b28      	cmp	r3, #40	; 0x28
 800293a:	dc04      	bgt.n	8002946 <Convert+0x3a>
 800293c:	2b20      	cmp	r3, #32
 800293e:	d01b      	beq.n	8002978 <Convert+0x6c>
 8002940:	2b25      	cmp	r3, #37	; 0x25
 8002942:	d03d      	beq.n	80029c0 <Convert+0xb4>
 8002944:	e04c      	b.n	80029e0 <Convert+0xd4>
 8002946:	2b2a      	cmp	r3, #42	; 0x2a
 8002948:	d019      	beq.n	800297e <Convert+0x72>
 800294a:	2b2a      	cmp	r3, #42	; 0x2a
 800294c:	db1e      	blt.n	800298c <Convert+0x80>
 800294e:	2b2b      	cmp	r3, #43	; 0x2b
 8002950:	d02f      	beq.n	80029b2 <Convert+0xa6>
 8002952:	e045      	b.n	80029e0 <Convert+0xd4>
 8002954:	2b64      	cmp	r3, #100	; 0x64
 8002956:	d01c      	beq.n	8002992 <Convert+0x86>
 8002958:	2b64      	cmp	r3, #100	; 0x64
 800295a:	dc06      	bgt.n	800296a <Convert+0x5e>
 800295c:	2b2f      	cmp	r3, #47	; 0x2f
 800295e:	d02c      	beq.n	80029ba <Convert+0xae>
 8002960:	2b2f      	cmp	r3, #47	; 0x2f
 8002962:	db3d      	blt.n	80029e0 <Convert+0xd4>
 8002964:	2b39      	cmp	r3, #57	; 0x39
 8002966:	dc3b      	bgt.n	80029e0 <Convert+0xd4>
 8002968:	e032      	b.n	80029d0 <Convert+0xc4>
 800296a:	2b6e      	cmp	r3, #110	; 0x6e
 800296c:	d019      	beq.n	80029a2 <Convert+0x96>
 800296e:	2bff      	cmp	r3, #255	; 0xff
 8002970:	d02a      	beq.n	80029c8 <Convert+0xbc>
 8002972:	2b6d      	cmp	r3, #109	; 0x6d
 8002974:	d011      	beq.n	800299a <Convert+0x8e>
 8002976:	e033      	b.n	80029e0 <Convert+0xd4>
    {
    case ' ' :
      ch = 0x00;
 8002978:	2300      	movs	r3, #0
 800297a:	81fb      	strh	r3, [r7, #14]
      break;
 800297c:	e04f      	b.n	8002a1e <Convert+0x112>

    case '*':
      ch = C_STAR;
 800297e:	f24a 03dd 	movw	r3, #41181	; 0xa0dd
 8002982:	81fb      	strh	r3, [r7, #14]
      break;
 8002984:	e04b      	b.n	8002a1e <Convert+0x112>

    case '(' :
      ch = C_OPENPARMAP;
 8002986:	2328      	movs	r3, #40	; 0x28
 8002988:	81fb      	strh	r3, [r7, #14]
      break;
 800298a:	e048      	b.n	8002a1e <Convert+0x112>

    case ')' :
      ch = C_CLOSEPARMAP;
 800298c:	2311      	movs	r3, #17
 800298e:	81fb      	strh	r3, [r7, #14]
      break;
 8002990:	e045      	b.n	8002a1e <Convert+0x112>

    case 'd' :
      ch = C_DMAP;
 8002992:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 8002996:	81fb      	strh	r3, [r7, #14]
      break;
 8002998:	e041      	b.n	8002a1e <Convert+0x112>

    case 'm' :
      ch = C_MMAP;
 800299a:	f24b 2310 	movw	r3, #45584	; 0xb210
 800299e:	81fb      	strh	r3, [r7, #14]
      break;
 80029a0:	e03d      	b.n	8002a1e <Convert+0x112>

    case 'n' :
      ch = C_NMAP;
 80029a2:	f242 2310 	movw	r3, #8720	; 0x2210
 80029a6:	81fb      	strh	r3, [r7, #14]
      break;
 80029a8:	e039      	b.n	8002a1e <Convert+0x112>
    case 'µ' :
      ch = C_UMAP;
      break;

    case '-' :
      ch = C_MINUS;
 80029aa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80029ae:	81fb      	strh	r3, [r7, #14]
      break;
 80029b0:	e035      	b.n	8002a1e <Convert+0x112>

    case '+' :
      ch = C_PLUS;
 80029b2:	f24a 0314 	movw	r3, #40980	; 0xa014
 80029b6:	81fb      	strh	r3, [r7, #14]
      break;
 80029b8:	e031      	b.n	8002a1e <Convert+0x112>

    case '/' :
      ch = C_SLATCH;
 80029ba:	23c0      	movs	r3, #192	; 0xc0
 80029bc:	81fb      	strh	r3, [r7, #14]
      break;
 80029be:	e02e      	b.n	8002a1e <Convert+0x112>

    case '°' :
      ch = C_PERCENT_1;
      break;
    case '%' :
      ch = C_PERCENT_2;
 80029c0:	f44f 4333 	mov.w	r3, #45824	; 0xb300
 80029c4:	81fb      	strh	r3, [r7, #14]
      break;
 80029c6:	e02a      	b.n	8002a1e <Convert+0x112>
    case 255 :
      ch = C_FULL;
 80029c8:	f64f 73dd 	movw	r3, #65501	; 0xffdd
 80029cc:	81fb      	strh	r3, [r7, #14]
      break ;
 80029ce:	e026      	b.n	8002a1e <Convert+0x112>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      ch = NumberMap[*Char - ASCII_CHAR_0];
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	3b30      	subs	r3, #48	; 0x30
 80029d6:	4a28      	ldr	r2, [pc, #160]	; (8002a78 <Convert+0x16c>)
 80029d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029dc:	81fb      	strh	r3, [r7, #14]
      break;
 80029de:	e01e      	b.n	8002a1e <Convert+0x112>

    default:
      /* The character Char is one letter in upper case*/
      if ( (*Char < ASCII_CHAR_LEFT_OPEN_BRACKET) && (*Char > ASCII_CHAR_AT_SYMBOL) )
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b5a      	cmp	r3, #90	; 0x5a
 80029e6:	d80a      	bhi.n	80029fe <Convert+0xf2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b40      	cmp	r3, #64	; 0x40
 80029ee:	d906      	bls.n	80029fe <Convert+0xf2>
      {
        ch = CapLetterMap[*Char - 'A'];
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	3b41      	subs	r3, #65	; 0x41
 80029f6:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <Convert+0x170>)
 80029f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029fc:	81fb      	strh	r3, [r7, #14]
      }
      /* The character Char is one letter in lower case*/
      if ( (*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && ( *Char > ASCII_CHAR_APOSTROPHE) )
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b7a      	cmp	r3, #122	; 0x7a
 8002a04:	d80a      	bhi.n	8002a1c <Convert+0x110>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b60      	cmp	r3, #96	; 0x60
 8002a0c:	d906      	bls.n	8002a1c <Convert+0x110>
      {
        ch = CapLetterMap[*Char - 'a'];
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	3b61      	subs	r3, #97	; 0x61
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <Convert+0x170>)
 8002a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a1a:	81fb      	strh	r3, [r7, #14]
      }
      break;
 8002a1c:	bf00      	nop
  }

  /* Set the digital point can be displayed if the point is on */
  if (Point == POINT_ON)
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d103      	bne.n	8002a2c <Convert+0x120>
  {
    ch |= 0x0002;
 8002a24:	89fb      	ldrh	r3, [r7, #14]
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	81fb      	strh	r3, [r7, #14]
  }

  /* Set the "COL" segment in the character that can be displayed if the colon is on */
  if (Colon == DOUBLEPOINT_ON)
 8002a2c:	78bb      	ldrb	r3, [r7, #2]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d103      	bne.n	8002a3a <Convert+0x12e>
  {
    ch |= 0x0020;
 8002a32:	89fb      	ldrh	r3, [r7, #14]
 8002a34:	f043 0320 	orr.w	r3, r3, #32
 8002a38:	81fb      	strh	r3, [r7, #14]
  }

  for (loop = 12,index=0 ;index < 4; loop -= 4,index++)
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	737b      	strb	r3, [r7, #13]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	733b      	strb	r3, [r7, #12]
 8002a42:	e010      	b.n	8002a66 <Convert+0x15a>
  {
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 8002a44:	89fa      	ldrh	r2, [r7, #14]
 8002a46:	7b7b      	ldrb	r3, [r7, #13]
 8002a48:	fa42 f303 	asr.w	r3, r2, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	7b3b      	ldrb	r3, [r7, #12]
 8002a50:	f002 020f 	and.w	r2, r2, #15
 8002a54:	490a      	ldr	r1, [pc, #40]	; (8002a80 <Convert+0x174>)
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (loop = 12,index=0 ;index < 4; loop -= 4,index++)
 8002a5a:	7b7b      	ldrb	r3, [r7, #13]
 8002a5c:	3b04      	subs	r3, #4
 8002a5e:	737b      	strb	r3, [r7, #13]
 8002a60:	7b3b      	ldrb	r3, [r7, #12]
 8002a62:	3301      	adds	r3, #1
 8002a64:	733b      	strb	r3, [r7, #12]
 8002a66:	7b3b      	ldrb	r3, [r7, #12]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d9eb      	bls.n	8002a44 <Convert+0x138>
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	0800ed0c 	.word	0x0800ed0c
 8002a7c:	0800ecd8 	.word	0x0800ecd8
 8002a80:	200064dc 	.word	0x200064dc

08002a84 <WriteChar>:
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @param  Position: position in the LCD of the character to write [1:6]
  * @retval None
  */
static void WriteChar(uint8_t* ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	4611      	mov	r1, r2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4603      	mov	r3, r0
 8002a94:	70fb      	strb	r3, [r7, #3]
 8002a96:	460b      	mov	r3, r1
 8002a98:	70bb      	strb	r3, [r7, #2]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	707b      	strb	r3, [r7, #1]
  uint32_t data =0x00;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
  /* To convert displayed character in segment in array digit */
  Convert(ch, (Point_Typedef)Point, (DoublePoint_Typedef)Colon);
 8002aa2:	78ba      	ldrb	r2, [r7, #2]
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff2f 	bl	800290c <Convert>

  switch (Position)
 8002aae:	787b      	ldrb	r3, [r7, #1]
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	f200 835b 	bhi.w	800316c <WriteChar+0x6e8>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <WriteChar+0x38>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002ad5 	.word	0x08002ad5
 8002ac0:	08002bcf 	.word	0x08002bcf
 8002ac4:	08002ce9 	.word	0x08002ce9
 8002ac8:	08002deb 	.word	0x08002deb
 8002acc:	08002f19 	.word	0x08002f19
 8002ad0:	08003063 	.word	0x08003063
  {
    /* Position 1 on LCD (Digit1)*/
    case LCD_DIGIT_POSITION_1:
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002ad4:	4b80      	ldr	r3, [pc, #512]	; (8002cd8 <WriteChar+0x254>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	f003 0210 	and.w	r2, r3, #16
 8002ade:	4b7e      	ldr	r3, [pc, #504]	; (8002cd8 <WriteChar+0x254>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	05db      	lsls	r3, r3, #23
 8002ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aea:	431a      	orrs	r2, r3
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002aec:	4b7a      	ldr	r3, [pc, #488]	; (8002cd8 <WriteChar+0x254>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	089b      	lsrs	r3, r3, #2
 8002af2:	059b      	lsls	r3, r3, #22
 8002af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af8:	431a      	orrs	r2, r3
 8002afa:	4b77      	ldr	r3, [pc, #476]	; (8002cd8 <WriteChar+0x254>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0, LCD_DIGIT1_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4a74      	ldr	r2, [pc, #464]	; (8002cdc <WriteChar+0x258>)
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4874      	ldr	r0, [pc, #464]	; (8002ce0 <WriteChar+0x25c>)
 8002b0e:	f004 ff2f 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002b12:	4b71      	ldr	r3, [pc, #452]	; (8002cd8 <WriteChar+0x254>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	f003 0210 	and.w	r2, r3, #16
 8002b1c:	4b6e      	ldr	r3, [pc, #440]	; (8002cd8 <WriteChar+0x254>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	05db      	lsls	r3, r3, #23
 8002b24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b28:	431a      	orrs	r2, r3
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002b2a:	4b6b      	ldr	r3, [pc, #428]	; (8002cd8 <WriteChar+0x254>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	089b      	lsrs	r3, r3, #2
 8002b30:	059b      	lsls	r3, r3, #22
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	431a      	orrs	r2, r3
 8002b38:	4b67      	ldr	r3, [pc, #412]	; (8002cd8 <WriteChar+0x254>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4a65      	ldr	r2, [pc, #404]	; (8002cdc <WriteChar+0x258>)
 8002b48:	2102      	movs	r1, #2
 8002b4a:	4865      	ldr	r0, [pc, #404]	; (8002ce0 <WriteChar+0x25c>)
 8002b4c:	f004 ff10 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002b50:	4b61      	ldr	r3, [pc, #388]	; (8002cd8 <WriteChar+0x254>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	f003 0210 	and.w	r2, r3, #16
 8002b5a:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <WriteChar+0x254>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	05db      	lsls	r3, r3, #23
 8002b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b66:	431a      	orrs	r2, r3
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002b68:	4b5b      	ldr	r3, [pc, #364]	; (8002cd8 <WriteChar+0x254>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	089b      	lsrs	r3, r3, #2
 8002b6e:	059b      	lsls	r3, r3, #22
 8002b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b74:	431a      	orrs	r2, r3
 8002b76:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <WriteChar+0x254>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4a55      	ldr	r2, [pc, #340]	; (8002cdc <WriteChar+0x258>)
 8002b86:	2104      	movs	r1, #4
 8002b88:	4855      	ldr	r0, [pc, #340]	; (8002ce0 <WriteChar+0x25c>)
 8002b8a:	f004 fef1 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002b8e:	4b52      	ldr	r3, [pc, #328]	; (8002cd8 <WriteChar+0x254>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	f003 0210 	and.w	r2, r3, #16
 8002b98:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <WriteChar+0x254>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	05db      	lsls	r3, r3, #23
 8002ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ba4:	431a      	orrs	r2, r3
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002ba6:	4b4c      	ldr	r3, [pc, #304]	; (8002cd8 <WriteChar+0x254>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	059b      	lsls	r3, r3, #22
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	4b48      	ldr	r3, [pc, #288]	; (8002cd8 <WriteChar+0x254>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3, LCD_DIGIT1_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4a46      	ldr	r2, [pc, #280]	; (8002cdc <WriteChar+0x258>)
 8002bc4:	2106      	movs	r1, #6
 8002bc6:	4846      	ldr	r0, [pc, #280]	; (8002ce0 <WriteChar+0x25c>)
 8002bc8:	f004 fed2 	bl	8007970 <HAL_LCD_Write>
      break;
 8002bcc:	e2cf      	b.n	800316e <WriteChar+0x6ea>

    /* Position 2 on LCD (Digit2)*/
    case LCD_DIGIT_POSITION_2:
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002bce:	4b42      	ldr	r3, [pc, #264]	; (8002cd8 <WriteChar+0x254>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	019b      	lsls	r3, r3, #6
 8002bd4:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002bd8:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <WriteChar+0x254>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	085b      	lsrs	r3, r3, #1
 8002bde:	035b      	lsls	r3, r3, #13
 8002be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be4:	431a      	orrs	r2, r3
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002be6:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <WriteChar+0x254>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	031b      	lsls	r3, r3, #12
 8002bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <WriteChar+0x254>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	08db      	lsrs	r3, r3, #3
 8002bfa:	015b      	lsls	r3, r3, #5
 8002bfc:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0, LCD_DIGIT2_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4a37      	ldr	r2, [pc, #220]	; (8002ce4 <WriteChar+0x260>)
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4835      	ldr	r0, [pc, #212]	; (8002ce0 <WriteChar+0x25c>)
 8002c0c:	f004 feb0 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002c10:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <WriteChar+0x254>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	019b      	lsls	r3, r3, #6
 8002c16:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002c1a:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <WriteChar+0x254>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	035b      	lsls	r3, r3, #13
 8002c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c26:	431a      	orrs	r2, r3
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002c28:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <WriteChar+0x254>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	089b      	lsrs	r3, r3, #2
 8002c2e:	031b      	lsls	r3, r3, #12
 8002c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c34:	431a      	orrs	r2, r3
 8002c36:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <WriteChar+0x254>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	08db      	lsrs	r3, r3, #3
 8002c3c:	015b      	lsls	r3, r3, #5
 8002c3e:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4a26      	ldr	r2, [pc, #152]	; (8002ce4 <WriteChar+0x260>)
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	4824      	ldr	r0, [pc, #144]	; (8002ce0 <WriteChar+0x25c>)
 8002c4e:	f004 fe8f 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <WriteChar+0x254>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	019b      	lsls	r3, r3, #6
 8002c58:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002c5c:	4b1e      	ldr	r3, [pc, #120]	; (8002cd8 <WriteChar+0x254>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	085b      	lsrs	r3, r3, #1
 8002c62:	035b      	lsls	r3, r3, #13
 8002c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c68:	431a      	orrs	r2, r3
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <WriteChar+0x254>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	031b      	lsls	r3, r3, #12
 8002c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c76:	431a      	orrs	r2, r3
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <WriteChar+0x254>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	08db      	lsrs	r3, r3, #3
 8002c7e:	015b      	lsls	r3, r3, #5
 8002c80:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <WriteChar+0x260>)
 8002c8c:	2104      	movs	r1, #4
 8002c8e:	4814      	ldr	r0, [pc, #80]	; (8002ce0 <WriteChar+0x25c>)
 8002c90:	f004 fe6e 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <WriteChar+0x254>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	019b      	lsls	r3, r3, #6
 8002c9a:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <WriteChar+0x254>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	035b      	lsls	r3, r3, #13
 8002ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002caa:	431a      	orrs	r2, r3
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <WriteChar+0x254>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	031b      	lsls	r3, r3, #12
 8002cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <WriteChar+0x254>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	08db      	lsrs	r3, r3, #3
 8002cc0:	015b      	lsls	r3, r3, #5
 8002cc2:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <WriteChar+0x260>)
 8002cce:	2106      	movs	r1, #6
 8002cd0:	4803      	ldr	r0, [pc, #12]	; (8002ce0 <WriteChar+0x25c>)
 8002cd2:	f004 fe4d 	bl	8007970 <HAL_LCD_Write>
      break;
 8002cd6:	e24a      	b.n	800316e <WriteChar+0x6ea>
 8002cd8:	200064dc 	.word	0x200064dc
 8002cdc:	ff3fffe7 	.word	0xff3fffe7
 8002ce0:	200064ec 	.word	0x200064ec
 8002ce4:	ffffcf9f 	.word	0xffffcf9f

    /* Position 3 on LCD (Digit3)*/
    case LCD_DIGIT_POSITION_3:
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002ce8:	4b88      	ldr	r3, [pc, #544]	; (8002f0c <WriteChar+0x488>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	03db      	lsls	r3, r3, #15
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	4b86      	ldr	r3, [pc, #536]	; (8002f0c <WriteChar+0x488>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	085b      	lsrs	r3, r3, #1
 8002cf6:	075b      	lsls	r3, r3, #29
 8002cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cfc:	431a      	orrs	r2, r3
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002cfe:	4b83      	ldr	r3, [pc, #524]	; (8002f0c <WriteChar+0x488>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	071b      	lsls	r3, r3, #28
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	4b7f      	ldr	r3, [pc, #508]	; (8002f0c <WriteChar+0x488>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	08db      	lsrs	r3, r3, #3
 8002d12:	039b      	lsls	r3, r3, #14
 8002d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM0, LCD_DIGIT3_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4a7c      	ldr	r2, [pc, #496]	; (8002f10 <WriteChar+0x48c>)
 8002d20:	2100      	movs	r1, #0
 8002d22:	487c      	ldr	r0, [pc, #496]	; (8002f14 <WriteChar+0x490>)
 8002d24:	f004 fe24 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002d28:	4b78      	ldr	r3, [pc, #480]	; (8002f0c <WriteChar+0x488>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	03db      	lsls	r3, r3, #15
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <WriteChar+0x488>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	075b      	lsls	r3, r3, #29
 8002d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d3c:	431a      	orrs	r2, r3
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <WriteChar+0x488>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	071b      	lsls	r3, r3, #28
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	4b6f      	ldr	r3, [pc, #444]	; (8002f0c <WriteChar+0x488>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	08db      	lsrs	r3, r3, #3
 8002d52:	039b      	lsls	r3, r3, #14
 8002d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4a6c      	ldr	r2, [pc, #432]	; (8002f10 <WriteChar+0x48c>)
 8002d60:	2102      	movs	r1, #2
 8002d62:	486c      	ldr	r0, [pc, #432]	; (8002f14 <WriteChar+0x490>)
 8002d64:	f004 fe04 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002d68:	4b68      	ldr	r3, [pc, #416]	; (8002f0c <WriteChar+0x488>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	03db      	lsls	r3, r3, #15
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	4b66      	ldr	r3, [pc, #408]	; (8002f0c <WriteChar+0x488>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	075b      	lsls	r3, r3, #29
 8002d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d7c:	431a      	orrs	r2, r3
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002d7e:	4b63      	ldr	r3, [pc, #396]	; (8002f0c <WriteChar+0x488>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	089b      	lsrs	r3, r3, #2
 8002d84:	071b      	lsls	r3, r3, #28
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	4b5f      	ldr	r3, [pc, #380]	; (8002f0c <WriteChar+0x488>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	08db      	lsrs	r3, r3, #3
 8002d92:	039b      	lsls	r3, r3, #14
 8002d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4a5c      	ldr	r2, [pc, #368]	; (8002f10 <WriteChar+0x48c>)
 8002da0:	2104      	movs	r1, #4
 8002da2:	485c      	ldr	r0, [pc, #368]	; (8002f14 <WriteChar+0x490>)
 8002da4:	f004 fde4 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002da8:	4b58      	ldr	r3, [pc, #352]	; (8002f0c <WriteChar+0x488>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	03db      	lsls	r3, r3, #15
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	4b56      	ldr	r3, [pc, #344]	; (8002f0c <WriteChar+0x488>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	075b      	lsls	r3, r3, #29
 8002db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dbc:	431a      	orrs	r2, r3
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002dbe:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <WriteChar+0x488>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	071b      	lsls	r3, r3, #28
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	4b4f      	ldr	r3, [pc, #316]	; (8002f0c <WriteChar+0x488>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	08db      	lsrs	r3, r3, #3
 8002dd2:	039b      	lsls	r3, r3, #14
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM3, LCD_DIGIT3_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4a4c      	ldr	r2, [pc, #304]	; (8002f10 <WriteChar+0x48c>)
 8002de0:	2106      	movs	r1, #6
 8002de2:	484c      	ldr	r0, [pc, #304]	; (8002f14 <WriteChar+0x490>)
 8002de4:	f004 fdc4 	bl	8007970 <HAL_LCD_Write>
      break;
 8002de8:	e1c1      	b.n	800316e <WriteChar+0x6ea>

    /* Position 4 on LCD (Digit4)*/
    case LCD_DIGIT_POSITION_4:
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002dea:	4b48      	ldr	r3, [pc, #288]	; (8002f0c <WriteChar+0x488>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	07da      	lsls	r2, r3, #31
 8002df0:	4b46      	ldr	r3, [pc, #280]	; (8002f0c <WriteChar+0x488>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	08db      	lsrs	r3, r3, #3
 8002df6:	079b      	lsls	r3, r3, #30
 8002df8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0, LCD_DIGIT4_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002e06:	2100      	movs	r1, #0
 8002e08:	4842      	ldr	r0, [pc, #264]	; (8002f14 <WriteChar+0x490>)
 8002e0a:	f004 fdb1 	bl	8007970 <HAL_LCD_Write>

      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002e0e:	4b3f      	ldr	r3, [pc, #252]	; (8002f0c <WriteChar+0x488>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0202 	and.w	r2, r3, #2
 8002e16:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <WriteChar+0x488>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0_1, LCD_DIGIT4_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f06f 0203 	mvn.w	r2, #3
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4839      	ldr	r0, [pc, #228]	; (8002f14 <WriteChar+0x490>)
 8002e2e:	f004 fd9f 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002e32:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <WriteChar+0x488>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	07da      	lsls	r2, r3, #31
 8002e38:	4b34      	ldr	r3, [pc, #208]	; (8002f0c <WriteChar+0x488>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	08db      	lsrs	r3, r3, #3
 8002e3e:	079b      	lsls	r3, r3, #30
 8002e40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002e4e:	2102      	movs	r1, #2
 8002e50:	4830      	ldr	r0, [pc, #192]	; (8002f14 <WriteChar+0x490>)
 8002e52:	f004 fd8d 	bl	8007970 <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002e56:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <WriteChar+0x488>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 0202 	and.w	r2, r3, #2
 8002e5e:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <WriteChar+0x488>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f06f 0203 	mvn.w	r2, #3
 8002e72:	2103      	movs	r1, #3
 8002e74:	4827      	ldr	r0, [pc, #156]	; (8002f14 <WriteChar+0x490>)
 8002e76:	f004 fd7b 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002e7a:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <WriteChar+0x488>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	07da      	lsls	r2, r3, #31
 8002e80:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <WriteChar+0x488>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	08db      	lsrs	r3, r3, #3
 8002e86:	079b      	lsls	r3, r3, #30
 8002e88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002e96:	2104      	movs	r1, #4
 8002e98:	481e      	ldr	r0, [pc, #120]	; (8002f14 <WriteChar+0x490>)
 8002e9a:	f004 fd69 	bl	8007970 <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <WriteChar+0x488>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0202 	and.w	r2, r3, #2
 8002ea6:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <WriteChar+0x488>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f06f 0203 	mvn.w	r2, #3
 8002eba:	2105      	movs	r1, #5
 8002ebc:	4815      	ldr	r0, [pc, #84]	; (8002f14 <WriteChar+0x490>)
 8002ebe:	f004 fd57 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002ec2:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <WriteChar+0x488>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	07da      	lsls	r2, r3, #31
 8002ec8:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <WriteChar+0x488>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	08db      	lsrs	r3, r3, #3
 8002ece:	079b      	lsls	r3, r3, #30
 8002ed0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002ede:	2106      	movs	r1, #6
 8002ee0:	480c      	ldr	r0, [pc, #48]	; (8002f14 <WriteChar+0x490>)
 8002ee2:	f004 fd45 	bl	8007970 <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <WriteChar+0x488>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0202 	and.w	r2, r3, #2
 8002eee:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <WriteChar+0x488>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3_1, LCD_DIGIT4_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f06f 0203 	mvn.w	r2, #3
 8002f02:	2107      	movs	r1, #7
 8002f04:	4803      	ldr	r0, [pc, #12]	; (8002f14 <WriteChar+0x490>)
 8002f06:	f004 fd33 	bl	8007970 <HAL_LCD_Write>
      break;
 8002f0a:	e130      	b.n	800316e <WriteChar+0x6ea>
 8002f0c:	200064dc 	.word	0x200064dc
 8002f10:	cfff3fff 	.word	0xcfff3fff
 8002f14:	200064ec 	.word	0x200064ec

    /* Position 5 on LCD (Digit5)*/
    case LCD_DIGIT_POSITION_5:
       data = (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002f18:	4b97      	ldr	r3, [pc, #604]	; (8003178 <WriteChar+0x6f4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	085b      	lsrs	r3, r3, #1
 8002f1e:	065b      	lsls	r3, r3, #25
 8002f20:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002f24:	4b94      	ldr	r3, [pc, #592]	; (8003178 <WriteChar+0x6f4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	061b      	lsls	r3, r3, #24
 8002f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0, LCD_DIGIT5_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	488f      	ldr	r0, [pc, #572]	; (800317c <WriteChar+0x6f8>)
 8002f3e:	f004 fd17 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002f42:	4b8d      	ldr	r3, [pc, #564]	; (8003178 <WriteChar+0x6f4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	f003 0208 	and.w	r2, r3, #8
 8002f4c:	4b8a      	ldr	r3, [pc, #552]	; (8003178 <WriteChar+0x6f4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	08db      	lsrs	r3, r3, #3
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0_1, LCD_DIGIT5_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f06f 020c 	mvn.w	r2, #12
 8002f62:	2101      	movs	r1, #1
 8002f64:	4885      	ldr	r0, [pc, #532]	; (800317c <WriteChar+0x6f8>)
 8002f66:	f004 fd03 	bl	8007970 <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002f6a:	4b83      	ldr	r3, [pc, #524]	; (8003178 <WriteChar+0x6f4>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	065b      	lsls	r3, r3, #25
 8002f72:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002f76:	4b80      	ldr	r3, [pc, #512]	; (8003178 <WriteChar+0x6f4>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	061b      	lsls	r3, r3, #24
 8002f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	487b      	ldr	r0, [pc, #492]	; (800317c <WriteChar+0x6f8>)
 8002f90:	f004 fcee 	bl	8007970 <HAL_LCD_Write>

       data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002f94:	4b78      	ldr	r3, [pc, #480]	; (8003178 <WriteChar+0x6f4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	f003 0208 	and.w	r2, r3, #8
 8002f9e:	4b76      	ldr	r3, [pc, #472]	; (8003178 <WriteChar+0x6f4>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	08db      	lsrs	r3, r3, #3
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1_1, LCD_DIGIT5_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f06f 020c 	mvn.w	r2, #12
 8002fb4:	2103      	movs	r1, #3
 8002fb6:	4871      	ldr	r0, [pc, #452]	; (800317c <WriteChar+0x6f8>)
 8002fb8:	f004 fcda 	bl	8007970 <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002fbc:	4b6e      	ldr	r3, [pc, #440]	; (8003178 <WriteChar+0x6f4>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	065b      	lsls	r3, r3, #25
 8002fc4:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002fc8:	4b6b      	ldr	r3, [pc, #428]	; (8003178 <WriteChar+0x6f4>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	061b      	lsls	r3, r3, #24
 8002fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002fde:	2104      	movs	r1, #4
 8002fe0:	4866      	ldr	r0, [pc, #408]	; (800317c <WriteChar+0x6f8>)
 8002fe2:	f004 fcc5 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002fe6:	4b64      	ldr	r3, [pc, #400]	; (8003178 <WriteChar+0x6f4>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	f003 0208 	and.w	r2, r3, #8
 8002ff0:	4b61      	ldr	r3, [pc, #388]	; (8003178 <WriteChar+0x6f4>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	08db      	lsrs	r3, r3, #3
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2_1, LCD_DIGIT5_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f06f 020c 	mvn.w	r2, #12
 8003006:	2105      	movs	r1, #5
 8003008:	485c      	ldr	r0, [pc, #368]	; (800317c <WriteChar+0x6f8>)
 800300a:	f004 fcb1 	bl	8007970 <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 800300e:	4b5a      	ldr	r3, [pc, #360]	; (8003178 <WriteChar+0x6f4>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	065b      	lsls	r3, r3, #25
 8003016:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800301a:	4b57      	ldr	r3, [pc, #348]	; (8003178 <WriteChar+0x6f4>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8003030:	2106      	movs	r1, #6
 8003032:	4852      	ldr	r0, [pc, #328]	; (800317c <WriteChar+0x6f8>)
 8003034:	f004 fc9c 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8003038:	4b4f      	ldr	r3, [pc, #316]	; (8003178 <WriteChar+0x6f4>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	f003 0208 	and.w	r2, r3, #8
 8003042:	4b4d      	ldr	r3, [pc, #308]	; (8003178 <WriteChar+0x6f4>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	08db      	lsrs	r3, r3, #3
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3_1, LCD_DIGIT5_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f06f 020c 	mvn.w	r2, #12
 8003058:	2107      	movs	r1, #7
 800305a:	4848      	ldr	r0, [pc, #288]	; (800317c <WriteChar+0x6f8>)
 800305c:	f004 fc88 	bl	8007970 <HAL_LCD_Write>
      break;
 8003060:	e085      	b.n	800316e <WriteChar+0x6ea>

    /* Position 6 on LCD (Digit6)*/
    case LCD_DIGIT_POSITION_6:
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8003062:	4b45      	ldr	r3, [pc, #276]	; (8003178 <WriteChar+0x6f4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	045b      	lsls	r3, r3, #17
 8003068:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 800306c:	4b42      	ldr	r3, [pc, #264]	; (8003178 <WriteChar+0x6f4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	085b      	lsrs	r3, r3, #1
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	431a      	orrs	r2, r3
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 800307a:	4b3f      	ldr	r3, [pc, #252]	; (8003178 <WriteChar+0x6f4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	025b      	lsls	r3, r3, #9
 8003082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003086:	431a      	orrs	r2, r3
 8003088:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <WriteChar+0x6f4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	08db      	lsrs	r3, r3, #3
 800308e:	069b      	lsls	r3, r3, #26
 8003090:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0, LCD_DIGIT6_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a39      	ldr	r2, [pc, #228]	; (8003180 <WriteChar+0x6fc>)
 800309c:	2100      	movs	r1, #0
 800309e:	4837      	ldr	r0, [pc, #220]	; (800317c <WriteChar+0x6f8>)
 80030a0:	f004 fc66 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80030a4:	4b34      	ldr	r3, [pc, #208]	; (8003178 <WriteChar+0x6f4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	045b      	lsls	r3, r3, #17
 80030aa:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80030ae:	4b32      	ldr	r3, [pc, #200]	; (8003178 <WriteChar+0x6f4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	431a      	orrs	r2, r3
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 80030bc:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <WriteChar+0x6f4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	089b      	lsrs	r3, r3, #2
 80030c2:	025b      	lsls	r3, r3, #9
 80030c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c8:	431a      	orrs	r2, r3
 80030ca:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <WriteChar+0x6f4>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	08db      	lsrs	r3, r3, #3
 80030d0:	069b      	lsls	r3, r3, #26
 80030d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a28      	ldr	r2, [pc, #160]	; (8003180 <WriteChar+0x6fc>)
 80030de:	2102      	movs	r1, #2
 80030e0:	4826      	ldr	r0, [pc, #152]	; (800317c <WriteChar+0x6f8>)
 80030e2:	f004 fc45 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80030e6:	4b24      	ldr	r3, [pc, #144]	; (8003178 <WriteChar+0x6f4>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	045b      	lsls	r3, r3, #17
 80030ec:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80030f0:	4b21      	ldr	r3, [pc, #132]	; (8003178 <WriteChar+0x6f4>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	085b      	lsrs	r3, r3, #1
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	431a      	orrs	r2, r3
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <WriteChar+0x6f4>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	025b      	lsls	r3, r3, #9
 8003106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800310a:	431a      	orrs	r2, r3
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <WriteChar+0x6f4>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	08db      	lsrs	r3, r3, #3
 8003112:	069b      	lsls	r3, r3, #26
 8003114:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8003118:	4313      	orrs	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a18      	ldr	r2, [pc, #96]	; (8003180 <WriteChar+0x6fc>)
 8003120:	2104      	movs	r1, #4
 8003122:	4816      	ldr	r0, [pc, #88]	; (800317c <WriteChar+0x6f8>)
 8003124:	f004 fc24 	bl	8007970 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <WriteChar+0x6f4>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	045b      	lsls	r3, r3, #17
 800312e:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <WriteChar+0x6f4>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	431a      	orrs	r2, r3
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <WriteChar+0x6f4>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	025b      	lsls	r3, r3, #9
 8003148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800314c:	431a      	orrs	r2, r3
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <WriteChar+0x6f4>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	08db      	lsrs	r3, r3, #3
 8003154:	069b      	lsls	r3, r3, #26
 8003156:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a07      	ldr	r2, [pc, #28]	; (8003180 <WriteChar+0x6fc>)
 8003162:	2106      	movs	r1, #6
 8003164:	4805      	ldr	r0, [pc, #20]	; (800317c <WriteChar+0x6f8>)
 8003166:	f004 fc03 	bl	8007970 <HAL_LCD_Write>
      break;
 800316a:	e000      	b.n	800316e <WriteChar+0x6ea>

     default:
      break;
 800316c:	bf00      	nop
  }
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	200064dc 	.word	0x200064dc
 800317c:	200064ec 	.word	0x200064ec
 8003180:	fbfdfcff 	.word	0xfbfdfcff

08003184 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 800318a:	4b27      	ldr	r3, [pc, #156]	; (8003228 <BSP_QSPI_Init+0xa4>)
 800318c:	4a27      	ldr	r2, [pc, #156]	; (800322c <BSP_QSPI_Init+0xa8>)
 800318e:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8003190:	4825      	ldr	r0, [pc, #148]	; (8003228 <BSP_QSPI_Init+0xa4>)
 8003192:	f004 fe13 	bl	8007dbc <HAL_QSPI_DeInit>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e03f      	b.n	8003220 <BSP_QSPI_Init+0x9c>
  }

  /* System level initialization */
  QSPI_MspInit();
 80031a0:	f000 f96a 	bl	8003478 <QSPI_MspInit>

  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 80031a4:	4b20      	ldr	r3, [pc, #128]	; (8003228 <BSP_QSPI_Init+0xa4>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 80031aa:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <BSP_QSPI_Init+0xa4>)
 80031ac:	2204      	movs	r2, #4
 80031ae:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80031b0:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <BSP_QSPI_Init+0xa4>)
 80031b2:	2210      	movs	r2, #16
 80031b4:	60da      	str	r2, [r3, #12]
 80031b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ba:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 80031ce:	2320      	movs	r3, #32
 80031d0:	e003      	b.n	80031da <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	fab3 f383 	clz	r3, r3
 80031d8:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 80031da:	3b01      	subs	r3, #1
 80031dc:	461a      	mov	r2, r3
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <BSP_QSPI_Init+0xa4>)
 80031e0:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <BSP_QSPI_Init+0xa4>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <BSP_QSPI_Init+0xa4>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80031ee:	480e      	ldr	r0, [pc, #56]	; (8003228 <BSP_QSPI_Init+0xa4>)
 80031f0:	f004 fd6e 	bl	8007cd0 <HAL_QSPI_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e010      	b.n	8003220 <BSP_QSPI_Init+0x9c>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 80031fe:	480a      	ldr	r0, [pc, #40]	; (8003228 <BSP_QSPI_Init+0xa4>)
 8003200:	f000 f986 	bl	8003510 <QSPI_ResetMemory>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 800320a:	2304      	movs	r3, #4
 800320c:	e008      	b.n	8003220 <BSP_QSPI_Init+0x9c>
  }

  /* Configuration of the dummy cucles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 800320e:	4806      	ldr	r0, [pc, #24]	; (8003228 <BSP_QSPI_Init+0xa4>)
 8003210:	f000 f9c2 	bl	8003598 <QSPI_DummyCyclesCfg>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <BSP_QSPI_Init+0x9a>
  {
    return QSPI_NOT_SUPPORTED;
 800321a:	2304      	movs	r3, #4
 800321c:	e000      	b.n	8003220 <BSP_QSPI_Init+0x9c>
  }

  return QSPI_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20006528 	.word	0x20006528
 800322c:	a0001000 	.word	0xa0001000

08003230 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b092      	sub	sp, #72	; 0x48
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800323c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8003242:	23eb      	movs	r3, #235	; 0xeb
 8003244:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003246:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 800324c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003250:	61fb      	str	r3, [r7, #28]
  sCommand.Address           = ReadAddr;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003256:	2300      	movs	r3, #0
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 800325a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003260:	230a      	movs	r3, #10
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = Size;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800326c:	2300      	movs	r3, #0
 800326e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003270:	2300      	movs	r3, #0
 8003272:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003274:	f107 0310 	add.w	r3, r7, #16
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4619      	mov	r1, r3
 800327e:	480c      	ldr	r0, [pc, #48]	; (80032b0 <BSP_QSPI_Read+0x80>)
 8003280:	f004 ff80 	bl	8008184 <HAL_QSPI_Command>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e00b      	b.n	80032a6 <BSP_QSPI_Read+0x76>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	68f9      	ldr	r1, [r7, #12]
 8003294:	4806      	ldr	r0, [pc, #24]	; (80032b0 <BSP_QSPI_Read+0x80>)
 8003296:	f005 f86a 	bl	800836e <HAL_QSPI_Receive>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <BSP_QSPI_Read+0x74>
  {
    return QSPI_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <BSP_QSPI_Read+0x76>
  }

  return QSPI_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3748      	adds	r7, #72	; 0x48
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20006528 	.word	0x20006528

080032b4 <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b096      	sub	sp, #88	; 0x58
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80032c8:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80032ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d901      	bls.n	80032d6 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4413      	add	r3, r2
 80032e0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80032e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 80032e8:	2312      	movs	r3, #18
 80032ea:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 80032ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80032f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032f6:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80032fc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003300:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800330a:	2300      	movs	r3, #0
 800330c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800330e:	2300      	movs	r3, #0
 8003310:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8003312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003314:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8003316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800331a:	4824      	ldr	r0, [pc, #144]	; (80033ac <BSP_QSPI_Write+0xf8>)
 800331c:	f000 f9ba 	bl	8003694 <QSPI_WriteEnable>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e03b      	b.n	80033a2 <BSP_QSPI_Write+0xee>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800332a:	f107 0314 	add.w	r3, r7, #20
 800332e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003332:	4619      	mov	r1, r3
 8003334:	481d      	ldr	r0, [pc, #116]	; (80033ac <BSP_QSPI_Write+0xf8>)
 8003336:	f004 ff25 	bl	8008184 <HAL_QSPI_Command>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e02e      	b.n	80033a2 <BSP_QSPI_Write+0xee>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	68f9      	ldr	r1, [r7, #12]
 800334a:	4818      	ldr	r0, [pc, #96]	; (80033ac <BSP_QSPI_Write+0xf8>)
 800334c:	f004 ff78 	bl	8008240 <HAL_QSPI_Transmit>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e023      	b.n	80033a2 <BSP_QSPI_Write+0xee>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800335a:	f241 3188 	movw	r1, #5000	; 0x1388
 800335e:	4813      	ldr	r0, [pc, #76]	; (80033ac <BSP_QSPI_Write+0xf8>)
 8003360:	f000 f9e4 	bl	800372c <QSPI_AutoPollingMemReady>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e019      	b.n	80033a2 <BSP_QSPI_Write+0xee>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800336e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003372:	4413      	add	r3, r2
 8003374:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800337a:	4413      	add	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 800337e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003380:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003384:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003386:	429a      	cmp	r2, r3
 8003388:	d203      	bcs.n	8003392 <BSP_QSPI_Write+0xde>
 800338a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800338c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	e001      	b.n	8003396 <BSP_QSPI_Write+0xe2>
 8003392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003396:	657b      	str	r3, [r7, #84]	; 0x54
  }
  while (current_addr < end_addr);
 8003398:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800339a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339c:	429a      	cmp	r2, r3
 800339e:	d3b8      	bcc.n	8003312 <BSP_QSPI_Write+0x5e>

  return QSPI_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3758      	adds	r7, #88	; 0x58
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20006528 	.word	0x20006528

080033b0 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory.
  * @param  BlockAddress: Block address to erase
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b090      	sub	sp, #64	; 0x40
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80033b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033bc:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = SUBSECTOR_ERASE_CMD;
 80033be:	2320      	movs	r3, #32
 80033c0:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 80033c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80033c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033cc:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80033de:	2300      	movs	r3, #0
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80033e2:	2300      	movs	r3, #0
 80033e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80033e6:	2300      	movs	r3, #0
 80033e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80033ea:	4812      	ldr	r0, [pc, #72]	; (8003434 <BSP_QSPI_Erase_Block+0x84>)
 80033ec:	f000 f952 	bl	8003694 <QSPI_WriteEnable>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e017      	b.n	800342a <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033fa:	f107 0308 	add.w	r3, r7, #8
 80033fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003402:	4619      	mov	r1, r3
 8003404:	480b      	ldr	r0, [pc, #44]	; (8003434 <BSP_QSPI_Erase_Block+0x84>)
 8003406:	f004 febd 	bl	8008184 <HAL_QSPI_Command>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e00a      	b.n	800342a <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Configure automatic polling mode to wait for end of erase */
  if (QSPI_AutoPollingMemReady(&QSPIHandle, N25Q128A_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8003414:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003418:	4806      	ldr	r0, [pc, #24]	; (8003434 <BSP_QSPI_Erase_Block+0x84>)
 800341a:	f000 f987 	bl	800372c <QSPI_AutoPollingMemReady>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3740      	adds	r7, #64	; 0x40
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20006528 	.word	0x20006528

08003438 <BSP_QSPI_GetInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo: pointer on the configuration structure
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetInfo(QSPI_Info *pInfo)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize          = N25Q128A_FLASH_SIZE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003446:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = N25Q128A_SUBSECTOR_SIZE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800344e:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber = (N25Q128A_FLASH_SIZE / N25Q128A_SUBSECTOR_SIZE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003456:	609a      	str	r2, [r3, #8]
  pInfo->ProgPageSize       = N25Q128A_PAGE_SIZE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800345e:	60da      	str	r2, [r3, #12]
  pInfo->ProgPagesNumber    = (N25Q128A_FLASH_SIZE / N25Q128A_PAGE_SIZE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003466:	611a      	str	r2, [r3, #16]

  return QSPI_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
static void QSPI_MspInit(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <QSPI_MspInit+0x90>)
 8003480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003482:	4a21      	ldr	r2, [pc, #132]	; (8003508 <QSPI_MspInit+0x90>)
 8003484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003488:	6513      	str	r3, [r2, #80]	; 0x50
 800348a:	4b1f      	ldr	r3, [pc, #124]	; (8003508 <QSPI_MspInit+0x90>)
 800348c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 8003496:	4b1c      	ldr	r3, [pc, #112]	; (8003508 <QSPI_MspInit+0x90>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	4a1b      	ldr	r2, [pc, #108]	; (8003508 <QSPI_MspInit+0x90>)
 800349c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a0:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 80034a2:	4b19      	ldr	r3, [pc, #100]	; (8003508 <QSPI_MspInit+0x90>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4a18      	ldr	r2, [pc, #96]	; (8003508 <QSPI_MspInit+0x90>)
 80034a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <QSPI_MspInit+0x90>)
 80034b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b2:	4a15      	ldr	r2, [pc, #84]	; (8003508 <QSPI_MspInit+0x90>)
 80034b4:	f043 0310 	orr.w	r3, r3, #16
 80034b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <QSPI_MspInit+0x90>)
 80034bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]

  /* QSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_11;
 80034c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80034d0:	2301      	movs	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d4:	2303      	movs	r3, #3
 80034d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80034d8:	230a      	movs	r3, #10
 80034da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	4619      	mov	r1, r3
 80034e2:	480a      	ldr	r0, [pc, #40]	; (800350c <QSPI_MspInit+0x94>)
 80034e4:	f001 fc62 	bl	8004dac <HAL_GPIO_Init>

  /* QSPI CLK, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 80034e8:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 80034ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	4619      	mov	r1, r3
 80034f8:	4804      	ldr	r0, [pc, #16]	; (800350c <QSPI_MspInit+0x94>)
 80034fa:	f001 fc57 	bl	8004dac <HAL_GPIO_Init>
}
 80034fe:	bf00      	nop
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	48001000 	.word	0x48001000

08003510 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b090      	sub	sp, #64	; 0x40
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800351c:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 800351e:	2366      	movs	r3, #102	; 0x66
 8003520:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003522:	2300      	movs	r3, #0
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003526:	2300      	movs	r3, #0
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800352a:	2300      	movs	r3, #0
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003532:	2300      	movs	r3, #0
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003536:	2300      	movs	r3, #0
 8003538:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800353a:	2300      	movs	r3, #0
 800353c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800353e:	f107 0308 	add.w	r3, r7, #8
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4619      	mov	r1, r3
 8003548:	4812      	ldr	r0, [pc, #72]	; (8003594 <QSPI_ResetMemory+0x84>)
 800354a:	f004 fe1b 	bl	8008184 <HAL_QSPI_Command>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e019      	b.n	800358c <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8003558:	2399      	movs	r3, #153	; 0x99
 800355a:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800355c:	f107 0308 	add.w	r3, r7, #8
 8003560:	f241 3288 	movw	r2, #5000	; 0x1388
 8003564:	4619      	mov	r1, r3
 8003566:	480b      	ldr	r0, [pc, #44]	; (8003594 <QSPI_ResetMemory+0x84>)
 8003568:	f004 fe0c 	bl	8008184 <HAL_QSPI_Command>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e00a      	b.n	800358c <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003576:	f241 3188 	movw	r1, #5000	; 0x1388
 800357a:	4806      	ldr	r0, [pc, #24]	; (8003594 <QSPI_ResetMemory+0x84>)
 800357c:	f000 f8d6 	bl	800372c <QSPI_AutoPollingMemReady>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3740      	adds	r7, #64	; 0x40
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20006528 	.word	0x20006528

08003598 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b094      	sub	sp, #80	; 0x50
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80035a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 80035a6:	2385      	movs	r3, #133	; 0x85
 80035a8:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80035ae:	2300      	movs	r3, #0
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80035b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035b6:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 80035bc:	2301      	movs	r3, #1
 80035be:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80035c4:	2300      	movs	r3, #0
 80035c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80035c8:	2300      	movs	r3, #0
 80035ca:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035cc:	f107 030c 	add.w	r3, r7, #12
 80035d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d4:	4619      	mov	r1, r3
 80035d6:	482e      	ldr	r0, [pc, #184]	; (8003690 <QSPI_DummyCyclesCfg+0xf8>)
 80035d8:	f004 fdd4 	bl	8008184 <HAL_QSPI_Command>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e04f      	b.n	8003686 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035e6:	f107 030b 	add.w	r3, r7, #11
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4619      	mov	r1, r3
 80035f0:	4827      	ldr	r0, [pc, #156]	; (8003690 <QSPI_DummyCyclesCfg+0xf8>)
 80035f2:	f004 febc 	bl	800836e <HAL_QSPI_Receive>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e042      	b.n	8003686 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003600:	4823      	ldr	r0, [pc, #140]	; (8003690 <QSPI_DummyCyclesCfg+0xf8>)
 8003602:	f000 f847 	bl	8003694 <QSPI_WriteEnable>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e03a      	b.n	8003686 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003610:	2381      	movs	r3, #129	; 0x81
 8003612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003614:	7afb      	ldrb	r3, [r7, #11]
 8003616:	b25b      	sxtb	r3, r3
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	b25a      	sxtb	r2, r3
 800361e:	23f0      	movs	r3, #240	; 0xf0
 8003620:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800362a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (value == 0U)
 800362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <QSPI_DummyCyclesCfg+0xa0>
    return 32U;
 8003634:	2320      	movs	r3, #32
 8003636:	e003      	b.n	8003640 <QSPI_DummyCyclesCfg+0xa8>
  return __builtin_clz(value);
 8003638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363a:	fab3 f383 	clz	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	4619      	mov	r1, r3
 8003642:	230a      	movs	r3, #10
 8003644:	408b      	lsls	r3, r1
 8003646:	b25b      	sxtb	r3, r3
 8003648:	4313      	orrs	r3, r2
 800364a:	b25b      	sxtb	r3, r3
 800364c:	b2db      	uxtb	r3, r3
 800364e:	72fb      	strb	r3, [r7, #11]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003650:	f107 030c 	add.w	r3, r7, #12
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4619      	mov	r1, r3
 800365a:	480d      	ldr	r0, [pc, #52]	; (8003690 <QSPI_DummyCyclesCfg+0xf8>)
 800365c:	f004 fd92 	bl	8008184 <HAL_QSPI_Command>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e00d      	b.n	8003686 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800366a:	f107 030b 	add.w	r3, r7, #11
 800366e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003672:	4619      	mov	r1, r3
 8003674:	4806      	ldr	r0, [pc, #24]	; (8003690 <QSPI_DummyCyclesCfg+0xf8>)
 8003676:	f004 fde3 	bl	8008240 <HAL_QSPI_Transmit>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <QSPI_DummyCyclesCfg+0xee>
  }

  return QSPI_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3750      	adds	r7, #80	; 0x50
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20006528 	.word	0x20006528

08003694 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b096      	sub	sp, #88	; 0x58
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800369c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 80036a2:	2306      	movs	r3, #6
 80036a4:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80036a6:	2300      	movs	r3, #0
 80036a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80036ba:	2300      	movs	r3, #0
 80036bc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80036be:	2300      	movs	r3, #0
 80036c0:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036c2:	f107 0320 	add.w	r3, r7, #32
 80036c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ca:	4619      	mov	r1, r3
 80036cc:	4816      	ldr	r0, [pc, #88]	; (8003728 <QSPI_WriteEnable+0x94>)
 80036ce:	f004 fd59 	bl	8008184 <HAL_QSPI_Command>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e020      	b.n	800371e <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  sConfig.Match           = N25Q128A_SR_WREN;
 80036dc:	2302      	movs	r3, #2
 80036de:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 80036e0:	2302      	movs	r3, #2
 80036e2:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80036e8:	2301      	movs	r3, #1
 80036ea:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80036ec:	2310      	movs	r3, #16
 80036ee:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80036f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036f4:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 80036f6:	2305      	movs	r3, #5
 80036f8:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 80036fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003700:	f107 0208 	add.w	r2, r7, #8
 8003704:	f107 0120 	add.w	r1, r7, #32
 8003708:	f241 3388 	movw	r3, #5000	; 0x1388
 800370c:	4806      	ldr	r0, [pc, #24]	; (8003728 <QSPI_WriteEnable+0x94>)
 800370e:	f004 fed0 	bl	80084b2 <HAL_QSPI_AutoPolling>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3758      	adds	r7, #88	; 0x58
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20006528 	.word	0x20006528

0800372c <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b096      	sub	sp, #88	; 0x58
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800373a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800373c:	2305      	movs	r3, #5
 800373e:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003740:	2300      	movs	r3, #0
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003744:	2300      	movs	r3, #0
 8003746:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8003748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800374c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003752:	2300      	movs	r3, #0
 8003754:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003756:	2300      	movs	r3, #0
 8003758:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800375a:	2300      	movs	r3, #0
 800375c:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 8003762:	2301      	movs	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 800376a:	2301      	movs	r3, #1
 800376c:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 800376e:	2310      	movs	r3, #16
 8003770:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003776:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8003778:	f107 0208 	add.w	r2, r7, #8
 800377c:	f107 0120 	add.w	r1, r7, #32
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	4806      	ldr	r0, [pc, #24]	; (800379c <QSPI_AutoPollingMemReady+0x70>)
 8003784:	f004 fe95 	bl	80084b2 <HAL_QSPI_AutoPolling>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3758      	adds	r7, #88	; 0x58
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20006528 	.word	0x20006528

080037a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a6:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <HAL_MspInit+0x44>)
 80037a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037aa:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <HAL_MspInit+0x44>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	6613      	str	r3, [r2, #96]	; 0x60
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <HAL_MspInit+0x44>)
 80037b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_MspInit+0x44>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <HAL_MspInit+0x44>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6593      	str	r3, [r2, #88]	; 0x58
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_MspInit+0x44>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000

080037e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037f6:	b480      	push	{r7}
 80037f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037fa:	e7fe      	b.n	80037fa <HardFault_Handler+0x4>

080037fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003800:	e7fe      	b.n	8003800 <MemManage_Handler+0x4>

08003802 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003802:	b480      	push	{r7}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003806:	e7fe      	b.n	8003806 <BusFault_Handler+0x4>

08003808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800380c:	e7fe      	b.n	800380c <UsageFault_Handler+0x4>

0800380e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800383c:	f000 f9a4 	bl	8003b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003840:	bf00      	nop
 8003842:	bd80      	pop	{r7, pc}

08003844 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <DMA1_Channel4_IRQHandler+0x10>)
 800384a:	f001 f9d0 	bl	8004bee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000210 	.word	0x20000210

08003858 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <DMA2_Channel1_IRQHandler+0x10>)
 800385e:	f001 f9c6 	bl	8004bee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200063ac 	.word	0x200063ac

0800386c <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <DFSDM1_FLT0_IRQHandler+0x10>)
 8003872:	f000 fdb1 	bl	80043d8 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	200001bc 	.word	0x200001bc

08003880 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <OTG_FS_IRQHandler+0x10>)
 8003886:	f002 f803 	bl	8005890 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	200069c8 	.word	0x200069c8

08003894 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <QUADSPI_IRQHandler+0x10>)
 800389a:	f004 fab3 	bl	8007e04 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20006368 	.word	0x20006368

080038a8 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <SAI1_IRQHandler+0x10>)
 80038ae:	f007 fc89 	bl	800b1c4 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	200063f4 	.word	0x200063f4

080038bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038c4:	4a14      	ldr	r2, [pc, #80]	; (8003918 <_sbrk+0x5c>)
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <_sbrk+0x60>)
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038d0:	4b13      	ldr	r3, [pc, #76]	; (8003920 <_sbrk+0x64>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d102      	bne.n	80038de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <_sbrk+0x64>)
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <_sbrk+0x68>)
 80038dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <_sbrk+0x64>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4413      	add	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d207      	bcs.n	80038fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038ec:	f00a fd52 	bl	800e394 <__errno>
 80038f0:	4602      	mov	r2, r0
 80038f2:	230c      	movs	r3, #12
 80038f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80038f6:	f04f 33ff 	mov.w	r3, #4294967295
 80038fa:	e009      	b.n	8003910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <_sbrk+0x64>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <_sbrk+0x64>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	4a05      	ldr	r2, [pc, #20]	; (8003920 <_sbrk+0x64>)
 800390c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800390e:	68fb      	ldr	r3, [r7, #12]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20018000 	.word	0x20018000
 800391c:	00000400 	.word	0x00000400
 8003920:	20000184 	.word	0x20000184
 8003924:	20006c90 	.word	0x20006c90

08003928 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800392c:	4b17      	ldr	r3, [pc, #92]	; (800398c <SystemInit+0x64>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	4a16      	ldr	r2, [pc, #88]	; (800398c <SystemInit+0x64>)
 8003934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800393c:	4b14      	ldr	r3, [pc, #80]	; (8003990 <SystemInit+0x68>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a13      	ldr	r2, [pc, #76]	; (8003990 <SystemInit+0x68>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <SystemInit+0x68>)
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <SystemInit+0x68>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a0f      	ldr	r2, [pc, #60]	; (8003990 <SystemInit+0x68>)
 8003954:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003958:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800395c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <SystemInit+0x68>)
 8003960:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003964:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <SystemInit+0x68>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <SystemInit+0x68>)
 800396c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003970:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <SystemInit+0x68>)
 8003974:	2200      	movs	r2, #0
 8003976:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <SystemInit+0x64>)
 800397a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800397e:	609a      	str	r2, [r3, #8]
#endif
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	e000ed00 	.word	0xe000ed00
 8003990:	40021000 	.word	0x40021000

08003994 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003998:	4b14      	ldr	r3, [pc, #80]	; (80039ec <MX_USART2_UART_Init+0x58>)
 800399a:	4a15      	ldr	r2, [pc, #84]	; (80039f0 <MX_USART2_UART_Init+0x5c>)
 800399c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039b2:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039ba:	220c      	movs	r2, #12
 80039bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039d6:	4805      	ldr	r0, [pc, #20]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039d8:	f007 ff68 	bl	800b8ac <HAL_UART_Init>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80039e2:	f7fe f923 	bl	8001c2c <Error_Handler>
  }

}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	2000656c 	.word	0x2000656c
 80039f0:	40004400 	.word	0x40004400

080039f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	; 0x28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a17      	ldr	r2, [pc, #92]	; (8003a70 <HAL_UART_MspInit+0x7c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d127      	bne.n	8003a66 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a16:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <HAL_UART_MspInit+0x80>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	4a16      	ldr	r2, [pc, #88]	; (8003a74 <HAL_UART_MspInit+0x80>)
 8003a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a20:	6593      	str	r3, [r2, #88]	; 0x58
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <HAL_UART_MspInit+0x80>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <HAL_UART_MspInit+0x80>)
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	4a10      	ldr	r2, [pc, #64]	; (8003a74 <HAL_UART_MspInit+0x80>)
 8003a34:	f043 0308 	orr.w	r3, r3, #8
 8003a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <HAL_UART_MspInit+0x80>)
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a46:	2360      	movs	r3, #96	; 0x60
 8003a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a52:	2303      	movs	r3, #3
 8003a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a56:	2307      	movs	r3, #7
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a5a:	f107 0314 	add.w	r3, r7, #20
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4805      	ldr	r0, [pc, #20]	; (8003a78 <HAL_UART_MspInit+0x84>)
 8003a62:	f001 f9a3 	bl	8004dac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003a66:	bf00      	nop
 8003a68:	3728      	adds	r7, #40	; 0x28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40004400 	.word	0x40004400
 8003a74:	40021000 	.word	0x40021000
 8003a78:	48000c00 	.word	0x48000c00

08003a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ab4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a80:	f7ff ff52 	bl	8003928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003a84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003a86:	e003      	b.n	8003a90 <LoopCopyDataInit>

08003a88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003a8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003a8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003a8e:	3104      	adds	r1, #4

08003a90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003a90:	480a      	ldr	r0, [pc, #40]	; (8003abc <LoopForever+0xa>)
	ldr	r3, =_edata
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003a94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003a96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003a98:	d3f6      	bcc.n	8003a88 <CopyDataInit>
	ldr	r2, =_sbss
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003a9c:	e002      	b.n	8003aa4 <LoopFillZerobss>

08003a9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003a9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003aa0:	f842 3b04 	str.w	r3, [r2], #4

08003aa4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003aa4:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <LoopForever+0x16>)
	cmp	r2, r3
 8003aa6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003aa8:	d3f9      	bcc.n	8003a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003aaa:	f00a fc79 	bl	800e3a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003aae:	f7fd fd6f 	bl	8001590 <main>

08003ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ab2:	e7fe      	b.n	8003ab2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ab4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003ab8:	0800edac 	.word	0x0800edac
	ldr	r0, =_sdata
 8003abc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003ac0:	200000e8 	.word	0x200000e8
	ldr	r2, =_sbss
 8003ac4:	200000e8 	.word	0x200000e8
	ldr	r3, = _ebss
 8003ac8:	20006c90 	.word	0x20006c90

08003acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003acc:	e7fe      	b.n	8003acc <ADC1_2_IRQHandler>
	...

08003ad0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ada:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <HAL_Init+0x3c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <HAL_Init+0x3c>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ae6:	2003      	movs	r0, #3
 8003ae8:	f000 f982 	bl	8003df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003aec:	2000      	movs	r0, #0
 8003aee:	f000 f80f 	bl	8003b10 <HAL_InitTick>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	71fb      	strb	r3, [r7, #7]
 8003afc:	e001      	b.n	8003b02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003afe:	f7ff fe4f 	bl	80037a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b02:	79fb      	ldrb	r3, [r7, #7]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40022000 	.word	0x40022000

08003b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003b1c:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <HAL_InitTick+0x6c>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d023      	beq.n	8003b6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b24:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <HAL_InitTick+0x70>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <HAL_InitTick+0x6c>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 f99b 	bl	8003e76 <HAL_SYSTICK_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10f      	bne.n	8003b66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b0f      	cmp	r3, #15
 8003b4a:	d809      	bhi.n	8003b60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295
 8003b54:	f000 f957 	bl	8003e06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <HAL_InitTick+0x74>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e007      	b.n	8003b70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
 8003b64:	e004      	b.n	8003b70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
 8003b6a:	e001      	b.n	8003b70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000060 	.word	0x20000060
 8003b80:	20000058 	.word	0x20000058
 8003b84:	2000005c 	.word	0x2000005c

08003b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_IncTick+0x20>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_IncTick+0x24>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4413      	add	r3, r2
 8003b98:	4a04      	ldr	r2, [pc, #16]	; (8003bac <HAL_IncTick+0x24>)
 8003b9a:	6013      	str	r3, [r2, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000060 	.word	0x20000060
 8003bac:	200065ec 	.word	0x200065ec

08003bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <HAL_GetTick+0x14>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	200065ec 	.word	0x200065ec

08003bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bd0:	f7ff ffee 	bl	8003bb0 <HAL_GetTick>
 8003bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d005      	beq.n	8003bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_Delay+0x40>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bee:	bf00      	nop
 8003bf0:	f7ff ffde 	bl	8003bb0 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d8f7      	bhi.n	8003bf0 <HAL_Delay+0x28>
  {
  }
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000060 	.word	0x20000060

08003c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <__NVIC_SetPriorityGrouping+0x44>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c3e:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <__NVIC_SetPriorityGrouping+0x44>)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	60d3      	str	r3, [r2, #12]
}
 8003c44:	bf00      	nop
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <__NVIC_GetPriorityGrouping+0x18>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	f003 0307 	and.w	r3, r3, #7
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	db0b      	blt.n	8003c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	f003 021f 	and.w	r2, r3, #31
 8003c88:	4907      	ldr	r1, [pc, #28]	; (8003ca8 <__NVIC_EnableIRQ+0x38>)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	2001      	movs	r0, #1
 8003c92:	fa00 f202 	lsl.w	r2, r0, r2
 8003c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000e100 	.word	0xe000e100

08003cac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	db10      	blt.n	8003ce0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	f003 021f 	and.w	r2, r3, #31
 8003cc4:	4909      	ldr	r1, [pc, #36]	; (8003cec <__NVIC_DisableIRQ+0x40>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2001      	movs	r0, #1
 8003cce:	fa00 f202 	lsl.w	r2, r0, r2
 8003cd2:	3320      	adds	r3, #32
 8003cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003cdc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000e100 	.word	0xe000e100

08003cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	6039      	str	r1, [r7, #0]
 8003cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	db0a      	blt.n	8003d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	490c      	ldr	r1, [pc, #48]	; (8003d3c <__NVIC_SetPriority+0x4c>)
 8003d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0e:	0112      	lsls	r2, r2, #4
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	440b      	add	r3, r1
 8003d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d18:	e00a      	b.n	8003d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4908      	ldr	r1, [pc, #32]	; (8003d40 <__NVIC_SetPriority+0x50>)
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	3b04      	subs	r3, #4
 8003d28:	0112      	lsls	r2, r2, #4
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	761a      	strb	r2, [r3, #24]
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	e000e100 	.word	0xe000e100
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	; 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f1c3 0307 	rsb	r3, r3, #7
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	bf28      	it	cs
 8003d62:	2304      	movcs	r3, #4
 8003d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2b06      	cmp	r3, #6
 8003d6c:	d902      	bls.n	8003d74 <NVIC_EncodePriority+0x30>
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3b03      	subs	r3, #3
 8003d72:	e000      	b.n	8003d76 <NVIC_EncodePriority+0x32>
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43da      	mvns	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	401a      	ands	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	fa01 f303 	lsl.w	r3, r1, r3
 8003d96:	43d9      	mvns	r1, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d9c:	4313      	orrs	r3, r2
         );
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3724      	adds	r7, #36	; 0x24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dbc:	d301      	bcc.n	8003dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e00f      	b.n	8003de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dc2:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <SysTick_Config+0x40>)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dca:	210f      	movs	r1, #15
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	f7ff ff8e 	bl	8003cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <SysTick_Config+0x40>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <SysTick_Config+0x40>)
 8003ddc:	2207      	movs	r2, #7
 8003dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	e000e010 	.word	0xe000e010

08003df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ff07 	bl	8003c0c <__NVIC_SetPriorityGrouping>
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	607a      	str	r2, [r7, #4]
 8003e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e18:	f7ff ff1c 	bl	8003c54 <__NVIC_GetPriorityGrouping>
 8003e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	6978      	ldr	r0, [r7, #20]
 8003e24:	f7ff ff8e 	bl	8003d44 <NVIC_EncodePriority>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff5d 	bl	8003cf0 <__NVIC_SetPriority>
}
 8003e36:	bf00      	nop
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	4603      	mov	r3, r0
 8003e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff ff0f 	bl	8003c70 <__NVIC_EnableIRQ>
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	4603      	mov	r3, r0
 8003e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ff1f 	bl	8003cac <__NVIC_DisableIRQ>
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff ff94 	bl	8003dac <SysTick_Config>
 8003e84:	4603      	mov	r3, r0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e0ac      	b.n	8003ffc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fc68 	bl	800477c <DFSDM_GetChannelFromInstance>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b55      	ldr	r3, [pc, #340]	; (8004004 <HAL_DFSDM_ChannelInit+0x174>)
 8003eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e09f      	b.n	8003ffc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7fc ff95 	bl	8000dec <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003ec2:	4b51      	ldr	r3, [pc, #324]	; (8004008 <HAL_DFSDM_ChannelInit+0x178>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	4a4f      	ldr	r2, [pc, #316]	; (8004008 <HAL_DFSDM_ChannelInit+0x178>)
 8003eca:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003ecc:	4b4e      	ldr	r3, [pc, #312]	; (8004008 <HAL_DFSDM_ChannelInit+0x178>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d125      	bne.n	8003f20 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003ed4:	4b4d      	ldr	r3, [pc, #308]	; (800400c <HAL_DFSDM_ChannelInit+0x17c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a4c      	ldr	r2, [pc, #304]	; (800400c <HAL_DFSDM_ChannelInit+0x17c>)
 8003eda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ede:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003ee0:	4b4a      	ldr	r3, [pc, #296]	; (800400c <HAL_DFSDM_ChannelInit+0x17c>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4948      	ldr	r1, [pc, #288]	; (800400c <HAL_DFSDM_ChannelInit+0x17c>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003eee:	4b47      	ldr	r3, [pc, #284]	; (800400c <HAL_DFSDM_ChannelInit+0x17c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a46      	ldr	r2, [pc, #280]	; (800400c <HAL_DFSDM_ChannelInit+0x17c>)
 8003ef4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003ef8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	791b      	ldrb	r3, [r3, #4]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d108      	bne.n	8003f14 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003f02:	4b42      	ldr	r3, [pc, #264]	; (800400c <HAL_DFSDM_ChannelInit+0x17c>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	041b      	lsls	r3, r3, #16
 8003f0e:	493f      	ldr	r1, [pc, #252]	; (800400c <HAL_DFSDM_ChannelInit+0x17c>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003f14:	4b3d      	ldr	r3, [pc, #244]	; (800400c <HAL_DFSDM_ChannelInit+0x17c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a3c      	ldr	r2, [pc, #240]	; (800400c <HAL_DFSDM_ChannelInit+0x17c>)
 8003f1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f1e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003f2e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6819      	ldr	r1, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003f3e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003f44:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 020f 	bic.w	r2, r2, #15
 8003f5c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6819      	ldr	r1, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003f84:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6899      	ldr	r1, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f002 0207 	and.w	r2, r2, #7
 8003fb0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fdc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fbc6 	bl	800477c <DFSDM_GetChannelFromInstance>
 8003ff0:	4601      	mov	r1, r0
 8003ff2:	4a04      	ldr	r2, [pc, #16]	; (8004004 <HAL_DFSDM_ChannelInit+0x174>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	2000018c 	.word	0x2000018c
 8004008:	20000188 	.word	0x20000188
 800400c:	40016000 	.word	0x40016000

08004010 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e0ca      	b.n	80041e0 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a66      	ldr	r2, [pc, #408]	; (80041e8 <HAL_DFSDM_FilterInit+0x1b0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d109      	bne.n	8004068 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004058:	2b01      	cmp	r3, #1
 800405a:	d003      	beq.n	8004064 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0bb      	b.n	80041e0 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7fc fe23 	bl	8000ccc <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004094:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	7a1b      	ldrb	r3, [r3, #8]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d108      	bne.n	80040b0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e007      	b.n	80040c0 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80040be:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	7a5b      	ldrb	r3, [r3, #9]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d108      	bne.n	80040da <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e007      	b.n	80040ea <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80040e8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 80040f8:	f023 0308 	bic.w	r3, r3, #8
 80040fc:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d108      	bne.n	8004118 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6819      	ldr	r1, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	7c1b      	ldrb	r3, [r3, #16]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d108      	bne.n	8004132 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0210 	orr.w	r2, r2, #16
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e007      	b.n	8004142 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0210 	bic.w	r2, r2, #16
 8004140:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	7c5b      	ldrb	r3, [r3, #17]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d108      	bne.n	800415c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0220 	orr.w	r2, r2, #32
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e007      	b.n	800416c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0220 	bic.w	r2, r2, #32
 800416a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800417a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800417e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6959      	ldr	r1, [r3, #20]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	3b01      	subs	r3, #1
 8004190:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004192:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800419a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	7c1a      	ldrb	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40016100 	.word	0x40016100

080041ec <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d02e      	beq.n	8004264 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800420c:	2bff      	cmp	r3, #255	; 0xff
 800420e:	d029      	beq.n	8004264 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800421e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004222:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d10d      	bne.n	8004246 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004238:	431a      	orrs	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	e00a      	b.n	800425c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6819      	ldr	r1, [r3, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
 8004262:	e001      	b.n	8004268 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8004268:	7dfb      	ldrb	r3, [r7, #23]
}
 800426a:	4618      	mov	r0, r3
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01b      	beq.n	80042c6 <HAL_DFSDM_FilterConfigInjChannel+0x50>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004294:	2bff      	cmp	r3, #255	; 0xff
 8004296:	d016      	beq.n	80042c6 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t)(Channel & DFSDM_LSB_MASK);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	b292      	uxth	r2, r2
 80042a0:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 80042a2:	6838      	ldr	r0, [r7, #0]
 80042a4:	f000 fa4b 	bl	800473e <DFSDM_GetInjChannelsNbr>
 80042a8:	4602      	mov	r2, r0
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d102      	bne.n	80042be <HAL_DFSDM_FilterConfigInjChannel+0x48>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042bc:	e000      	b.n	80042c0 <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 80042be:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6493      	str	r3, [r2, #72]	; 0x48
 80042c4:	e001      	b.n	80042ca <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75fb      	strb	r3, [r7, #23]
 80042f4:	e064      	b.n	80043c0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004304:	d002      	beq.n	800430c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	75fb      	strb	r3, [r7, #23]
 800430a:	e059      	b.n	80043c0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10e      	bne.n	8004332 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10a      	bne.n	8004332 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004322:	2b00      	cmp	r3, #0
 8004324:	d105      	bne.n	8004332 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d002      	beq.n	8004332 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	75fb      	strb	r3, [r7, #23]
 8004330:	e046      	b.n	80043c0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10b      	bne.n	8004352 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800433e:	2b00      	cmp	r3, #0
 8004340:	d107      	bne.n	8004352 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004348:	2b20      	cmp	r3, #32
 800434a:	d102      	bne.n	8004352 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	75fb      	strb	r3, [r7, #23]
 8004350:	e036      	b.n	80043c0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d004      	beq.n	8004366 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004362:	2b03      	cmp	r3, #3
 8004364:	d12a      	bne.n	80043bc <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	4a18      	ldr	r2, [pc, #96]	; (80043cc <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 800436c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8004374:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800437c:	2b20      	cmp	r3, #32
 800437e:	d101      	bne.n	8004384 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8004380:	4a14      	ldr	r2, [pc, #80]	; (80043d4 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8004382:	e000      	b.n	8004386 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8004384:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	331c      	adds	r3, #28
 8004396:	4619      	mov	r1, r3
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f000 fb48 	bl	8004a30 <HAL_DMA_Start_IT>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d006      	beq.n	80043b4 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	22ff      	movs	r2, #255	; 0xff
 80043aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80043b2:	e005      	b.n	80043c0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fa2d 	bl	8004814 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80043ba:	e001      	b.n	80043c0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	08004701 	.word	0x08004701
 80043d0:	0800471d 	.word	0x0800471d
 80043d4:	080046e5 	.word	0x080046e5

080043d8 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08c      	sub	sp, #48	; 0x30
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00f      	beq.n	800441a <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2208      	movs	r2, #8
 800440a:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f95c 	bl	80046d0 <HAL_DFSDM_FilterErrorCallback>
 8004418:	e13b      	b.n	8004692 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00f      	beq.n	8004444 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2204      	movs	r2, #4
 8004434:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f947 	bl	80046d0 <HAL_DFSDM_FilterErrorCallback>
 8004442:	e126      	b.n	8004692 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d025      	beq.n	800449a <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8004454:	2b00      	cmp	r3, #0
 8004456:	d020      	beq.n	800449a <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7fd fbd7 	bl	8001c0c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	2b00      	cmp	r3, #0
 8004464:	f040 8114 	bne.w	8004690 <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800446c:	2b00      	cmp	r3, #0
 800446e:	f040 810f 	bne.w	8004690 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0202 	bic.w	r2, r2, #2
 8004480:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8004488:	2b02      	cmp	r3, #2
 800448a:	d101      	bne.n	8004490 <HAL_DFSDM_IRQHandler+0xb8>
 800448c:	2201      	movs	r2, #1
 800448e:	e000      	b.n	8004492 <HAL_DFSDM_IRQHandler+0xba>
 8004490:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004498:	e0fa      	b.n	8004690 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d034      	beq.n	800450e <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d02f      	beq.n	800450e <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f8f8 	bl	80046a4 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b8:	1e5a      	subs	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f040 80e5 	bne.w	8004692 <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d112      	bne.n	80044f6 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0201 	bic.w	r2, r2, #1
 80044de:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d101      	bne.n	80044ee <HAL_DFSDM_IRQHandler+0x116>
 80044ea:	2201      	movs	r2, #1
 80044ec:	e000      	b.n	80044f0 <HAL_DFSDM_IRQHandler+0x118>
 80044ee:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d102      	bne.n	8004506 <HAL_DFSDM_IRQHandler+0x12e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004504:	e000      	b.n	8004508 <HAL_DFSDM_IRQHandler+0x130>
 8004506:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 800450c:	e0c1      	b.n	8004692 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	d03d      	beq.n	8004594 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800451e:	2b00      	cmp	r3, #0
 8004520:	d038      	beq.n	8004594 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_DFSDM_IRQHandler+0x162>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <HAL_DFSDM_IRQHandler+0x164>
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d109      	bne.n	8004558 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8004544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800454a:	e005      	b.n	8004558 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	3301      	adds	r3, #1
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	085b      	lsrs	r3, r3, #1
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <HAL_DFSDM_IRQHandler+0x190>
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	2b06      	cmp	r3, #6
 8004566:	d9f1      	bls.n	800454c <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d105      	bne.n	800457a <HAL_DFSDM_IRQHandler+0x1a2>
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	3308      	adds	r3, #8
 8004572:	2201      	movs	r2, #1
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	e003      	b.n	8004582 <HAL_DFSDM_IRQHandler+0x1aa>
 800457a:	2201      	movs	r2, #1
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f893 	bl	80046b8 <HAL_DFSDM_FilterAwdCallback>
  {
 8004592:	e07e      	b.n	8004692 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a40      	ldr	r2, [pc, #256]	; (800469c <HAL_DFSDM_IRQHandler+0x2c4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d141      	bne.n	8004622 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d03c      	beq.n	8004622 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d037      	beq.n	8004622 <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	0c1b      	lsrs	r3, r3, #16
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 80045c2:	e02a      	b.n	800461a <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d01f      	beq.n	800460e <HAL_DFSDM_IRQHandler+0x236>
 80045ce:	4a34      	ldr	r2, [pc, #208]	; (80046a0 <HAL_DFSDM_IRQHandler+0x2c8>)
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d019      	beq.n	800460e <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 80045da:	4a31      	ldr	r2, [pc, #196]	; (80046a0 <HAL_DFSDM_IRQHandler+0x2c8>)
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00f      	beq.n	800460e <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	f103 0210 	add.w	r2, r3, #16
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8004600:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <HAL_DFSDM_IRQHandler+0x2c8>)
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fd01 	bl	8004010 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	3301      	adds	r3, #1
 8004612:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	085b      	lsrs	r3, r3, #1
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	2b07      	cmp	r3, #7
 800461e:	d9d1      	bls.n	80045c4 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8004620:	e037      	b.n	8004692 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1d      	ldr	r2, [pc, #116]	; (800469c <HAL_DFSDM_IRQHandler+0x2c4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d132      	bne.n	8004692 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004632:	2b00      	cmp	r3, #0
 8004634:	d02d      	beq.n	8004692 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 800463c:	2b00      	cmp	r3, #0
 800463e:	d028      	beq.n	8004692 <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	0e1b      	lsrs	r3, r3, #24
 800464c:	b2db      	uxtb	r3, r3
 800464e:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004650:	e005      	b.n	800465e <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	3301      	adds	r3, #1
 8004656:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	085b      	lsrs	r3, r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <HAL_DFSDM_IRQHandler+0x296>
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	2b06      	cmp	r3, #6
 800466c:	d9f1      	bls.n	8004652 <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	f103 0218 	add.w	r2, r3, #24
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2101      	movs	r1, #1
 800467a:	fa01 f202 	lsl.w	r2, r1, r2
 800467e:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8004680:	4a07      	ldr	r2, [pc, #28]	; (80046a0 <HAL_DFSDM_IRQHandler+0x2c8>)
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fccb 	bl	8004024 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 800468e:	e000      	b.n	8004692 <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004690:	bf00      	nop
}
 8004692:	bf00      	nop
 8004694:	3730      	adds	r7, #48	; 0x30
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40016100 	.word	0x40016100
 80046a0:	2000018c 	.word	0x2000018c

080046a4 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7fd fa7a 	bl	8001bec <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f7fd fa7c 	bl	8001c0c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2203      	movs	r2, #3
 800472e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7ff ffcd 	bl	80046d0 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t)(Channels & DFSDM_LSB_MASK);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	b29b      	uxth	r3, r3
 800474e:	60bb      	str	r3, [r7, #8]
  while (tmp != 0U)
 8004750:	e00a      	b.n	8004768 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if ((tmp & 1U) != 0U)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3301      	adds	r3, #1
 8004760:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t)(tmp >> 1);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	60bb      	str	r3, [r7, #8]
  while (tmp != 0U)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f1      	bne.n	8004752 <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 800476e:	68fb      	ldr	r3, [r7, #12]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <DFSDM_GetChannelFromInstance+0x7c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d102      	bne.n	8004792 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	e02b      	b.n	80047ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <DFSDM_GetChannelFromInstance+0x80>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d102      	bne.n	80047a0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800479a:	2301      	movs	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	e024      	b.n	80047ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a17      	ldr	r2, [pc, #92]	; (8004800 <DFSDM_GetChannelFromInstance+0x84>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d102      	bne.n	80047ae <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80047a8:	2302      	movs	r3, #2
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	e01d      	b.n	80047ea <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a14      	ldr	r2, [pc, #80]	; (8004804 <DFSDM_GetChannelFromInstance+0x88>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d102      	bne.n	80047bc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80047b6:	2304      	movs	r3, #4
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e016      	b.n	80047ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a12      	ldr	r2, [pc, #72]	; (8004808 <DFSDM_GetChannelFromInstance+0x8c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d102      	bne.n	80047ca <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80047c4:	2305      	movs	r3, #5
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	e00f      	b.n	80047ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a0f      	ldr	r2, [pc, #60]	; (800480c <DFSDM_GetChannelFromInstance+0x90>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d102      	bne.n	80047d8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80047d2:	2306      	movs	r3, #6
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	e008      	b.n	80047ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a0d      	ldr	r2, [pc, #52]	; (8004810 <DFSDM_GetChannelFromInstance+0x94>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d102      	bne.n	80047e6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80047e0:	2307      	movs	r3, #7
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e001      	b.n	80047ea <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80047e6:	2303      	movs	r3, #3
 80047e8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80047ea:	68fb      	ldr	r3, [r7, #12]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	40016000 	.word	0x40016000
 80047fc:	40016020 	.word	0x40016020
 8004800:	40016040 	.word	0x40016040
 8004804:	40016080 	.word	0x40016080
 8004808:	400160a0 	.word	0x400160a0
 800480c:	400160c0 	.word	0x400160c0
 8004810:	400160e0 	.word	0x400160e0

08004814 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	2b00      	cmp	r3, #0
 8004822:	d108      	bne.n	8004836 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	e033      	b.n	800489e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0201 	bic.w	r2, r2, #1
 8004844:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004854:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800486c:	2b03      	cmp	r3, #3
 800486e:	d116      	bne.n	800489e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	2b00      	cmp	r3, #0
 8004876:	d107      	bne.n	8004888 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0202 	orr.w	r2, r2, #2
 8004886:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800488e:	2b01      	cmp	r3, #1
 8004890:	d102      	bne.n	8004898 <DFSDM_RegConvStart+0x84>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004896:	e000      	b.n	800489a <DFSDM_RegConvStart+0x86>
 8004898:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <DFSDM_RegConvStart+0x98>
 80048a8:	2202      	movs	r2, #2
 80048aa:	e000      	b.n	80048ae <DFSDM_RegConvStart+0x9a>
 80048ac:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e098      	b.n	8004a04 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	4b4d      	ldr	r3, [pc, #308]	; (8004a10 <HAL_DMA_Init+0x150>)
 80048da:	429a      	cmp	r2, r3
 80048dc:	d80f      	bhi.n	80048fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	4b4b      	ldr	r3, [pc, #300]	; (8004a14 <HAL_DMA_Init+0x154>)
 80048e6:	4413      	add	r3, r2
 80048e8:	4a4b      	ldr	r2, [pc, #300]	; (8004a18 <HAL_DMA_Init+0x158>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	091b      	lsrs	r3, r3, #4
 80048f0:	009a      	lsls	r2, r3, #2
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a48      	ldr	r2, [pc, #288]	; (8004a1c <HAL_DMA_Init+0x15c>)
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40
 80048fc:	e00e      	b.n	800491c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	4b46      	ldr	r3, [pc, #280]	; (8004a20 <HAL_DMA_Init+0x160>)
 8004906:	4413      	add	r3, r2
 8004908:	4a43      	ldr	r2, [pc, #268]	; (8004a18 <HAL_DMA_Init+0x158>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	091b      	lsrs	r3, r3, #4
 8004910:	009a      	lsls	r2, r3, #2
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a42      	ldr	r2, [pc, #264]	; (8004a24 <HAL_DMA_Init+0x164>)
 800491a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800494c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004976:	d039      	beq.n	80049ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	4a27      	ldr	r2, [pc, #156]	; (8004a1c <HAL_DMA_Init+0x15c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d11a      	bne.n	80049b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004982:	4b29      	ldr	r3, [pc, #164]	; (8004a28 <HAL_DMA_Init+0x168>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	f003 031c 	and.w	r3, r3, #28
 800498e:	210f      	movs	r1, #15
 8004990:	fa01 f303 	lsl.w	r3, r1, r3
 8004994:	43db      	mvns	r3, r3
 8004996:	4924      	ldr	r1, [pc, #144]	; (8004a28 <HAL_DMA_Init+0x168>)
 8004998:	4013      	ands	r3, r2
 800499a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800499c:	4b22      	ldr	r3, [pc, #136]	; (8004a28 <HAL_DMA_Init+0x168>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6859      	ldr	r1, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a8:	f003 031c 	and.w	r3, r3, #28
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	491d      	ldr	r1, [pc, #116]	; (8004a28 <HAL_DMA_Init+0x168>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]
 80049b6:	e019      	b.n	80049ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80049b8:	4b1c      	ldr	r3, [pc, #112]	; (8004a2c <HAL_DMA_Init+0x16c>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c0:	f003 031c 	and.w	r3, r3, #28
 80049c4:	210f      	movs	r1, #15
 80049c6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	4917      	ldr	r1, [pc, #92]	; (8004a2c <HAL_DMA_Init+0x16c>)
 80049ce:	4013      	ands	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80049d2:	4b16      	ldr	r3, [pc, #88]	; (8004a2c <HAL_DMA_Init+0x16c>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	f003 031c 	and.w	r3, r3, #28
 80049e2:	fa01 f303 	lsl.w	r3, r1, r3
 80049e6:	4911      	ldr	r1, [pc, #68]	; (8004a2c <HAL_DMA_Init+0x16c>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	40020407 	.word	0x40020407
 8004a14:	bffdfff8 	.word	0xbffdfff8
 8004a18:	cccccccd 	.word	0xcccccccd
 8004a1c:	40020000 	.word	0x40020000
 8004a20:	bffdfbf8 	.word	0xbffdfbf8
 8004a24:	40020400 	.word	0x40020400
 8004a28:	400200a8 	.word	0x400200a8
 8004a2c:	400204a8 	.word	0x400204a8

08004a30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_DMA_Start_IT+0x20>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e04b      	b.n	8004ae8 <HAL_DMA_Start_IT+0xb8>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d13a      	bne.n	8004ada <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0201 	bic.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f95f 	bl	8004d4c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 020e 	orr.w	r2, r2, #14
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	e00f      	b.n	8004ac8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0204 	bic.w	r2, r2, #4
 8004ab6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 020a 	orr.w	r2, r2, #10
 8004ac6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	e005      	b.n	8004ae6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d008      	beq.n	8004b1a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e022      	b.n	8004b60 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 020e 	bic.w	r2, r2, #14
 8004b28:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0201 	bic.w	r2, r2, #1
 8004b38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3e:	f003 021c 	and.w	r2, r3, #28
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2101      	movs	r1, #1
 8004b48:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d005      	beq.n	8004b90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2204      	movs	r2, #4
 8004b88:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	73fb      	strb	r3, [r7, #15]
 8004b8e:	e029      	b.n	8004be4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 020e 	bic.w	r2, r2, #14
 8004b9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	f003 021c 	and.w	r2, r3, #28
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	4798      	blx	r3
    }
  }
  return status;
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	f003 031c 	and.w	r3, r3, #28
 8004c0e:	2204      	movs	r2, #4
 8004c10:	409a      	lsls	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d026      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x7a>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d021      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d107      	bne.n	8004c42 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0204 	bic.w	r2, r2, #4
 8004c40:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	f003 021c 	and.w	r2, r3, #28
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	2104      	movs	r1, #4
 8004c50:	fa01 f202 	lsl.w	r2, r1, r2
 8004c54:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d071      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004c66:	e06c      	b.n	8004d42 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6c:	f003 031c 	and.w	r3, r3, #28
 8004c70:	2202      	movs	r2, #2
 8004c72:	409a      	lsls	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d02e      	beq.n	8004cda <HAL_DMA_IRQHandler+0xec>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d029      	beq.n	8004cda <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 020a 	bic.w	r2, r2, #10
 8004ca2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	f003 021c 	and.w	r2, r3, #28
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	2102      	movs	r1, #2
 8004cba:	fa01 f202 	lsl.w	r2, r1, r2
 8004cbe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d038      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004cd8:	e033      	b.n	8004d42 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cde:	f003 031c 	and.w	r3, r3, #28
 8004ce2:	2208      	movs	r2, #8
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d02a      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x156>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d025      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 020e 	bic.w	r2, r2, #14
 8004d06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0c:	f003 021c 	and.w	r2, r3, #28
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2101      	movs	r1, #1
 8004d16:	fa01 f202 	lsl.w	r2, r1, r2
 8004d1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d004      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d42:	bf00      	nop
 8004d44:	bf00      	nop
}
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5e:	f003 021c 	and.w	r2, r3, #28
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	2101      	movs	r1, #1
 8004d68:	fa01 f202 	lsl.w	r2, r1, r2
 8004d6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b10      	cmp	r3, #16
 8004d7c:	d108      	bne.n	8004d90 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d8e:	e007      	b.n	8004da0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	60da      	str	r2, [r3, #12]
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dba:	e17f      	b.n	80050bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc8:	4013      	ands	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8171 	beq.w	80050b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d00b      	beq.n	8004df4 <HAL_GPIO_Init+0x48>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d007      	beq.n	8004df4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004de8:	2b11      	cmp	r3, #17
 8004dea:	d003      	beq.n	8004df4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b12      	cmp	r3, #18
 8004df2:	d130      	bne.n	8004e56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	2203      	movs	r2, #3
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	43db      	mvns	r3, r3
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	43db      	mvns	r3, r3
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4013      	ands	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	091b      	lsrs	r3, r3, #4
 8004e40:	f003 0201 	and.w	r2, r3, #1
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d118      	bne.n	8004e94 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004e68:	2201      	movs	r2, #1
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	43db      	mvns	r3, r3
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4013      	ands	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	08db      	lsrs	r3, r3, #3
 8004e7e:	f003 0201 	and.w	r2, r3, #1
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x128>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b12      	cmp	r3, #18
 8004ed2:	d123      	bne.n	8004f1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	08da      	lsrs	r2, r3, #3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3208      	adds	r2, #8
 8004edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	220f      	movs	r2, #15
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	08da      	lsrs	r2, r3, #3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3208      	adds	r2, #8
 8004f16:	6939      	ldr	r1, [r7, #16]
 8004f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	2203      	movs	r2, #3
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4013      	ands	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 0203 	and.w	r2, r3, #3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80ac 	beq.w	80050b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5e:	4b5e      	ldr	r3, [pc, #376]	; (80050d8 <HAL_GPIO_Init+0x32c>)
 8004f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f62:	4a5d      	ldr	r2, [pc, #372]	; (80050d8 <HAL_GPIO_Init+0x32c>)
 8004f64:	f043 0301 	orr.w	r3, r3, #1
 8004f68:	6613      	str	r3, [r2, #96]	; 0x60
 8004f6a:	4b5b      	ldr	r3, [pc, #364]	; (80050d8 <HAL_GPIO_Init+0x32c>)
 8004f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	60bb      	str	r3, [r7, #8]
 8004f74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f76:	4a59      	ldr	r2, [pc, #356]	; (80050dc <HAL_GPIO_Init+0x330>)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	3302      	adds	r3, #2
 8004f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	220f      	movs	r2, #15
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43db      	mvns	r3, r3
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4013      	ands	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004fa0:	d025      	beq.n	8004fee <HAL_GPIO_Init+0x242>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a4e      	ldr	r2, [pc, #312]	; (80050e0 <HAL_GPIO_Init+0x334>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d01f      	beq.n	8004fea <HAL_GPIO_Init+0x23e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a4d      	ldr	r2, [pc, #308]	; (80050e4 <HAL_GPIO_Init+0x338>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d019      	beq.n	8004fe6 <HAL_GPIO_Init+0x23a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a4c      	ldr	r2, [pc, #304]	; (80050e8 <HAL_GPIO_Init+0x33c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <HAL_GPIO_Init+0x236>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a4b      	ldr	r2, [pc, #300]	; (80050ec <HAL_GPIO_Init+0x340>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00d      	beq.n	8004fde <HAL_GPIO_Init+0x232>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a4a      	ldr	r2, [pc, #296]	; (80050f0 <HAL_GPIO_Init+0x344>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d007      	beq.n	8004fda <HAL_GPIO_Init+0x22e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a49      	ldr	r2, [pc, #292]	; (80050f4 <HAL_GPIO_Init+0x348>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d101      	bne.n	8004fd6 <HAL_GPIO_Init+0x22a>
 8004fd2:	2306      	movs	r3, #6
 8004fd4:	e00c      	b.n	8004ff0 <HAL_GPIO_Init+0x244>
 8004fd6:	2307      	movs	r3, #7
 8004fd8:	e00a      	b.n	8004ff0 <HAL_GPIO_Init+0x244>
 8004fda:	2305      	movs	r3, #5
 8004fdc:	e008      	b.n	8004ff0 <HAL_GPIO_Init+0x244>
 8004fde:	2304      	movs	r3, #4
 8004fe0:	e006      	b.n	8004ff0 <HAL_GPIO_Init+0x244>
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e004      	b.n	8004ff0 <HAL_GPIO_Init+0x244>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e002      	b.n	8004ff0 <HAL_GPIO_Init+0x244>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <HAL_GPIO_Init+0x244>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	f002 0203 	and.w	r2, r2, #3
 8004ff6:	0092      	lsls	r2, r2, #2
 8004ff8:	4093      	lsls	r3, r2
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005000:	4936      	ldr	r1, [pc, #216]	; (80050dc <HAL_GPIO_Init+0x330>)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	089b      	lsrs	r3, r3, #2
 8005006:	3302      	adds	r3, #2
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800500e:	4b3a      	ldr	r3, [pc, #232]	; (80050f8 <HAL_GPIO_Init+0x34c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	43db      	mvns	r3, r3
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4013      	ands	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005032:	4a31      	ldr	r2, [pc, #196]	; (80050f8 <HAL_GPIO_Init+0x34c>)
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005038:	4b2f      	ldr	r3, [pc, #188]	; (80050f8 <HAL_GPIO_Init+0x34c>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	43db      	mvns	r3, r3
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4013      	ands	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800505c:	4a26      	ldr	r2, [pc, #152]	; (80050f8 <HAL_GPIO_Init+0x34c>)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005062:	4b25      	ldr	r3, [pc, #148]	; (80050f8 <HAL_GPIO_Init+0x34c>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	43db      	mvns	r3, r3
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4013      	ands	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005086:	4a1c      	ldr	r2, [pc, #112]	; (80050f8 <HAL_GPIO_Init+0x34c>)
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800508c:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <HAL_GPIO_Init+0x34c>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	43db      	mvns	r3, r3
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4013      	ands	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050b0:	4a11      	ldr	r2, [pc, #68]	; (80050f8 <HAL_GPIO_Init+0x34c>)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	3301      	adds	r3, #1
 80050ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	fa22 f303 	lsr.w	r3, r2, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f47f ae78 	bne.w	8004dbc <HAL_GPIO_Init+0x10>
  }
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	40021000 	.word	0x40021000
 80050dc:	40010000 	.word	0x40010000
 80050e0:	48000400 	.word	0x48000400
 80050e4:	48000800 	.word	0x48000800
 80050e8:	48000c00 	.word	0x48000c00
 80050ec:	48001000 	.word	0x48001000
 80050f0:	48001400 	.word	0x48001400
 80050f4:	48001800 	.word	0x48001800
 80050f8:	40010400 	.word	0x40010400

080050fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800510a:	e0cd      	b.n	80052a8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800510c:	2201      	movs	r2, #1
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	4013      	ands	r3, r2
 8005118:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80c0 	beq.w	80052a2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005122:	4a68      	ldr	r2, [pc, #416]	; (80052c4 <HAL_GPIO_DeInit+0x1c8>)
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	089b      	lsrs	r3, r3, #2
 8005128:	3302      	adds	r3, #2
 800512a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	220f      	movs	r2, #15
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4013      	ands	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800514a:	d025      	beq.n	8005198 <HAL_GPIO_DeInit+0x9c>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a5e      	ldr	r2, [pc, #376]	; (80052c8 <HAL_GPIO_DeInit+0x1cc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d01f      	beq.n	8005194 <HAL_GPIO_DeInit+0x98>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a5d      	ldr	r2, [pc, #372]	; (80052cc <HAL_GPIO_DeInit+0x1d0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d019      	beq.n	8005190 <HAL_GPIO_DeInit+0x94>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a5c      	ldr	r2, [pc, #368]	; (80052d0 <HAL_GPIO_DeInit+0x1d4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d013      	beq.n	800518c <HAL_GPIO_DeInit+0x90>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a5b      	ldr	r2, [pc, #364]	; (80052d4 <HAL_GPIO_DeInit+0x1d8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00d      	beq.n	8005188 <HAL_GPIO_DeInit+0x8c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a5a      	ldr	r2, [pc, #360]	; (80052d8 <HAL_GPIO_DeInit+0x1dc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d007      	beq.n	8005184 <HAL_GPIO_DeInit+0x88>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a59      	ldr	r2, [pc, #356]	; (80052dc <HAL_GPIO_DeInit+0x1e0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d101      	bne.n	8005180 <HAL_GPIO_DeInit+0x84>
 800517c:	2306      	movs	r3, #6
 800517e:	e00c      	b.n	800519a <HAL_GPIO_DeInit+0x9e>
 8005180:	2307      	movs	r3, #7
 8005182:	e00a      	b.n	800519a <HAL_GPIO_DeInit+0x9e>
 8005184:	2305      	movs	r3, #5
 8005186:	e008      	b.n	800519a <HAL_GPIO_DeInit+0x9e>
 8005188:	2304      	movs	r3, #4
 800518a:	e006      	b.n	800519a <HAL_GPIO_DeInit+0x9e>
 800518c:	2303      	movs	r3, #3
 800518e:	e004      	b.n	800519a <HAL_GPIO_DeInit+0x9e>
 8005190:	2302      	movs	r3, #2
 8005192:	e002      	b.n	800519a <HAL_GPIO_DeInit+0x9e>
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <HAL_GPIO_DeInit+0x9e>
 8005198:	2300      	movs	r3, #0
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	f002 0203 	and.w	r2, r2, #3
 80051a0:	0092      	lsls	r2, r2, #2
 80051a2:	4093      	lsls	r3, r2
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d132      	bne.n	8005210 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80051aa:	4b4d      	ldr	r3, [pc, #308]	; (80052e0 <HAL_GPIO_DeInit+0x1e4>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	43db      	mvns	r3, r3
 80051b2:	494b      	ldr	r1, [pc, #300]	; (80052e0 <HAL_GPIO_DeInit+0x1e4>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80051b8:	4b49      	ldr	r3, [pc, #292]	; (80052e0 <HAL_GPIO_DeInit+0x1e4>)
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	43db      	mvns	r3, r3
 80051c0:	4947      	ldr	r1, [pc, #284]	; (80052e0 <HAL_GPIO_DeInit+0x1e4>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80051c6:	4b46      	ldr	r3, [pc, #280]	; (80052e0 <HAL_GPIO_DeInit+0x1e4>)
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	43db      	mvns	r3, r3
 80051ce:	4944      	ldr	r1, [pc, #272]	; (80052e0 <HAL_GPIO_DeInit+0x1e4>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80051d4:	4b42      	ldr	r3, [pc, #264]	; (80052e0 <HAL_GPIO_DeInit+0x1e4>)
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	43db      	mvns	r3, r3
 80051dc:	4940      	ldr	r1, [pc, #256]	; (80052e0 <HAL_GPIO_DeInit+0x1e4>)
 80051de:	4013      	ands	r3, r2
 80051e0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	220f      	movs	r2, #15
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80051f2:	4a34      	ldr	r2, [pc, #208]	; (80052c4 <HAL_GPIO_DeInit+0x1c8>)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	089b      	lsrs	r3, r3, #2
 80051f8:	3302      	adds	r3, #2
 80051fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	43da      	mvns	r2, r3
 8005202:	4830      	ldr	r0, [pc, #192]	; (80052c4 <HAL_GPIO_DeInit+0x1c8>)
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	089b      	lsrs	r3, r3, #2
 8005208:	400a      	ands	r2, r1
 800520a:	3302      	adds	r3, #2
 800520c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	2103      	movs	r1, #3
 800521a:	fa01 f303 	lsl.w	r3, r1, r3
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	08da      	lsrs	r2, r3, #3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3208      	adds	r2, #8
 800522c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	220f      	movs	r2, #15
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	43db      	mvns	r3, r3
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	08d2      	lsrs	r2, r2, #3
 8005244:	4019      	ands	r1, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3208      	adds	r2, #8
 800524a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	2103      	movs	r1, #3
 8005258:	fa01 f303 	lsl.w	r3, r1, r3
 800525c:	43db      	mvns	r3, r3
 800525e:	401a      	ands	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	2101      	movs	r1, #1
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	fa01 f303 	lsl.w	r3, r1, r3
 8005270:	43db      	mvns	r3, r3
 8005272:	401a      	ands	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	2103      	movs	r1, #3
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	43db      	mvns	r3, r3
 8005288:	401a      	ands	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005292:	2101      	movs	r1, #1
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	fa01 f303 	lsl.w	r3, r1, r3
 800529a:	43db      	mvns	r3, r3
 800529c:	401a      	ands	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	3301      	adds	r3, #1
 80052a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f47f af2b 	bne.w	800510c <HAL_GPIO_DeInit+0x10>
  }
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40010000 	.word	0x40010000
 80052c8:	48000400 	.word	0x48000400
 80052cc:	48000800 	.word	0x48000800
 80052d0:	48000c00 	.word	0x48000c00
 80052d4:	48001000 	.word	0x48001000
 80052d8:	48001400 	.word	0x48001400
 80052dc:	48001800 	.word	0x48001800
 80052e0:	40010400 	.word	0x40010400

080052e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	887b      	ldrh	r3, [r7, #2]
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
 8005300:	e001      	b.n	8005306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005302:	2300      	movs	r3, #0
 8005304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	807b      	strh	r3, [r7, #2]
 8005320:	4613      	mov	r3, r2
 8005322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005324:	787b      	ldrb	r3, [r7, #1]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800532a:	887a      	ldrh	r2, [r7, #2]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005330:	e002      	b.n	8005338 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005332:	887a      	ldrh	r2, [r7, #2]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005356:	887a      	ldrh	r2, [r7, #2]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4013      	ands	r3, r2
 800535c:	041a      	lsls	r2, r3, #16
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	43d9      	mvns	r1, r3
 8005362:	887b      	ldrh	r3, [r7, #2]
 8005364:	400b      	ands	r3, r1
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	619a      	str	r2, [r3, #24]
}
 800536c:	bf00      	nop
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800537a:	b08f      	sub	sp, #60	; 0x3c
 800537c:	af0a      	add	r7, sp, #40	; 0x28
 800537e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e054      	b.n	8005434 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f008 fd91 	bl	800decc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2203      	movs	r2, #3
 80053ae:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f006 ff0c 	bl	800c1e6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	687e      	ldr	r6, [r7, #4]
 80053d6:	466d      	mov	r5, sp
 80053d8:	f106 0410 	add.w	r4, r6, #16
 80053dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80053ec:	1d33      	adds	r3, r6, #4
 80053ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053f0:	6838      	ldr	r0, [r7, #0]
 80053f2:	f006 fe95 	bl	800c120 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2101      	movs	r1, #1
 80053fc:	4618      	mov	r0, r3
 80053fe:	f006 ff03 	bl	800c208 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	687e      	ldr	r6, [r7, #4]
 800540a:	466d      	mov	r5, sp
 800540c:	f106 0410 	add.w	r4, r6, #16
 8005410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005418:	e894 0003 	ldmia.w	r4, {r0, r1}
 800541c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005420:	1d33      	adds	r3, r6, #4
 8005422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005424:	6838      	ldr	r0, [r7, #0]
 8005426:	f007 f811 	bl	800c44c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800543c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b089      	sub	sp, #36	; 0x24
 8005440:	af04      	add	r7, sp, #16
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	4608      	mov	r0, r1
 8005446:	4611      	mov	r1, r2
 8005448:	461a      	mov	r2, r3
 800544a:	4603      	mov	r3, r0
 800544c:	70fb      	strb	r3, [r7, #3]
 800544e:	460b      	mov	r3, r1
 8005450:	70bb      	strb	r3, [r7, #2]
 8005452:	4613      	mov	r3, r2
 8005454:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_HCD_HC_Init+0x28>
 8005460:	2302      	movs	r3, #2
 8005462:	e07f      	b.n	8005564 <HAL_HCD_HC_Init+0x128>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800546c:	78fa      	ldrb	r2, [r7, #3]
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	440b      	add	r3, r1
 800547a:	333d      	adds	r3, #61	; 0x3d
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	440b      	add	r3, r1
 800548e:	3338      	adds	r3, #56	; 0x38
 8005490:	787a      	ldrb	r2, [r7, #1]
 8005492:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	440b      	add	r3, r1
 80054a2:	3340      	adds	r3, #64	; 0x40
 80054a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80054a6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80054a8:	78fa      	ldrb	r2, [r7, #3]
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	440b      	add	r3, r1
 80054b6:	3339      	adds	r3, #57	; 0x39
 80054b8:	78fa      	ldrb	r2, [r7, #3]
 80054ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80054bc:	78fa      	ldrb	r2, [r7, #3]
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	440b      	add	r3, r1
 80054ca:	333f      	adds	r3, #63	; 0x3f
 80054cc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80054d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80054d2:	78fa      	ldrb	r2, [r7, #3]
 80054d4:	78bb      	ldrb	r3, [r7, #2]
 80054d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054da:	b2d8      	uxtb	r0, r3
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	440b      	add	r3, r1
 80054e8:	333a      	adds	r3, #58	; 0x3a
 80054ea:	4602      	mov	r2, r0
 80054ec:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80054ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	da0a      	bge.n	800550c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80054f6:	78fa      	ldrb	r2, [r7, #3]
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	440b      	add	r3, r1
 8005504:	333b      	adds	r3, #59	; 0x3b
 8005506:	2201      	movs	r2, #1
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	e009      	b.n	8005520 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800550c:	78fa      	ldrb	r2, [r7, #3]
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	440b      	add	r3, r1
 800551a:	333b      	adds	r3, #59	; 0x3b
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005520:	78fa      	ldrb	r2, [r7, #3]
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	440b      	add	r3, r1
 800552e:	333c      	adds	r3, #60	; 0x3c
 8005530:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005534:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	787c      	ldrb	r4, [r7, #1]
 800553c:	78ba      	ldrb	r2, [r7, #2]
 800553e:	78f9      	ldrb	r1, [r7, #3]
 8005540:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005542:	9302      	str	r3, [sp, #8]
 8005544:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	4623      	mov	r3, r4
 8005552:	f007 f87d 	bl	800c650 <USB_HC_Init>
 8005556:	4603      	mov	r3, r0
 8005558:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	bd90      	pop	{r4, r7, pc}

0800556c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_HCD_HC_Halt+0x1e>
 8005586:	2302      	movs	r3, #2
 8005588:	e00f      	b.n	80055aa <HAL_HCD_HC_Halt+0x3e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	4611      	mov	r1, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f007 fa5b 	bl	800ca56 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	4608      	mov	r0, r1
 80055be:	4611      	mov	r1, r2
 80055c0:	461a      	mov	r2, r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	70fb      	strb	r3, [r7, #3]
 80055c6:	460b      	mov	r3, r1
 80055c8:	70bb      	strb	r3, [r7, #2]
 80055ca:	4613      	mov	r3, r2
 80055cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80055ce:	78fa      	ldrb	r2, [r7, #3]
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	440b      	add	r3, r1
 80055dc:	333b      	adds	r3, #59	; 0x3b
 80055de:	78ba      	ldrb	r2, [r7, #2]
 80055e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80055e2:	78fa      	ldrb	r2, [r7, #3]
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	440b      	add	r3, r1
 80055f0:	333f      	adds	r3, #63	; 0x3f
 80055f2:	787a      	ldrb	r2, [r7, #1]
 80055f4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80055f6:	7c3b      	ldrb	r3, [r7, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d114      	bne.n	8005626 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	440b      	add	r3, r1
 800560a:	3342      	adds	r3, #66	; 0x42
 800560c:	2203      	movs	r2, #3
 800560e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005610:	78fa      	ldrb	r2, [r7, #3]
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	440b      	add	r3, r1
 800561e:	333d      	adds	r3, #61	; 0x3d
 8005620:	7f3a      	ldrb	r2, [r7, #28]
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	e009      	b.n	800563a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005626:	78fa      	ldrb	r2, [r7, #3]
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	440b      	add	r3, r1
 8005634:	3342      	adds	r3, #66	; 0x42
 8005636:	2202      	movs	r2, #2
 8005638:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800563a:	787b      	ldrb	r3, [r7, #1]
 800563c:	2b03      	cmp	r3, #3
 800563e:	f200 80d6 	bhi.w	80057ee <HAL_HCD_HC_SubmitRequest+0x23a>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	08005659 	.word	0x08005659
 800564c:	080057d9 	.word	0x080057d9
 8005650:	080056c5 	.word	0x080056c5
 8005654:	0800574f 	.word	0x0800574f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005658:	7c3b      	ldrb	r3, [r7, #16]
 800565a:	2b01      	cmp	r3, #1
 800565c:	f040 80c9 	bne.w	80057f2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8005660:	78bb      	ldrb	r3, [r7, #2]
 8005662:	2b00      	cmp	r3, #0
 8005664:	f040 80c5 	bne.w	80057f2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8005668:	8b3b      	ldrh	r3, [r7, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	440b      	add	r3, r1
 800567c:	3351      	adds	r3, #81	; 0x51
 800567e:	2201      	movs	r2, #1
 8005680:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	440b      	add	r3, r1
 8005690:	3351      	adds	r3, #81	; 0x51
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005698:	78fa      	ldrb	r2, [r7, #3]
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	440b      	add	r3, r1
 80056a6:	3342      	adds	r3, #66	; 0x42
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80056ac:	e0a1      	b.n	80057f2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056ae:	78fa      	ldrb	r2, [r7, #3]
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	440b      	add	r3, r1
 80056bc:	3342      	adds	r3, #66	; 0x42
 80056be:	2202      	movs	r2, #2
 80056c0:	701a      	strb	r2, [r3, #0]
      break;
 80056c2:	e096      	b.n	80057f2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80056c4:	78bb      	ldrb	r3, [r7, #2]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d120      	bne.n	800570c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80056ca:	78fa      	ldrb	r2, [r7, #3]
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	440b      	add	r3, r1
 80056d8:	3351      	adds	r3, #81	; 0x51
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10a      	bne.n	80056f6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056e0:	78fa      	ldrb	r2, [r7, #3]
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	440b      	add	r3, r1
 80056ee:	3342      	adds	r3, #66	; 0x42
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80056f4:	e07e      	b.n	80057f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056f6:	78fa      	ldrb	r2, [r7, #3]
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	440b      	add	r3, r1
 8005704:	3342      	adds	r3, #66	; 0x42
 8005706:	2202      	movs	r2, #2
 8005708:	701a      	strb	r2, [r3, #0]
      break;
 800570a:	e073      	b.n	80057f4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800570c:	78fa      	ldrb	r2, [r7, #3]
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	440b      	add	r3, r1
 800571a:	3350      	adds	r3, #80	; 0x50
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005722:	78fa      	ldrb	r2, [r7, #3]
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	440b      	add	r3, r1
 8005730:	3342      	adds	r3, #66	; 0x42
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
      break;
 8005736:	e05d      	b.n	80057f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005738:	78fa      	ldrb	r2, [r7, #3]
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	440b      	add	r3, r1
 8005746:	3342      	adds	r3, #66	; 0x42
 8005748:	2202      	movs	r2, #2
 800574a:	701a      	strb	r2, [r3, #0]
      break;
 800574c:	e052      	b.n	80057f4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800574e:	78bb      	ldrb	r3, [r7, #2]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d120      	bne.n	8005796 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005754:	78fa      	ldrb	r2, [r7, #3]
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	440b      	add	r3, r1
 8005762:	3351      	adds	r3, #81	; 0x51
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10a      	bne.n	8005780 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	440b      	add	r3, r1
 8005778:	3342      	adds	r3, #66	; 0x42
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800577e:	e039      	b.n	80057f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005780:	78fa      	ldrb	r2, [r7, #3]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	440b      	add	r3, r1
 800578e:	3342      	adds	r3, #66	; 0x42
 8005790:	2202      	movs	r2, #2
 8005792:	701a      	strb	r2, [r3, #0]
      break;
 8005794:	e02e      	b.n	80057f4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005796:	78fa      	ldrb	r2, [r7, #3]
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	440b      	add	r3, r1
 80057a4:	3350      	adds	r3, #80	; 0x50
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10a      	bne.n	80057c2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80057ac:	78fa      	ldrb	r2, [r7, #3]
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	440b      	add	r3, r1
 80057ba:	3342      	adds	r3, #66	; 0x42
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
      break;
 80057c0:	e018      	b.n	80057f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80057c2:	78fa      	ldrb	r2, [r7, #3]
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	440b      	add	r3, r1
 80057d0:	3342      	adds	r3, #66	; 0x42
 80057d2:	2202      	movs	r2, #2
 80057d4:	701a      	strb	r2, [r3, #0]
      break;
 80057d6:	e00d      	b.n	80057f4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80057d8:	78fa      	ldrb	r2, [r7, #3]
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	440b      	add	r3, r1
 80057e6:	3342      	adds	r3, #66	; 0x42
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]
      break;
 80057ec:	e002      	b.n	80057f4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80057ee:	bf00      	nop
 80057f0:	e000      	b.n	80057f4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80057f2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80057f4:	78fa      	ldrb	r2, [r7, #3]
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	440b      	add	r3, r1
 8005802:	3344      	adds	r3, #68	; 0x44
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005808:	78fa      	ldrb	r2, [r7, #3]
 800580a:	8b39      	ldrh	r1, [r7, #24]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4403      	add	r3, r0
 8005818:	3348      	adds	r3, #72	; 0x48
 800581a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800581c:	78fa      	ldrb	r2, [r7, #3]
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	440b      	add	r3, r1
 800582a:	335c      	adds	r3, #92	; 0x5c
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005830:	78fa      	ldrb	r2, [r7, #3]
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	440b      	add	r3, r1
 800583e:	334c      	adds	r3, #76	; 0x4c
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005844:	78fa      	ldrb	r2, [r7, #3]
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	440b      	add	r3, r1
 8005852:	3339      	adds	r3, #57	; 0x39
 8005854:	78fa      	ldrb	r2, [r7, #3]
 8005856:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005858:	78fa      	ldrb	r2, [r7, #3]
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	440b      	add	r3, r1
 8005866:	335d      	adds	r3, #93	; 0x5d
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	78fa      	ldrb	r2, [r7, #3]
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	3338      	adds	r3, #56	; 0x38
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	4413      	add	r3, r2
 8005880:	4619      	mov	r1, r3
 8005882:	f006 ffd7 	bl	800c834 <USB_HC_StartXfer>
 8005886:	4603      	mov	r3, r0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f006 fd8d 	bl	800c3c6 <USB_GetMode>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	f040 80ef 	bne.w	8005a92 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f006 fd71 	bl	800c3a0 <USB_ReadInterrupts>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80e5 	beq.w	8005a90 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f006 fd68 	bl	800c3a0 <USB_ReadInterrupts>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058da:	d104      	bne.n	80058e6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80058e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f006 fd58 	bl	800c3a0 <USB_ReadInterrupts>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058fa:	d104      	bne.n	8005906 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005904:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f006 fd48 	bl	800c3a0 <USB_ReadInterrupts>
 8005910:	4603      	mov	r3, r0
 8005912:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005916:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800591a:	d104      	bne.n	8005926 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005924:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f006 fd38 	bl	800c3a0 <USB_ReadInterrupts>
 8005930:	4603      	mov	r3, r0
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b02      	cmp	r3, #2
 8005938:	d103      	bne.n	8005942 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2202      	movs	r2, #2
 8005940:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f006 fd2a 	bl	800c3a0 <USB_ReadInterrupts>
 800594c:	4603      	mov	r3, r0
 800594e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005956:	d115      	bne.n	8005984 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005960:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d108      	bne.n	8005984 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f008 fb2c 	bl	800dfd0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2101      	movs	r1, #1
 800597e:	4618      	mov	r0, r3
 8005980:	f006 fde2 	bl	800c548 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4618      	mov	r0, r3
 800598a:	f006 fd09 	bl	800c3a0 <USB_ReadInterrupts>
 800598e:	4603      	mov	r3, r0
 8005990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005998:	d102      	bne.n	80059a0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 f906 	bl	8006bac <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f006 fcfb 	bl	800c3a0 <USB_ReadInterrupts>
 80059aa:	4603      	mov	r3, r0
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d106      	bne.n	80059c2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f008 faef 	bl	800df98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2208      	movs	r2, #8
 80059c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f006 fcea 	bl	800c3a0 <USB_ReadInterrupts>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059d6:	d138      	bne.n	8005a4a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f007 f829 	bl	800ca34 <USB_HC_ReadInterrupt>
 80059e2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80059e4:	2300      	movs	r3, #0
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e025      	b.n	8005a36 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	fa22 f303 	lsr.w	r3, r2, r3
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d018      	beq.n	8005a30 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a14:	d106      	bne.n	8005a24 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f8b3 	bl	8005b88 <HCD_HC_IN_IRQHandler>
 8005a22:	e005      	b.n	8005a30 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fcbd 	bl	80063aa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	3301      	adds	r3, #1
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d3d4      	bcc.n	80059ea <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f006 fca6 	bl	800c3a0 <USB_ReadInterrupts>
 8005a54:	4603      	mov	r3, r0
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b10      	cmp	r3, #16
 8005a5c:	d101      	bne.n	8005a62 <HAL_HCD_IRQHandler+0x1d2>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <HAL_HCD_IRQHandler+0x1d4>
 8005a62:	2300      	movs	r3, #0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d014      	beq.n	8005a92 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0210 	bic.w	r2, r2, #16
 8005a76:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 ffeb 	bl	8006a54 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699a      	ldr	r2, [r3, #24]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0210 	orr.w	r2, r2, #16
 8005a8c:	619a      	str	r2, [r3, #24]
 8005a8e:	e000      	b.n	8005a92 <HAL_HCD_IRQHandler+0x202>
      return;
 8005a90:	bf00      	nop
    }
  }
}
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_HCD_Start+0x16>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e013      	b.n	8005ad6 <HAL_HCD_Start+0x3e>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f006 fb82 	bl	800c1c4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f006 fd78 	bl	800c5bc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_HCD_Stop+0x16>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e00d      	b.n	8005b10 <HAL_HCD_Stop+0x32>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f007 f8a7 	bl	800cc54 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005b24:	78fa      	ldrb	r2, [r7, #3]
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	440b      	add	r3, r1
 8005b32:	335c      	adds	r3, #92	; 0x5c
 8005b34:	781b      	ldrb	r3, [r3, #0]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005b4e:	78fa      	ldrb	r2, [r7, #3]
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	440b      	add	r3, r1
 8005b5c:	334c      	adds	r3, #76	; 0x4c
 8005b5e:	681b      	ldr	r3, [r3, #0]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f006 fd58 	bl	800c62e <USB_GetCurrentFrame>
 8005b7e:	4603      	mov	r3, r0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d119      	bne.n	8005bec <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2304      	movs	r3, #4
 8005bc8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005be4:	f043 0302 	orr.w	r3, r3, #2
 8005be8:	60d3      	str	r3, [r2, #12]
 8005bea:	e0ce      	b.n	8005d8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c02:	d12c      	bne.n	8005c5e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c10:	461a      	mov	r2, r3
 8005c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	440b      	add	r3, r1
 8005c26:	335d      	adds	r3, #93	; 0x5d
 8005c28:	2207      	movs	r2, #7
 8005c2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c46:	f043 0302 	orr.w	r3, r3, #2
 8005c4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	4611      	mov	r1, r2
 8005c56:	4618      	mov	r0, r3
 8005c58:	f006 fefd 	bl	800ca56 <USB_HC_Halt>
 8005c5c:	e095      	b.n	8005d8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d109      	bne.n	8005c88 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c80:	461a      	mov	r2, r3
 8005c82:	2320      	movs	r3, #32
 8005c84:	6093      	str	r3, [r2, #8]
 8005c86:	e080      	b.n	8005d8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d134      	bne.n	8005d08 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb8:	f043 0302 	orr.w	r3, r3, #2
 8005cbc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	440b      	add	r3, r1
 8005ccc:	335d      	adds	r3, #93	; 0x5d
 8005cce:	2205      	movs	r2, #5
 8005cd0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cde:	461a      	mov	r2, r3
 8005ce0:	2310      	movs	r3, #16
 8005ce2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f006 fea8 	bl	800ca56 <USB_HC_Halt>
 8005d06:	e040      	b.n	8005d8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1e:	d134      	bne.n	8005d8a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d3a:	f043 0302 	orr.w	r3, r3, #2
 8005d3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f006 fe83 	bl	800ca56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2310      	movs	r3, #16
 8005d60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	440b      	add	r3, r1
 8005d70:	335d      	adds	r3, #93	; 0x5d
 8005d72:	2208      	movs	r2, #8
 8005d74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d82:	461a      	mov	r2, r3
 8005d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d88:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da0:	d122      	bne.n	8005de8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	0151      	lsls	r1, r2, #5
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	440a      	add	r2, r1
 8005db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dbc:	f043 0302 	orr.w	r3, r3, #2
 8005dc0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f006 fe42 	bl	800ca56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dde:	461a      	mov	r2, r3
 8005de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005de4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005de6:	e2dc      	b.n	80063a2 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	f040 80dd 	bne.w	8005fba <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 8005e00:	6879      	ldr	r1, [r7, #4]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	440b      	add	r3, r1
 8005e0e:	335d      	adds	r3, #93	; 0x5d
 8005e10:	2201      	movs	r2, #1
 8005e12:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	440b      	add	r3, r1
 8005e22:	3358      	adds	r3, #88	; 0x58
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e34:	461a      	mov	r2, r3
 8005e36:	2301      	movs	r3, #1
 8005e38:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	440b      	add	r3, r1
 8005e48:	333f      	adds	r3, #63	; 0x3f
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	440b      	add	r3, r1
 8005e5e:	333f      	adds	r3, #63	; 0x3f
 8005e60:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d121      	bne.n	8005eaa <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e80:	f043 0302 	orr.w	r3, r3, #2
 8005e84:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	4611      	mov	r1, r2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f006 fde0 	bl	800ca56 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	6093      	str	r3, [r2, #8]
 8005ea8:	e070      	b.n	8005f8c <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	440b      	add	r3, r1
 8005eb8:	333f      	adds	r3, #63	; 0x3f
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d12a      	bne.n	8005f16 <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	0151      	lsls	r1, r2, #5
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	440a      	add	r2, r1
 8005ed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ede:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	440b      	add	r3, r1
 8005eee:	335c      	adds	r3, #92	; 0x5c
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	b2d8      	uxtb	r0, r3
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4613      	mov	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	440b      	add	r3, r1
 8005f06:	335c      	adds	r3, #92	; 0x5c
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	4601      	mov	r1, r0
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f008 f86c 	bl	800dfec <HAL_HCD_HC_NotifyURBChange_Callback>
 8005f14:	e03a      	b.n	8005f8c <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	440b      	add	r3, r1
 8005f24:	333f      	adds	r3, #63	; 0x3f
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d12f      	bne.n	8005f8c <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	440b      	add	r3, r1
 8005f3a:	335c      	adds	r3, #92	; 0x5c
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	440b      	add	r3, r1
 8005f4e:	3350      	adds	r3, #80	; 0x50
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	f083 0301 	eor.w	r3, r3, #1
 8005f56:	b2d8      	uxtb	r0, r3
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	440b      	add	r3, r1
 8005f66:	3350      	adds	r3, #80	; 0x50
 8005f68:	4602      	mov	r2, r0
 8005f6a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	b2d8      	uxtb	r0, r3
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	440b      	add	r3, r1
 8005f7e:	335c      	adds	r3, #92	; 0x5c
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	4601      	mov	r1, r0
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f008 f830 	bl	800dfec <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	440b      	add	r3, r1
 8005f9a:	3350      	adds	r3, #80	; 0x50
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	f083 0301 	eor.w	r3, r3, #1
 8005fa2:	b2d8      	uxtb	r0, r3
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	440b      	add	r3, r1
 8005fb2:	3350      	adds	r3, #80	; 0x50
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	701a      	strb	r2, [r3, #0]
}
 8005fb8:	e1f3      	b.n	80063a2 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	f040 811a 	bne.w	8006206 <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	0151      	lsls	r1, r2, #5
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	440a      	add	r2, r1
 8005fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fec:	f023 0302 	bic.w	r3, r3, #2
 8005ff0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	440b      	add	r3, r1
 8006000:	335d      	adds	r3, #93	; 0x5d
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d10a      	bne.n	800601e <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	440b      	add	r3, r1
 8006016:	335c      	adds	r3, #92	; 0x5c
 8006018:	2201      	movs	r2, #1
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	e0d9      	b.n	80061d2 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	440b      	add	r3, r1
 800602c:	335d      	adds	r3, #93	; 0x5d
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b05      	cmp	r3, #5
 8006032:	d10a      	bne.n	800604a <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4613      	mov	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	440b      	add	r3, r1
 8006042:	335c      	adds	r3, #92	; 0x5c
 8006044:	2205      	movs	r2, #5
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	e0c3      	b.n	80061d2 <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	440b      	add	r3, r1
 8006058:	335d      	adds	r3, #93	; 0x5d
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b06      	cmp	r3, #6
 800605e:	d00a      	beq.n	8006076 <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	440b      	add	r3, r1
 800606e:	335d      	adds	r3, #93	; 0x5d
 8006070:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006072:	2b08      	cmp	r3, #8
 8006074:	d156      	bne.n	8006124 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4613      	mov	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	440b      	add	r3, r1
 8006084:	3358      	adds	r3, #88	; 0x58
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	1c59      	adds	r1, r3, #1
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	4403      	add	r3, r0
 8006098:	3358      	adds	r3, #88	; 0x58
 800609a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	440b      	add	r3, r1
 80060aa:	3358      	adds	r3, #88	; 0x58
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d914      	bls.n	80060dc <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	440b      	add	r3, r1
 80060c0:	3358      	adds	r3, #88	; 0x58
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	440b      	add	r3, r1
 80060d4:	335c      	adds	r3, #92	; 0x5c
 80060d6:	2204      	movs	r2, #4
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	e009      	b.n	80060f0 <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	440b      	add	r3, r1
 80060ea:	335c      	adds	r3, #92	; 0x5c
 80060ec:	2202      	movs	r2, #2
 80060ee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006106:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800610e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	4413      	add	r3, r2
 8006118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611c:	461a      	mov	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	e056      	b.n	80061d2 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	440b      	add	r3, r1
 8006132:	335d      	adds	r3, #93	; 0x5d
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b03      	cmp	r3, #3
 8006138:	d123      	bne.n	8006182 <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	440b      	add	r3, r1
 8006148:	335c      	adds	r3, #92	; 0x5c
 800614a:	2202      	movs	r2, #2
 800614c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	4413      	add	r3, r2
 8006156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006164:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800616c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4413      	add	r3, r2
 8006176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617a:	461a      	mov	r2, r3
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	e027      	b.n	80061d2 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	440b      	add	r3, r1
 8006190:	335d      	adds	r3, #93	; 0x5d
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2b07      	cmp	r3, #7
 8006196:	d11c      	bne.n	80061d2 <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	440b      	add	r3, r1
 80061a6:	3358      	adds	r3, #88	; 0x58
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	1c59      	adds	r1, r3, #1
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	4403      	add	r3, r0
 80061ba:	3358      	adds	r3, #88	; 0x58
 80061bc:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4613      	mov	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	440b      	add	r3, r1
 80061cc:	335c      	adds	r3, #92	; 0x5c
 80061ce:	2204      	movs	r2, #4
 80061d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061de:	461a      	mov	r2, r3
 80061e0:	2302      	movs	r3, #2
 80061e2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	b2d8      	uxtb	r0, r3
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	440b      	add	r3, r1
 80061f6:	335c      	adds	r3, #92	; 0x5c
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	4601      	mov	r1, r0
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f007 fef4 	bl	800dfec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006204:	e0cd      	b.n	80063a2 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4413      	add	r3, r2
 800620e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006218:	2b80      	cmp	r3, #128	; 0x80
 800621a:	d13e      	bne.n	800629a <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4413      	add	r3, r2
 8006224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	440a      	add	r2, r1
 8006232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006236:	f043 0302 	orr.w	r3, r3, #2
 800623a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	440b      	add	r3, r1
 800624a:	3358      	adds	r3, #88	; 0x58
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	1c59      	adds	r1, r3, #1
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	4403      	add	r3, r0
 800625e:	3358      	adds	r3, #88	; 0x58
 8006260:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	440b      	add	r3, r1
 8006270:	335d      	adds	r3, #93	; 0x5d
 8006272:	2206      	movs	r2, #6
 8006274:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	4611      	mov	r1, r2
 8006280:	4618      	mov	r0, r3
 8006282:	f006 fbe8 	bl	800ca56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	4413      	add	r3, r2
 800628e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006292:	461a      	mov	r2, r3
 8006294:	2380      	movs	r3, #128	; 0x80
 8006296:	6093      	str	r3, [r2, #8]
}
 8006298:	e083      	b.n	80063a2 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	2b10      	cmp	r3, #16
 80062ae:	d178      	bne.n	80063a2 <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	440b      	add	r3, r1
 80062be:	333f      	adds	r3, #63	; 0x3f
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d122      	bne.n	800630c <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	440b      	add	r3, r1
 80062d4:	3358      	adds	r3, #88	; 0x58
 80062d6:	2200      	movs	r2, #0
 80062d8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f4:	f043 0302 	orr.w	r3, r3, #2
 80062f8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	4611      	mov	r1, r2
 8006304:	4618      	mov	r0, r3
 8006306:	f006 fba6 	bl	800ca56 <USB_HC_Halt>
 800630a:	e041      	b.n	8006390 <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	440b      	add	r3, r1
 800631a:	333f      	adds	r3, #63	; 0x3f
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	440b      	add	r3, r1
 8006330:	333f      	adds	r3, #63	; 0x3f
 8006332:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006334:	2b02      	cmp	r3, #2
 8006336:	d12b      	bne.n	8006390 <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006338:	6879      	ldr	r1, [r7, #4]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	440b      	add	r3, r1
 8006346:	3358      	adds	r3, #88	; 0x58
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800634c:	6879      	ldr	r1, [r7, #4]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	440b      	add	r3, r1
 800635a:	335d      	adds	r3, #93	; 0x5d
 800635c:	2203      	movs	r2, #3
 800635e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	440a      	add	r2, r1
 8006376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800637a:	f043 0302 	orr.w	r3, r3, #2
 800637e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	4611      	mov	r1, r2
 800638a:	4618      	mov	r0, r3
 800638c:	f006 fb63 	bl	800ca56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4413      	add	r3, r2
 8006398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639c:	461a      	mov	r2, r3
 800639e:	2310      	movs	r3, #16
 80063a0:	6093      	str	r3, [r2, #8]
}
 80063a2:	bf00      	nop
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b086      	sub	sp, #24
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	460b      	mov	r3, r1
 80063b4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d119      	bne.n	800640e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e6:	461a      	mov	r2, r3
 80063e8:	2304      	movs	r3, #4
 80063ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	440a      	add	r2, r1
 8006402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006406:	f043 0302 	orr.w	r3, r3, #2
 800640a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800640c:	e31e      	b.n	8006a4c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	4413      	add	r3, r2
 8006416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b20      	cmp	r3, #32
 8006422:	d141      	bne.n	80064a8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	4413      	add	r3, r2
 800642c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006430:	461a      	mov	r2, r3
 8006432:	2320      	movs	r3, #32
 8006434:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	440b      	add	r3, r1
 8006444:	333d      	adds	r3, #61	; 0x3d
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b01      	cmp	r3, #1
 800644a:	f040 82ff 	bne.w	8006a4c <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4613      	mov	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	440b      	add	r3, r1
 800645c:	333d      	adds	r3, #61	; 0x3d
 800645e:	2200      	movs	r2, #0
 8006460:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	440b      	add	r3, r1
 8006470:	335c      	adds	r3, #92	; 0x5c
 8006472:	2202      	movs	r2, #2
 8006474:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	4413      	add	r3, r2
 800647e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	0151      	lsls	r1, r2, #5
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	440a      	add	r2, r1
 800648c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006490:	f043 0302 	orr.w	r3, r3, #2
 8006494:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	4611      	mov	r1, r2
 80064a0:	4618      	mov	r0, r3
 80064a2:	f006 fad8 	bl	800ca56 <USB_HC_Halt>
}
 80064a6:	e2d1      	b.n	8006a4c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ba:	2b40      	cmp	r3, #64	; 0x40
 80064bc:	d13f      	bne.n	800653e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	440b      	add	r3, r1
 80064cc:	335d      	adds	r3, #93	; 0x5d
 80064ce:	2204      	movs	r2, #4
 80064d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	440b      	add	r3, r1
 80064e0:	333d      	adds	r3, #61	; 0x3d
 80064e2:	2201      	movs	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	440b      	add	r3, r1
 80064f4:	3358      	adds	r3, #88	; 0x58
 80064f6:	2200      	movs	r2, #0
 80064f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	4413      	add	r3, r2
 8006502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	0151      	lsls	r1, r2, #5
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	440a      	add	r2, r1
 8006510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006514:	f043 0302 	orr.w	r3, r3, #2
 8006518:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	4611      	mov	r1, r2
 8006524:	4618      	mov	r0, r3
 8006526:	f006 fa96 	bl	800ca56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	4413      	add	r3, r2
 8006532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006536:	461a      	mov	r2, r3
 8006538:	2340      	movs	r3, #64	; 0x40
 800653a:	6093      	str	r3, [r2, #8]
}
 800653c:	e286      	b.n	8006a4c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	4413      	add	r3, r2
 8006546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006554:	d122      	bne.n	800659c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	4413      	add	r3, r2
 800655e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	440a      	add	r2, r1
 800656c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006570:	f043 0302 	orr.w	r3, r3, #2
 8006574:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	4611      	mov	r1, r2
 8006580:	4618      	mov	r0, r3
 8006582:	f006 fa68 	bl	800ca56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	4413      	add	r3, r2
 800658e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006592:	461a      	mov	r2, r3
 8006594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006598:	6093      	str	r3, [r2, #8]
}
 800659a:	e257      	b.n	8006a4c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d135      	bne.n	800661e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	440b      	add	r3, r1
 80065c0:	3358      	adds	r3, #88	; 0x58
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	0151      	lsls	r1, r2, #5
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	440a      	add	r2, r1
 80065dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e0:	f043 0302 	orr.w	r3, r3, #2
 80065e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	4611      	mov	r1, r2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f006 fa30 	bl	800ca56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006602:	461a      	mov	r2, r3
 8006604:	2301      	movs	r3, #1
 8006606:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	440b      	add	r3, r1
 8006616:	335d      	adds	r3, #93	; 0x5d
 8006618:	2201      	movs	r2, #1
 800661a:	701a      	strb	r2, [r3, #0]
}
 800661c:	e216      	b.n	8006a4c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b08      	cmp	r3, #8
 8006632:	d12b      	bne.n	800668c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	4413      	add	r3, r2
 800663c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006640:	461a      	mov	r2, r3
 8006642:	2308      	movs	r3, #8
 8006644:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	4413      	add	r3, r2
 800664e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	440a      	add	r2, r1
 800665c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006660:	f043 0302 	orr.w	r3, r3, #2
 8006664:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	4611      	mov	r1, r2
 8006670:	4618      	mov	r0, r3
 8006672:	f006 f9f0 	bl	800ca56 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	440b      	add	r3, r1
 8006684:	335d      	adds	r3, #93	; 0x5d
 8006686:	2205      	movs	r2, #5
 8006688:	701a      	strb	r2, [r3, #0]
}
 800668a:	e1df      	b.n	8006a4c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4413      	add	r3, r2
 8006694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 0310 	and.w	r3, r3, #16
 800669e:	2b10      	cmp	r3, #16
 80066a0:	d135      	bne.n	800670e <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	440b      	add	r3, r1
 80066b0:	3358      	adds	r3, #88	; 0x58
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	440b      	add	r3, r1
 80066c4:	335d      	adds	r3, #93	; 0x5d
 80066c6:	2203      	movs	r2, #3
 80066c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	0151      	lsls	r1, r2, #5
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	440a      	add	r2, r1
 80066e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066e4:	f043 0302 	orr.w	r3, r3, #2
 80066e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	4611      	mov	r1, r2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f006 f9ae 	bl	800ca56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	4413      	add	r3, r2
 8006702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006706:	461a      	mov	r2, r3
 8006708:	2310      	movs	r3, #16
 800670a:	6093      	str	r3, [r2, #8]
}
 800670c:	e19e      	b.n	8006a4c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006720:	2b80      	cmp	r3, #128	; 0x80
 8006722:	d12b      	bne.n	800677c <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	4413      	add	r3, r2
 800672c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	440a      	add	r2, r1
 800673a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800673e:	f043 0302 	orr.w	r3, r3, #2
 8006742:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	4611      	mov	r1, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f006 f981 	bl	800ca56 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4613      	mov	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	440b      	add	r3, r1
 8006762:	335d      	adds	r3, #93	; 0x5d
 8006764:	2206      	movs	r2, #6
 8006766:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	4413      	add	r3, r2
 8006770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006774:	461a      	mov	r2, r3
 8006776:	2380      	movs	r3, #128	; 0x80
 8006778:	6093      	str	r3, [r2, #8]
}
 800677a:	e167      	b.n	8006a4c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	4413      	add	r3, r2
 8006784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800678e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006792:	d135      	bne.n	8006800 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	4413      	add	r3, r2
 800679c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ae:	f043 0302 	orr.w	r3, r3, #2
 80067b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	b2d2      	uxtb	r2, r2
 80067bc:	4611      	mov	r1, r2
 80067be:	4618      	mov	r0, r3
 80067c0:	f006 f949 	bl	800ca56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d0:	461a      	mov	r2, r3
 80067d2:	2310      	movs	r3, #16
 80067d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e2:	461a      	mov	r2, r3
 80067e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	440b      	add	r3, r1
 80067f8:	335d      	adds	r3, #93	; 0x5d
 80067fa:	2208      	movs	r2, #8
 80067fc:	701a      	strb	r2, [r3, #0]
}
 80067fe:	e125      	b.n	8006a4c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	4413      	add	r3, r2
 8006808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b02      	cmp	r3, #2
 8006814:	f040 811a 	bne.w	8006a4c <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4413      	add	r3, r2
 8006820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	0151      	lsls	r1, r2, #5
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	440a      	add	r2, r1
 800682e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006832:	f023 0302 	bic.w	r3, r3, #2
 8006836:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	440b      	add	r3, r1
 8006846:	335d      	adds	r3, #93	; 0x5d
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d137      	bne.n	80068be <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4613      	mov	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	440b      	add	r3, r1
 800685c:	335c      	adds	r3, #92	; 0x5c
 800685e:	2201      	movs	r2, #1
 8006860:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	440b      	add	r3, r1
 8006870:	333f      	adds	r3, #63	; 0x3f
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b02      	cmp	r3, #2
 8006876:	d00b      	beq.n	8006890 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	440b      	add	r3, r1
 8006886:	333f      	adds	r3, #63	; 0x3f
 8006888:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800688a:	2b03      	cmp	r3, #3
 800688c:	f040 80c5 	bne.w	8006a1a <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006890:	6879      	ldr	r1, [r7, #4]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	440b      	add	r3, r1
 800689e:	3351      	adds	r3, #81	; 0x51
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	f083 0301 	eor.w	r3, r3, #1
 80068a6:	b2d8      	uxtb	r0, r3
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	440b      	add	r3, r1
 80068b6:	3351      	adds	r3, #81	; 0x51
 80068b8:	4602      	mov	r2, r0
 80068ba:	701a      	strb	r2, [r3, #0]
 80068bc:	e0ad      	b.n	8006a1a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	440b      	add	r3, r1
 80068cc:	335d      	adds	r3, #93	; 0x5d
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d10a      	bne.n	80068ea <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4613      	mov	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	440b      	add	r3, r1
 80068e2:	335c      	adds	r3, #92	; 0x5c
 80068e4:	2202      	movs	r2, #2
 80068e6:	701a      	strb	r2, [r3, #0]
 80068e8:	e097      	b.n	8006a1a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80068ea:	6879      	ldr	r1, [r7, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4613      	mov	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	440b      	add	r3, r1
 80068f8:	335d      	adds	r3, #93	; 0x5d
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d10a      	bne.n	8006916 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4613      	mov	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	440b      	add	r3, r1
 800690e:	335c      	adds	r3, #92	; 0x5c
 8006910:	2202      	movs	r2, #2
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	e081      	b.n	8006a1a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006916:	6879      	ldr	r1, [r7, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	440b      	add	r3, r1
 8006924:	335d      	adds	r3, #93	; 0x5d
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b05      	cmp	r3, #5
 800692a:	d10a      	bne.n	8006942 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4613      	mov	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	440b      	add	r3, r1
 800693a:	335c      	adds	r3, #92	; 0x5c
 800693c:	2205      	movs	r2, #5
 800693e:	701a      	strb	r2, [r3, #0]
 8006940:	e06b      	b.n	8006a1a <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	440b      	add	r3, r1
 8006950:	335d      	adds	r3, #93	; 0x5d
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b06      	cmp	r3, #6
 8006956:	d00a      	beq.n	800696e <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	440b      	add	r3, r1
 8006966:	335d      	adds	r3, #93	; 0x5d
 8006968:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800696a:	2b08      	cmp	r3, #8
 800696c:	d155      	bne.n	8006a1a <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 800696e:	6879      	ldr	r1, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	00db      	lsls	r3, r3, #3
 800697a:	440b      	add	r3, r1
 800697c:	3358      	adds	r3, #88	; 0x58
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	1c59      	adds	r1, r3, #1
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	4403      	add	r3, r0
 8006990:	3358      	adds	r3, #88	; 0x58
 8006992:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4613      	mov	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	440b      	add	r3, r1
 80069a2:	3358      	adds	r3, #88	; 0x58
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	d914      	bls.n	80069d4 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80069aa:	6879      	ldr	r1, [r7, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4613      	mov	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	440b      	add	r3, r1
 80069b8:	3358      	adds	r3, #88	; 0x58
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	440b      	add	r3, r1
 80069cc:	335c      	adds	r3, #92	; 0x5c
 80069ce:	2204      	movs	r2, #4
 80069d0:	701a      	strb	r2, [r3, #0]
 80069d2:	e009      	b.n	80069e8 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	440b      	add	r3, r1
 80069e2:	335c      	adds	r3, #92	; 0x5c
 80069e4:	2202      	movs	r2, #2
 80069e6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069fe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a06:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a14:	461a      	mov	r2, r3
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a26:	461a      	mov	r2, r3
 8006a28:	2302      	movs	r3, #2
 8006a2a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	b2d8      	uxtb	r0, r3
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	440b      	add	r3, r1
 8006a3e:	335c      	adds	r3, #92	; 0x5c
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	4601      	mov	r1, r0
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f007 fad0 	bl	800dfec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006a4c:	bf00      	nop
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b08a      	sub	sp, #40	; 0x28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	0c5b      	lsrs	r3, r3, #17
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	091b      	lsrs	r3, r3, #4
 8006a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a88:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d003      	beq.n	8006a98 <HCD_RXQLVL_IRQHandler+0x44>
 8006a90:	2b05      	cmp	r3, #5
 8006a92:	f000 8082 	beq.w	8006b9a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006a96:	e083      	b.n	8006ba0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d07f      	beq.n	8006b9e <HCD_RXQLVL_IRQHandler+0x14a>
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	440b      	add	r3, r1
 8006aac:	3344      	adds	r3, #68	; 0x44
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d074      	beq.n	8006b9e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	440b      	add	r3, r1
 8006ac6:	3344      	adds	r3, #68	; 0x44
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	b292      	uxth	r2, r2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	f005 fc3d 	bl	800c34e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	440b      	add	r3, r1
 8006ae2:	3344      	adds	r3, #68	; 0x44
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	18d1      	adds	r1, r2, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	4613      	mov	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	4403      	add	r3, r0
 8006af8:	3344      	adds	r3, #68	; 0x44
 8006afa:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	440b      	add	r3, r1
 8006b0a:	334c      	adds	r3, #76	; 0x4c
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	18d1      	adds	r1, r2, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	4613      	mov	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	4403      	add	r3, r0
 8006b20:	334c      	adds	r3, #76	; 0x4c
 8006b22:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b30:	691a      	ldr	r2, [r3, #16]
 8006b32:	4b1d      	ldr	r3, [pc, #116]	; (8006ba8 <HCD_RXQLVL_IRQHandler+0x154>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d031      	beq.n	8006b9e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b50:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b58:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b66:	461a      	mov	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	440b      	add	r3, r1
 8006b7a:	3350      	adds	r3, #80	; 0x50
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	f083 0301 	eor.w	r3, r3, #1
 8006b82:	b2d8      	uxtb	r0, r3
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	440b      	add	r3, r1
 8006b92:	3350      	adds	r3, #80	; 0x50
 8006b94:	4602      	mov	r2, r0
 8006b96:	701a      	strb	r2, [r3, #0]
      break;
 8006b98:	e001      	b.n	8006b9e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006b9a:	bf00      	nop
 8006b9c:	e000      	b.n	8006ba0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006b9e:	bf00      	nop
  }
}
 8006ba0:	bf00      	nop
 8006ba2:	3728      	adds	r7, #40	; 0x28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	1ff80000 	.word	0x1ff80000

08006bac <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006bd8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d10b      	bne.n	8006bfc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d102      	bne.n	8006bf4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f007 f9e0 	bl	800dfb4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f043 0302 	orr.w	r3, r3, #2
 8006bfa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b08      	cmp	r3, #8
 8006c04:	d132      	bne.n	8006c6c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f043 0308 	orr.w	r3, r3, #8
 8006c0c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d126      	bne.n	8006c66 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d113      	bne.n	8006c48 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006c26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c2a:	d106      	bne.n	8006c3a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2102      	movs	r1, #2
 8006c32:	4618      	mov	r0, r3
 8006c34:	f005 fc88 	bl	800c548 <USB_InitFSLSPClkSel>
 8006c38:	e011      	b.n	8006c5e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2101      	movs	r1, #1
 8006c40:	4618      	mov	r0, r3
 8006c42:	f005 fc81 	bl	800c548 <USB_InitFSLSPClkSel>
 8006c46:	e00a      	b.n	8006c5e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d106      	bne.n	8006c5e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c56:	461a      	mov	r2, r3
 8006c58:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006c5c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f007 f9d2 	bl	800e008 <HAL_HCD_PortEnabled_Callback>
 8006c64:	e002      	b.n	8006c6c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f007 f9dc 	bl	800e024 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	d103      	bne.n	8006c7e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f043 0320 	orr.w	r3, r3, #32
 8006c7c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c84:	461a      	mov	r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6013      	str	r3, [r2, #0]
}
 8006c8a:	bf00      	nop
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b082      	sub	sp, #8
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e081      	b.n	8006da8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d106      	bne.n	8006cbe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7fa fae1 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2224      	movs	r2, #36	; 0x24
 8006cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0201 	bic.w	r2, r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ce2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cf2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d107      	bne.n	8006d0c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d08:	609a      	str	r2, [r3, #8]
 8006d0a:	e006      	b.n	8006d1a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006d18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d104      	bne.n	8006d2c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6812      	ldr	r2, [r2, #0]
 8006d36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d3e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d4e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	ea42 0103 	orr.w	r1, r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	021a      	lsls	r2, r3, #8
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	69d9      	ldr	r1, [r3, #28]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1a      	ldr	r2, [r3, #32]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f042 0201 	orr.w	r2, r2, #1
 8006d88:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e021      	b.n	8006e06 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2224      	movs	r2, #36	; 0x24
 8006dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0201 	bic.w	r2, r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7fa fac4 	bl	8001368 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af02      	add	r7, sp, #8
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	4608      	mov	r0, r1
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	4603      	mov	r3, r0
 8006e20:	817b      	strh	r3, [r7, #10]
 8006e22:	460b      	mov	r3, r1
 8006e24:	813b      	strh	r3, [r7, #8]
 8006e26:	4613      	mov	r3, r2
 8006e28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	f040 80f9 	bne.w	800702a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <HAL_I2C_Mem_Write+0x34>
 8006e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d105      	bne.n	8006e50 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e0ed      	b.n	800702c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d101      	bne.n	8006e5e <HAL_I2C_Mem_Write+0x4e>
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e0e6      	b.n	800702c <HAL_I2C_Mem_Write+0x21c>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e66:	f7fc fea3 	bl	8003bb0 <HAL_GetTick>
 8006e6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	2319      	movs	r3, #25
 8006e72:	2201      	movs	r2, #1
 8006e74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 fad1 	bl	8007420 <I2C_WaitOnFlagUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e0d1      	b.n	800702c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2221      	movs	r2, #33	; 0x21
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2240      	movs	r2, #64	; 0x40
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a3a      	ldr	r2, [r7, #32]
 8006ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006eb0:	88f8      	ldrh	r0, [r7, #6]
 8006eb2:	893a      	ldrh	r2, [r7, #8]
 8006eb4:	8979      	ldrh	r1, [r7, #10]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	9301      	str	r3, [sp, #4]
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 f9e1 	bl	8007288 <I2C_RequestMemoryWrite>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e0a9      	b.n	800702c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2bff      	cmp	r3, #255	; 0xff
 8006ee0:	d90e      	bls.n	8006f00 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	22ff      	movs	r2, #255	; 0xff
 8006ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	8979      	ldrh	r1, [r7, #10]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fbb3 	bl	8007664 <I2C_TransferConfig>
 8006efe:	e00f      	b.n	8006f20 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	8979      	ldrh	r1, [r7, #10]
 8006f12:	2300      	movs	r3, #0
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 fba2 	bl	8007664 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f000 fabb 	bl	80074a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e07b      	b.n	800702c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	781a      	ldrb	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d034      	beq.n	8006fd8 <HAL_I2C_Mem_Write+0x1c8>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d130      	bne.n	8006fd8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2180      	movs	r1, #128	; 0x80
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 fa4d 	bl	8007420 <I2C_WaitOnFlagUntilTimeout>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e04d      	b.n	800702c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	2bff      	cmp	r3, #255	; 0xff
 8006f98:	d90e      	bls.n	8006fb8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	22ff      	movs	r2, #255	; 0xff
 8006f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	8979      	ldrh	r1, [r7, #10]
 8006fa8:	2300      	movs	r3, #0
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 fb57 	bl	8007664 <I2C_TransferConfig>
 8006fb6:	e00f      	b.n	8006fd8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	8979      	ldrh	r1, [r7, #10]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 fb46 	bl	8007664 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d19e      	bne.n	8006f20 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 fa9a 	bl	8007520 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e01a      	b.n	800702c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6859      	ldr	r1, [r3, #4]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <HAL_I2C_Mem_Write+0x224>)
 800700a:	400b      	ands	r3, r1
 800700c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2220      	movs	r2, #32
 8007012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	e000      	b.n	800702c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800702a:	2302      	movs	r3, #2
  }
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	fe00e800 	.word	0xfe00e800

08007038 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b088      	sub	sp, #32
 800703c:	af02      	add	r7, sp, #8
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	4608      	mov	r0, r1
 8007042:	4611      	mov	r1, r2
 8007044:	461a      	mov	r2, r3
 8007046:	4603      	mov	r3, r0
 8007048:	817b      	strh	r3, [r7, #10]
 800704a:	460b      	mov	r3, r1
 800704c:	813b      	strh	r3, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b20      	cmp	r3, #32
 800705c:	f040 80fd 	bne.w	800725a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <HAL_I2C_Mem_Read+0x34>
 8007066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	d105      	bne.n	8007078 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007072:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e0f1      	b.n	800725c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800707e:	2b01      	cmp	r3, #1
 8007080:	d101      	bne.n	8007086 <HAL_I2C_Mem_Read+0x4e>
 8007082:	2302      	movs	r3, #2
 8007084:	e0ea      	b.n	800725c <HAL_I2C_Mem_Read+0x224>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800708e:	f7fc fd8f 	bl	8003bb0 <HAL_GetTick>
 8007092:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	2319      	movs	r3, #25
 800709a:	2201      	movs	r2, #1
 800709c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 f9bd 	bl	8007420 <I2C_WaitOnFlagUntilTimeout>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e0d5      	b.n	800725c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2222      	movs	r2, #34	; 0x22
 80070b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2240      	movs	r2, #64	; 0x40
 80070bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a3a      	ldr	r2, [r7, #32]
 80070ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070d8:	88f8      	ldrh	r0, [r7, #6]
 80070da:	893a      	ldrh	r2, [r7, #8]
 80070dc:	8979      	ldrh	r1, [r7, #10]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	4603      	mov	r3, r0
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 f921 	bl	8007330 <I2C_RequestMemoryRead>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e0ad      	b.n	800725c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007104:	b29b      	uxth	r3, r3
 8007106:	2bff      	cmp	r3, #255	; 0xff
 8007108:	d90e      	bls.n	8007128 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	22ff      	movs	r2, #255	; 0xff
 800710e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007114:	b2da      	uxtb	r2, r3
 8007116:	8979      	ldrh	r1, [r7, #10]
 8007118:	4b52      	ldr	r3, [pc, #328]	; (8007264 <HAL_I2C_Mem_Read+0x22c>)
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 fa9f 	bl	8007664 <I2C_TransferConfig>
 8007126:	e00f      	b.n	8007148 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007136:	b2da      	uxtb	r2, r3
 8007138:	8979      	ldrh	r1, [r7, #10]
 800713a:	4b4a      	ldr	r3, [pc, #296]	; (8007264 <HAL_I2C_Mem_Read+0x22c>)
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 fa8e 	bl	8007664 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	2200      	movs	r2, #0
 8007150:	2104      	movs	r1, #4
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f000 f964 	bl	8007420 <I2C_WaitOnFlagUntilTimeout>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e07c      	b.n	800725c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007198:	b29b      	uxth	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d034      	beq.n	8007208 <HAL_I2C_Mem_Read+0x1d0>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d130      	bne.n	8007208 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ac:	2200      	movs	r2, #0
 80071ae:	2180      	movs	r1, #128	; 0x80
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 f935 	bl	8007420 <I2C_WaitOnFlagUntilTimeout>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e04d      	b.n	800725c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	2bff      	cmp	r3, #255	; 0xff
 80071c8:	d90e      	bls.n	80071e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	22ff      	movs	r2, #255	; 0xff
 80071ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	8979      	ldrh	r1, [r7, #10]
 80071d8:	2300      	movs	r3, #0
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 fa3f 	bl	8007664 <I2C_TransferConfig>
 80071e6:	e00f      	b.n	8007208 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	8979      	ldrh	r1, [r7, #10]
 80071fa:	2300      	movs	r3, #0
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 fa2e 	bl	8007664 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800720c:	b29b      	uxth	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d19a      	bne.n	8007148 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 f982 	bl	8007520 <I2C_WaitOnSTOPFlagUntilTimeout>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e01a      	b.n	800725c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2220      	movs	r2, #32
 800722c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6859      	ldr	r1, [r3, #4]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	4b0b      	ldr	r3, [pc, #44]	; (8007268 <HAL_I2C_Mem_Read+0x230>)
 800723a:	400b      	ands	r3, r1
 800723c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2220      	movs	r2, #32
 8007242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	e000      	b.n	800725c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800725a:	2302      	movs	r3, #2
  }
}
 800725c:	4618      	mov	r0, r3
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	80002400 	.word	0x80002400
 8007268:	fe00e800 	.word	0xfe00e800

0800726c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800727a:	b2db      	uxtb	r3, r3
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af02      	add	r7, sp, #8
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	4608      	mov	r0, r1
 8007292:	4611      	mov	r1, r2
 8007294:	461a      	mov	r2, r3
 8007296:	4603      	mov	r3, r0
 8007298:	817b      	strh	r3, [r7, #10]
 800729a:	460b      	mov	r3, r1
 800729c:	813b      	strh	r3, [r7, #8]
 800729e:	4613      	mov	r3, r2
 80072a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80072a2:	88fb      	ldrh	r3, [r7, #6]
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	8979      	ldrh	r1, [r7, #10]
 80072a8:	4b20      	ldr	r3, [pc, #128]	; (800732c <I2C_RequestMemoryWrite+0xa4>)
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f9d7 	bl	8007664 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	69b9      	ldr	r1, [r7, #24]
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 f8f0 	bl	80074a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e02c      	b.n	8007324 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072ca:	88fb      	ldrh	r3, [r7, #6]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d105      	bne.n	80072dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072d0:	893b      	ldrh	r3, [r7, #8]
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	629a      	str	r2, [r3, #40]	; 0x28
 80072da:	e015      	b.n	8007308 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80072dc:	893b      	ldrh	r3, [r7, #8]
 80072de:	0a1b      	lsrs	r3, r3, #8
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	69b9      	ldr	r1, [r7, #24]
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 f8d6 	bl	80074a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e012      	b.n	8007324 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072fe:	893b      	ldrh	r3, [r7, #8]
 8007300:	b2da      	uxtb	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	2200      	movs	r2, #0
 8007310:	2180      	movs	r1, #128	; 0x80
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 f884 	bl	8007420 <I2C_WaitOnFlagUntilTimeout>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e000      	b.n	8007324 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	80002000 	.word	0x80002000

08007330 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af02      	add	r7, sp, #8
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	4608      	mov	r0, r1
 800733a:	4611      	mov	r1, r2
 800733c:	461a      	mov	r2, r3
 800733e:	4603      	mov	r3, r0
 8007340:	817b      	strh	r3, [r7, #10]
 8007342:	460b      	mov	r3, r1
 8007344:	813b      	strh	r3, [r7, #8]
 8007346:	4613      	mov	r3, r2
 8007348:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800734a:	88fb      	ldrh	r3, [r7, #6]
 800734c:	b2da      	uxtb	r2, r3
 800734e:	8979      	ldrh	r1, [r7, #10]
 8007350:	4b20      	ldr	r3, [pc, #128]	; (80073d4 <I2C_RequestMemoryRead+0xa4>)
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	2300      	movs	r3, #0
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 f984 	bl	8007664 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	69b9      	ldr	r1, [r7, #24]
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 f89d 	bl	80074a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e02c      	b.n	80073ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007370:	88fb      	ldrh	r3, [r7, #6]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d105      	bne.n	8007382 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007376:	893b      	ldrh	r3, [r7, #8]
 8007378:	b2da      	uxtb	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	629a      	str	r2, [r3, #40]	; 0x28
 8007380:	e015      	b.n	80073ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007382:	893b      	ldrh	r3, [r7, #8]
 8007384:	0a1b      	lsrs	r3, r3, #8
 8007386:	b29b      	uxth	r3, r3
 8007388:	b2da      	uxtb	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007390:	69fa      	ldr	r2, [r7, #28]
 8007392:	69b9      	ldr	r1, [r7, #24]
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 f883 	bl	80074a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e012      	b.n	80073ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073a4:	893b      	ldrh	r3, [r7, #8]
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2200      	movs	r2, #0
 80073b6:	2140      	movs	r1, #64	; 0x40
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 f831 	bl	8007420 <I2C_WaitOnFlagUntilTimeout>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e000      	b.n	80073ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	80002000 	.word	0x80002000

080073d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d103      	bne.n	80073f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2200      	movs	r2, #0
 80073f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b01      	cmp	r3, #1
 8007402:	d007      	beq.n	8007414 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	619a      	str	r2, [r3, #24]
  }
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	4613      	mov	r3, r2
 800742e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007430:	e022      	b.n	8007478 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d01e      	beq.n	8007478 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800743a:	f7fc fbb9 	bl	8003bb0 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d302      	bcc.n	8007450 <I2C_WaitOnFlagUntilTimeout+0x30>
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d113      	bne.n	8007478 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007454:	f043 0220 	orr.w	r2, r3, #32
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e00f      	b.n	8007498 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699a      	ldr	r2, [r3, #24]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4013      	ands	r3, r2
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	429a      	cmp	r2, r3
 8007486:	bf0c      	ite	eq
 8007488:	2301      	moveq	r3, #1
 800748a:	2300      	movne	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	461a      	mov	r2, r3
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	429a      	cmp	r2, r3
 8007494:	d0cd      	beq.n	8007432 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074ac:	e02c      	b.n	8007508 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 f870 	bl	8007598 <I2C_IsAcknowledgeFailed>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e02a      	b.n	8007518 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c8:	d01e      	beq.n	8007508 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ca:	f7fc fb71 	bl	8003bb0 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d302      	bcc.n	80074e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d113      	bne.n	8007508 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e4:	f043 0220 	orr.w	r2, r3, #32
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e007      	b.n	8007518 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b02      	cmp	r3, #2
 8007514:	d1cb      	bne.n	80074ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800752c:	e028      	b.n	8007580 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	68b9      	ldr	r1, [r7, #8]
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 f830 	bl	8007598 <I2C_IsAcknowledgeFailed>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e026      	b.n	8007590 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007542:	f7fc fb35 	bl	8003bb0 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	429a      	cmp	r2, r3
 8007550:	d302      	bcc.n	8007558 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d113      	bne.n	8007580 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755c:	f043 0220 	orr.w	r2, r3, #32
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2220      	movs	r2, #32
 8007568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e007      	b.n	8007590 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b20      	cmp	r3, #32
 800758c:	d1cf      	bne.n	800752e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f003 0310 	and.w	r3, r3, #16
 80075ae:	2b10      	cmp	r3, #16
 80075b0:	d151      	bne.n	8007656 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075b2:	e022      	b.n	80075fa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ba:	d01e      	beq.n	80075fa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075bc:	f7fc faf8 	bl	8003bb0 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d302      	bcc.n	80075d2 <I2C_IsAcknowledgeFailed+0x3a>
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d113      	bne.n	80075fa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d6:	f043 0220 	orr.w	r2, r3, #32
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e02e      	b.n	8007658 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	f003 0320 	and.w	r3, r3, #32
 8007604:	2b20      	cmp	r3, #32
 8007606:	d1d5      	bne.n	80075b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2210      	movs	r2, #16
 800760e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2220      	movs	r2, #32
 8007616:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f7ff fedd 	bl	80073d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6859      	ldr	r1, [r3, #4]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	4b0d      	ldr	r3, [pc, #52]	; (8007660 <I2C_IsAcknowledgeFailed+0xc8>)
 800762a:	400b      	ands	r3, r1
 800762c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007632:	f043 0204 	orr.w	r2, r3, #4
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2220      	movs	r2, #32
 800763e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e000      	b.n	8007658 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	fe00e800 	.word	0xfe00e800

08007664 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	607b      	str	r3, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	817b      	strh	r3, [r7, #10]
 8007672:	4613      	mov	r3, r2
 8007674:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	0d5b      	lsrs	r3, r3, #21
 8007680:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007684:	4b0d      	ldr	r3, [pc, #52]	; (80076bc <I2C_TransferConfig+0x58>)
 8007686:	430b      	orrs	r3, r1
 8007688:	43db      	mvns	r3, r3
 800768a:	ea02 0103 	and.w	r1, r2, r3
 800768e:	897b      	ldrh	r3, [r7, #10]
 8007690:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007694:	7a7b      	ldrb	r3, [r7, #9]
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800769c:	431a      	orrs	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	431a      	orrs	r2, r3
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	431a      	orrs	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80076ae:	bf00      	nop
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	03ff63ff 	.word	0x03ff63ff

080076c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d138      	bne.n	8007748 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d101      	bne.n	80076e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e032      	b.n	800774a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2224      	movs	r2, #36	; 0x24
 80076f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 0201 	bic.w	r2, r2, #1
 8007702:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007712:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6819      	ldr	r1, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0201 	orr.w	r2, r2, #1
 8007732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2220      	movs	r2, #32
 8007738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	e000      	b.n	800774a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007748:	2302      	movs	r3, #2
  }
}
 800774a:	4618      	mov	r0, r3
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007756:	b480      	push	{r7}
 8007758:	b085      	sub	sp, #20
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b20      	cmp	r3, #32
 800776a:	d139      	bne.n	80077e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007772:	2b01      	cmp	r3, #1
 8007774:	d101      	bne.n	800777a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007776:	2302      	movs	r3, #2
 8007778:	e033      	b.n	80077e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2224      	movs	r2, #36	; 0x24
 8007786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0201 	bic.w	r2, r2, #1
 8007798:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80077a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0201 	orr.w	r2, r2, #1
 80077ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077dc:	2300      	movs	r3, #0
 80077de:	e000      	b.n	80077e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077e0:	2302      	movs	r3, #2
  }
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e0af      	b.n	8007962 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d106      	bne.n	800781c <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7f9 fe18 	bl	800144c <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0201 	bic.w	r2, r2, #1
 8007832:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8007834:	2300      	movs	r3, #0
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	e00a      	b.n	8007850 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	3304      	adds	r3, #4
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	2200      	movs	r2, #0
 8007848:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	3301      	adds	r3, #1
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2b0f      	cmp	r3, #15
 8007854:	d9f1      	bls.n	800783a <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f042 0204 	orr.w	r2, r2, #4
 8007864:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	4b3f      	ldr	r3, [pc, #252]	; (800796c <HAL_LCD_Init+0x17c>)
 800786e:	4013      	ands	r3, r2
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6851      	ldr	r1, [r2, #4]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	6892      	ldr	r2, [r2, #8]
 8007878:	4311      	orrs	r1, r2
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800787e:	4311      	orrs	r1, r2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007884:	4311      	orrs	r1, r2
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	69d2      	ldr	r2, [r2, #28]
 800788a:	4311      	orrs	r1, r2
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6a12      	ldr	r2, [r2, #32]
 8007890:	4311      	orrs	r1, r2
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6992      	ldr	r2, [r2, #24]
 8007896:	4311      	orrs	r1, r2
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800789c:	4311      	orrs	r1, r2
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	6812      	ldr	r2, [r2, #0]
 80078a2:	430b      	orrs	r3, r1
 80078a4:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f94c 	bl	8007b44 <LCD_WaitForSynchro>
 80078ac:	4603      	mov	r3, r0
 80078ae:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 80078b0:	7cfb      	ldrb	r3, [r7, #19]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <HAL_LCD_Init+0xca>
  {
    return status;
 80078b6:	7cfb      	ldrb	r3, [r7, #19]
 80078b8:	e053      	b.n	8007962 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68da      	ldr	r2, [r3, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	431a      	orrs	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	431a      	orrs	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d8:	431a      	orrs	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f042 0201 	orr.w	r2, r2, #1
 80078f0:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80078f2:	f7fc f95d 	bl	8003bb0 <HAL_GetTick>
 80078f6:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80078f8:	e00c      	b.n	8007914 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80078fa:	f7fc f959 	bl	8003bb0 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007908:	d904      	bls.n	8007914 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2208      	movs	r2, #8
 800790e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e026      	b.n	8007962 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b01      	cmp	r3, #1
 8007920:	d1eb      	bne.n	80078fa <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8007922:	f7fc f945 	bl	8003bb0 <HAL_GetTick>
 8007926:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8007928:	e00c      	b.n	8007944 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800792a:	f7fc f941 	bl	8003bb0 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007938:	d904      	bls.n	8007944 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2210      	movs	r2, #16
 800793e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e00e      	b.n	8007962 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 0310 	and.w	r3, r3, #16
 800794e:	2b10      	cmp	r3, #16
 8007950:	d1eb      	bne.n	800792a <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8007960:	7cfb      	ldrb	r3, [r7, #19]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	fc00000e 	.word	0xfc00000e

08007970 <HAL_LCD_Write>:
  * @param RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007984:	75fb      	strb	r3, [r7, #23]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8007986:	7dfb      	ldrb	r3, [r7, #23]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d002      	beq.n	8007992 <HAL_LCD_Write+0x22>
 800798c:	7dfb      	ldrb	r3, [r7, #23]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d144      	bne.n	8007a1c <HAL_LCD_Write+0xac>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if (hlcd->State == HAL_LCD_STATE_READY)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b01      	cmp	r3, #1
 800799c:	d12a      	bne.n	80079f4 <HAL_LCD_Write+0x84>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <HAL_LCD_Write+0x3c>
 80079a8:	2302      	movs	r3, #2
 80079aa:	e038      	b.n	8007a1e <HAL_LCD_Write+0xae>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Get timeout */
      tickstart = HAL_GetTick();
 80079bc:	f7fc f8f8 	bl	8003bb0 <HAL_GetTick>
 80079c0:	6138      	str	r0, [r7, #16]

      /*!< Wait Until the LCD is ready */
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80079c2:	e010      	b.n	80079e6 <HAL_LCD_Write+0x76>
      {
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80079c4:	f7fc f8f4 	bl	8003bb0 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079d2:	d908      	bls.n	80079e6 <HAL_LCD_Write+0x76>
        {
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2202      	movs	r2, #2
 80079d8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e01b      	b.n	8007a1e <HAL_LCD_Write+0xae>
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d0e7      	beq.n	80079c4 <HAL_LCD_Write+0x54>
        }
      }
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	3304      	adds	r3, #4
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	401a      	ands	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6819      	ldr	r1, [r3, #0]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	3304      	adds	r3, #4
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	e000      	b.n	8007a1e <HAL_LCD_Write+0xae>
  }
  else
  {
    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
  }
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b086      	sub	sp, #24
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a38:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8007a3a:	7cbb      	ldrb	r3, [r7, #18]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d002      	beq.n	8007a46 <HAL_LCD_Clear+0x20>
 8007a40:	7cbb      	ldrb	r3, [r7, #18]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d140      	bne.n	8007ac8 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_LCD_Clear+0x2e>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e03a      	b.n	8007aca <HAL_LCD_Clear+0xa4>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8007a64:	f7fc f8a4 	bl	8003bb0 <HAL_GetTick>
 8007a68:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8007a6a:	e010      	b.n	8007a8e <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8007a6c:	f7fc f8a0 	bl	8003bb0 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a7a:	d908      	bls.n	8007a8e <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e01d      	b.n	8007aca <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b04      	cmp	r3, #4
 8007a9a:	d0e7      	beq.n	8007a6c <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	e00a      	b.n	8007ab8 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	2200      	movs	r2, #0
 8007ab0:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	617b      	str	r3, [r7, #20]
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2b0f      	cmp	r3, #15
 8007abc:	d9f1      	bls.n	8007aa2 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f807 	bl	8007ad2 <HAL_LCD_UpdateDisplayRequest>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8007ac8:	7cfb      	ldrb	r3, [r7, #19]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2208      	movs	r2, #8
 8007ae0:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f042 0204 	orr.w	r2, r2, #4
 8007af0:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8007af2:	f7fc f85d 	bl	8003bb0 <HAL_GetTick>
 8007af6:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8007af8:	e010      	b.n	8007b1c <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8007afa:	f7fc f859 	bl	8003bb0 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b08:	d908      	bls.n	8007b1c <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2204      	movs	r2, #4
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e00f      	b.n	8007b3c <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d1e7      	bne.n	8007afa <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8007b4c:	f7fc f830 	bl	8003bb0 <HAL_GetTick>
 8007b50:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8007b52:	e00c      	b.n	8007b6e <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8007b54:	f7fc f82c 	bl	8003bb0 <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b62:	d904      	bls.n	8007b6e <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e007      	b.n	8007b7e <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b20      	cmp	r3, #32
 8007b7a:	d1eb      	bne.n	8007b54 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b8c:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a04      	ldr	r2, [pc, #16]	; (8007ba4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b96:	6013      	str	r3, [r2, #0]
}
 8007b98:	bf00      	nop
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	40007000 	.word	0x40007000

08007ba8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007bac:	4b04      	ldr	r3, [pc, #16]	; (8007bc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40007000 	.word	0x40007000

08007bc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd2:	d130      	bne.n	8007c36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007bd4:	4b23      	ldr	r3, [pc, #140]	; (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007be0:	d038      	beq.n	8007c54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007be2:	4b20      	ldr	r3, [pc, #128]	; (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007bea:	4a1e      	ldr	r2, [pc, #120]	; (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007bec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007bf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007bf2:	4b1d      	ldr	r3, [pc, #116]	; (8007c68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2232      	movs	r2, #50	; 0x32
 8007bf8:	fb02 f303 	mul.w	r3, r2, r3
 8007bfc:	4a1b      	ldr	r2, [pc, #108]	; (8007c6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007c02:	0c9b      	lsrs	r3, r3, #18
 8007c04:	3301      	adds	r3, #1
 8007c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c08:	e002      	b.n	8007c10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c10:	4b14      	ldr	r3, [pc, #80]	; (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c1c:	d102      	bne.n	8007c24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1f2      	bne.n	8007c0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c24:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c30:	d110      	bne.n	8007c54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e00f      	b.n	8007c56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c36:	4b0b      	ldr	r3, [pc, #44]	; (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c42:	d007      	beq.n	8007c54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c44:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007c4c:	4a05      	ldr	r2, [pc, #20]	; (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	40007000 	.word	0x40007000
 8007c68:	20000058 	.word	0x20000058
 8007c6c:	431bde83 	.word	0x431bde83

08007c70 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007c74:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	4a04      	ldr	r2, [pc, #16]	; (8007c8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8007c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c7e:	6053      	str	r3, [r2, #4]
}
 8007c80:	bf00      	nop
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	40007000 	.word	0x40007000

08007c90 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007c90:	b480      	push	{r7}
 8007c92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007c94:	4b05      	ldr	r3, [pc, #20]	; (8007cac <HAL_PWREx_EnableVddIO2+0x1c>)
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	4a04      	ldr	r2, [pc, #16]	; (8007cac <HAL_PWREx_EnableVddIO2+0x1c>)
 8007c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c9e:	6053      	str	r3, [r2, #4]
}
 8007ca0:	bf00      	nop
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	40007000 	.word	0x40007000

08007cb0 <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007cb4:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <HAL_PWREx_DisableVddIO2+0x1c>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	4a04      	ldr	r2, [pc, #16]	; (8007ccc <HAL_PWREx_DisableVddIO2+0x1c>)
 8007cba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cbe:	6053      	str	r3, [r2, #4]
}
 8007cc0:	bf00      	nop
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	40007000 	.word	0x40007000

08007cd0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af02      	add	r7, sp, #8
 8007cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007cd8:	f7fb ff6a 	bl	8003bb0 <HAL_GetTick>
 8007cdc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e063      	b.n	8007db0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10b      	bne.n	8007d0c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7f9 ffc5 	bl	8001c8c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007d02:	f241 3188 	movw	r1, #5000	; 0x1388
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fd64 	bl	80087d4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	021a      	lsls	r2, r3, #8
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2120      	movs	r1, #32
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fd8f 	bl	8008856 <QSPI_WaitFlagStateUntilTimeout>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007d3c:	7afb      	ldrb	r3, [r7, #11]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d131      	bne.n	8007da6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d4c:	f023 0310 	bic.w	r3, r3, #16
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6852      	ldr	r2, [r2, #4]
 8007d54:	0611      	lsls	r1, r2, #24
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	68d2      	ldr	r2, [r2, #12]
 8007d5a:	4311      	orrs	r1, r2
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	6812      	ldr	r2, [r2, #0]
 8007d60:	430b      	orrs	r3, r1
 8007d62:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	4b13      	ldr	r3, [pc, #76]	; (8007db8 <HAL_QSPI_Init+0xe8>)
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	6912      	ldr	r2, [r2, #16]
 8007d72:	0411      	lsls	r1, r2, #16
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6952      	ldr	r2, [r2, #20]
 8007d78:	4311      	orrs	r1, r2
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6992      	ldr	r2, [r2, #24]
 8007d7e:	4311      	orrs	r1, r2
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	6812      	ldr	r2, [r2, #0]
 8007d84:	430b      	orrs	r3, r1
 8007d86:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f042 0201 	orr.w	r2, r2, #1
 8007d96:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8007dae:	7afb      	ldrb	r3, [r7, #11]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	ffe0f8fe 	.word	0xffe0f8fe

08007dbc <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e016      	b.n	8007dfc <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0201 	bic.w	r2, r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7f9 ffa0 	bl	8001d24 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	f003 0304 	and.w	r3, r3, #4
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d064      	beq.n	8007ef0 <HAL_QSPI_IRQHandler+0xec>
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d05f      	beq.n	8007ef0 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3320      	adds	r3, #32
 8007e36:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b12      	cmp	r3, #18
 8007e42:	d125      	bne.n	8007e90 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8007e44:	e01c      	b.n	8007e80 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00f      	beq.n	8007e6e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	781a      	ldrb	r2, [r3, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	61da      	str	r2, [r3, #28]
          hqspi->TxXferCount--;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	1e5a      	subs	r2, r3, #1
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	625a      	str	r2, [r3, #36]	; 0x24
 8007e6c:	e008      	b.n	8007e80 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e7c:	601a      	str	r2, [r3, #0]
          break;
 8007e7e:	e033      	b.n	8007ee8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f003 0304 	and.w	r3, r3, #4
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1db      	bne.n	8007e46 <HAL_QSPI_IRQHandler+0x42>
 8007e8e:	e02b      	b.n	8007ee8 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b22      	cmp	r3, #34	; 0x22
 8007e9a:	d125      	bne.n	8007ee8 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8007e9c:	e01d      	b.n	8007eda <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d010      	beq.n	8007ec8 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	7812      	ldrb	r2, [r2, #0]
 8007eae:	b2d2      	uxtb	r2, r2
 8007eb0:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	629a      	str	r2, [r3, #40]	; 0x28
          hqspi->RxXferCount--;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec0:	1e5a      	subs	r2, r3, #1
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8007ec6:	e008      	b.n	8007eda <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ed6:	601a      	str	r2, [r3, #0]
          break;
 8007ed8:	e006      	b.n	8007ee8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1da      	bne.n	8007e9e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fb8b 	bl	8008604 <HAL_QSPI_FifoThresholdCallback>
 8007eee:	e142      	b.n	8008176 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 80b6 	beq.w	8008068 <HAL_QSPI_IRQHandler+0x264>
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 80b0 	beq.w	8008068 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8007f1e:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b12      	cmp	r3, #18
 8007f2a:	d123      	bne.n	8007f74 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0304 	and.w	r3, r3, #4
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d011      	beq.n	8007f5e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0204 	bic.w	r2, r2, #4
 8007f48:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0201 	bic.w	r2, r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]
      }

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fbdc 	bl	800871c <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fb3f 	bl	80085f0 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007f72:	e0fd      	b.n	8008170 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b22      	cmp	r3, #34	; 0x22
 8007f7e:	d146      	bne.n	800800e <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0304 	and.w	r3, r3, #4
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d012      	beq.n	8007fb4 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 0204 	bic.w	r2, r2, #4
 8007f9c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0201 	bic.w	r2, r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	e021      	b.n	8007ff8 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3320      	adds	r3, #32
 8007fba:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8007fbc:	e013      	b.n	8007fe6 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d017      	beq.n	8007ff6 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	7812      	ldrb	r2, [r2, #0]
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	629a      	str	r2, [r3, #40]	; 0x28
            hqspi->RxXferCount--;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	1e5a      	subs	r2, r3, #1
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	631a      	str	r2, [r3, #48]	; 0x30
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e4      	bne.n	8007fbe <HAL_QSPI_IRQHandler+0x1ba>
 8007ff4:	e000      	b.n	8007ff8 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8007ff6:	bf00      	nop
        }
      }

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fb8f 	bl	800871c <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fae8 	bl	80085dc <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800800c:	e0b0      	b.n	8008170 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b02      	cmp	r3, #2
 8008018:	d107      	bne.n	800802a <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fad0 	bl	80085c8 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008028:	e0a2      	b.n	8008170 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b08      	cmp	r3, #8
 8008034:	f040 809c 	bne.w	8008170 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695a      	ldr	r2, [r3, #20]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008046:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008054:	2b00      	cmp	r3, #0
 8008056:	d103      	bne.n	8008060 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 faab 	bl	80085b4 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800805e:	e087      	b.n	8008170 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fa9d 	bl	80085a0 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008066:	e083      	b.n	8008170 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f003 0308 	and.w	r3, r3, #8
 800806e:	2b00      	cmp	r3, #0
 8008070:	d01f      	beq.n	80080b2 <HAL_QSPI_IRQHandler+0x2ae>
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01a      	beq.n	80080b2 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2208      	movs	r2, #8
 8008082:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00b      	beq.n	80080aa <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80080a0:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fab4 	bl	8008618 <HAL_QSPI_StatusMatchCallback>
 80080b0:	e061      	b.n	8008176 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d047      	beq.n	800814c <HAL_QSPI_IRQHandler+0x348>
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d042      	beq.n	800814c <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2201      	movs	r2, #1
 80080cc:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80080dc:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e2:	f043 0202 	orr.w	r2, r3, #2
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	63da      	str	r2, [r3, #60]	; 0x3c

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d021      	beq.n	800813c <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 0204 	bic.w	r2, r2, #4
 8008106:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810c:	4a1c      	ldr	r2, [pc, #112]	; (8008180 <HAL_QSPI_IRQHandler+0x37c>)
 800810e:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008114:	4618      	mov	r0, r3
 8008116:	f7fc fd29 	bl	8004b6c <HAL_DMA_Abort_IT>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d029      	beq.n	8008174 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008124:	f043 0204 	orr.w	r2, r3, #4
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fa33 	bl	80085a0 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800813a:	e01b      	b.n	8008174 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fa2b 	bl	80085a0 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800814a:	e013      	b.n	8008174 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f003 0310 	and.w	r3, r3, #16
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00f      	beq.n	8008176 <HAL_QSPI_IRQHandler+0x372>
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00a      	beq.n	8008176 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2210      	movs	r2, #16
 8008166:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fa5f 	bl	800862c <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800816e:	e002      	b.n	8008176 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008170:	bf00      	nop
 8008172:	e000      	b.n	8008176 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008174:	bf00      	nop
}
 8008176:	bf00      	nop
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	080087f1 	.word	0x080087f1

08008184 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af02      	add	r7, sp, #8
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008190:	f7fb fd0e 	bl	8003bb0 <HAL_GetTick>
 8008194:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d101      	bne.n	80081a6 <HAL_QSPI_Command+0x22>
 80081a2:	2302      	movs	r3, #2
 80081a4:	e048      	b.n	8008238 <HAL_QSPI_Command+0xb4>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d137      	bne.n	800822a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2200      	movs	r2, #0
 80081d0:	2120      	movs	r1, #32
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 fb3f 	bl	8008856 <QSPI_WaitFlagStateUntilTimeout>
 80081d8:	4603      	mov	r3, r0
 80081da:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d125      	bne.n	800822e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80081e2:	2200      	movs	r2, #0
 80081e4:	68b9      	ldr	r1, [r7, #8]
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 fb6c 	bl	80088c4 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d115      	bne.n	8008220 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	2201      	movs	r2, #1
 80081fc:	2102      	movs	r1, #2
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 fb29 	bl	8008856 <QSPI_WaitFlagStateUntilTimeout>
 8008204:	4603      	mov	r3, r0
 8008206:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8008208:	7dfb      	ldrb	r3, [r7, #23]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10f      	bne.n	800822e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2202      	movs	r2, #2
 8008214:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800821e:	e006      	b.n	800822e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008228:	e001      	b.n	800822e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800822a:	2302      	movs	r3, #2
 800822c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8008236:	7dfb      	ldrb	r3, [r7, #23]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08a      	sub	sp, #40	; 0x28
 8008244:	af02      	add	r7, sp, #8
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8008250:	f7fb fcae 	bl	8003bb0 <HAL_GetTick>
 8008254:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3320      	adds	r3, #32
 800825c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_QSPI_Transmit+0x2e>
 800826a:	2302      	movs	r3, #2
 800826c:	e07b      	b.n	8008366 <HAL_QSPI_Transmit+0x126>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b01      	cmp	r3, #1
 8008280:	d16a      	bne.n	8008358 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d05b      	beq.n	8008346 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2212      	movs	r2, #18
 8008292:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	695a      	ldr	r2, [r3, #20]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80082c2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80082c4:	e01b      	b.n	80082fe <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	2201      	movs	r2, #1
 80082ce:	2104      	movs	r1, #4
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 fac0 	bl	8008856 <QSPI_WaitFlagStateUntilTimeout>
 80082d6:	4603      	mov	r3, r0
 80082d8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80082da:	7ffb      	ldrb	r3, [r7, #31]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d113      	bne.n	8008308 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	69db      	ldr	r3, [r3, #28]
 80082e4:	781a      	ldrb	r2, [r3, #0]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	1e5a      	subs	r2, r3, #1
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1df      	bne.n	80082c6 <HAL_QSPI_Transmit+0x86>
 8008306:	e000      	b.n	800830a <HAL_QSPI_Transmit+0xca>
          break;
 8008308:	bf00      	nop
      }

      if (status == HAL_OK)
 800830a:	7ffb      	ldrb	r3, [r7, #31]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d115      	bne.n	800833c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	2201      	movs	r2, #1
 8008318:	2102      	movs	r1, #2
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 fa9b 	bl	8008856 <QSPI_WaitFlagStateUntilTimeout>
 8008320:	4603      	mov	r3, r0
 8008322:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8008324:	7ffb      	ldrb	r3, [r7, #31]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d108      	bne.n	800833c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2202      	movs	r2, #2
 8008330:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f000 f984 	bl	8008640 <HAL_QSPI_Abort>
 8008338:	4603      	mov	r3, r0
 800833a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008344:	e00a      	b.n	800835c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834a:	f043 0208 	orr.w	r2, r3, #8
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	77fb      	strb	r3, [r7, #31]
 8008356:	e001      	b.n	800835c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8008358:	2302      	movs	r3, #2
 800835a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8008364:	7ffb      	ldrb	r3, [r7, #31]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3720      	adds	r7, #32
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b08a      	sub	sp, #40	; 0x28
 8008372:	af02      	add	r7, sp, #8
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800837e:	f7fb fc17 	bl	8003bb0 <HAL_GetTick>
 8008382:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3320      	adds	r3, #32
 8008392:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_QSPI_Receive+0x36>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e082      	b.n	80084aa <HAL_QSPI_Receive+0x13c>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d171      	bne.n	800849c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d062      	beq.n	800848a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2222      	movs	r2, #34	; 0x22
 80083c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	1c5a      	adds	r2, r3, #1
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80083fc:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8008406:	e01c      	b.n	8008442 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	2201      	movs	r2, #1
 8008410:	2106      	movs	r1, #6
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 fa1f 	bl	8008856 <QSPI_WaitFlagStateUntilTimeout>
 8008418:	4603      	mov	r3, r0
 800841a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800841c:	7ffb      	ldrb	r3, [r7, #31]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d114      	bne.n	800844c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	7812      	ldrb	r2, [r2, #0]
 800842a:	b2d2      	uxtb	r2, r2
 800842c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843c:	1e5a      	subs	r2, r3, #1
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1de      	bne.n	8008408 <HAL_QSPI_Receive+0x9a>
 800844a:	e000      	b.n	800844e <HAL_QSPI_Receive+0xe0>
          break;
 800844c:	bf00      	nop
      }

      if (status == HAL_OK)
 800844e:	7ffb      	ldrb	r3, [r7, #31]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d115      	bne.n	8008480 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	2201      	movs	r2, #1
 800845c:	2102      	movs	r1, #2
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 f9f9 	bl	8008856 <QSPI_WaitFlagStateUntilTimeout>
 8008464:	4603      	mov	r3, r0
 8008466:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8008468:	7ffb      	ldrb	r3, [r7, #31]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d108      	bne.n	8008480 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2202      	movs	r2, #2
 8008474:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 f8e2 	bl	8008640 <HAL_QSPI_Abort>
 800847c:	4603      	mov	r3, r0
 800847e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008488:	e00a      	b.n	80084a0 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848e:	f043 0208 	orr.w	r2, r3, #8
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	77fb      	strb	r3, [r7, #31]
 800849a:	e001      	b.n	80084a0 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800849c:	2302      	movs	r3, #2
 800849e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80084a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3720      	adds	r7, #32
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b088      	sub	sp, #32
 80084b6:	af02      	add	r7, sp, #8
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
 80084be:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80084c0:	f7fb fb76 	bl	8003bb0 <HAL_GetTick>
 80084c4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d101      	bne.n	80084d6 <HAL_QSPI_AutoPolling+0x24>
 80084d2:	2302      	movs	r3, #2
 80084d4:	e060      	b.n	8008598 <HAL_QSPI_AutoPolling+0xe6>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d14f      	bne.n	800858a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2242      	movs	r2, #66	; 0x42
 80084f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	2200      	movs	r2, #0
 8008500:	2120      	movs	r1, #32
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f000 f9a7 	bl	8008856 <QSPI_WaitFlagStateUntilTimeout>
 8008508:	4603      	mov	r3, r0
 800850a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800850c:	7dfb      	ldrb	r3, [r7, #23]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d13d      	bne.n	800858e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	6812      	ldr	r2, [r2, #0]
 800851a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6852      	ldr	r2, [r2, #4]
 8008524:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	6892      	ldr	r2, [r2, #8]
 800852e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	431a      	orrs	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008548:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008552:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008556:	68b9      	ldr	r1, [r7, #8]
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 f9b3 	bl	80088c4 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2201      	movs	r2, #1
 8008566:	2108      	movs	r1, #8
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 f974 	bl	8008856 <QSPI_WaitFlagStateUntilTimeout>
 800856e:	4603      	mov	r3, r0
 8008570:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10a      	bne.n	800858e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2208      	movs	r2, #8
 800857e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008588:	e001      	b.n	800858e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800858a:	2302      	movs	r3, #2
 800858c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8008596:	7dfb      	ldrb	r3, [r7, #23]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af02      	add	r7, sp, #8
 8008646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800864c:	f7fb fab0 	bl	8003bb0 <HAL_GetTick>
 8008650:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008658:	b2db      	uxtb	r3, r3
 800865a:	f003 0302 	and.w	r3, r3, #2
 800865e:	2b00      	cmp	r3, #0
 8008660:	d056      	beq.n	8008710 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0304 	and.w	r3, r3, #4
 8008674:	2b00      	cmp	r3, #0
 8008676:	d017      	beq.n	80086a8 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 0204 	bic.w	r2, r2, #4
 8008686:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868c:	4618      	mov	r0, r3
 800868e:	f7fc fa2f 	bl	8004af0 <HAL_DMA_Abort>
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a0:	f043 0204 	orr.w	r2, r3, #4
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f042 0202 	orr.w	r2, r2, #2
 80086b6:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2201      	movs	r2, #1
 80086c2:	2102      	movs	r1, #2
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f8c6 	bl	8008856 <QSPI_WaitFlagStateUntilTimeout>
 80086ca:	4603      	mov	r3, r0
 80086cc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10e      	bne.n	80086f2 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2202      	movs	r2, #2
 80086da:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2200      	movs	r2, #0
 80086e6:	2120      	movs	r1, #32
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f8b4 	bl	8008856 <QSPI_WaitFlagStateUntilTimeout>
 80086ee:	4603      	mov	r3, r0
 80086f0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10b      	bne.n	8008710 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	695a      	ldr	r2, [r3, #20]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008706:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8008710:	7bfb      	ldrb	r3, [r7, #15]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800872e:	b2db      	uxtb	r3, r3
 8008730:	f003 0302 	and.w	r3, r3, #2
 8008734:	2b00      	cmp	r3, #0
 8008736:	d046      	beq.n	80087c6 <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2208      	movs	r2, #8
 8008744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8008756:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0304 	and.w	r3, r3, #4
 8008762:	2b00      	cmp	r3, #0
 8008764:	d01b      	beq.n	800879e <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f022 0204 	bic.w	r2, r2, #4
 8008774:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800877a:	4a15      	ldr	r2, [pc, #84]	; (80087d0 <HAL_QSPI_Abort_IT+0xb4>)
 800877c:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008782:	4618      	mov	r0, r3
 8008784:	f7fc f9f2 	bl	8004b6c <HAL_DMA_Abort_IT>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d01b      	beq.n	80087c6 <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7ff ff0c 	bl	80085b4 <HAL_QSPI_AbortCpltCallback>
 800879c:	e013      	b.n	80087c6 <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2202      	movs	r2, #2
 80087a4:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80087b4:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f042 0202 	orr.w	r2, r2, #2
 80087c4:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	080087f1 	.word	0x080087f1

080087d4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fc:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	631a      	str	r2, [r3, #48]	; 0x30
  hqspi->TxXferCount = 0U;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	625a      	str	r2, [r3, #36]	; 0x24

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b08      	cmp	r3, #8
 8008814:	d114      	bne.n	8008840 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2202      	movs	r2, #2
 800881c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800882c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f042 0202 	orr.w	r2, r2, #2
 800883c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800883e:	e006      	b.n	800884e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    HAL_QSPI_ErrorCallback(hqspi);
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f7ff fea9 	bl	80085a0 <HAL_QSPI_ErrorCallback>
}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	603b      	str	r3, [r7, #0]
 8008862:	4613      	mov	r3, r2
 8008864:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008866:	e01a      	b.n	800889e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886e:	d016      	beq.n	800889e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008870:	f7fb f99e 	bl	8003bb0 <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	429a      	cmp	r2, r3
 800887e:	d302      	bcc.n	8008886 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10b      	bne.n	800889e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2204      	movs	r2, #4
 800888a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008892:	f043 0201 	orr.w	r2, r3, #1
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e00e      	b.n	80088bc <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4013      	ands	r3, r2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	bf14      	ite	ne
 80088ac:	2301      	movne	r3, #1
 80088ae:	2300      	moveq	r3, #0
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	461a      	mov	r2, r3
 80088b4:	79fb      	ldrb	r3, [r7, #7]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d1d6      	bne.n	8008868 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d009      	beq.n	80088ec <QSPI_Config+0x28>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80088de:	d005      	beq.n	80088ec <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3a01      	subs	r2, #1
 80088ea:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 80b9 	beq.w	8008a68 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d05f      	beq.n	80089be <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	6892      	ldr	r2, [r2, #8]
 8008906:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d031      	beq.n	8008974 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008918:	431a      	orrs	r2, r3
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800891e:	431a      	orrs	r2, r3
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	431a      	orrs	r2, r3
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	049b      	lsls	r3, r3, #18
 800892c:	431a      	orrs	r2, r3
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	431a      	orrs	r2, r3
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	431a      	orrs	r2, r3
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	431a      	orrs	r2, r3
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	431a      	orrs	r2, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	431a      	orrs	r2, r3
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	ea42 0103 	orr.w	r1, r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	430a      	orrs	r2, r1
 800895c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008964:	f000 812e 	beq.w	8008bc4 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	6852      	ldr	r2, [r2, #4]
 8008970:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008972:	e127      	b.n	8008bc4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897c:	431a      	orrs	r2, r3
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008982:	431a      	orrs	r2, r3
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008988:	431a      	orrs	r2, r3
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	049b      	lsls	r3, r3, #18
 8008990:	431a      	orrs	r2, r3
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	431a      	orrs	r2, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	6a1b      	ldr	r3, [r3, #32]
 800899c:	431a      	orrs	r2, r3
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	431a      	orrs	r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	431a      	orrs	r2, r3
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	ea42 0103 	orr.w	r1, r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	430a      	orrs	r2, r1
 80089ba:	615a      	str	r2, [r3, #20]
}
 80089bc:	e102      	b.n	8008bc4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d02e      	beq.n	8008a24 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	431a      	orrs	r2, r3
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d4:	431a      	orrs	r2, r3
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	431a      	orrs	r2, r3
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	049b      	lsls	r3, r3, #18
 80089e2:	431a      	orrs	r2, r3
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	431a      	orrs	r2, r3
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	431a      	orrs	r2, r3
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	69db      	ldr	r3, [r3, #28]
 80089f4:	431a      	orrs	r2, r3
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	431a      	orrs	r2, r3
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	ea42 0103 	orr.w	r1, r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008a14:	f000 80d6 	beq.w	8008bc4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	6852      	ldr	r2, [r2, #4]
 8008a20:	619a      	str	r2, [r3, #24]
}
 8008a22:	e0cf      	b.n	8008bc4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a32:	431a      	orrs	r2, r3
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	431a      	orrs	r2, r3
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	049b      	lsls	r3, r3, #18
 8008a40:	431a      	orrs	r2, r3
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	431a      	orrs	r2, r3
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	69db      	ldr	r3, [r3, #28]
 8008a4c:	431a      	orrs	r2, r3
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	431a      	orrs	r2, r3
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	ea42 0103 	orr.w	r1, r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	430a      	orrs	r2, r1
 8008a64:	615a      	str	r2, [r3, #20]
}
 8008a66:	e0ad      	b.n	8008bc4 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d058      	beq.n	8008b22 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	6892      	ldr	r2, [r2, #8]
 8008a78:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d02d      	beq.n	8008ade <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a90:	431a      	orrs	r2, r3
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a96:	431a      	orrs	r2, r3
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	695b      	ldr	r3, [r3, #20]
 8008a9c:	049b      	lsls	r3, r3, #18
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	431a      	orrs	r2, r3
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	ea42 0103 	orr.w	r1, r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008ad0:	d078      	beq.n	8008bc4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	6852      	ldr	r2, [r2, #4]
 8008ada:	619a      	str	r2, [r3, #24]
}
 8008adc:	e072      	b.n	8008bc4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aec:	431a      	orrs	r2, r3
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af2:	431a      	orrs	r2, r3
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	049b      	lsls	r3, r3, #18
 8008afa:	431a      	orrs	r2, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	431a      	orrs	r2, r3
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	431a      	orrs	r2, r3
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	69db      	ldr	r3, [r3, #28]
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	ea42 0103 	orr.w	r1, r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	615a      	str	r2, [r3, #20]
}
 8008b20:	e050      	b.n	8008bc4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d02a      	beq.n	8008b80 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b32:	431a      	orrs	r2, r3
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	049b      	lsls	r3, r3, #18
 8008b46:	431a      	orrs	r2, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	6a1b      	ldr	r3, [r3, #32]
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	431a      	orrs	r2, r3
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	431a      	orrs	r2, r3
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	ea42 0103 	orr.w	r1, r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	430a      	orrs	r2, r1
 8008b6a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008b72:	d027      	beq.n	8008bc4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	6852      	ldr	r2, [r2, #4]
 8008b7c:	619a      	str	r2, [r3, #24]
}
 8008b7e:	e021      	b.n	8008bc4 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d01d      	beq.n	8008bc4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b90:	431a      	orrs	r2, r3
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b96:	431a      	orrs	r2, r3
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9c:	431a      	orrs	r2, r3
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	049b      	lsls	r3, r3, #18
 8008ba4:	431a      	orrs	r2, r3
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	431a      	orrs	r2, r3
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	ea42 0103 	orr.w	r1, r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	430a      	orrs	r2, r1
 8008bc2:	615a      	str	r2, [r3, #20]
}
 8008bc4:	bf00      	nop
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e3d4      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008be2:	4ba1      	ldr	r3, [pc, #644]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f003 030c 	and.w	r3, r3, #12
 8008bea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bec:	4b9e      	ldr	r3, [pc, #632]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f003 0303 	and.w	r3, r3, #3
 8008bf4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0310 	and.w	r3, r3, #16
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 80e4 	beq.w	8008dcc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d007      	beq.n	8008c1a <HAL_RCC_OscConfig+0x4a>
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	2b0c      	cmp	r3, #12
 8008c0e:	f040 808b 	bne.w	8008d28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	f040 8087 	bne.w	8008d28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008c1a:	4b93      	ldr	r3, [pc, #588]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d005      	beq.n	8008c32 <HAL_RCC_OscConfig+0x62>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e3ac      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a1a      	ldr	r2, [r3, #32]
 8008c36:	4b8c      	ldr	r3, [pc, #560]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0308 	and.w	r3, r3, #8
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d004      	beq.n	8008c4c <HAL_RCC_OscConfig+0x7c>
 8008c42:	4b89      	ldr	r3, [pc, #548]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c4a:	e005      	b.n	8008c58 <HAL_RCC_OscConfig+0x88>
 8008c4c:	4b86      	ldr	r3, [pc, #536]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c52:	091b      	lsrs	r3, r3, #4
 8008c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d223      	bcs.n	8008ca4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 fd3f 	bl	80096e4 <RCC_SetFlashLatencyFromMSIRange>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e38d      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008c70:	4b7d      	ldr	r3, [pc, #500]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a7c      	ldr	r2, [pc, #496]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008c76:	f043 0308 	orr.w	r3, r3, #8
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	4b7a      	ldr	r3, [pc, #488]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a1b      	ldr	r3, [r3, #32]
 8008c88:	4977      	ldr	r1, [pc, #476]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008c8e:	4b76      	ldr	r3, [pc, #472]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	69db      	ldr	r3, [r3, #28]
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	4972      	ldr	r1, [pc, #456]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	604b      	str	r3, [r1, #4]
 8008ca2:	e025      	b.n	8008cf0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ca4:	4b70      	ldr	r3, [pc, #448]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a6f      	ldr	r2, [pc, #444]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008caa:	f043 0308 	orr.w	r3, r3, #8
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	4b6d      	ldr	r3, [pc, #436]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a1b      	ldr	r3, [r3, #32]
 8008cbc:	496a      	ldr	r1, [pc, #424]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008cc2:	4b69      	ldr	r3, [pc, #420]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	021b      	lsls	r3, r3, #8
 8008cd0:	4965      	ldr	r1, [pc, #404]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d109      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a1b      	ldr	r3, [r3, #32]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 fcff 	bl	80096e4 <RCC_SetFlashLatencyFromMSIRange>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e34d      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008cf0:	f000 fc36 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 8008cf4:	4601      	mov	r1, r0
 8008cf6:	4b5c      	ldr	r3, [pc, #368]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	091b      	lsrs	r3, r3, #4
 8008cfc:	f003 030f 	and.w	r3, r3, #15
 8008d00:	4a5a      	ldr	r2, [pc, #360]	; (8008e6c <HAL_RCC_OscConfig+0x29c>)
 8008d02:	5cd3      	ldrb	r3, [r2, r3]
 8008d04:	f003 031f 	and.w	r3, r3, #31
 8008d08:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0c:	4a58      	ldr	r2, [pc, #352]	; (8008e70 <HAL_RCC_OscConfig+0x2a0>)
 8008d0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008d10:	4b58      	ldr	r3, [pc, #352]	; (8008e74 <HAL_RCC_OscConfig+0x2a4>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fa fefb 	bl	8003b10 <HAL_InitTick>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d052      	beq.n	8008dca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
 8008d26:	e331      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d032      	beq.n	8008d96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008d30:	4b4d      	ldr	r3, [pc, #308]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a4c      	ldr	r2, [pc, #304]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008d36:	f043 0301 	orr.w	r3, r3, #1
 8008d3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008d3c:	f7fa ff38 	bl	8003bb0 <HAL_GetTick>
 8008d40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008d42:	e008      	b.n	8008d56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008d44:	f7fa ff34 	bl	8003bb0 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d901      	bls.n	8008d56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e31a      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008d56:	4b44      	ldr	r3, [pc, #272]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0302 	and.w	r3, r3, #2
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0f0      	beq.n	8008d44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d62:	4b41      	ldr	r3, [pc, #260]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a40      	ldr	r2, [pc, #256]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008d68:	f043 0308 	orr.w	r3, r3, #8
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	4b3e      	ldr	r3, [pc, #248]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	493b      	ldr	r1, [pc, #236]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d80:	4b39      	ldr	r3, [pc, #228]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	021b      	lsls	r3, r3, #8
 8008d8e:	4936      	ldr	r1, [pc, #216]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	604b      	str	r3, [r1, #4]
 8008d94:	e01a      	b.n	8008dcc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008d96:	4b34      	ldr	r3, [pc, #208]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a33      	ldr	r2, [pc, #204]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008d9c:	f023 0301 	bic.w	r3, r3, #1
 8008da0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008da2:	f7fa ff05 	bl	8003bb0 <HAL_GetTick>
 8008da6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008da8:	e008      	b.n	8008dbc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008daa:	f7fa ff01 	bl	8003bb0 <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d901      	bls.n	8008dbc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e2e7      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008dbc:	4b2a      	ldr	r3, [pc, #168]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0302 	and.w	r3, r3, #2
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1f0      	bne.n	8008daa <HAL_RCC_OscConfig+0x1da>
 8008dc8:	e000      	b.n	8008dcc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008dca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d074      	beq.n	8008ec2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	2b08      	cmp	r3, #8
 8008ddc:	d005      	beq.n	8008dea <HAL_RCC_OscConfig+0x21a>
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	2b0c      	cmp	r3, #12
 8008de2:	d10e      	bne.n	8008e02 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d10b      	bne.n	8008e02 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dea:	4b1f      	ldr	r3, [pc, #124]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d064      	beq.n	8008ec0 <HAL_RCC_OscConfig+0x2f0>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d160      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e2c4      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e0a:	d106      	bne.n	8008e1a <HAL_RCC_OscConfig+0x24a>
 8008e0c:	4b16      	ldr	r3, [pc, #88]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a15      	ldr	r2, [pc, #84]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e16:	6013      	str	r3, [r2, #0]
 8008e18:	e01d      	b.n	8008e56 <HAL_RCC_OscConfig+0x286>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e22:	d10c      	bne.n	8008e3e <HAL_RCC_OscConfig+0x26e>
 8008e24:	4b10      	ldr	r3, [pc, #64]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a0f      	ldr	r2, [pc, #60]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008e2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	4b0d      	ldr	r3, [pc, #52]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a0c      	ldr	r2, [pc, #48]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e3a:	6013      	str	r3, [r2, #0]
 8008e3c:	e00b      	b.n	8008e56 <HAL_RCC_OscConfig+0x286>
 8008e3e:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a09      	ldr	r2, [pc, #36]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a06      	ldr	r2, [pc, #24]	; (8008e68 <HAL_RCC_OscConfig+0x298>)
 8008e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d01c      	beq.n	8008e98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e5e:	f7fa fea7 	bl	8003bb0 <HAL_GetTick>
 8008e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e64:	e011      	b.n	8008e8a <HAL_RCC_OscConfig+0x2ba>
 8008e66:	bf00      	nop
 8008e68:	40021000 	.word	0x40021000
 8008e6c:	0800ed20 	.word	0x0800ed20
 8008e70:	20000058 	.word	0x20000058
 8008e74:	2000005c 	.word	0x2000005c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e78:	f7fa fe9a 	bl	8003bb0 <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	2b64      	cmp	r3, #100	; 0x64
 8008e84:	d901      	bls.n	8008e8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e280      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e8a:	4baf      	ldr	r3, [pc, #700]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0f0      	beq.n	8008e78 <HAL_RCC_OscConfig+0x2a8>
 8008e96:	e014      	b.n	8008ec2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e98:	f7fa fe8a 	bl	8003bb0 <HAL_GetTick>
 8008e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e9e:	e008      	b.n	8008eb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ea0:	f7fa fe86 	bl	8003bb0 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	2b64      	cmp	r3, #100	; 0x64
 8008eac:	d901      	bls.n	8008eb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e26c      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008eb2:	4ba5      	ldr	r3, [pc, #660]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1f0      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x2d0>
 8008ebe:	e000      	b.n	8008ec2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d060      	beq.n	8008f90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d005      	beq.n	8008ee0 <HAL_RCC_OscConfig+0x310>
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	2b0c      	cmp	r3, #12
 8008ed8:	d119      	bne.n	8008f0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d116      	bne.n	8008f0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ee0:	4b99      	ldr	r3, [pc, #612]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d005      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x328>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e249      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ef8:	4b93      	ldr	r3, [pc, #588]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	061b      	lsls	r3, r3, #24
 8008f06:	4990      	ldr	r1, [pc, #576]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f0c:	e040      	b.n	8008f90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d023      	beq.n	8008f5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f16:	4b8c      	ldr	r3, [pc, #560]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a8b      	ldr	r2, [pc, #556]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f22:	f7fa fe45 	bl	8003bb0 <HAL_GetTick>
 8008f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f28:	e008      	b.n	8008f3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f2a:	f7fa fe41 	bl	8003bb0 <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d901      	bls.n	8008f3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e227      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f3c:	4b82      	ldr	r3, [pc, #520]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d0f0      	beq.n	8008f2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f48:	4b7f      	ldr	r3, [pc, #508]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	061b      	lsls	r3, r3, #24
 8008f56:	497c      	ldr	r1, [pc, #496]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	604b      	str	r3, [r1, #4]
 8008f5c:	e018      	b.n	8008f90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f5e:	4b7a      	ldr	r3, [pc, #488]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a79      	ldr	r2, [pc, #484]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f6a:	f7fa fe21 	bl	8003bb0 <HAL_GetTick>
 8008f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008f70:	e008      	b.n	8008f84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f72:	f7fa fe1d 	bl	8003bb0 <HAL_GetTick>
 8008f76:	4602      	mov	r2, r0
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	1ad3      	subs	r3, r2, r3
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d901      	bls.n	8008f84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e203      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008f84:	4b70      	ldr	r3, [pc, #448]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1f0      	bne.n	8008f72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0308 	and.w	r3, r3, #8
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d03c      	beq.n	8009016 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d01c      	beq.n	8008fde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fa4:	4b68      	ldr	r3, [pc, #416]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008faa:	4a67      	ldr	r2, [pc, #412]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008fac:	f043 0301 	orr.w	r3, r3, #1
 8008fb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fb4:	f7fa fdfc 	bl	8003bb0 <HAL_GetTick>
 8008fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008fba:	e008      	b.n	8008fce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fbc:	f7fa fdf8 	bl	8003bb0 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d901      	bls.n	8008fce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e1de      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008fce:	4b5e      	ldr	r3, [pc, #376]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d0ef      	beq.n	8008fbc <HAL_RCC_OscConfig+0x3ec>
 8008fdc:	e01b      	b.n	8009016 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fde:	4b5a      	ldr	r3, [pc, #360]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fe4:	4a58      	ldr	r2, [pc, #352]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8008fe6:	f023 0301 	bic.w	r3, r3, #1
 8008fea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fee:	f7fa fddf 	bl	8003bb0 <HAL_GetTick>
 8008ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ff4:	e008      	b.n	8009008 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ff6:	f7fa fddb 	bl	8003bb0 <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	2b02      	cmp	r3, #2
 8009002:	d901      	bls.n	8009008 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e1c1      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009008:	4b4f      	ldr	r3, [pc, #316]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 800900a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800900e:	f003 0302 	and.w	r3, r3, #2
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1ef      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 0304 	and.w	r3, r3, #4
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 80a6 	beq.w	8009170 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009024:	2300      	movs	r3, #0
 8009026:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009028:	4b47      	ldr	r3, [pc, #284]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 800902a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800902c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10d      	bne.n	8009050 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009034:	4b44      	ldr	r3, [pc, #272]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8009036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009038:	4a43      	ldr	r2, [pc, #268]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 800903a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800903e:	6593      	str	r3, [r2, #88]	; 0x58
 8009040:	4b41      	ldr	r3, [pc, #260]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8009042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009048:	60bb      	str	r3, [r7, #8]
 800904a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800904c:	2301      	movs	r3, #1
 800904e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009050:	4b3e      	ldr	r3, [pc, #248]	; (800914c <HAL_RCC_OscConfig+0x57c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009058:	2b00      	cmp	r3, #0
 800905a:	d118      	bne.n	800908e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800905c:	4b3b      	ldr	r3, [pc, #236]	; (800914c <HAL_RCC_OscConfig+0x57c>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a3a      	ldr	r2, [pc, #232]	; (800914c <HAL_RCC_OscConfig+0x57c>)
 8009062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009066:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009068:	f7fa fda2 	bl	8003bb0 <HAL_GetTick>
 800906c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800906e:	e008      	b.n	8009082 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009070:	f7fa fd9e 	bl	8003bb0 <HAL_GetTick>
 8009074:	4602      	mov	r2, r0
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	2b02      	cmp	r3, #2
 800907c:	d901      	bls.n	8009082 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e184      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009082:	4b32      	ldr	r3, [pc, #200]	; (800914c <HAL_RCC_OscConfig+0x57c>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908a:	2b00      	cmp	r3, #0
 800908c:	d0f0      	beq.n	8009070 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d108      	bne.n	80090a8 <HAL_RCC_OscConfig+0x4d8>
 8009096:	4b2c      	ldr	r3, [pc, #176]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 8009098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800909c:	4a2a      	ldr	r2, [pc, #168]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 800909e:	f043 0301 	orr.w	r3, r3, #1
 80090a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80090a6:	e024      	b.n	80090f2 <HAL_RCC_OscConfig+0x522>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	2b05      	cmp	r3, #5
 80090ae:	d110      	bne.n	80090d2 <HAL_RCC_OscConfig+0x502>
 80090b0:	4b25      	ldr	r3, [pc, #148]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 80090b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b6:	4a24      	ldr	r2, [pc, #144]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 80090b8:	f043 0304 	orr.w	r3, r3, #4
 80090bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80090c0:	4b21      	ldr	r3, [pc, #132]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 80090c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090c6:	4a20      	ldr	r2, [pc, #128]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 80090c8:	f043 0301 	orr.w	r3, r3, #1
 80090cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80090d0:	e00f      	b.n	80090f2 <HAL_RCC_OscConfig+0x522>
 80090d2:	4b1d      	ldr	r3, [pc, #116]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 80090d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090d8:	4a1b      	ldr	r2, [pc, #108]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 80090da:	f023 0301 	bic.w	r3, r3, #1
 80090de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80090e2:	4b19      	ldr	r3, [pc, #100]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 80090e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090e8:	4a17      	ldr	r2, [pc, #92]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 80090ea:	f023 0304 	bic.w	r3, r3, #4
 80090ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d016      	beq.n	8009128 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090fa:	f7fa fd59 	bl	8003bb0 <HAL_GetTick>
 80090fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009100:	e00a      	b.n	8009118 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009102:	f7fa fd55 	bl	8003bb0 <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009110:	4293      	cmp	r3, r2
 8009112:	d901      	bls.n	8009118 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e139      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009118:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <HAL_RCC_OscConfig+0x578>)
 800911a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0ed      	beq.n	8009102 <HAL_RCC_OscConfig+0x532>
 8009126:	e01a      	b.n	800915e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009128:	f7fa fd42 	bl	8003bb0 <HAL_GetTick>
 800912c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800912e:	e00f      	b.n	8009150 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009130:	f7fa fd3e 	bl	8003bb0 <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	f241 3288 	movw	r2, #5000	; 0x1388
 800913e:	4293      	cmp	r3, r2
 8009140:	d906      	bls.n	8009150 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009142:	2303      	movs	r3, #3
 8009144:	e122      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
 8009146:	bf00      	nop
 8009148:	40021000 	.word	0x40021000
 800914c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009150:	4b90      	ldr	r3, [pc, #576]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009156:	f003 0302 	and.w	r3, r3, #2
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e8      	bne.n	8009130 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800915e:	7ffb      	ldrb	r3, [r7, #31]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d105      	bne.n	8009170 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009164:	4b8b      	ldr	r3, [pc, #556]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009168:	4a8a      	ldr	r2, [pc, #552]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 800916a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800916e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 8108 	beq.w	800938a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917e:	2b02      	cmp	r3, #2
 8009180:	f040 80d0 	bne.w	8009324 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009184:	4b83      	ldr	r3, [pc, #524]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f003 0203 	and.w	r2, r3, #3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009194:	429a      	cmp	r2, r3
 8009196:	d130      	bne.n	80091fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a2:	3b01      	subs	r3, #1
 80091a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d127      	bne.n	80091fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d11f      	bne.n	80091fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80091c4:	2a07      	cmp	r2, #7
 80091c6:	bf14      	ite	ne
 80091c8:	2201      	movne	r2, #1
 80091ca:	2200      	moveq	r2, #0
 80091cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d113      	bne.n	80091fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091dc:	085b      	lsrs	r3, r3, #1
 80091de:	3b01      	subs	r3, #1
 80091e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d109      	bne.n	80091fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f0:	085b      	lsrs	r3, r3, #1
 80091f2:	3b01      	subs	r3, #1
 80091f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d06e      	beq.n	80092d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	2b0c      	cmp	r3, #12
 80091fe:	d069      	beq.n	80092d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009200:	4b64      	ldr	r3, [pc, #400]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d105      	bne.n	8009218 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800920c:	4b61      	ldr	r3, [pc, #388]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e0b7      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800921c:	4b5d      	ldr	r3, [pc, #372]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a5c      	ldr	r2, [pc, #368]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009226:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009228:	f7fa fcc2 	bl	8003bb0 <HAL_GetTick>
 800922c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800922e:	e008      	b.n	8009242 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009230:	f7fa fcbe 	bl	8003bb0 <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	2b02      	cmp	r3, #2
 800923c:	d901      	bls.n	8009242 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e0a4      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009242:	4b54      	ldr	r3, [pc, #336]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1f0      	bne.n	8009230 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800924e:	4b51      	ldr	r3, [pc, #324]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009250:	68da      	ldr	r2, [r3, #12]
 8009252:	4b51      	ldr	r3, [pc, #324]	; (8009398 <HAL_RCC_OscConfig+0x7c8>)
 8009254:	4013      	ands	r3, r2
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800925e:	3a01      	subs	r2, #1
 8009260:	0112      	lsls	r2, r2, #4
 8009262:	4311      	orrs	r1, r2
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009268:	0212      	lsls	r2, r2, #8
 800926a:	4311      	orrs	r1, r2
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009270:	0852      	lsrs	r2, r2, #1
 8009272:	3a01      	subs	r2, #1
 8009274:	0552      	lsls	r2, r2, #21
 8009276:	4311      	orrs	r1, r2
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800927c:	0852      	lsrs	r2, r2, #1
 800927e:	3a01      	subs	r2, #1
 8009280:	0652      	lsls	r2, r2, #25
 8009282:	4311      	orrs	r1, r2
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009288:	0912      	lsrs	r2, r2, #4
 800928a:	0452      	lsls	r2, r2, #17
 800928c:	430a      	orrs	r2, r1
 800928e:	4941      	ldr	r1, [pc, #260]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009290:	4313      	orrs	r3, r2
 8009292:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009294:	4b3f      	ldr	r3, [pc, #252]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a3e      	ldr	r2, [pc, #248]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 800929a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800929e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80092a0:	4b3c      	ldr	r3, [pc, #240]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	4a3b      	ldr	r2, [pc, #236]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 80092a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80092ac:	f7fa fc80 	bl	8003bb0 <HAL_GetTick>
 80092b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092b2:	e008      	b.n	80092c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092b4:	f7fa fc7c 	bl	8003bb0 <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d901      	bls.n	80092c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e062      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092c6:	4b33      	ldr	r3, [pc, #204]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d0f0      	beq.n	80092b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80092d2:	e05a      	b.n	800938a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e059      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092d8:	4b2e      	ldr	r3, [pc, #184]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d152      	bne.n	800938a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80092e4:	4b2b      	ldr	r3, [pc, #172]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a2a      	ldr	r2, [pc, #168]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 80092ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80092f0:	4b28      	ldr	r3, [pc, #160]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	4a27      	ldr	r2, [pc, #156]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 80092f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80092fc:	f7fa fc58 	bl	8003bb0 <HAL_GetTick>
 8009300:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009302:	e008      	b.n	8009316 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009304:	f7fa fc54 	bl	8003bb0 <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	2b02      	cmp	r3, #2
 8009310:	d901      	bls.n	8009316 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e03a      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009316:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d0f0      	beq.n	8009304 <HAL_RCC_OscConfig+0x734>
 8009322:	e032      	b.n	800938a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	2b0c      	cmp	r3, #12
 8009328:	d02d      	beq.n	8009386 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800932a:	4b1a      	ldr	r3, [pc, #104]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a19      	ldr	r2, [pc, #100]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009334:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8009336:	4b17      	ldr	r3, [pc, #92]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800933e:	2b00      	cmp	r3, #0
 8009340:	d105      	bne.n	800934e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009342:	4b14      	ldr	r3, [pc, #80]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	4a13      	ldr	r2, [pc, #76]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009348:	f023 0303 	bic.w	r3, r3, #3
 800934c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800934e:	4b11      	ldr	r3, [pc, #68]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	4a10      	ldr	r2, [pc, #64]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 8009354:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800935c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800935e:	f7fa fc27 	bl	8003bb0 <HAL_GetTick>
 8009362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009364:	e008      	b.n	8009378 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009366:	f7fa fc23 	bl	8003bb0 <HAL_GetTick>
 800936a:	4602      	mov	r2, r0
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	2b02      	cmp	r3, #2
 8009372:	d901      	bls.n	8009378 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e009      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009378:	4b06      	ldr	r3, [pc, #24]	; (8009394 <HAL_RCC_OscConfig+0x7c4>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1f0      	bne.n	8009366 <HAL_RCC_OscConfig+0x796>
 8009384:	e001      	b.n	800938a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e000      	b.n	800938c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3720      	adds	r7, #32
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	40021000 	.word	0x40021000
 8009398:	f99d808c 	.word	0xf99d808c

0800939c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e0c8      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80093b0:	4b66      	ldr	r3, [pc, #408]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0307 	and.w	r3, r3, #7
 80093b8:	683a      	ldr	r2, [r7, #0]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d910      	bls.n	80093e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093be:	4b63      	ldr	r3, [pc, #396]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f023 0207 	bic.w	r2, r3, #7
 80093c6:	4961      	ldr	r1, [pc, #388]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093ce:	4b5f      	ldr	r3, [pc, #380]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0307 	and.w	r3, r3, #7
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d001      	beq.n	80093e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e0b0      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d04c      	beq.n	8009486 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	2b03      	cmp	r3, #3
 80093f2:	d107      	bne.n	8009404 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093f4:	4b56      	ldr	r3, [pc, #344]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d121      	bne.n	8009444 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e09e      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	2b02      	cmp	r3, #2
 800940a:	d107      	bne.n	800941c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800940c:	4b50      	ldr	r3, [pc, #320]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d115      	bne.n	8009444 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e092      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d107      	bne.n	8009434 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009424:	4b4a      	ldr	r3, [pc, #296]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d109      	bne.n	8009444 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e086      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009434:	4b46      	ldr	r3, [pc, #280]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e07e      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009444:	4b42      	ldr	r3, [pc, #264]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f023 0203 	bic.w	r2, r3, #3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	493f      	ldr	r1, [pc, #252]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 8009452:	4313      	orrs	r3, r2
 8009454:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009456:	f7fa fbab 	bl	8003bb0 <HAL_GetTick>
 800945a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800945c:	e00a      	b.n	8009474 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800945e:	f7fa fba7 	bl	8003bb0 <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	f241 3288 	movw	r2, #5000	; 0x1388
 800946c:	4293      	cmp	r3, r2
 800946e:	d901      	bls.n	8009474 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e066      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009474:	4b36      	ldr	r3, [pc, #216]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f003 020c 	and.w	r2, r3, #12
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	429a      	cmp	r2, r3
 8009484:	d1eb      	bne.n	800945e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d008      	beq.n	80094a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009492:	4b2f      	ldr	r3, [pc, #188]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	492c      	ldr	r1, [pc, #176]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80094a4:	4b29      	ldr	r3, [pc, #164]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0307 	and.w	r3, r3, #7
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d210      	bcs.n	80094d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094b2:	4b26      	ldr	r3, [pc, #152]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f023 0207 	bic.w	r2, r3, #7
 80094ba:	4924      	ldr	r1, [pc, #144]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	4313      	orrs	r3, r2
 80094c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094c2:	4b22      	ldr	r3, [pc, #136]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 0307 	and.w	r3, r3, #7
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d001      	beq.n	80094d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e036      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d008      	beq.n	80094f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80094e0:	4b1b      	ldr	r3, [pc, #108]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	4918      	ldr	r1, [pc, #96]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0308 	and.w	r3, r3, #8
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d009      	beq.n	8009512 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80094fe:	4b14      	ldr	r3, [pc, #80]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	4910      	ldr	r1, [pc, #64]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 800950e:	4313      	orrs	r3, r2
 8009510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009512:	f000 f825 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 8009516:	4601      	mov	r1, r0
 8009518:	4b0d      	ldr	r3, [pc, #52]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	091b      	lsrs	r3, r3, #4
 800951e:	f003 030f 	and.w	r3, r3, #15
 8009522:	4a0c      	ldr	r2, [pc, #48]	; (8009554 <HAL_RCC_ClockConfig+0x1b8>)
 8009524:	5cd3      	ldrb	r3, [r2, r3]
 8009526:	f003 031f 	and.w	r3, r3, #31
 800952a:	fa21 f303 	lsr.w	r3, r1, r3
 800952e:	4a0a      	ldr	r2, [pc, #40]	; (8009558 <HAL_RCC_ClockConfig+0x1bc>)
 8009530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009532:	4b0a      	ldr	r3, [pc, #40]	; (800955c <HAL_RCC_ClockConfig+0x1c0>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4618      	mov	r0, r3
 8009538:	f7fa faea 	bl	8003b10 <HAL_InitTick>
 800953c:	4603      	mov	r3, r0
 800953e:	72fb      	strb	r3, [r7, #11]

  return status;
 8009540:	7afb      	ldrb	r3, [r7, #11]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	40022000 	.word	0x40022000
 8009550:	40021000 	.word	0x40021000
 8009554:	0800ed20 	.word	0x0800ed20
 8009558:	20000058 	.word	0x20000058
 800955c:	2000005c 	.word	0x2000005c

08009560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009560:	b480      	push	{r7}
 8009562:	b089      	sub	sp, #36	; 0x24
 8009564:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009566:	2300      	movs	r3, #0
 8009568:	61fb      	str	r3, [r7, #28]
 800956a:	2300      	movs	r3, #0
 800956c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800956e:	4b3d      	ldr	r3, [pc, #244]	; (8009664 <HAL_RCC_GetSysClockFreq+0x104>)
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f003 030c 	and.w	r3, r3, #12
 8009576:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009578:	4b3a      	ldr	r3, [pc, #232]	; (8009664 <HAL_RCC_GetSysClockFreq+0x104>)
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	f003 0303 	and.w	r3, r3, #3
 8009580:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d005      	beq.n	8009594 <HAL_RCC_GetSysClockFreq+0x34>
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	2b0c      	cmp	r3, #12
 800958c:	d121      	bne.n	80095d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d11e      	bne.n	80095d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009594:	4b33      	ldr	r3, [pc, #204]	; (8009664 <HAL_RCC_GetSysClockFreq+0x104>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0308 	and.w	r3, r3, #8
 800959c:	2b00      	cmp	r3, #0
 800959e:	d107      	bne.n	80095b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80095a0:	4b30      	ldr	r3, [pc, #192]	; (8009664 <HAL_RCC_GetSysClockFreq+0x104>)
 80095a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095a6:	0a1b      	lsrs	r3, r3, #8
 80095a8:	f003 030f 	and.w	r3, r3, #15
 80095ac:	61fb      	str	r3, [r7, #28]
 80095ae:	e005      	b.n	80095bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80095b0:	4b2c      	ldr	r3, [pc, #176]	; (8009664 <HAL_RCC_GetSysClockFreq+0x104>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	091b      	lsrs	r3, r3, #4
 80095b6:	f003 030f 	and.w	r3, r3, #15
 80095ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80095bc:	4a2a      	ldr	r2, [pc, #168]	; (8009668 <HAL_RCC_GetSysClockFreq+0x108>)
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10d      	bne.n	80095e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80095d0:	e00a      	b.n	80095e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	2b04      	cmp	r3, #4
 80095d6:	d102      	bne.n	80095de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80095d8:	4b24      	ldr	r3, [pc, #144]	; (800966c <HAL_RCC_GetSysClockFreq+0x10c>)
 80095da:	61bb      	str	r3, [r7, #24]
 80095dc:	e004      	b.n	80095e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	2b08      	cmp	r3, #8
 80095e2:	d101      	bne.n	80095e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80095e4:	4b22      	ldr	r3, [pc, #136]	; (8009670 <HAL_RCC_GetSysClockFreq+0x110>)
 80095e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	2b0c      	cmp	r3, #12
 80095ec:	d133      	bne.n	8009656 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80095ee:	4b1d      	ldr	r3, [pc, #116]	; (8009664 <HAL_RCC_GetSysClockFreq+0x104>)
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f003 0303 	and.w	r3, r3, #3
 80095f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d002      	beq.n	8009604 <HAL_RCC_GetSysClockFreq+0xa4>
 80095fe:	2b03      	cmp	r3, #3
 8009600:	d003      	beq.n	800960a <HAL_RCC_GetSysClockFreq+0xaa>
 8009602:	e005      	b.n	8009610 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009604:	4b19      	ldr	r3, [pc, #100]	; (800966c <HAL_RCC_GetSysClockFreq+0x10c>)
 8009606:	617b      	str	r3, [r7, #20]
      break;
 8009608:	e005      	b.n	8009616 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800960a:	4b19      	ldr	r3, [pc, #100]	; (8009670 <HAL_RCC_GetSysClockFreq+0x110>)
 800960c:	617b      	str	r3, [r7, #20]
      break;
 800960e:	e002      	b.n	8009616 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	617b      	str	r3, [r7, #20]
      break;
 8009614:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009616:	4b13      	ldr	r3, [pc, #76]	; (8009664 <HAL_RCC_GetSysClockFreq+0x104>)
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	091b      	lsrs	r3, r3, #4
 800961c:	f003 0307 	and.w	r3, r3, #7
 8009620:	3301      	adds	r3, #1
 8009622:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009624:	4b0f      	ldr	r3, [pc, #60]	; (8009664 <HAL_RCC_GetSysClockFreq+0x104>)
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	0a1b      	lsrs	r3, r3, #8
 800962a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	fb02 f203 	mul.w	r2, r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	fbb2 f3f3 	udiv	r3, r2, r3
 800963a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800963c:	4b09      	ldr	r3, [pc, #36]	; (8009664 <HAL_RCC_GetSysClockFreq+0x104>)
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	0e5b      	lsrs	r3, r3, #25
 8009642:	f003 0303 	and.w	r3, r3, #3
 8009646:	3301      	adds	r3, #1
 8009648:	005b      	lsls	r3, r3, #1
 800964a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	fbb2 f3f3 	udiv	r3, r2, r3
 8009654:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009656:	69bb      	ldr	r3, [r7, #24]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3724      	adds	r7, #36	; 0x24
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	40021000 	.word	0x40021000
 8009668:	0800ed38 	.word	0x0800ed38
 800966c:	00f42400 	.word	0x00f42400
 8009670:	007a1200 	.word	0x007a1200

08009674 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009674:	b480      	push	{r7}
 8009676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009678:	4b03      	ldr	r3, [pc, #12]	; (8009688 <HAL_RCC_GetHCLKFreq+0x14>)
 800967a:	681b      	ldr	r3, [r3, #0]
}
 800967c:	4618      	mov	r0, r3
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	20000058 	.word	0x20000058

0800968c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009690:	f7ff fff0 	bl	8009674 <HAL_RCC_GetHCLKFreq>
 8009694:	4601      	mov	r1, r0
 8009696:	4b06      	ldr	r3, [pc, #24]	; (80096b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	0a1b      	lsrs	r3, r3, #8
 800969c:	f003 0307 	and.w	r3, r3, #7
 80096a0:	4a04      	ldr	r2, [pc, #16]	; (80096b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80096a2:	5cd3      	ldrb	r3, [r2, r3]
 80096a4:	f003 031f 	and.w	r3, r3, #31
 80096a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	40021000 	.word	0x40021000
 80096b4:	0800ed30 	.word	0x0800ed30

080096b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80096bc:	f7ff ffda 	bl	8009674 <HAL_RCC_GetHCLKFreq>
 80096c0:	4601      	mov	r1, r0
 80096c2:	4b06      	ldr	r3, [pc, #24]	; (80096dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	0adb      	lsrs	r3, r3, #11
 80096c8:	f003 0307 	and.w	r3, r3, #7
 80096cc:	4a04      	ldr	r2, [pc, #16]	; (80096e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80096ce:	5cd3      	ldrb	r3, [r2, r3]
 80096d0:	f003 031f 	and.w	r3, r3, #31
 80096d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80096d8:	4618      	mov	r0, r3
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	40021000 	.word	0x40021000
 80096e0:	0800ed30 	.word	0x0800ed30

080096e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80096ec:	2300      	movs	r3, #0
 80096ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80096f0:	4b2a      	ldr	r3, [pc, #168]	; (800979c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80096f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d003      	beq.n	8009704 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80096fc:	f7fe fa54 	bl	8007ba8 <HAL_PWREx_GetVoltageRange>
 8009700:	6178      	str	r0, [r7, #20]
 8009702:	e014      	b.n	800972e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009704:	4b25      	ldr	r3, [pc, #148]	; (800979c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009708:	4a24      	ldr	r2, [pc, #144]	; (800979c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800970a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800970e:	6593      	str	r3, [r2, #88]	; 0x58
 8009710:	4b22      	ldr	r3, [pc, #136]	; (800979c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009718:	60fb      	str	r3, [r7, #12]
 800971a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800971c:	f7fe fa44 	bl	8007ba8 <HAL_PWREx_GetVoltageRange>
 8009720:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009722:	4b1e      	ldr	r3, [pc, #120]	; (800979c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009726:	4a1d      	ldr	r2, [pc, #116]	; (800979c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800972c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009734:	d10b      	bne.n	800974e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b80      	cmp	r3, #128	; 0x80
 800973a:	d919      	bls.n	8009770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2ba0      	cmp	r3, #160	; 0xa0
 8009740:	d902      	bls.n	8009748 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009742:	2302      	movs	r3, #2
 8009744:	613b      	str	r3, [r7, #16]
 8009746:	e013      	b.n	8009770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009748:	2301      	movs	r3, #1
 800974a:	613b      	str	r3, [r7, #16]
 800974c:	e010      	b.n	8009770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b80      	cmp	r3, #128	; 0x80
 8009752:	d902      	bls.n	800975a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009754:	2303      	movs	r3, #3
 8009756:	613b      	str	r3, [r7, #16]
 8009758:	e00a      	b.n	8009770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b80      	cmp	r3, #128	; 0x80
 800975e:	d102      	bne.n	8009766 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009760:	2302      	movs	r3, #2
 8009762:	613b      	str	r3, [r7, #16]
 8009764:	e004      	b.n	8009770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b70      	cmp	r3, #112	; 0x70
 800976a:	d101      	bne.n	8009770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800976c:	2301      	movs	r3, #1
 800976e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009770:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f023 0207 	bic.w	r2, r3, #7
 8009778:	4909      	ldr	r1, [pc, #36]	; (80097a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	4313      	orrs	r3, r2
 800977e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009780:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 0307 	and.w	r3, r3, #7
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	429a      	cmp	r2, r3
 800978c:	d001      	beq.n	8009792 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e000      	b.n	8009794 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3718      	adds	r7, #24
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	40021000 	.word	0x40021000
 80097a0:	40022000 	.word	0x40022000

080097a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80097ac:	2300      	movs	r3, #0
 80097ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80097b0:	2300      	movs	r3, #0
 80097b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d03f      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097c8:	d01c      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80097ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097ce:	d802      	bhi.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00e      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80097d4:	e01f      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80097d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097da:	d003      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80097dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80097e0:	d01c      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80097e2:	e018      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80097e4:	4b85      	ldr	r3, [pc, #532]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	4a84      	ldr	r2, [pc, #528]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80097ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80097f0:	e015      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3304      	adds	r3, #4
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 ff4f 	bl	800a69c <RCCEx_PLLSAI1_Config>
 80097fe:	4603      	mov	r3, r0
 8009800:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009802:	e00c      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3320      	adds	r3, #32
 8009808:	2100      	movs	r1, #0
 800980a:	4618      	mov	r0, r3
 800980c:	f001 f836 	bl	800a87c <RCCEx_PLLSAI2_Config>
 8009810:	4603      	mov	r3, r0
 8009812:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009814:	e003      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	74fb      	strb	r3, [r7, #19]
      break;
 800981a:	e000      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800981c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800981e:	7cfb      	ldrb	r3, [r7, #19]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10b      	bne.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009824:	4b75      	ldr	r3, [pc, #468]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800982a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009832:	4972      	ldr	r1, [pc, #456]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009834:	4313      	orrs	r3, r2
 8009836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800983a:	e001      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800983c:	7cfb      	ldrb	r3, [r7, #19]
 800983e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009848:	2b00      	cmp	r3, #0
 800984a:	d03f      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009854:	d01c      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8009856:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800985a:	d802      	bhi.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00e      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8009860:	e01f      	b.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009862:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009866:	d003      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8009868:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800986c:	d01c      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800986e:	e018      	b.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009870:	4b62      	ldr	r3, [pc, #392]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	4a61      	ldr	r2, [pc, #388]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800987a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800987c:	e015      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	3304      	adds	r3, #4
 8009882:	2100      	movs	r1, #0
 8009884:	4618      	mov	r0, r3
 8009886:	f000 ff09 	bl	800a69c <RCCEx_PLLSAI1_Config>
 800988a:	4603      	mov	r3, r0
 800988c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800988e:	e00c      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	3320      	adds	r3, #32
 8009894:	2100      	movs	r1, #0
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fff0 	bl	800a87c <RCCEx_PLLSAI2_Config>
 800989c:	4603      	mov	r3, r0
 800989e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80098a0:	e003      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	74fb      	strb	r3, [r7, #19]
      break;
 80098a6:	e000      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80098a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098aa:	7cfb      	ldrb	r3, [r7, #19]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10b      	bne.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80098b0:	4b52      	ldr	r3, [pc, #328]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80098b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098be:	494f      	ldr	r1, [pc, #316]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80098c0:	4313      	orrs	r3, r2
 80098c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80098c6:	e001      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c8:	7cfb      	ldrb	r3, [r7, #19]
 80098ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 80a0 	beq.w	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098da:	2300      	movs	r3, #0
 80098dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80098de:	4b47      	ldr	r3, [pc, #284]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80098e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80098ea:	2301      	movs	r3, #1
 80098ec:	e000      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80098ee:	2300      	movs	r3, #0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00d      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098f4:	4b41      	ldr	r3, [pc, #260]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80098f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098f8:	4a40      	ldr	r2, [pc, #256]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80098fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098fe:	6593      	str	r3, [r2, #88]	; 0x58
 8009900:	4b3e      	ldr	r3, [pc, #248]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009908:	60bb      	str	r3, [r7, #8]
 800990a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800990c:	2301      	movs	r3, #1
 800990e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009910:	4b3b      	ldr	r3, [pc, #236]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a3a      	ldr	r2, [pc, #232]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800991a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800991c:	f7fa f948 	bl	8003bb0 <HAL_GetTick>
 8009920:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009922:	e009      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009924:	f7fa f944 	bl	8003bb0 <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	2b02      	cmp	r3, #2
 8009930:	d902      	bls.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	74fb      	strb	r3, [r7, #19]
        break;
 8009936:	e005      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009938:	4b31      	ldr	r3, [pc, #196]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009940:	2b00      	cmp	r3, #0
 8009942:	d0ef      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8009944:	7cfb      	ldrb	r3, [r7, #19]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d15c      	bne.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800994a:	4b2c      	ldr	r3, [pc, #176]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800994c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009954:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d01f      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	429a      	cmp	r2, r3
 8009966:	d019      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009968:	4b24      	ldr	r3, [pc, #144]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800996a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800996e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009972:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009974:	4b21      	ldr	r3, [pc, #132]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800997a:	4a20      	ldr	r2, [pc, #128]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800997c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009984:	4b1d      	ldr	r3, [pc, #116]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800998a:	4a1c      	ldr	r2, [pc, #112]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800998c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009994:	4a19      	ldr	r2, [pc, #100]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d016      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a6:	f7fa f903 	bl	8003bb0 <HAL_GetTick>
 80099aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099ac:	e00b      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099ae:	f7fa f8ff 	bl	8003bb0 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099bc:	4293      	cmp	r3, r2
 80099be:	d902      	bls.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	74fb      	strb	r3, [r7, #19]
            break;
 80099c4:	e006      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099c6:	4b0d      	ldr	r3, [pc, #52]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80099c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099cc:	f003 0302 	and.w	r3, r3, #2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0ec      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80099d4:	7cfb      	ldrb	r3, [r7, #19]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10c      	bne.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099da:	4b08      	ldr	r3, [pc, #32]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80099dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ea:	4904      	ldr	r1, [pc, #16]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80099f2:	e009      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80099f4:	7cfb      	ldrb	r3, [r7, #19]
 80099f6:	74bb      	strb	r3, [r7, #18]
 80099f8:	e006      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80099fa:	bf00      	nop
 80099fc:	40021000 	.word	0x40021000
 8009a00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a04:	7cfb      	ldrb	r3, [r7, #19]
 8009a06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a08:	7c7b      	ldrb	r3, [r7, #17]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d105      	bne.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a0e:	4b9e      	ldr	r3, [pc, #632]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a12:	4a9d      	ldr	r2, [pc, #628]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00a      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a26:	4b98      	ldr	r3, [pc, #608]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a2c:	f023 0203 	bic.w	r2, r3, #3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a34:	4994      	ldr	r1, [pc, #592]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009a36:	4313      	orrs	r3, r2
 8009a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0302 	and.w	r3, r3, #2
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00a      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a48:	4b8f      	ldr	r3, [pc, #572]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a4e:	f023 020c 	bic.w	r2, r3, #12
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a56:	498c      	ldr	r1, [pc, #560]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0304 	and.w	r3, r3, #4
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00a      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009a6a:	4b87      	ldr	r3, [pc, #540]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a78:	4983      	ldr	r1, [pc, #524]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0308 	and.w	r3, r3, #8
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00a      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009a8c:	4b7e      	ldr	r3, [pc, #504]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9a:	497b      	ldr	r1, [pc, #492]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 0310 	and.w	r3, r3, #16
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00a      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009aae:	4b76      	ldr	r3, [pc, #472]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009abc:	4972      	ldr	r1, [pc, #456]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 0320 	and.w	r3, r3, #32
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00a      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ad0:	4b6d      	ldr	r3, [pc, #436]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ade:	496a      	ldr	r1, [pc, #424]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00a      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009af2:	4b65      	ldr	r3, [pc, #404]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009af8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b00:	4961      	ldr	r1, [pc, #388]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009b02:	4313      	orrs	r3, r2
 8009b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00a      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009b14:	4b5c      	ldr	r3, [pc, #368]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b22:	4959      	ldr	r1, [pc, #356]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009b24:	4313      	orrs	r3, r2
 8009b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009b36:	4b54      	ldr	r3, [pc, #336]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b44:	4950      	ldr	r1, [pc, #320]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009b46:	4313      	orrs	r3, r2
 8009b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00a      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009b58:	4b4b      	ldr	r3, [pc, #300]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b66:	4948      	ldr	r1, [pc, #288]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009b7a:	4b43      	ldr	r3, [pc, #268]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b88:	493f      	ldr	r1, [pc, #252]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d028      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b9c:	4b3a      	ldr	r3, [pc, #232]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009baa:	4937      	ldr	r1, [pc, #220]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bba:	d106      	bne.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009bbc:	4b32      	ldr	r3, [pc, #200]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	4a31      	ldr	r2, [pc, #196]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bc6:	60d3      	str	r3, [r2, #12]
 8009bc8:	e011      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009bd2:	d10c      	bne.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	2101      	movs	r1, #1
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 fd5e 	bl	800a69c <RCCEx_PLLSAI1_Config>
 8009be0:	4603      	mov	r3, r0
 8009be2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009be4:	7cfb      	ldrb	r3, [r7, #19]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8009bea:	7cfb      	ldrb	r3, [r7, #19]
 8009bec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d028      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009bfa:	4b23      	ldr	r3, [pc, #140]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c08:	491f      	ldr	r1, [pc, #124]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c18:	d106      	bne.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c1a:	4b1b      	ldr	r3, [pc, #108]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	4a1a      	ldr	r2, [pc, #104]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c24:	60d3      	str	r3, [r2, #12]
 8009c26:	e011      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c30:	d10c      	bne.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3304      	adds	r3, #4
 8009c36:	2101      	movs	r1, #1
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f000 fd2f 	bl	800a69c <RCCEx_PLLSAI1_Config>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009c42:	7cfb      	ldrb	r3, [r7, #19]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8009c48:	7cfb      	ldrb	r3, [r7, #19]
 8009c4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d02b      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c58:	4b0b      	ldr	r3, [pc, #44]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c66:	4908      	ldr	r1, [pc, #32]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c76:	d109      	bne.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c78:	4b03      	ldr	r3, [pc, #12]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	4a02      	ldr	r2, [pc, #8]	; (8009c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c82:	60d3      	str	r3, [r2, #12]
 8009c84:	e014      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8009c86:	bf00      	nop
 8009c88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c94:	d10c      	bne.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	3304      	adds	r3, #4
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f000 fcfd 	bl	800a69c <RCCEx_PLLSAI1_Config>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009ca6:	7cfb      	ldrb	r3, [r7, #19]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8009cac:	7cfb      	ldrb	r3, [r7, #19]
 8009cae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d02f      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009cbc:	4b2b      	ldr	r3, [pc, #172]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cca:	4928      	ldr	r1, [pc, #160]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cda:	d10d      	bne.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	2102      	movs	r1, #2
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 fcda 	bl	800a69c <RCCEx_PLLSAI1_Config>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009cec:	7cfb      	ldrb	r3, [r7, #19]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d014      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8009cf2:	7cfb      	ldrb	r3, [r7, #19]
 8009cf4:	74bb      	strb	r3, [r7, #18]
 8009cf6:	e011      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d00:	d10c      	bne.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	3320      	adds	r3, #32
 8009d06:	2102      	movs	r1, #2
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 fdb7 	bl	800a87c <RCCEx_PLLSAI2_Config>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009d12:	7cfb      	ldrb	r3, [r7, #19]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8009d18:	7cfb      	ldrb	r3, [r7, #19]
 8009d1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00a      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d28:	4b10      	ldr	r3, [pc, #64]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d36:	490d      	ldr	r1, [pc, #52]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00b      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009d4a:	4b08      	ldr	r3, [pc, #32]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d5a:	4904      	ldr	r1, [pc, #16]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009d62:	7cbb      	ldrb	r3, [r7, #18]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3718      	adds	r7, #24
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	40021000 	.word	0x40021000

08009d70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b088      	sub	sp, #32
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d82:	d137      	bne.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009d84:	4bb8      	ldr	r3, [pc, #736]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d8e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d96:	d014      	beq.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d9c:	d01e      	beq.n	8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8009d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009da2:	d001      	beq.n	8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8009da4:	f000 bc60 	b.w	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009da8:	4baf      	ldr	r3, [pc, #700]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dae:	f003 0302 	and.w	r3, r3, #2
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	f040 8453 	bne.w	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
        frequency = LSE_VALUE;
 8009db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dbc:	61fb      	str	r3, [r7, #28]
      break;
 8009dbe:	f000 bc4e 	b.w	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009dc2:	4ba9      	ldr	r3, [pc, #676]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dc8:	f003 0302 	and.w	r3, r3, #2
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	f040 8448 	bne.w	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = LSI_VALUE;
 8009dd2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009dd6:	61fb      	str	r3, [r7, #28]
      break;
 8009dd8:	f000 bc43 	b.w	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009ddc:	4ba2      	ldr	r3, [pc, #648]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009de8:	f040 843d 	bne.w	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
        frequency = HSE_VALUE / 32U;
 8009dec:	4b9f      	ldr	r3, [pc, #636]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8009dee:	61fb      	str	r3, [r7, #28]
      break;
 8009df0:	f000 bc39 	b.w	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009df4:	4b9c      	ldr	r3, [pc, #624]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	f003 0303 	and.w	r3, r3, #3
 8009dfc:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d023      	beq.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8009e04:	2b03      	cmp	r3, #3
 8009e06:	d02e      	beq.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d139      	bne.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009e0c:	4b96      	ldr	r3, [pc, #600]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0302 	and.w	r3, r3, #2
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d116      	bne.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009e18:	4b93      	ldr	r3, [pc, #588]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0308 	and.w	r3, r3, #8
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8009e24:	4b90      	ldr	r3, [pc, #576]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	091b      	lsrs	r3, r3, #4
 8009e2a:	f003 030f 	and.w	r3, r3, #15
 8009e2e:	e005      	b.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8009e30:	4b8d      	ldr	r3, [pc, #564]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e36:	0a1b      	lsrs	r3, r3, #8
 8009e38:	f003 030f 	and.w	r3, r3, #15
 8009e3c:	4a8c      	ldr	r2, [pc, #560]	; (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8009e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e42:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009e44:	e01f      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	61bb      	str	r3, [r7, #24]
      break;
 8009e4a:	e01c      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009e4c:	4b86      	ldr	r3, [pc, #536]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e58:	d102      	bne.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8009e5a:	4b86      	ldr	r3, [pc, #536]	; (800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8009e5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009e5e:	e012      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8009e60:	2300      	movs	r3, #0
 8009e62:	61bb      	str	r3, [r7, #24]
      break;
 8009e64:	e00f      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e66:	4b80      	ldr	r3, [pc, #512]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e72:	d102      	bne.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8009e74:	4b80      	ldr	r3, [pc, #512]	; (800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8009e76:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009e78:	e005      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	61bb      	str	r3, [r7, #24]
      break;
 8009e7e:	e002      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8009e80:	2300      	movs	r3, #0
 8009e82:	61bb      	str	r3, [r7, #24]
      break;
 8009e84:	bf00      	nop
    }

    switch(PeriphClk)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e8c:	f000 8345 	beq.w	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8009e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e94:	d825      	bhi.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8009e96:	2b10      	cmp	r3, #16
 8009e98:	f000 81df 	beq.w	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009e9c:	2b10      	cmp	r3, #16
 8009e9e:	d80f      	bhi.n	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	f000 8128 	beq.w	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d803      	bhi.n	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	f000 80ec 	beq.w	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8009eb0:	e3da      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8009eb2:	2b04      	cmp	r3, #4
 8009eb4:	f000 8169 	beq.w	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8009eb8:	2b08      	cmp	r3, #8
 8009eba:	f000 819a 	beq.w	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8009ebe:	e3d3      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8009ec0:	2b40      	cmp	r3, #64	; 0x40
 8009ec2:	f000 82c1 	beq.w	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8009ec6:	2b40      	cmp	r3, #64	; 0x40
 8009ec8:	d803      	bhi.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8009eca:	2b20      	cmp	r3, #32
 8009ecc:	f000 81fd 	beq.w	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8009ed0:	e3ca      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8009ed2:	2b80      	cmp	r3, #128	; 0x80
 8009ed4:	f000 82db 	beq.w	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
 8009ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009edc:	f000 82fa 	beq.w	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
      break;
 8009ee0:	e3c2      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8009ee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ee6:	f000 822d 	beq.w	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8009eea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009eee:	d811      	bhi.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8009ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ef4:	d021      	beq.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8009ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009efa:	d804      	bhi.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f00:	f000 834c 	beq.w	800a59c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      break;
 8009f04:	e3b0      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8009f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f0a:	d01d      	beq.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8009f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f10:	d021      	beq.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8009f12:	e3a9      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8009f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f18:	f000 8285 	beq.w	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8009f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f20:	d804      	bhi.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f26:	f000 837e 	beq.w	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
      break;
 8009f2a:	e39d      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8009f2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f30:	d011      	beq.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009f32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009f36:	d00e      	beq.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8009f38:	e396      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009f3a:	69b9      	ldr	r1, [r7, #24]
 8009f3c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009f40:	f000 fd76 	bl	800aa30 <RCCEx_GetSAIxPeriphCLKFreq>
 8009f44:	61f8      	str	r0, [r7, #28]
      break;
 8009f46:	e38f      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8009f48:	69b9      	ldr	r1, [r7, #24]
 8009f4a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009f4e:	f000 fd6f 	bl	800aa30 <RCCEx_GetSAIxPeriphCLKFreq>
 8009f52:	61f8      	str	r0, [r7, #28]
      break;
 8009f54:	e388      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8009f56:	4b44      	ldr	r3, [pc, #272]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f5c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009f60:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f68:	d023      	beq.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8009f6a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009f6e:	d003      	beq.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009f70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f74:	d04a      	beq.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8009f76:	e086      	b.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009f78:	4b3b      	ldr	r3, [pc, #236]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0302 	and.w	r3, r3, #2
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d17b      	bne.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009f84:	4b38      	ldr	r3, [pc, #224]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 0308 	and.w	r3, r3, #8
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d005      	beq.n	8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8009f90:	4b35      	ldr	r3, [pc, #212]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	091b      	lsrs	r3, r3, #4
 8009f96:	f003 030f 	and.w	r3, r3, #15
 8009f9a:	e005      	b.n	8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8009f9c:	4b32      	ldr	r3, [pc, #200]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009fa2:	0a1b      	lsrs	r3, r3, #8
 8009fa4:	f003 030f 	and.w	r3, r3, #15
 8009fa8:	4a31      	ldr	r2, [pc, #196]	; (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8009faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fae:	61fb      	str	r3, [r7, #28]
          break;
 8009fb0:	e064      	b.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009fb2:	4b2d      	ldr	r3, [pc, #180]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fbe:	d15f      	bne.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009fc0:	4b29      	ldr	r3, [pc, #164]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fcc:	d158      	bne.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009fce:	4b26      	ldr	r3, [pc, #152]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	0a1b      	lsrs	r3, r3, #8
 8009fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fd8:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	fb02 f203 	mul.w	r2, r2, r3
 8009fe2:	4b21      	ldr	r3, [pc, #132]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	091b      	lsrs	r3, r3, #4
 8009fe8:	f003 0307 	and.w	r3, r3, #7
 8009fec:	3301      	adds	r3, #1
 8009fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ff2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009ff4:	4b1c      	ldr	r3, [pc, #112]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	0d5b      	lsrs	r3, r3, #21
 8009ffa:	f003 0303 	and.w	r3, r3, #3
 8009ffe:	3301      	adds	r3, #1
 800a000:	005b      	lsls	r3, r3, #1
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	fbb2 f3f3 	udiv	r3, r2, r3
 800a008:	61fb      	str	r3, [r7, #28]
          break;
 800a00a:	e039      	b.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a00c:	4b16      	ldr	r3, [pc, #88]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a018:	d134      	bne.n	800a084 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a01a:	4b13      	ldr	r3, [pc, #76]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a026:	d12d      	bne.n	800a084 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a028:	4b0f      	ldr	r3, [pc, #60]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	0a1b      	lsrs	r3, r3, #8
 800a02e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a032:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	fb02 f203 	mul.w	r2, r2, r3
 800a03c:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	091b      	lsrs	r3, r3, #4
 800a042:	f003 0307 	and.w	r3, r3, #7
 800a046:	3301      	adds	r3, #1
 800a048:	fbb2 f3f3 	udiv	r3, r2, r3
 800a04c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800a04e:	4b06      	ldr	r3, [pc, #24]	; (800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	0d5b      	lsrs	r3, r3, #21
 800a054:	f003 0303 	and.w	r3, r3, #3
 800a058:	3301      	adds	r3, #1
 800a05a:	005b      	lsls	r3, r3, #1
 800a05c:	69ba      	ldr	r2, [r7, #24]
 800a05e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a062:	61fb      	str	r3, [r7, #28]
          break;
 800a064:	e00e      	b.n	800a084 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800a066:	bf00      	nop
 800a068:	40021000 	.word	0x40021000
 800a06c:	0003d090 	.word	0x0003d090
 800a070:	0800ed38 	.word	0x0800ed38
 800a074:	00f42400 	.word	0x00f42400
 800a078:	007a1200 	.word	0x007a1200
          break;
 800a07c:	bf00      	nop
 800a07e:	e2f3      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a080:	bf00      	nop
 800a082:	e2f1      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a084:	bf00      	nop
        break;
 800a086:	e2ef      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a088:	4bac      	ldr	r3, [pc, #688]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a08e:	f003 0303 	and.w	r3, r3, #3
 800a092:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	2b03      	cmp	r3, #3
 800a098:	d827      	bhi.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a09a:	a201      	add	r2, pc, #4	; (adr r2, 800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800a09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a0:	0800a0b1 	.word	0x0800a0b1
 800a0a4:	0800a0b9 	.word	0x0800a0b9
 800a0a8:	0800a0c1 	.word	0x0800a0c1
 800a0ac:	0800a0d5 	.word	0x0800a0d5
          frequency = HAL_RCC_GetPCLK2Freq();
 800a0b0:	f7ff fb02 	bl	80096b8 <HAL_RCC_GetPCLK2Freq>
 800a0b4:	61f8      	str	r0, [r7, #28]
          break;
 800a0b6:	e01d      	b.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 800a0b8:	f7ff fa52 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 800a0bc:	61f8      	str	r0, [r7, #28]
          break;
 800a0be:	e019      	b.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0c0:	4b9e      	ldr	r3, [pc, #632]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0cc:	d10f      	bne.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 800a0ce:	4b9c      	ldr	r3, [pc, #624]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800a0d0:	61fb      	str	r3, [r7, #28]
          break;
 800a0d2:	e00c      	b.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a0d4:	4b99      	ldr	r3, [pc, #612]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0da:	f003 0302 	and.w	r3, r3, #2
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d107      	bne.n	800a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 800a0e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0e6:	61fb      	str	r3, [r7, #28]
          break;
 800a0e8:	e003      	b.n	800a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 800a0ea:	bf00      	nop
 800a0ec:	e2bc      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a0ee:	bf00      	nop
 800a0f0:	e2ba      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a0f2:	bf00      	nop
        break;
 800a0f4:	e2b8      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a0f6:	4b91      	ldr	r3, [pc, #580]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0fc:	f003 030c 	and.w	r3, r3, #12
 800a100:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	2b0c      	cmp	r3, #12
 800a106:	d83a      	bhi.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800a108:	a201      	add	r2, pc, #4	; (adr r2, 800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800a10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10e:	bf00      	nop
 800a110:	0800a145 	.word	0x0800a145
 800a114:	0800a17f 	.word	0x0800a17f
 800a118:	0800a17f 	.word	0x0800a17f
 800a11c:	0800a17f 	.word	0x0800a17f
 800a120:	0800a14d 	.word	0x0800a14d
 800a124:	0800a17f 	.word	0x0800a17f
 800a128:	0800a17f 	.word	0x0800a17f
 800a12c:	0800a17f 	.word	0x0800a17f
 800a130:	0800a155 	.word	0x0800a155
 800a134:	0800a17f 	.word	0x0800a17f
 800a138:	0800a17f 	.word	0x0800a17f
 800a13c:	0800a17f 	.word	0x0800a17f
 800a140:	0800a169 	.word	0x0800a169
          frequency = HAL_RCC_GetPCLK1Freq();
 800a144:	f7ff faa2 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800a148:	61f8      	str	r0, [r7, #28]
          break;
 800a14a:	e01d      	b.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 800a14c:	f7ff fa08 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 800a150:	61f8      	str	r0, [r7, #28]
          break;
 800a152:	e019      	b.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a154:	4b79      	ldr	r3, [pc, #484]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a15c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a160:	d10f      	bne.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 800a162:	4b77      	ldr	r3, [pc, #476]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800a164:	61fb      	str	r3, [r7, #28]
          break;
 800a166:	e00c      	b.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a168:	4b74      	ldr	r3, [pc, #464]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a16e:	f003 0302 	and.w	r3, r3, #2
 800a172:	2b02      	cmp	r3, #2
 800a174:	d107      	bne.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 800a176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a17a:	61fb      	str	r3, [r7, #28]
          break;
 800a17c:	e003      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 800a17e:	bf00      	nop
 800a180:	e272      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a182:	bf00      	nop
 800a184:	e270      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a186:	bf00      	nop
        break;
 800a188:	e26e      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a18a:	4b6c      	ldr	r3, [pc, #432]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a190:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a194:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	2b10      	cmp	r3, #16
 800a19a:	d00d      	beq.n	800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 800a19c:	2b10      	cmp	r3, #16
 800a19e:	d802      	bhi.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d005      	beq.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 800a1a4:	e024      	b.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 800a1a6:	2b20      	cmp	r3, #32
 800a1a8:	d00a      	beq.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 800a1aa:	2b30      	cmp	r3, #48	; 0x30
 800a1ac:	d012      	beq.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 800a1ae:	e01f      	b.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a1b0:	f7ff fa6c 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800a1b4:	61f8      	str	r0, [r7, #28]
          break;
 800a1b6:	e01b      	b.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 800a1b8:	f7ff f9d2 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 800a1bc:	61f8      	str	r0, [r7, #28]
          break;
 800a1be:	e017      	b.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a1c0:	4b5e      	ldr	r3, [pc, #376]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1cc:	d10d      	bne.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 800a1ce:	4b5c      	ldr	r3, [pc, #368]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800a1d0:	61fb      	str	r3, [r7, #28]
          break;
 800a1d2:	e00a      	b.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a1d4:	4b59      	ldr	r3, [pc, #356]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1da:	f003 0302 	and.w	r3, r3, #2
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d105      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 800a1e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1e6:	61fb      	str	r3, [r7, #28]
          break;
 800a1e8:	e001      	b.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800a1ea:	bf00      	nop
 800a1ec:	e23c      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a1ee:	bf00      	nop
        break;
 800a1f0:	e23a      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a1f2:	4b52      	ldr	r3, [pc, #328]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a1fc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	2b40      	cmp	r3, #64	; 0x40
 800a202:	d00d      	beq.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 800a204:	2b40      	cmp	r3, #64	; 0x40
 800a206:	d802      	bhi.n	800a20e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d005      	beq.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 800a20c:	e024      	b.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 800a20e:	2b80      	cmp	r3, #128	; 0x80
 800a210:	d00a      	beq.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800a212:	2bc0      	cmp	r3, #192	; 0xc0
 800a214:	d012      	beq.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 800a216:	e01f      	b.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a218:	f7ff fa38 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800a21c:	61f8      	str	r0, [r7, #28]
          break;
 800a21e:	e01b      	b.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 800a220:	f7ff f99e 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 800a224:	61f8      	str	r0, [r7, #28]
          break;
 800a226:	e017      	b.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a228:	4b44      	ldr	r3, [pc, #272]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a234:	d10d      	bne.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 800a236:	4b42      	ldr	r3, [pc, #264]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800a238:	61fb      	str	r3, [r7, #28]
          break;
 800a23a:	e00a      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a23c:	4b3f      	ldr	r3, [pc, #252]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a242:	f003 0302 	and.w	r3, r3, #2
 800a246:	2b02      	cmp	r3, #2
 800a248:	d105      	bne.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 800a24a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a24e:	61fb      	str	r3, [r7, #28]
          break;
 800a250:	e001      	b.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 800a252:	bf00      	nop
 800a254:	e208      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a256:	bf00      	nop
        break;
 800a258:	e206      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a25a:	4b38      	ldr	r3, [pc, #224]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a264:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a26c:	d010      	beq.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800a26e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a272:	d802      	bhi.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800a274:	2b00      	cmp	r3, #0
 800a276:	d007      	beq.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 800a278:	e026      	b.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 800a27a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a27e:	d00b      	beq.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800a280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a284:	d012      	beq.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 800a286:	e01f      	b.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a288:	f7ff fa00 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800a28c:	61f8      	str	r0, [r7, #28]
          break;
 800a28e:	e01b      	b.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 800a290:	f7ff f966 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 800a294:	61f8      	str	r0, [r7, #28]
          break;
 800a296:	e017      	b.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a298:	4b28      	ldr	r3, [pc, #160]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2a4:	d10d      	bne.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 800a2a6:	4b26      	ldr	r3, [pc, #152]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800a2a8:	61fb      	str	r3, [r7, #28]
          break;
 800a2aa:	e00a      	b.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a2ac:	4b23      	ldr	r3, [pc, #140]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a2ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2b2:	f003 0302 	and.w	r3, r3, #2
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d105      	bne.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 800a2ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2be:	61fb      	str	r3, [r7, #28]
          break;
 800a2c0:	e001      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 800a2c2:	bf00      	nop
 800a2c4:	e1d0      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a2c6:	bf00      	nop
        break;
 800a2c8:	e1ce      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a2ca:	4b1c      	ldr	r3, [pc, #112]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a2cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a2d4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2dc:	d010      	beq.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800a2de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2e2:	d802      	bhi.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d007      	beq.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 800a2e8:	e026      	b.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 800a2ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2ee:	d00b      	beq.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800a2f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2f4:	d012      	beq.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 800a2f6:	e01f      	b.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a2f8:	f7ff f9c8 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800a2fc:	61f8      	str	r0, [r7, #28]
          break;
 800a2fe:	e01b      	b.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 800a300:	f7ff f92e 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 800a304:	61f8      	str	r0, [r7, #28]
          break;
 800a306:	e017      	b.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a308:	4b0c      	ldr	r3, [pc, #48]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a314:	d10d      	bne.n	800a332 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 800a316:	4b0a      	ldr	r3, [pc, #40]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800a318:	61fb      	str	r3, [r7, #28]
          break;
 800a31a:	e00a      	b.n	800a332 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a31c:	4b07      	ldr	r3, [pc, #28]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800a31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a322:	f003 0302 	and.w	r3, r3, #2
 800a326:	2b02      	cmp	r3, #2
 800a328:	d105      	bne.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 800a32a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a32e:	61fb      	str	r3, [r7, #28]
          break;
 800a330:	e001      	b.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 800a332:	bf00      	nop
 800a334:	e198      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a336:	bf00      	nop
        break;
 800a338:	e196      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800a33a:	bf00      	nop
 800a33c:	40021000 	.word	0x40021000
 800a340:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a344:	4bad      	ldr	r3, [pc, #692]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a34a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a34e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a356:	d036      	beq.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 800a358:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a35c:	d003      	beq.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a35e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a362:	d004      	beq.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 800a364:	e05e      	b.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetSysClockFreq();
 800a366:	f7ff f8fb 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 800a36a:	61f8      	str	r0, [r7, #28]
          break;
 800a36c:	e05a      	b.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800a36e:	4ba3      	ldr	r3, [pc, #652]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a37a:	d150      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800a37c:	4b9f      	ldr	r3, [pc, #636]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a37e:	691b      	ldr	r3, [r3, #16]
 800a380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a384:	2b00      	cmp	r3, #0
 800a386:	d04a      	beq.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a388:	4b9c      	ldr	r3, [pc, #624]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	0a1b      	lsrs	r3, r3, #8
 800a38e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a392:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	fb02 f203 	mul.w	r2, r2, r3
 800a39c:	4b97      	ldr	r3, [pc, #604]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	091b      	lsrs	r3, r3, #4
 800a3a2:	f003 0307 	and.w	r3, r3, #7
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ac:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800a3ae:	4b93      	ldr	r3, [pc, #588]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	0e5b      	lsrs	r3, r3, #25
 800a3b4:	f003 0303 	and.w	r3, r3, #3
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	005b      	lsls	r3, r3, #1
 800a3bc:	69ba      	ldr	r2, [r7, #24]
 800a3be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3c2:	61fb      	str	r3, [r7, #28]
          break;
 800a3c4:	e02b      	b.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800a3c6:	4b8d      	ldr	r3, [pc, #564]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3d2:	d126      	bne.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 800a3d4:	4b89      	ldr	r3, [pc, #548]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d020      	beq.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a3e0:	4b86      	ldr	r3, [pc, #536]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	0a1b      	lsrs	r3, r3, #8
 800a3e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ea:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	fb02 f203 	mul.w	r2, r2, r3
 800a3f4:	4b81      	ldr	r3, [pc, #516]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	091b      	lsrs	r3, r3, #4
 800a3fa:	f003 0307 	and.w	r3, r3, #7
 800a3fe:	3301      	adds	r3, #1
 800a400:	fbb2 f3f3 	udiv	r3, r2, r3
 800a404:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800a406:	4b7d      	ldr	r3, [pc, #500]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	0e5b      	lsrs	r3, r3, #25
 800a40c:	f003 0303 	and.w	r3, r3, #3
 800a410:	3301      	adds	r3, #1
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	69ba      	ldr	r2, [r7, #24]
 800a416:	fbb2 f3f3 	udiv	r3, r2, r3
 800a41a:	61fb      	str	r3, [r7, #28]
          break;
 800a41c:	e001      	b.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          break;
 800a41e:	bf00      	nop
 800a420:	e122      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a422:	bf00      	nop
        break;
 800a424:	e120      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a426:	4b75      	ldr	r3, [pc, #468]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a42c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a430:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d103      	bne.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          frequency = HAL_RCC_GetPCLK2Freq();
 800a438:	f7ff f93e 	bl	80096b8 <HAL_RCC_GetPCLK2Freq>
 800a43c:	61f8      	str	r0, [r7, #28]
        break;
 800a43e:	e113      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = HAL_RCC_GetSysClockFreq();
 800a440:	f7ff f88e 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 800a444:	61f8      	str	r0, [r7, #28]
        break;
 800a446:	e10f      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a448:	4b6c      	ldr	r3, [pc, #432]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a44e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a452:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a45a:	d009      	beq.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a45c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a460:	d00a      	beq.n	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 800a462:	2b00      	cmp	r3, #0
 800a464:	d000      	beq.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          break;
 800a466:	e011      	b.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a468:	f7ff f910 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800a46c:	61f8      	str	r0, [r7, #28]
          break;
 800a46e:	e00d      	b.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetSysClockFreq();
 800a470:	f7ff f876 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 800a474:	61f8      	str	r0, [r7, #28]
          break;
 800a476:	e009      	b.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a478:	4b60      	ldr	r3, [pc, #384]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a484:	d101      	bne.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
            frequency = HSI_VALUE;
 800a486:	4b5e      	ldr	r3, [pc, #376]	; (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800a488:	61fb      	str	r3, [r7, #28]
          break;
 800a48a:	bf00      	nop
        break;
 800a48c:	e0ec      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a48e:	4b5b      	ldr	r3, [pc, #364]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a494:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a498:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4a0:	d009      	beq.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800a4a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4a6:	d00a      	beq.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d000      	beq.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          break;
 800a4ac:	e011      	b.n	800a4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a4ae:	f7ff f8ed 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800a4b2:	61f8      	str	r0, [r7, #28]
          break;
 800a4b4:	e00d      	b.n	800a4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetSysClockFreq();
 800a4b6:	f7ff f853 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 800a4ba:	61f8      	str	r0, [r7, #28]
          break;
 800a4bc:	e009      	b.n	800a4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a4be:	4b4f      	ldr	r3, [pc, #316]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4ca:	d101      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
            frequency = HSI_VALUE;
 800a4cc:	4b4c      	ldr	r3, [pc, #304]	; (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800a4ce:	61fb      	str	r3, [r7, #28]
          break;
 800a4d0:	bf00      	nop
        break;
 800a4d2:	e0c9      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a4d4:	4b49      	ldr	r3, [pc, #292]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a4de:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4e6:	d009      	beq.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 800a4e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4ec:	d00a      	beq.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d000      	beq.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          break;
 800a4f2:	e011      	b.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a4f4:	f7ff f8ca 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800a4f8:	61f8      	str	r0, [r7, #28]
          break;
 800a4fa:	e00d      	b.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetSysClockFreq();
 800a4fc:	f7ff f830 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 800a500:	61f8      	str	r0, [r7, #28]
          break;
 800a502:	e009      	b.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a504:	4b3d      	ldr	r3, [pc, #244]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a50c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a510:	d101      	bne.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            frequency = HSI_VALUE;
 800a512:	4b3b      	ldr	r3, [pc, #236]	; (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800a514:	61fb      	str	r3, [r7, #28]
          break;
 800a516:	bf00      	nop
        break;
 800a518:	e0a6      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a51a:	4b38      	ldr	r3, [pc, #224]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a520:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a524:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a52c:	d010      	beq.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 800a52e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a532:	d802      	bhi.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800a534:	2b00      	cmp	r3, #0
 800a536:	d007      	beq.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
          break;
 800a538:	e02f      	b.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        switch(srcclk)
 800a53a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a53e:	d012      	beq.n	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 800a540:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a544:	d019      	beq.n	800a57a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          break;
 800a546:	e028      	b.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a548:	f7ff f8a0 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800a54c:	61f8      	str	r0, [r7, #28]
          break;
 800a54e:	e024      	b.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a550:	4b2a      	ldr	r3, [pc, #168]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a556:	f003 0302 	and.w	r3, r3, #2
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d118      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
              frequency = LSI_VALUE;
 800a55e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a562:	61fb      	str	r3, [r7, #28]
          break;
 800a564:	e014      	b.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a566:	4b25      	ldr	r3, [pc, #148]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a56e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a572:	d10f      	bne.n	800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 800a574:	4b22      	ldr	r3, [pc, #136]	; (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800a576:	61fb      	str	r3, [r7, #28]
          break;
 800a578:	e00c      	b.n	800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a57a:	4b20      	ldr	r3, [pc, #128]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a580:	f003 0302 	and.w	r3, r3, #2
 800a584:	2b02      	cmp	r3, #2
 800a586:	d107      	bne.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
            frequency = LSE_VALUE;
 800a588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a58c:	61fb      	str	r3, [r7, #28]
          break;
 800a58e:	e003      	b.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 800a590:	bf00      	nop
 800a592:	e069      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a594:	bf00      	nop
 800a596:	e067      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a598:	bf00      	nop
        break;
 800a59a:	e065      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a59c:	4b17      	ldr	r3, [pc, #92]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a5a6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5ae:	d010      	beq.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 800a5b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5b4:	d802      	bhi.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d007      	beq.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 800a5ba:	e033      	b.n	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        switch(srcclk)
 800a5bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5c0:	d012      	beq.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 800a5c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5c6:	d01d      	beq.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          break;
 800a5c8:	e02c      	b.n	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a5ca:	f7ff f85f 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800a5ce:	61f8      	str	r0, [r7, #28]
          break;
 800a5d0:	e028      	b.n	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a5d2:	4b0a      	ldr	r3, [pc, #40]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a5d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5d8:	f003 0302 	and.w	r3, r3, #2
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	d11c      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
              frequency = LSI_VALUE;
 800a5e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a5e4:	61fb      	str	r3, [r7, #28]
          break;
 800a5e6:	e018      	b.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5e8:	4b04      	ldr	r3, [pc, #16]	; (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5f4:	d113      	bne.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
            frequency = HSI_VALUE;
 800a5f6:	4b02      	ldr	r3, [pc, #8]	; (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800a5f8:	61fb      	str	r3, [r7, #28]
          break;
 800a5fa:	e010      	b.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a5fc:	40021000 	.word	0x40021000
 800a600:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a604:	4b1b      	ldr	r3, [pc, #108]	; (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 800a606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a60a:	f003 0302 	and.w	r3, r3, #2
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d107      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
            frequency = LSE_VALUE;
 800a612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a616:	61fb      	str	r3, [r7, #28]
          break;
 800a618:	e003      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          break;
 800a61a:	bf00      	nop
 800a61c:	e024      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a61e:	bf00      	nop
 800a620:	e022      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800a622:	bf00      	nop
        break;
 800a624:	e020      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800a626:	4b13      	ldr	r3, [pc, #76]	; (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 800a628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a62c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a630:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d003      	beq.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800a638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a63c:	d004      	beq.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          break;
 800a63e:	e00d      	b.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a640:	f7ff f824 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800a644:	61f8      	str	r0, [r7, #28]
          break;
 800a646:	e009      	b.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a648:	4b0a      	ldr	r3, [pc, #40]	; (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a654:	d101      	bne.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 800a656:	4b08      	ldr	r3, [pc, #32]	; (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
 800a658:	61fb      	str	r3, [r7, #28]
          break;
 800a65a:	bf00      	nop
        break;
 800a65c:	e004      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 800a65e:	bf00      	nop
 800a660:	e002      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 800a662:	bf00      	nop
 800a664:	e000      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 800a666:	bf00      	nop
    }
  }

  return(frequency);
 800a668:	69fb      	ldr	r3, [r7, #28]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	40021000 	.word	0x40021000
 800a678:	00f42400 	.word	0x00f42400

0800a67c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a67c:	b480      	push	{r7}
 800a67e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a680:	4b05      	ldr	r3, [pc, #20]	; (800a698 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a04      	ldr	r2, [pc, #16]	; (800a698 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a686:	f043 0304 	orr.w	r3, r3, #4
 800a68a:	6013      	str	r3, [r2, #0]
}
 800a68c:	bf00      	nop
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	40021000 	.word	0x40021000

0800a69c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a6aa:	4b73      	ldr	r3, [pc, #460]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	f003 0303 	and.w	r3, r3, #3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d018      	beq.n	800a6e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a6b6:	4b70      	ldr	r3, [pc, #448]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	f003 0203 	and.w	r2, r3, #3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d10d      	bne.n	800a6e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
       ||
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d009      	beq.n	800a6e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a6ce:	4b6a      	ldr	r3, [pc, #424]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	091b      	lsrs	r3, r3, #4
 800a6d4:	f003 0307 	and.w	r3, r3, #7
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
       ||
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d044      	beq.n	800a76c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	73fb      	strb	r3, [r7, #15]
 800a6e6:	e041      	b.n	800a76c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d00c      	beq.n	800a70a <RCCEx_PLLSAI1_Config+0x6e>
 800a6f0:	2b03      	cmp	r3, #3
 800a6f2:	d013      	beq.n	800a71c <RCCEx_PLLSAI1_Config+0x80>
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d120      	bne.n	800a73a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a6f8:	4b5f      	ldr	r3, [pc, #380]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 0302 	and.w	r3, r3, #2
 800a700:	2b00      	cmp	r3, #0
 800a702:	d11d      	bne.n	800a740 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a708:	e01a      	b.n	800a740 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a70a:	4b5b      	ldr	r3, [pc, #364]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a712:	2b00      	cmp	r3, #0
 800a714:	d116      	bne.n	800a744 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a71a:	e013      	b.n	800a744 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a71c:	4b56      	ldr	r3, [pc, #344]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10f      	bne.n	800a748 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a728:	4b53      	ldr	r3, [pc, #332]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d109      	bne.n	800a748 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a738:	e006      	b.n	800a748 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	73fb      	strb	r3, [r7, #15]
      break;
 800a73e:	e004      	b.n	800a74a <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a740:	bf00      	nop
 800a742:	e002      	b.n	800a74a <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a744:	bf00      	nop
 800a746:	e000      	b.n	800a74a <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a748:	bf00      	nop
    }

    if(status == HAL_OK)
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10d      	bne.n	800a76c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a750:	4b49      	ldr	r3, [pc, #292]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6819      	ldr	r1, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	3b01      	subs	r3, #1
 800a762:	011b      	lsls	r3, r3, #4
 800a764:	430b      	orrs	r3, r1
 800a766:	4944      	ldr	r1, [pc, #272]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a768:	4313      	orrs	r3, r2
 800a76a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d17d      	bne.n	800a86e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a772:	4b41      	ldr	r3, [pc, #260]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a40      	ldr	r2, [pc, #256]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a778:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a77c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a77e:	f7f9 fa17 	bl	8003bb0 <HAL_GetTick>
 800a782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a784:	e009      	b.n	800a79a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a786:	f7f9 fa13 	bl	8003bb0 <HAL_GetTick>
 800a78a:	4602      	mov	r2, r0
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	2b02      	cmp	r3, #2
 800a792:	d902      	bls.n	800a79a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800a794:	2303      	movs	r3, #3
 800a796:	73fb      	strb	r3, [r7, #15]
        break;
 800a798:	e005      	b.n	800a7a6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a79a:	4b37      	ldr	r3, [pc, #220]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1ef      	bne.n	800a786 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d160      	bne.n	800a86e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d111      	bne.n	800a7d6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a7b2:	4b31      	ldr	r3, [pc, #196]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a7ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	6892      	ldr	r2, [r2, #8]
 800a7c2:	0211      	lsls	r1, r2, #8
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	68d2      	ldr	r2, [r2, #12]
 800a7c8:	0912      	lsrs	r2, r2, #4
 800a7ca:	0452      	lsls	r2, r2, #17
 800a7cc:	430a      	orrs	r2, r1
 800a7ce:	492a      	ldr	r1, [pc, #168]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	610b      	str	r3, [r1, #16]
 800a7d4:	e027      	b.n	800a826 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d112      	bne.n	800a802 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a7dc:	4b26      	ldr	r3, [pc, #152]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a7e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	6892      	ldr	r2, [r2, #8]
 800a7ec:	0211      	lsls	r1, r2, #8
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	6912      	ldr	r2, [r2, #16]
 800a7f2:	0852      	lsrs	r2, r2, #1
 800a7f4:	3a01      	subs	r2, #1
 800a7f6:	0552      	lsls	r2, r2, #21
 800a7f8:	430a      	orrs	r2, r1
 800a7fa:	491f      	ldr	r1, [pc, #124]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	610b      	str	r3, [r1, #16]
 800a800:	e011      	b.n	800a826 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a802:	4b1d      	ldr	r3, [pc, #116]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a80a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	6892      	ldr	r2, [r2, #8]
 800a812:	0211      	lsls	r1, r2, #8
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	6952      	ldr	r2, [r2, #20]
 800a818:	0852      	lsrs	r2, r2, #1
 800a81a:	3a01      	subs	r2, #1
 800a81c:	0652      	lsls	r2, r2, #25
 800a81e:	430a      	orrs	r2, r1
 800a820:	4915      	ldr	r1, [pc, #84]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a822:	4313      	orrs	r3, r2
 800a824:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a826:	4b14      	ldr	r3, [pc, #80]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a13      	ldr	r2, [pc, #76]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a82c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a830:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a832:	f7f9 f9bd 	bl	8003bb0 <HAL_GetTick>
 800a836:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a838:	e009      	b.n	800a84e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a83a:	f7f9 f9b9 	bl	8003bb0 <HAL_GetTick>
 800a83e:	4602      	mov	r2, r0
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	2b02      	cmp	r3, #2
 800a846:	d902      	bls.n	800a84e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800a848:	2303      	movs	r3, #3
 800a84a:	73fb      	strb	r3, [r7, #15]
          break;
 800a84c:	e005      	b.n	800a85a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a84e:	4b0a      	ldr	r3, [pc, #40]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0ef      	beq.n	800a83a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800a85a:	7bfb      	ldrb	r3, [r7, #15]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d106      	bne.n	800a86e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a860:	4b05      	ldr	r3, [pc, #20]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a862:	691a      	ldr	r2, [r3, #16]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	4903      	ldr	r1, [pc, #12]	; (800a878 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a86a:	4313      	orrs	r3, r2
 800a86c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	40021000 	.word	0x40021000

0800a87c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a886:	2300      	movs	r3, #0
 800a888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a88a:	4b68      	ldr	r3, [pc, #416]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	f003 0303 	and.w	r3, r3, #3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d018      	beq.n	800a8c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a896:	4b65      	ldr	r3, [pc, #404]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	f003 0203 	and.w	r2, r3, #3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d10d      	bne.n	800a8c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
       ||
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d009      	beq.n	800a8c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a8ae:	4b5f      	ldr	r3, [pc, #380]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	091b      	lsrs	r3, r3, #4
 800a8b4:	f003 0307 	and.w	r3, r3, #7
 800a8b8:	1c5a      	adds	r2, r3, #1
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685b      	ldr	r3, [r3, #4]
       ||
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d044      	beq.n	800a94c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	73fb      	strb	r3, [r7, #15]
 800a8c6:	e041      	b.n	800a94c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d00c      	beq.n	800a8ea <RCCEx_PLLSAI2_Config+0x6e>
 800a8d0:	2b03      	cmp	r3, #3
 800a8d2:	d013      	beq.n	800a8fc <RCCEx_PLLSAI2_Config+0x80>
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d120      	bne.n	800a91a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a8d8:	4b54      	ldr	r3, [pc, #336]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 0302 	and.w	r3, r3, #2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d11d      	bne.n	800a920 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a8e8:	e01a      	b.n	800a920 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a8ea:	4b50      	ldr	r3, [pc, #320]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d116      	bne.n	800a924 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a8fa:	e013      	b.n	800a924 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a8fc:	4b4b      	ldr	r3, [pc, #300]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10f      	bne.n	800a928 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a908:	4b48      	ldr	r3, [pc, #288]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a910:	2b00      	cmp	r3, #0
 800a912:	d109      	bne.n	800a928 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a918:	e006      	b.n	800a928 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	73fb      	strb	r3, [r7, #15]
      break;
 800a91e:	e004      	b.n	800a92a <RCCEx_PLLSAI2_Config+0xae>
      break;
 800a920:	bf00      	nop
 800a922:	e002      	b.n	800a92a <RCCEx_PLLSAI2_Config+0xae>
      break;
 800a924:	bf00      	nop
 800a926:	e000      	b.n	800a92a <RCCEx_PLLSAI2_Config+0xae>
      break;
 800a928:	bf00      	nop
    }

    if(status == HAL_OK)
 800a92a:	7bfb      	ldrb	r3, [r7, #15]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10d      	bne.n	800a94c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a930:	4b3e      	ldr	r3, [pc, #248]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6819      	ldr	r1, [r3, #0]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	3b01      	subs	r3, #1
 800a942:	011b      	lsls	r3, r3, #4
 800a944:	430b      	orrs	r3, r1
 800a946:	4939      	ldr	r1, [pc, #228]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a948:	4313      	orrs	r3, r2
 800a94a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d167      	bne.n	800aa22 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a952:	4b36      	ldr	r3, [pc, #216]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a35      	ldr	r2, [pc, #212]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a95c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a95e:	f7f9 f927 	bl	8003bb0 <HAL_GetTick>
 800a962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a964:	e009      	b.n	800a97a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a966:	f7f9 f923 	bl	8003bb0 <HAL_GetTick>
 800a96a:	4602      	mov	r2, r0
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	1ad3      	subs	r3, r2, r3
 800a970:	2b02      	cmp	r3, #2
 800a972:	d902      	bls.n	800a97a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800a974:	2303      	movs	r3, #3
 800a976:	73fb      	strb	r3, [r7, #15]
        break;
 800a978:	e005      	b.n	800a986 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a97a:	4b2c      	ldr	r3, [pc, #176]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1ef      	bne.n	800a966 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800a986:	7bfb      	ldrb	r3, [r7, #15]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d14a      	bne.n	800aa22 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d111      	bne.n	800a9b6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a992:	4b26      	ldr	r3, [pc, #152]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a994:	695b      	ldr	r3, [r3, #20]
 800a996:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a99a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	6892      	ldr	r2, [r2, #8]
 800a9a2:	0211      	lsls	r1, r2, #8
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	68d2      	ldr	r2, [r2, #12]
 800a9a8:	0912      	lsrs	r2, r2, #4
 800a9aa:	0452      	lsls	r2, r2, #17
 800a9ac:	430a      	orrs	r2, r1
 800a9ae:	491f      	ldr	r1, [pc, #124]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	614b      	str	r3, [r1, #20]
 800a9b4:	e011      	b.n	800a9da <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a9b6:	4b1d      	ldr	r3, [pc, #116]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a9be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	6892      	ldr	r2, [r2, #8]
 800a9c6:	0211      	lsls	r1, r2, #8
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	6912      	ldr	r2, [r2, #16]
 800a9cc:	0852      	lsrs	r2, r2, #1
 800a9ce:	3a01      	subs	r2, #1
 800a9d0:	0652      	lsls	r2, r2, #25
 800a9d2:	430a      	orrs	r2, r1
 800a9d4:	4915      	ldr	r1, [pc, #84]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a9da:	4b14      	ldr	r3, [pc, #80]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a13      	ldr	r2, [pc, #76]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800a9e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9e6:	f7f9 f8e3 	bl	8003bb0 <HAL_GetTick>
 800a9ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a9ec:	e009      	b.n	800aa02 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a9ee:	f7f9 f8df 	bl	8003bb0 <HAL_GetTick>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d902      	bls.n	800aa02 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	73fb      	strb	r3, [r7, #15]
          break;
 800aa00:	e005      	b.n	800aa0e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800aa02:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0ef      	beq.n	800a9ee <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d106      	bne.n	800aa22 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800aa14:	4b05      	ldr	r3, [pc, #20]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800aa16:	695a      	ldr	r2, [r3, #20]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	695b      	ldr	r3, [r3, #20]
 800aa1c:	4903      	ldr	r1, [pc, #12]	; (800aa2c <RCCEx_PLLSAI2_Config+0x1b0>)
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	40021000 	.word	0x40021000

0800aa30 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b089      	sub	sp, #36	; 0x24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800aa42:	2300      	movs	r3, #0
 800aa44:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa4c:	d10c      	bne.n	800aa68 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800aa4e:	4b6e      	ldr	r3, [pc, #440]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800aa50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa54:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800aa58:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800aa60:	d112      	bne.n	800aa88 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800aa62:	4b6a      	ldr	r3, [pc, #424]	; (800ac0c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800aa64:	61fb      	str	r3, [r7, #28]
 800aa66:	e00f      	b.n	800aa88 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa6e:	d10b      	bne.n	800aa88 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800aa70:	4b65      	ldr	r3, [pc, #404]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800aa72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa76:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800aa7a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa82:	d101      	bne.n	800aa88 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800aa84:	4b61      	ldr	r3, [pc, #388]	; (800ac0c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800aa86:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f040 80b4 	bne.w	800abf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa9a:	d003      	beq.n	800aaa4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaa2:	d135      	bne.n	800ab10 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800aaa4:	4b58      	ldr	r3, [pc, #352]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aab0:	f040 80a1 	bne.w	800abf6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800aab4:	4b54      	ldr	r3, [pc, #336]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 809a 	beq.w	800abf6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800aac2:	4b51      	ldr	r3, [pc, #324]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	091b      	lsrs	r3, r3, #4
 800aac8:	f003 0307 	and.w	r3, r3, #7
 800aacc:	3301      	adds	r3, #1
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aad4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800aad6:	4b4c      	ldr	r3, [pc, #304]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	0a1b      	lsrs	r3, r3, #8
 800aadc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800aae8:	4b47      	ldr	r3, [pc, #284]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d002      	beq.n	800aafa <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800aaf4:	2311      	movs	r3, #17
 800aaf6:	617b      	str	r3, [r7, #20]
 800aaf8:	e001      	b.n	800aafe <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800aafa:	2307      	movs	r3, #7
 800aafc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	fb02 f203 	mul.w	r2, r2, r3
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab0c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ab0e:	e072      	b.n	800abf6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d133      	bne.n	800ab7e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800ab16:	4b3c      	ldr	r3, [pc, #240]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab22:	d169      	bne.n	800abf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800ab24:	4b38      	ldr	r3, [pc, #224]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d063      	beq.n	800abf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ab30:	4b35      	ldr	r3, [pc, #212]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	091b      	lsrs	r3, r3, #4
 800ab36:	f003 0307 	and.w	r3, r3, #7
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab42:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ab44:	4b30      	ldr	r3, [pc, #192]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	0a1b      	lsrs	r3, r3, #8
 800ab4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab4e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10a      	bne.n	800ab6c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800ab56:	4b2c      	ldr	r3, [pc, #176]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d002      	beq.n	800ab68 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800ab62:	2311      	movs	r3, #17
 800ab64:	617b      	str	r3, [r7, #20]
 800ab66:	e001      	b.n	800ab6c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800ab68:	2307      	movs	r3, #7
 800ab6a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	fb02 f203 	mul.w	r2, r2, r3
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab7a:	61fb      	str	r3, [r7, #28]
 800ab7c:	e03c      	b.n	800abf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab84:	d003      	beq.n	800ab8e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab8c:	d134      	bne.n	800abf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800ab8e:	4b1e      	ldr	r3, [pc, #120]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab9a:	d12d      	bne.n	800abf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800ab9c:	4b1a      	ldr	r3, [pc, #104]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ab9e:	695b      	ldr	r3, [r3, #20]
 800aba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d027      	beq.n	800abf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800aba8:	4b17      	ldr	r3, [pc, #92]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	091b      	lsrs	r3, r3, #4
 800abae:	f003 0307 	and.w	r3, r3, #7
 800abb2:	3301      	adds	r3, #1
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abba:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800abbc:	4b12      	ldr	r3, [pc, #72]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	0a1b      	lsrs	r3, r3, #8
 800abc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abc6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10a      	bne.n	800abe4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800abce:	4b0e      	ldr	r3, [pc, #56]	; (800ac08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800abd0:	695b      	ldr	r3, [r3, #20]
 800abd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d002      	beq.n	800abe0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800abda:	2311      	movs	r3, #17
 800abdc:	617b      	str	r3, [r7, #20]
 800abde:	e001      	b.n	800abe4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800abe0:	2307      	movs	r3, #7
 800abe2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	fb02 f203 	mul.w	r2, r2, r3
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf2:	61fb      	str	r3, [r7, #28]
 800abf4:	e000      	b.n	800abf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800abf6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800abf8:	69fb      	ldr	r3, [r7, #28]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3724      	adds	r7, #36	; 0x24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	40021000 	.word	0x40021000
 800ac0c:	001fff68 	.word	0x001fff68

0800ac10 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b088      	sub	sp, #32
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d101      	bne.n	800ac22 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e153      	b.n	800aeca <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d106      	bne.n	800ac3c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7f7 f8f2 	bl	8001e20 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fcbb 	bl	800b5b8 <SAI_Disable>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e13e      	b.n	800aeca <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2202      	movs	r2, #2
 800ac50:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d007      	beq.n	800ac6c <HAL_SAI_Init+0x5c>
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d302      	bcc.n	800ac66 <HAL_SAI_Init+0x56>
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d006      	beq.n	800ac72 <HAL_SAI_Init+0x62>
 800ac64:	e008      	b.n	800ac78 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	61fb      	str	r3, [r7, #28]
      break;
 800ac6a:	e008      	b.n	800ac7e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ac6c:	2310      	movs	r3, #16
 800ac6e:	61fb      	str	r3, [r7, #28]
      break;
 800ac70:	e005      	b.n	800ac7e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ac72:	2320      	movs	r3, #32
 800ac74:	61fb      	str	r3, [r7, #28]
      break;
 800ac76:	e002      	b.n	800ac7e <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	61fb      	str	r3, [r7, #28]
      break;
 800ac7c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d81d      	bhi.n	800acc2 <HAL_SAI_Init+0xb2>
 800ac86:	a201      	add	r2, pc, #4	; (adr r2, 800ac8c <HAL_SAI_Init+0x7c>)
 800ac88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8c:	0800ac9d 	.word	0x0800ac9d
 800ac90:	0800aca3 	.word	0x0800aca3
 800ac94:	0800acab 	.word	0x0800acab
 800ac98:	0800acb3 	.word	0x0800acb3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	617b      	str	r3, [r7, #20]
      break;
 800aca0:	e012      	b.n	800acc8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800aca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aca6:	617b      	str	r3, [r7, #20]
      break;
 800aca8:	e00e      	b.n	800acc8 <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800acaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acae:	617b      	str	r3, [r7, #20]
      break;
 800acb0:	e00a      	b.n	800acc8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800acb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acb6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	f043 0301 	orr.w	r3, r3, #1
 800acbe:	61fb      	str	r3, [r7, #28]
      break;
 800acc0:	e002      	b.n	800acc8 <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	617b      	str	r3, [r7, #20]
      break;
 800acc6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a81      	ldr	r2, [pc, #516]	; (800aed4 <HAL_SAI_Init+0x2c4>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d004      	beq.n	800acdc <HAL_SAI_Init+0xcc>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a80      	ldr	r2, [pc, #512]	; (800aed8 <HAL_SAI_Init+0x2c8>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d103      	bne.n	800ace4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800acdc:	4a7f      	ldr	r2, [pc, #508]	; (800aedc <HAL_SAI_Init+0x2cc>)
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	6013      	str	r3, [r2, #0]
 800ace2:	e002      	b.n	800acea <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ace4:	4a7e      	ldr	r2, [pc, #504]	; (800aee0 <HAL_SAI_Init+0x2d0>)
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	69db      	ldr	r3, [r3, #28]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d041      	beq.n	800ad76 <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a77      	ldr	r2, [pc, #476]	; (800aed4 <HAL_SAI_Init+0x2c4>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d004      	beq.n	800ad06 <HAL_SAI_Init+0xf6>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a75      	ldr	r2, [pc, #468]	; (800aed8 <HAL_SAI_Init+0x2c8>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d105      	bne.n	800ad12 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ad06:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ad0a:	f7ff f831 	bl	8009d70 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad0e:	6138      	str	r0, [r7, #16]
 800ad10:	e004      	b.n	800ad1c <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ad12:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ad16:	f7ff f82b 	bl	8009d70 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad1a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	461a      	mov	r2, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	69db      	ldr	r3, [r3, #28]
 800ad2c:	025b      	lsls	r3, r3, #9
 800ad2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad32:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	4a6b      	ldr	r2, [pc, #428]	; (800aee4 <HAL_SAI_Init+0x2d4>)
 800ad38:	fba2 2303 	umull	r2, r3, r2, r3
 800ad3c:	08da      	lsrs	r2, r3, #3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ad42:	68f9      	ldr	r1, [r7, #12]
 800ad44:	4b67      	ldr	r3, [pc, #412]	; (800aee4 <HAL_SAI_Init+0x2d4>)
 800ad46:	fba3 2301 	umull	r2, r3, r3, r1
 800ad4a:	08da      	lsrs	r2, r3, #3
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4413      	add	r3, r2
 800ad52:	005b      	lsls	r3, r3, #1
 800ad54:	1aca      	subs	r2, r1, r3
 800ad56:	2a08      	cmp	r2, #8
 800ad58:	d904      	bls.n	800ad64 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a1b      	ldr	r3, [r3, #32]
 800ad5e:	1c5a      	adds	r2, r3, #1
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad68:	2b04      	cmp	r3, #4
 800ad6a:	d104      	bne.n	800ad76 <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a1b      	ldr	r3, [r3, #32]
 800ad70:	085a      	lsrs	r2, r3, #1
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d003      	beq.n	800ad86 <HAL_SAI_Init+0x176>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d109      	bne.n	800ad9a <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d101      	bne.n	800ad92 <HAL_SAI_Init+0x182>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	e001      	b.n	800ad96 <HAL_SAI_Init+0x186>
 800ad92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad96:	61bb      	str	r3, [r7, #24]
 800ad98:	e008      	b.n	800adac <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d102      	bne.n	800ada8 <HAL_SAI_Init+0x198>
 800ada2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ada6:	e000      	b.n	800adaa <HAL_SAI_Init+0x19a>
 800ada8:	2300      	movs	r3, #0
 800adaa:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6819      	ldr	r1, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	4b4c      	ldr	r3, [pc, #304]	; (800aee8 <HAL_SAI_Init+0x2d8>)
 800adb8:	400b      	ands	r3, r1
 800adba:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6819      	ldr	r1, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	685a      	ldr	r2, [r3, #4]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adca:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800add0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add6:	431a      	orrs	r2, r3
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800ade4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800adf0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	051b      	lsls	r3, r3, #20
 800adf8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	430a      	orrs	r2, r1
 800ae00:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	6812      	ldr	r2, [r2, #0]
 800ae0c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800ae10:	f023 030f 	bic.w	r3, r3, #15
 800ae14:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6859      	ldr	r1, [r3, #4]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	699a      	ldr	r2, [r3, #24]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae24:	431a      	orrs	r2, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	430a      	orrs	r2, r1
 800ae32:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6899      	ldr	r1, [r3, #8]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	4b2b      	ldr	r3, [pc, #172]	; (800aeec <HAL_SAI_Init+0x2dc>)
 800ae40:	400b      	ands	r3, r1
 800ae42:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6899      	ldr	r1, [r3, #8]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ae54:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800ae5a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800ae60:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae66:	3b01      	subs	r3, #1
 800ae68:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ae6a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	430a      	orrs	r2, r1
 800ae72:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68d9      	ldr	r1, [r3, #12]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ae82:	400b      	ands	r3, r1
 800ae84:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68d9      	ldr	r1, [r3, #12]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae94:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae9a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ae9c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aea2:	3b01      	subs	r3, #1
 800aea4:	021b      	lsls	r3, r3, #8
 800aea6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	430a      	orrs	r2, r1
 800aeae:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3720      	adds	r7, #32
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	40015404 	.word	0x40015404
 800aed8:	40015424 	.word	0x40015424
 800aedc:	40015400 	.word	0x40015400
 800aee0:	40015800 	.word	0x40015800
 800aee4:	cccccccd 	.word	0xcccccccd
 800aee8:	ff05c010 	.word	0xff05c010
 800aeec:	fff88000 	.word	0xfff88000

0800aef0 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800af02:	2b01      	cmp	r3, #1
 800af04:	d101      	bne.n	800af0a <HAL_SAI_DMAStop+0x1a>
 800af06:	2302      	movs	r3, #2
 800af08:	e042      	b.n	800af90 <HAL_SAI_DMAStop+0xa0>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800af20:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	2b12      	cmp	r3, #18
 800af2c:	d108      	bne.n	800af40 <HAL_SAI_DMAStop+0x50>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af32:	2b00      	cmp	r3, #0
 800af34:	d004      	beq.n	800af40 <HAL_SAI_DMAStop+0x50>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmatx);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7f9 fdd8 	bl	8004af0 <HAL_DMA_Abort>
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800af46:	b2db      	uxtb	r3, r3
 800af48:	2b22      	cmp	r3, #34	; 0x22
 800af4a:	d108      	bne.n	800af5e <HAL_SAI_DMAStop+0x6e>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af50:	2b00      	cmp	r3, #0
 800af52:	d004      	beq.n	800af5e <HAL_SAI_DMAStop+0x6e>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmarx);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af58:	4618      	mov	r0, r3
 800af5a:	f7f9 fdc9 	bl	8004af0 <HAL_DMA_Abort>
  }

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fb2a 	bl	800b5b8 <SAI_Disable>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <HAL_SAI_DMAStop+0x7e>
  {
    status = HAL_ERROR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	685a      	ldr	r2, [r3, #4]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f042 0208 	orr.w	r2, r2, #8
 800af7c:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800af8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d101      	bne.n	800afb2 <HAL_SAI_Abort+0x1a>
 800afae:	2302      	movs	r3, #2
 800afb0:	e053      	b.n	800b05a <HAL_SAI_Abort+0xc2>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afc8:	d125      	bne.n	800b016 <HAL_SAI_Abort+0x7e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800afd8:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b12      	cmp	r3, #18
 800afe4:	d108      	bne.n	800aff8 <HAL_SAI_Abort+0x60>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afea:	2b00      	cmp	r3, #0
 800afec:	d004      	beq.n	800aff8 <HAL_SAI_Abort+0x60>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7f9 fd7c 	bl	8004af0 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800affe:	b2db      	uxtb	r3, r3
 800b000:	2b22      	cmp	r3, #34	; 0x22
 800b002:	d108      	bne.n	800b016 <HAL_SAI_Abort+0x7e>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d004      	beq.n	800b016 <HAL_SAI_Abort+0x7e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b010:	4618      	mov	r0, r3
 800b012:	f7f9 fd6d 	bl	8004af0 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2200      	movs	r2, #0
 800b01c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f04f 32ff 	mov.w	r2, #4294967295
 800b026:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fac5 	bl	800b5b8 <SAI_Disable>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <HAL_SAI_Abort+0xa0>
  {
    status = HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f042 0208 	orr.w	r2, r2, #8
 800b046:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800b058:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
	...

0800b064 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	4613      	mov	r3, r2
 800b070:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800b072:	f7f8 fd9d 	bl	8003bb0 <HAL_GetTick>
 800b076:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d002      	beq.n	800b084 <HAL_SAI_Transmit_DMA+0x20>
 800b07e:	88fb      	ldrh	r3, [r7, #6]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d101      	bne.n	800b088 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	e093      	b.n	800b1b0 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	2b01      	cmp	r3, #1
 800b092:	f040 808c 	bne.w	800b1ae <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d101      	bne.n	800b0a4 <HAL_SAI_Transmit_DMA+0x40>
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	e085      	b.n	800b1b0 <HAL_SAI_Transmit_DMA+0x14c>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	88fa      	ldrh	r2, [r7, #6]
 800b0b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	88fa      	ldrh	r2, [r7, #6]
 800b0be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2212      	movs	r2, #18
 800b0ce:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0d6:	4a38      	ldr	r2, [pc, #224]	; (800b1b8 <HAL_SAI_Transmit_DMA+0x154>)
 800b0d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0de:	4a37      	ldr	r2, [pc, #220]	; (800b1bc <HAL_SAI_Transmit_DMA+0x158>)
 800b0e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0e6:	4a36      	ldr	r2, [pc, #216]	; (800b1c0 <HAL_SAI_Transmit_DMA+0x15c>)
 800b0e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	331c      	adds	r3, #28
 800b102:	461a      	mov	r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b10a:	f7f9 fc91 	bl	8004a30 <HAL_DMA_Start_IT>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d005      	beq.n	800b120 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e047      	b.n	800b1b0 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b120:	2100      	movs	r1, #0
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f000 fa10 	bl	800b548 <SAI_InterruptFlag>
 800b128:	4601      	mov	r1, r0
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	691a      	ldr	r2, [r3, #16]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	430a      	orrs	r2, r1
 800b136:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b146:	601a      	str	r2, [r3, #0]

    /* Wait untill FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b148:	e015      	b.n	800b176 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800b14a:	f7f8 fd31 	bl	8003bb0 <HAL_GetTick>
 800b14e:	4602      	mov	r2, r0
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	1ad3      	subs	r3, r2, r3
 800b154:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b158:	d90d      	bls.n	800b176 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b160:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b172:	2303      	movs	r3, #3
 800b174:	e01c      	b.n	800b1b0 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	695b      	ldr	r3, [r3, #20]
 800b17c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d0e2      	beq.n	800b14a <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d107      	bne.n	800b1a2 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b1a0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	e000      	b.n	800b1b0 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800b1ae:	2302      	movs	r3, #2
  }
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3718      	adds	r7, #24
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	0800b68b 	.word	0x0800b68b
 800b1bc:	0800b62d 	.word	0x0800b62d
 800b1c0:	0800b6a7 	.word	0x0800b6a7

0800b1c4 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b086      	sub	sp, #24
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 8192 	beq.w	800b4fe <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	695b      	ldr	r3, [r3, #20]
 800b1e0:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	f003 0308 	and.w	r3, r3, #8
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d009      	beq.n	800b210 <HAL_SAI_IRQHandler+0x4c>
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	f003 0308 	and.w	r3, r3, #8
 800b202:	2b00      	cmp	r3, #0
 800b204:	d004      	beq.n	800b210 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	4798      	blx	r3
 800b20e:	e176      	b.n	800b4fe <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	2b00      	cmp	r3, #0
 800b218:	d01e      	beq.n	800b258 <HAL_SAI_IRQHandler+0x94>
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	f003 0301 	and.w	r3, r3, #1
 800b220:	2b00      	cmp	r3, #0
 800b222:	d019      	beq.n	800b258 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2201      	movs	r2, #1
 800b22a:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800b232:	b2db      	uxtb	r3, r3
 800b234:	2b22      	cmp	r3, #34	; 0x22
 800b236:	d101      	bne.n	800b23c <HAL_SAI_IRQHandler+0x78>
 800b238:	2301      	movs	r3, #1
 800b23a:	e000      	b.n	800b23e <HAL_SAI_IRQHandler+0x7a>
 800b23c:	2302      	movs	r3, #2
 800b23e:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	431a      	orrs	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 f96f 	bl	800b534 <HAL_SAI_ErrorCallback>
 800b256:	e152      	b.n	800b4fe <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	f003 0302 	and.w	r3, r3, #2
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d011      	beq.n	800b286 <HAL_SAI_IRQHandler+0xc2>
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	f003 0302 	and.w	r3, r3, #2
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00c      	beq.n	800b286 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2202      	movs	r2, #2
 800b272:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f000 8140 	beq.w	800b4fe <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b282:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800b284:	e13b      	b.n	800b4fe <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	f003 0320 	and.w	r3, r3, #32
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d055      	beq.n	800b33c <HAL_SAI_IRQHandler+0x178>
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	f003 0320 	and.w	r3, r3, #32
 800b296:	2b00      	cmp	r3, #0
 800b298:	d050      	beq.n	800b33c <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2220      	movs	r2, #32
 800b2a0:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2a8:	f043 0204 	orr.w	r2, r3, #4
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d038      	beq.n	800b32e <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d016      	beq.n	800b2f2 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2c8:	4a8f      	ldr	r2, [pc, #572]	; (800b508 <HAL_SAI_IRQHandler+0x344>)
 800b2ca:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7f9 fc4b 	bl	8004b6c <HAL_DMA_Abort_IT>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00a      	beq.n	800b2f2 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 f921 	bl	800b534 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f000 80fc 	beq.w	800b4f4 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b300:	4a81      	ldr	r2, [pc, #516]	; (800b508 <HAL_SAI_IRQHandler+0x344>)
 800b302:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b308:	4618      	mov	r0, r3
 800b30a:	f7f9 fc2f 	bl	8004b6c <HAL_DMA_Abort_IT>
 800b30e:	4603      	mov	r3, r0
 800b310:	2b00      	cmp	r3, #0
 800b312:	f000 80ef 	beq.w	800b4f4 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b31c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f904 	bl	800b534 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b32c:	e0e2      	b.n	800b4f4 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7ff fe32 	bl	800af98 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 f8fd 	bl	800b534 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b33a:	e0db      	b.n	800b4f4 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b342:	2b00      	cmp	r3, #0
 800b344:	d055      	beq.n	800b3f2 <HAL_SAI_IRQHandler+0x22e>
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d050      	beq.n	800b3f2 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2240      	movs	r2, #64	; 0x40
 800b356:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b35e:	f043 0208 	orr.w	r2, r3, #8
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d038      	beq.n	800b3e4 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b376:	2b00      	cmp	r3, #0
 800b378:	d016      	beq.n	800b3a8 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b37e:	4a62      	ldr	r2, [pc, #392]	; (800b508 <HAL_SAI_IRQHandler+0x344>)
 800b380:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b386:	4618      	mov	r0, r3
 800b388:	f7f9 fbf0 	bl	8004b6c <HAL_DMA_Abort_IT>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00a      	beq.n	800b3a8 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b398:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 f8c6 	bl	800b534 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f000 80a3 	beq.w	800b4f8 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3b6:	4a54      	ldr	r2, [pc, #336]	; (800b508 <HAL_SAI_IRQHandler+0x344>)
 800b3b8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7f9 fbd4 	bl	8004b6c <HAL_DMA_Abort_IT>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f000 8096 	beq.w	800b4f8 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 f8a9 	bl	800b534 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b3e2:	e089      	b.n	800b4f8 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f7ff fdd7 	bl	800af98 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 f8a2 	bl	800b534 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b3f0:	e082      	b.n	800b4f8 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	f003 0304 	and.w	r3, r3, #4
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d061      	beq.n	800b4c0 <HAL_SAI_IRQHandler+0x2fc>
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f003 0304 	and.w	r3, r3, #4
 800b402:	2b00      	cmp	r3, #0
 800b404:	d05c      	beq.n	800b4c0 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2204      	movs	r2, #4
 800b40c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b414:	f043 0220 	orr.w	r2, r3, #32
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d036      	beq.n	800b496 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d016      	beq.n	800b45e <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b434:	4a34      	ldr	r2, [pc, #208]	; (800b508 <HAL_SAI_IRQHandler+0x344>)
 800b436:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7f9 fb95 	bl	8004b6c <HAL_DMA_Abort_IT>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00a      	beq.n	800b45e <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b44e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 f86b 	bl	800b534 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b462:	2b00      	cmp	r3, #0
 800b464:	d04a      	beq.n	800b4fc <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b46a:	4a27      	ldr	r2, [pc, #156]	; (800b508 <HAL_SAI_IRQHandler+0x344>)
 800b46c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b472:	4618      	mov	r0, r3
 800b474:	f7f9 fb7a 	bl	8004b6c <HAL_DMA_Abort_IT>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d03e      	beq.n	800b4fc <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b484:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f850 	bl	800b534 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b494:	e032      	b.n	800b4fc <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2200      	movs	r2, #0
 800b49c:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a6:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f83b 	bl	800b534 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b4be:	e01d      	b.n	800b4fc <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	f003 0310 	and.w	r3, r3, #16
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d019      	beq.n	800b4fe <HAL_SAI_IRQHandler+0x33a>
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	f003 0310 	and.w	r3, r3, #16
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d014      	beq.n	800b4fe <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2210      	movs	r2, #16
 800b4da:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4e2:	f043 0210 	orr.w	r2, r3, #16
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f821 	bl	800b534 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800b4f2:	e004      	b.n	800b4fe <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b4f4:	bf00      	nop
 800b4f6:	e002      	b.n	800b4fe <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b4f8:	bf00      	nop
 800b4fa:	e000      	b.n	800b4fe <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b4fc:	bf00      	nop
}
 800b4fe:	bf00      	nop
 800b500:	3718      	adds	r7, #24
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	0800b6f9 	.word	0x0800b6f9

0800b50c <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800b514:	bf00      	nop
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800b53c:	bf00      	nop
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	460b      	mov	r3, r1
 800b552:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800b554:	2301      	movs	r3, #1
 800b556:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800b558:	78fb      	ldrb	r3, [r7, #3]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d103      	bne.n	800b566 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f043 0308 	orr.w	r3, r3, #8
 800b564:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56a:	2b08      	cmp	r3, #8
 800b56c:	d10b      	bne.n	800b586 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b572:	2b03      	cmp	r3, #3
 800b574:	d003      	beq.n	800b57e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d103      	bne.n	800b586 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f043 0310 	orr.w	r3, r3, #16
 800b584:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	d003      	beq.n	800b596 <SAI_InterruptFlag+0x4e>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	2b02      	cmp	r3, #2
 800b594:	d104      	bne.n	800b5a0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b59c:	60fb      	str	r3, [r7, #12]
 800b59e:	e003      	b.n	800b5a8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f043 0304 	orr.w	r3, r3, #4
 800b5a6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3714      	adds	r7, #20
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
	...

0800b5b8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b5c0:	4b18      	ldr	r3, [pc, #96]	; (800b624 <SAI_Disable+0x6c>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a18      	ldr	r2, [pc, #96]	; (800b628 <SAI_Disable+0x70>)
 800b5c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ca:	0b1b      	lsrs	r3, r3, #12
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b5e2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d10a      	bne.n	800b600 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	72fb      	strb	r3, [r7, #11]
      break;
 800b5fe:	e009      	b.n	800b614 <SAI_Disable+0x5c>
    }
    count--;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	3b01      	subs	r3, #1
 800b604:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1e7      	bne.n	800b5e4 <SAI_Disable+0x2c>

  return status;
 800b614:	7afb      	ldrb	r3, [r7, #11]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3714      	adds	r7, #20
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	20000058 	.word	0x20000058
 800b628:	95cbec1b 	.word	0x95cbec1b

0800b62c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b638:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	69db      	ldr	r3, [r3, #28]
 800b63e:	2b20      	cmp	r3, #32
 800b640:	d01c      	beq.n	800b67c <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b658:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b65a:	2100      	movs	r1, #0
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f7ff ff73 	bl	800b548 <SAI_InterruptFlag>
 800b662:	4603      	mov	r3, r0
 800b664:	43d9      	mvns	r1, r3
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	691a      	ldr	r2, [r3, #16]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	400a      	ands	r2, r1
 800b672:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7ff ff45 	bl	800b50c <HAL_SAI_TxCpltCallback>
#endif
}
 800b682:	bf00      	nop
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b084      	sub	sp, #16
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b696:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f7ff ff41 	bl	800b520 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800b69e:	bf00      	nop
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b084      	sub	sp, #16
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b2:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b6d2:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f7ff ff6f 	bl	800b5b8 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f7ff ff22 	bl	800b534 <HAL_SAI_ErrorCallback>
#endif
}
 800b6f0:	bf00      	nop
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b704:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b714:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2200      	movs	r2, #0
 800b71c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f04f 32ff 	mov.w	r2, #4294967295
 800b726:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b72e:	2b20      	cmp	r3, #32
 800b730:	d00a      	beq.n	800b748 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f7ff ff40 	bl	800b5b8 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	685a      	ldr	r2, [r3, #4]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f042 0208 	orr.w	r2, r2, #8
 800b746:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2201      	movs	r2, #1
 800b74c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2200      	movs	r2, #0
 800b754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f7ff feeb 	bl	800b534 <HAL_SAI_ErrorCallback>
#endif
}
 800b75e:	bf00      	nop
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b084      	sub	sp, #16
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	e095      	b.n	800b8a4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d108      	bne.n	800b792 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b788:	d009      	beq.n	800b79e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	61da      	str	r2, [r3, #28]
 800b790:	e005      	b.n	800b79e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d106      	bne.n	800b7be <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7f6 fbe7 	bl	8001f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2202      	movs	r2, #2
 800b7c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7d4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b7de:	d902      	bls.n	800b7e6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	60fb      	str	r3, [r7, #12]
 800b7e4:	e002      	b.n	800b7ec <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b7e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b7f4:	d007      	beq.n	800b806 <HAL_SPI_Init+0xa0>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b7fe:	d002      	beq.n	800b806 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b816:	431a      	orrs	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	f003 0302 	and.w	r3, r3, #2
 800b820:	431a      	orrs	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	431a      	orrs	r2, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	699b      	ldr	r3, [r3, #24]
 800b830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b834:	431a      	orrs	r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	69db      	ldr	r3, [r3, #28]
 800b83a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b83e:	431a      	orrs	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6a1b      	ldr	r3, [r3, #32]
 800b844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b848:	ea42 0103 	orr.w	r1, r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b850:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	430a      	orrs	r2, r1
 800b85a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	0c1b      	lsrs	r3, r3, #16
 800b862:	f003 0204 	and.w	r2, r3, #4
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86a:	f003 0310 	and.w	r3, r3, #16
 800b86e:	431a      	orrs	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b874:	f003 0308 	and.w	r3, r3, #8
 800b878:	431a      	orrs	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b882:	ea42 0103 	orr.w	r1, r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	430a      	orrs	r2, r1
 800b892:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e040      	b.n	800b940 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d106      	bne.n	800b8d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7f8 f890 	bl	80039f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2224      	movs	r2, #36	; 0x24
 800b8d8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f022 0201 	bic.w	r2, r2, #1
 800b8e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f82c 	bl	800b948 <UART_SetConfig>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d101      	bne.n	800b8fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e022      	b.n	800b940 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d002      	beq.n	800b908 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 faaa 	bl	800be5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b916:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	689a      	ldr	r2, [r3, #8]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b926:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f042 0201 	orr.w	r2, r2, #1
 800b936:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fb31 	bl	800bfa0 <UART_CheckIdleState>
 800b93e:	4603      	mov	r3, r0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b948:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b94c:	b088      	sub	sp, #32
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	689a      	ldr	r2, [r3, #8]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	431a      	orrs	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	431a      	orrs	r2, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	69db      	ldr	r3, [r3, #28]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	4bac      	ldr	r3, [pc, #688]	; (800bc28 <UART_SetConfig+0x2e0>)
 800b976:	4013      	ands	r3, r2
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	6812      	ldr	r2, [r2, #0]
 800b97c:	69f9      	ldr	r1, [r7, #28]
 800b97e:	430b      	orrs	r3, r1
 800b980:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	68da      	ldr	r2, [r3, #12]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	430a      	orrs	r2, r1
 800b996:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	699b      	ldr	r3, [r3, #24]
 800b99c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4aa2      	ldr	r2, [pc, #648]	; (800bc2c <UART_SetConfig+0x2e4>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d004      	beq.n	800b9b2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6a1b      	ldr	r3, [r3, #32]
 800b9ac:	69fa      	ldr	r2, [r7, #28]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	69fa      	ldr	r2, [r7, #28]
 800b9c2:	430a      	orrs	r2, r1
 800b9c4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a99      	ldr	r2, [pc, #612]	; (800bc30 <UART_SetConfig+0x2e8>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d121      	bne.n	800ba14 <UART_SetConfig+0xcc>
 800b9d0:	4b98      	ldr	r3, [pc, #608]	; (800bc34 <UART_SetConfig+0x2ec>)
 800b9d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9d6:	f003 0303 	and.w	r3, r3, #3
 800b9da:	2b03      	cmp	r3, #3
 800b9dc:	d816      	bhi.n	800ba0c <UART_SetConfig+0xc4>
 800b9de:	a201      	add	r2, pc, #4	; (adr r2, 800b9e4 <UART_SetConfig+0x9c>)
 800b9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e4:	0800b9f5 	.word	0x0800b9f5
 800b9e8:	0800ba01 	.word	0x0800ba01
 800b9ec:	0800b9fb 	.word	0x0800b9fb
 800b9f0:	0800ba07 	.word	0x0800ba07
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	76fb      	strb	r3, [r7, #27]
 800b9f8:	e0e8      	b.n	800bbcc <UART_SetConfig+0x284>
 800b9fa:	2302      	movs	r3, #2
 800b9fc:	76fb      	strb	r3, [r7, #27]
 800b9fe:	e0e5      	b.n	800bbcc <UART_SetConfig+0x284>
 800ba00:	2304      	movs	r3, #4
 800ba02:	76fb      	strb	r3, [r7, #27]
 800ba04:	e0e2      	b.n	800bbcc <UART_SetConfig+0x284>
 800ba06:	2308      	movs	r3, #8
 800ba08:	76fb      	strb	r3, [r7, #27]
 800ba0a:	e0df      	b.n	800bbcc <UART_SetConfig+0x284>
 800ba0c:	2310      	movs	r3, #16
 800ba0e:	76fb      	strb	r3, [r7, #27]
 800ba10:	bf00      	nop
 800ba12:	e0db      	b.n	800bbcc <UART_SetConfig+0x284>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a87      	ldr	r2, [pc, #540]	; (800bc38 <UART_SetConfig+0x2f0>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d134      	bne.n	800ba88 <UART_SetConfig+0x140>
 800ba1e:	4b85      	ldr	r3, [pc, #532]	; (800bc34 <UART_SetConfig+0x2ec>)
 800ba20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba24:	f003 030c 	and.w	r3, r3, #12
 800ba28:	2b0c      	cmp	r3, #12
 800ba2a:	d829      	bhi.n	800ba80 <UART_SetConfig+0x138>
 800ba2c:	a201      	add	r2, pc, #4	; (adr r2, 800ba34 <UART_SetConfig+0xec>)
 800ba2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba32:	bf00      	nop
 800ba34:	0800ba69 	.word	0x0800ba69
 800ba38:	0800ba81 	.word	0x0800ba81
 800ba3c:	0800ba81 	.word	0x0800ba81
 800ba40:	0800ba81 	.word	0x0800ba81
 800ba44:	0800ba75 	.word	0x0800ba75
 800ba48:	0800ba81 	.word	0x0800ba81
 800ba4c:	0800ba81 	.word	0x0800ba81
 800ba50:	0800ba81 	.word	0x0800ba81
 800ba54:	0800ba6f 	.word	0x0800ba6f
 800ba58:	0800ba81 	.word	0x0800ba81
 800ba5c:	0800ba81 	.word	0x0800ba81
 800ba60:	0800ba81 	.word	0x0800ba81
 800ba64:	0800ba7b 	.word	0x0800ba7b
 800ba68:	2300      	movs	r3, #0
 800ba6a:	76fb      	strb	r3, [r7, #27]
 800ba6c:	e0ae      	b.n	800bbcc <UART_SetConfig+0x284>
 800ba6e:	2302      	movs	r3, #2
 800ba70:	76fb      	strb	r3, [r7, #27]
 800ba72:	e0ab      	b.n	800bbcc <UART_SetConfig+0x284>
 800ba74:	2304      	movs	r3, #4
 800ba76:	76fb      	strb	r3, [r7, #27]
 800ba78:	e0a8      	b.n	800bbcc <UART_SetConfig+0x284>
 800ba7a:	2308      	movs	r3, #8
 800ba7c:	76fb      	strb	r3, [r7, #27]
 800ba7e:	e0a5      	b.n	800bbcc <UART_SetConfig+0x284>
 800ba80:	2310      	movs	r3, #16
 800ba82:	76fb      	strb	r3, [r7, #27]
 800ba84:	bf00      	nop
 800ba86:	e0a1      	b.n	800bbcc <UART_SetConfig+0x284>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a6b      	ldr	r2, [pc, #428]	; (800bc3c <UART_SetConfig+0x2f4>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d120      	bne.n	800bad4 <UART_SetConfig+0x18c>
 800ba92:	4b68      	ldr	r3, [pc, #416]	; (800bc34 <UART_SetConfig+0x2ec>)
 800ba94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ba9c:	2b10      	cmp	r3, #16
 800ba9e:	d00f      	beq.n	800bac0 <UART_SetConfig+0x178>
 800baa0:	2b10      	cmp	r3, #16
 800baa2:	d802      	bhi.n	800baaa <UART_SetConfig+0x162>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d005      	beq.n	800bab4 <UART_SetConfig+0x16c>
 800baa8:	e010      	b.n	800bacc <UART_SetConfig+0x184>
 800baaa:	2b20      	cmp	r3, #32
 800baac:	d005      	beq.n	800baba <UART_SetConfig+0x172>
 800baae:	2b30      	cmp	r3, #48	; 0x30
 800bab0:	d009      	beq.n	800bac6 <UART_SetConfig+0x17e>
 800bab2:	e00b      	b.n	800bacc <UART_SetConfig+0x184>
 800bab4:	2300      	movs	r3, #0
 800bab6:	76fb      	strb	r3, [r7, #27]
 800bab8:	e088      	b.n	800bbcc <UART_SetConfig+0x284>
 800baba:	2302      	movs	r3, #2
 800babc:	76fb      	strb	r3, [r7, #27]
 800babe:	e085      	b.n	800bbcc <UART_SetConfig+0x284>
 800bac0:	2304      	movs	r3, #4
 800bac2:	76fb      	strb	r3, [r7, #27]
 800bac4:	e082      	b.n	800bbcc <UART_SetConfig+0x284>
 800bac6:	2308      	movs	r3, #8
 800bac8:	76fb      	strb	r3, [r7, #27]
 800baca:	e07f      	b.n	800bbcc <UART_SetConfig+0x284>
 800bacc:	2310      	movs	r3, #16
 800bace:	76fb      	strb	r3, [r7, #27]
 800bad0:	bf00      	nop
 800bad2:	e07b      	b.n	800bbcc <UART_SetConfig+0x284>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a59      	ldr	r2, [pc, #356]	; (800bc40 <UART_SetConfig+0x2f8>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d120      	bne.n	800bb20 <UART_SetConfig+0x1d8>
 800bade:	4b55      	ldr	r3, [pc, #340]	; (800bc34 <UART_SetConfig+0x2ec>)
 800bae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bae4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bae8:	2b40      	cmp	r3, #64	; 0x40
 800baea:	d00f      	beq.n	800bb0c <UART_SetConfig+0x1c4>
 800baec:	2b40      	cmp	r3, #64	; 0x40
 800baee:	d802      	bhi.n	800baf6 <UART_SetConfig+0x1ae>
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d005      	beq.n	800bb00 <UART_SetConfig+0x1b8>
 800baf4:	e010      	b.n	800bb18 <UART_SetConfig+0x1d0>
 800baf6:	2b80      	cmp	r3, #128	; 0x80
 800baf8:	d005      	beq.n	800bb06 <UART_SetConfig+0x1be>
 800bafa:	2bc0      	cmp	r3, #192	; 0xc0
 800bafc:	d009      	beq.n	800bb12 <UART_SetConfig+0x1ca>
 800bafe:	e00b      	b.n	800bb18 <UART_SetConfig+0x1d0>
 800bb00:	2300      	movs	r3, #0
 800bb02:	76fb      	strb	r3, [r7, #27]
 800bb04:	e062      	b.n	800bbcc <UART_SetConfig+0x284>
 800bb06:	2302      	movs	r3, #2
 800bb08:	76fb      	strb	r3, [r7, #27]
 800bb0a:	e05f      	b.n	800bbcc <UART_SetConfig+0x284>
 800bb0c:	2304      	movs	r3, #4
 800bb0e:	76fb      	strb	r3, [r7, #27]
 800bb10:	e05c      	b.n	800bbcc <UART_SetConfig+0x284>
 800bb12:	2308      	movs	r3, #8
 800bb14:	76fb      	strb	r3, [r7, #27]
 800bb16:	e059      	b.n	800bbcc <UART_SetConfig+0x284>
 800bb18:	2310      	movs	r3, #16
 800bb1a:	76fb      	strb	r3, [r7, #27]
 800bb1c:	bf00      	nop
 800bb1e:	e055      	b.n	800bbcc <UART_SetConfig+0x284>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a47      	ldr	r2, [pc, #284]	; (800bc44 <UART_SetConfig+0x2fc>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d124      	bne.n	800bb74 <UART_SetConfig+0x22c>
 800bb2a:	4b42      	ldr	r3, [pc, #264]	; (800bc34 <UART_SetConfig+0x2ec>)
 800bb2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb38:	d012      	beq.n	800bb60 <UART_SetConfig+0x218>
 800bb3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb3e:	d802      	bhi.n	800bb46 <UART_SetConfig+0x1fe>
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d007      	beq.n	800bb54 <UART_SetConfig+0x20c>
 800bb44:	e012      	b.n	800bb6c <UART_SetConfig+0x224>
 800bb46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb4a:	d006      	beq.n	800bb5a <UART_SetConfig+0x212>
 800bb4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb50:	d009      	beq.n	800bb66 <UART_SetConfig+0x21e>
 800bb52:	e00b      	b.n	800bb6c <UART_SetConfig+0x224>
 800bb54:	2300      	movs	r3, #0
 800bb56:	76fb      	strb	r3, [r7, #27]
 800bb58:	e038      	b.n	800bbcc <UART_SetConfig+0x284>
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	76fb      	strb	r3, [r7, #27]
 800bb5e:	e035      	b.n	800bbcc <UART_SetConfig+0x284>
 800bb60:	2304      	movs	r3, #4
 800bb62:	76fb      	strb	r3, [r7, #27]
 800bb64:	e032      	b.n	800bbcc <UART_SetConfig+0x284>
 800bb66:	2308      	movs	r3, #8
 800bb68:	76fb      	strb	r3, [r7, #27]
 800bb6a:	e02f      	b.n	800bbcc <UART_SetConfig+0x284>
 800bb6c:	2310      	movs	r3, #16
 800bb6e:	76fb      	strb	r3, [r7, #27]
 800bb70:	bf00      	nop
 800bb72:	e02b      	b.n	800bbcc <UART_SetConfig+0x284>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a2c      	ldr	r2, [pc, #176]	; (800bc2c <UART_SetConfig+0x2e4>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d124      	bne.n	800bbc8 <UART_SetConfig+0x280>
 800bb7e:	4b2d      	ldr	r3, [pc, #180]	; (800bc34 <UART_SetConfig+0x2ec>)
 800bb80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bb88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb8c:	d012      	beq.n	800bbb4 <UART_SetConfig+0x26c>
 800bb8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb92:	d802      	bhi.n	800bb9a <UART_SetConfig+0x252>
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d007      	beq.n	800bba8 <UART_SetConfig+0x260>
 800bb98:	e012      	b.n	800bbc0 <UART_SetConfig+0x278>
 800bb9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb9e:	d006      	beq.n	800bbae <UART_SetConfig+0x266>
 800bba0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bba4:	d009      	beq.n	800bbba <UART_SetConfig+0x272>
 800bba6:	e00b      	b.n	800bbc0 <UART_SetConfig+0x278>
 800bba8:	2300      	movs	r3, #0
 800bbaa:	76fb      	strb	r3, [r7, #27]
 800bbac:	e00e      	b.n	800bbcc <UART_SetConfig+0x284>
 800bbae:	2302      	movs	r3, #2
 800bbb0:	76fb      	strb	r3, [r7, #27]
 800bbb2:	e00b      	b.n	800bbcc <UART_SetConfig+0x284>
 800bbb4:	2304      	movs	r3, #4
 800bbb6:	76fb      	strb	r3, [r7, #27]
 800bbb8:	e008      	b.n	800bbcc <UART_SetConfig+0x284>
 800bbba:	2308      	movs	r3, #8
 800bbbc:	76fb      	strb	r3, [r7, #27]
 800bbbe:	e005      	b.n	800bbcc <UART_SetConfig+0x284>
 800bbc0:	2310      	movs	r3, #16
 800bbc2:	76fb      	strb	r3, [r7, #27]
 800bbc4:	bf00      	nop
 800bbc6:	e001      	b.n	800bbcc <UART_SetConfig+0x284>
 800bbc8:	2310      	movs	r3, #16
 800bbca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4a16      	ldr	r2, [pc, #88]	; (800bc2c <UART_SetConfig+0x2e4>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	f040 8087 	bne.w	800bce6 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bbd8:	7efb      	ldrb	r3, [r7, #27]
 800bbda:	2b08      	cmp	r3, #8
 800bbdc:	d836      	bhi.n	800bc4c <UART_SetConfig+0x304>
 800bbde:	a201      	add	r2, pc, #4	; (adr r2, 800bbe4 <UART_SetConfig+0x29c>)
 800bbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe4:	0800bc09 	.word	0x0800bc09
 800bbe8:	0800bc4d 	.word	0x0800bc4d
 800bbec:	0800bc11 	.word	0x0800bc11
 800bbf0:	0800bc4d 	.word	0x0800bc4d
 800bbf4:	0800bc17 	.word	0x0800bc17
 800bbf8:	0800bc4d 	.word	0x0800bc4d
 800bbfc:	0800bc4d 	.word	0x0800bc4d
 800bc00:	0800bc4d 	.word	0x0800bc4d
 800bc04:	0800bc1f 	.word	0x0800bc1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc08:	f7fd fd40 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800bc0c:	6178      	str	r0, [r7, #20]
        break;
 800bc0e:	e022      	b.n	800bc56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc10:	4b0d      	ldr	r3, [pc, #52]	; (800bc48 <UART_SetConfig+0x300>)
 800bc12:	617b      	str	r3, [r7, #20]
        break;
 800bc14:	e01f      	b.n	800bc56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc16:	f7fd fca3 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 800bc1a:	6178      	str	r0, [r7, #20]
        break;
 800bc1c:	e01b      	b.n	800bc56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc22:	617b      	str	r3, [r7, #20]
        break;
 800bc24:	e017      	b.n	800bc56 <UART_SetConfig+0x30e>
 800bc26:	bf00      	nop
 800bc28:	efff69f3 	.word	0xefff69f3
 800bc2c:	40008000 	.word	0x40008000
 800bc30:	40013800 	.word	0x40013800
 800bc34:	40021000 	.word	0x40021000
 800bc38:	40004400 	.word	0x40004400
 800bc3c:	40004800 	.word	0x40004800
 800bc40:	40004c00 	.word	0x40004c00
 800bc44:	40005000 	.word	0x40005000
 800bc48:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bc50:	2301      	movs	r3, #1
 800bc52:	76bb      	strb	r3, [r7, #26]
        break;
 800bc54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f000 80f1 	beq.w	800be40 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	685a      	ldr	r2, [r3, #4]
 800bc62:	4613      	mov	r3, r2
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	4413      	add	r3, r2
 800bc68:	697a      	ldr	r2, [r7, #20]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d305      	bcc.n	800bc7a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bc74:	697a      	ldr	r2, [r7, #20]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d902      	bls.n	800bc80 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	76bb      	strb	r3, [r7, #26]
 800bc7e:	e0df      	b.n	800be40 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	4619      	mov	r1, r3
 800bc84:	f04f 0200 	mov.w	r2, #0
 800bc88:	f04f 0300 	mov.w	r3, #0
 800bc8c:	f04f 0400 	mov.w	r4, #0
 800bc90:	0214      	lsls	r4, r2, #8
 800bc92:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800bc96:	020b      	lsls	r3, r1, #8
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	6852      	ldr	r2, [r2, #4]
 800bc9c:	0852      	lsrs	r2, r2, #1
 800bc9e:	4611      	mov	r1, r2
 800bca0:	f04f 0200 	mov.w	r2, #0
 800bca4:	eb13 0b01 	adds.w	fp, r3, r1
 800bca8:	eb44 0c02 	adc.w	ip, r4, r2
 800bcac:	4658      	mov	r0, fp
 800bcae:	4661      	mov	r1, ip
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	f04f 0400 	mov.w	r4, #0
 800bcb8:	461a      	mov	r2, r3
 800bcba:	4623      	mov	r3, r4
 800bcbc:	f7f4 fad8 	bl	8000270 <__aeabi_uldivmod>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bccc:	d308      	bcc.n	800bce0 <UART_SetConfig+0x398>
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcd4:	d204      	bcs.n	800bce0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	693a      	ldr	r2, [r7, #16]
 800bcdc:	60da      	str	r2, [r3, #12]
 800bcde:	e0af      	b.n	800be40 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	76bb      	strb	r3, [r7, #26]
 800bce4:	e0ac      	b.n	800be40 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	69db      	ldr	r3, [r3, #28]
 800bcea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcee:	d15b      	bne.n	800bda8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800bcf0:	7efb      	ldrb	r3, [r7, #27]
 800bcf2:	2b08      	cmp	r3, #8
 800bcf4:	d827      	bhi.n	800bd46 <UART_SetConfig+0x3fe>
 800bcf6:	a201      	add	r2, pc, #4	; (adr r2, 800bcfc <UART_SetConfig+0x3b4>)
 800bcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcfc:	0800bd21 	.word	0x0800bd21
 800bd00:	0800bd29 	.word	0x0800bd29
 800bd04:	0800bd31 	.word	0x0800bd31
 800bd08:	0800bd47 	.word	0x0800bd47
 800bd0c:	0800bd37 	.word	0x0800bd37
 800bd10:	0800bd47 	.word	0x0800bd47
 800bd14:	0800bd47 	.word	0x0800bd47
 800bd18:	0800bd47 	.word	0x0800bd47
 800bd1c:	0800bd3f 	.word	0x0800bd3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd20:	f7fd fcb4 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800bd24:	6178      	str	r0, [r7, #20]
        break;
 800bd26:	e013      	b.n	800bd50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd28:	f7fd fcc6 	bl	80096b8 <HAL_RCC_GetPCLK2Freq>
 800bd2c:	6178      	str	r0, [r7, #20]
        break;
 800bd2e:	e00f      	b.n	800bd50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd30:	4b49      	ldr	r3, [pc, #292]	; (800be58 <UART_SetConfig+0x510>)
 800bd32:	617b      	str	r3, [r7, #20]
        break;
 800bd34:	e00c      	b.n	800bd50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd36:	f7fd fc13 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 800bd3a:	6178      	str	r0, [r7, #20]
        break;
 800bd3c:	e008      	b.n	800bd50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd42:	617b      	str	r3, [r7, #20]
        break;
 800bd44:	e004      	b.n	800bd50 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800bd46:	2300      	movs	r3, #0
 800bd48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	76bb      	strb	r3, [r7, #26]
        break;
 800bd4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d074      	beq.n	800be40 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	005a      	lsls	r2, r3, #1
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	085b      	lsrs	r3, r3, #1
 800bd60:	441a      	add	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	2b0f      	cmp	r3, #15
 800bd72:	d916      	bls.n	800bda2 <UART_SetConfig+0x45a>
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd7a:	d212      	bcs.n	800bda2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	f023 030f 	bic.w	r3, r3, #15
 800bd84:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	085b      	lsrs	r3, r3, #1
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	f003 0307 	and.w	r3, r3, #7
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	89fb      	ldrh	r3, [r7, #14]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	89fa      	ldrh	r2, [r7, #14]
 800bd9e:	60da      	str	r2, [r3, #12]
 800bda0:	e04e      	b.n	800be40 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	76bb      	strb	r3, [r7, #26]
 800bda6:	e04b      	b.n	800be40 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bda8:	7efb      	ldrb	r3, [r7, #27]
 800bdaa:	2b08      	cmp	r3, #8
 800bdac:	d827      	bhi.n	800bdfe <UART_SetConfig+0x4b6>
 800bdae:	a201      	add	r2, pc, #4	; (adr r2, 800bdb4 <UART_SetConfig+0x46c>)
 800bdb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb4:	0800bdd9 	.word	0x0800bdd9
 800bdb8:	0800bde1 	.word	0x0800bde1
 800bdbc:	0800bde9 	.word	0x0800bde9
 800bdc0:	0800bdff 	.word	0x0800bdff
 800bdc4:	0800bdef 	.word	0x0800bdef
 800bdc8:	0800bdff 	.word	0x0800bdff
 800bdcc:	0800bdff 	.word	0x0800bdff
 800bdd0:	0800bdff 	.word	0x0800bdff
 800bdd4:	0800bdf7 	.word	0x0800bdf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bdd8:	f7fd fc58 	bl	800968c <HAL_RCC_GetPCLK1Freq>
 800bddc:	6178      	str	r0, [r7, #20]
        break;
 800bdde:	e013      	b.n	800be08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bde0:	f7fd fc6a 	bl	80096b8 <HAL_RCC_GetPCLK2Freq>
 800bde4:	6178      	str	r0, [r7, #20]
        break;
 800bde6:	e00f      	b.n	800be08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bde8:	4b1b      	ldr	r3, [pc, #108]	; (800be58 <UART_SetConfig+0x510>)
 800bdea:	617b      	str	r3, [r7, #20]
        break;
 800bdec:	e00c      	b.n	800be08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bdee:	f7fd fbb7 	bl	8009560 <HAL_RCC_GetSysClockFreq>
 800bdf2:	6178      	str	r0, [r7, #20]
        break;
 800bdf4:	e008      	b.n	800be08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdfa:	617b      	str	r3, [r7, #20]
        break;
 800bdfc:	e004      	b.n	800be08 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800bdfe:	2300      	movs	r3, #0
 800be00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	76bb      	strb	r3, [r7, #26]
        break;
 800be06:	bf00      	nop
    }

    if (pclk != 0U)
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d018      	beq.n	800be40 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	085a      	lsrs	r2, r3, #1
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	441a      	add	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be20:	b29b      	uxth	r3, r3
 800be22:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	2b0f      	cmp	r3, #15
 800be28:	d908      	bls.n	800be3c <UART_SetConfig+0x4f4>
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be30:	d204      	bcs.n	800be3c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	693a      	ldr	r2, [r7, #16]
 800be38:	60da      	str	r2, [r3, #12]
 800be3a:	e001      	b.n	800be40 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800be3c:	2301      	movs	r3, #1
 800be3e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800be4c:	7ebb      	ldrb	r3, [r7, #26]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3720      	adds	r7, #32
 800be52:	46bd      	mov	sp, r7
 800be54:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800be58:	00f42400 	.word	0x00f42400

0800be5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00a      	beq.n	800be86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	430a      	orrs	r2, r1
 800be84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8a:	f003 0302 	and.w	r3, r3, #2
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00a      	beq.n	800bea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	430a      	orrs	r2, r1
 800bea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beac:	f003 0304 	and.w	r3, r3, #4
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00a      	beq.n	800beca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	430a      	orrs	r2, r1
 800bec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bece:	f003 0308 	and.w	r3, r3, #8
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00a      	beq.n	800beec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	430a      	orrs	r2, r1
 800beea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef0:	f003 0310 	and.w	r3, r3, #16
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00a      	beq.n	800bf0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	430a      	orrs	r2, r1
 800bf0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf12:	f003 0320 	and.w	r3, r3, #32
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00a      	beq.n	800bf30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	430a      	orrs	r2, r1
 800bf2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d01a      	beq.n	800bf72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	430a      	orrs	r2, r1
 800bf50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf5a:	d10a      	bne.n	800bf72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	430a      	orrs	r2, r1
 800bf70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00a      	beq.n	800bf94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	430a      	orrs	r2, r1
 800bf92:	605a      	str	r2, [r3, #4]
  }
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af02      	add	r7, sp, #8
 800bfa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bfae:	f7f7 fdff 	bl	8003bb0 <HAL_GetTick>
 800bfb2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f003 0308 	and.w	r3, r3, #8
 800bfbe:	2b08      	cmp	r3, #8
 800bfc0:	d10e      	bne.n	800bfe0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f82a 	bl	800c02a <UART_WaitOnFlagUntilTimeout>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d001      	beq.n	800bfe0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	e020      	b.n	800c022 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f003 0304 	and.w	r3, r3, #4
 800bfea:	2b04      	cmp	r3, #4
 800bfec:	d10e      	bne.n	800c00c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f814 	bl	800c02a <UART_WaitOnFlagUntilTimeout>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d001      	beq.n	800c00c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c008:	2303      	movs	r3, #3
 800c00a:	e00a      	b.n	800c022 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2220      	movs	r2, #32
 800c010:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2220      	movs	r2, #32
 800c016:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b084      	sub	sp, #16
 800c02e:	af00      	add	r7, sp, #0
 800c030:	60f8      	str	r0, [r7, #12]
 800c032:	60b9      	str	r1, [r7, #8]
 800c034:	603b      	str	r3, [r7, #0]
 800c036:	4613      	mov	r3, r2
 800c038:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c03a:	e05d      	b.n	800c0f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c042:	d059      	beq.n	800c0f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c044:	f7f7 fdb4 	bl	8003bb0 <HAL_GetTick>
 800c048:	4602      	mov	r2, r0
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	1ad3      	subs	r3, r2, r3
 800c04e:	69ba      	ldr	r2, [r7, #24]
 800c050:	429a      	cmp	r2, r3
 800c052:	d302      	bcc.n	800c05a <UART_WaitOnFlagUntilTimeout+0x30>
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d11b      	bne.n	800c092 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c068:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	689a      	ldr	r2, [r3, #8]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f022 0201 	bic.w	r2, r2, #1
 800c078:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2220      	movs	r2, #32
 800c07e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2220      	movs	r2, #32
 800c084:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c08e:	2303      	movs	r3, #3
 800c090:	e042      	b.n	800c118 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 0304 	and.w	r3, r3, #4
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d02b      	beq.n	800c0f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	69db      	ldr	r3, [r3, #28]
 800c0a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0ae:	d123      	bne.n	800c0f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c0c8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	689a      	ldr	r2, [r3, #8]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f022 0201 	bic.w	r2, r2, #1
 800c0d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2220      	movs	r2, #32
 800c0de:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2220      	movs	r2, #32
 800c0e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2220      	movs	r2, #32
 800c0ea:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800c0f4:	2303      	movs	r3, #3
 800c0f6:	e00f      	b.n	800c118 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	69da      	ldr	r2, [r3, #28]
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	4013      	ands	r3, r2
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	429a      	cmp	r2, r3
 800c106:	bf0c      	ite	eq
 800c108:	2301      	moveq	r3, #1
 800c10a:	2300      	movne	r3, #0
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	461a      	mov	r2, r3
 800c110:	79fb      	ldrb	r3, [r7, #7]
 800c112:	429a      	cmp	r2, r3
 800c114:	d092      	beq.n	800c03c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c116:	2300      	movs	r3, #0
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c120:	b084      	sub	sp, #16
 800c122:	b580      	push	{r7, lr}
 800c124:	b084      	sub	sp, #16
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
 800c12a:	f107 001c 	add.w	r0, r7, #28
 800c12e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c134:	2b01      	cmp	r3, #1
 800c136:	d122      	bne.n	800c17e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c14c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c162:	2b01      	cmp	r3, #1
 800c164:	d105      	bne.n	800c172 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f936 	bl	800c3e4 <USB_CoreReset>
 800c178:	4603      	mov	r3, r0
 800c17a:	73fb      	strb	r3, [r7, #15]
 800c17c:	e01a      	b.n	800c1b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f92a 	bl	800c3e4 <USB_CoreReset>
 800c190:	4603      	mov	r3, r0
 800c192:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c196:	2b00      	cmp	r3, #0
 800c198:	d106      	bne.n	800c1a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	639a      	str	r2, [r3, #56]	; 0x38
 800c1a6:	e005      	b.n	800c1b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800c1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c1c0:	b004      	add	sp, #16
 800c1c2:	4770      	bx	lr

0800c1c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	f043 0201 	orr.w	r2, r3, #1
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b083      	sub	sp, #12
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	f023 0201 	bic.w	r2, r3, #1
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	460b      	mov	r3, r1
 800c212:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c220:	78fb      	ldrb	r3, [r7, #3]
 800c222:	2b01      	cmp	r3, #1
 800c224:	d106      	bne.n	800c234 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	60da      	str	r2, [r3, #12]
 800c232:	e00b      	b.n	800c24c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c234:	78fb      	ldrb	r3, [r7, #3]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d106      	bne.n	800c248 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	60da      	str	r2, [r3, #12]
 800c246:	e001      	b.n	800c24c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c248:	2301      	movs	r3, #1
 800c24a:	e003      	b.n	800c254 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c24c:	2032      	movs	r0, #50	; 0x32
 800c24e:	f7f7 fcbb 	bl	8003bc8 <HAL_Delay>

  return HAL_OK;
 800c252:	2300      	movs	r3, #0
}
 800c254:	4618      	mov	r0, r3
 800c256:	3708      	adds	r7, #8
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c266:	2300      	movs	r3, #0
 800c268:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	019b      	lsls	r3, r3, #6
 800c26e:	f043 0220 	orr.w	r2, r3, #32
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3301      	adds	r3, #1
 800c27a:	60fb      	str	r3, [r7, #12]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	4a09      	ldr	r2, [pc, #36]	; (800c2a4 <USB_FlushTxFifo+0x48>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d901      	bls.n	800c288 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c284:	2303      	movs	r3, #3
 800c286:	e006      	b.n	800c296 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	691b      	ldr	r3, [r3, #16]
 800c28c:	f003 0320 	and.w	r3, r3, #32
 800c290:	2b20      	cmp	r3, #32
 800c292:	d0f0      	beq.n	800c276 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3714      	adds	r7, #20
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	00030d40 	.word	0x00030d40

0800c2a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2210      	movs	r2, #16
 800c2b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	60fb      	str	r3, [r7, #12]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	4a09      	ldr	r2, [pc, #36]	; (800c2e8 <USB_FlushRxFifo+0x40>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d901      	bls.n	800c2cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	e006      	b.n	800c2da <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	f003 0310 	and.w	r3, r3, #16
 800c2d4:	2b10      	cmp	r3, #16
 800c2d6:	d0f0      	beq.n	800c2ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3714      	adds	r7, #20
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	00030d40 	.word	0x00030d40

0800c2ec <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b089      	sub	sp, #36	; 0x24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	71fb      	strb	r3, [r7, #7]
 800c2fe:	4613      	mov	r3, r2
 800c300:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800c30a:	88bb      	ldrh	r3, [r7, #4]
 800c30c:	3303      	adds	r3, #3
 800c30e:	089b      	lsrs	r3, r3, #2
 800c310:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800c312:	2300      	movs	r3, #0
 800c314:	61bb      	str	r3, [r7, #24]
 800c316:	e00f      	b.n	800c338 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c318:	79fb      	ldrb	r3, [r7, #7]
 800c31a:	031a      	lsls	r2, r3, #12
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	4413      	add	r3, r2
 800c320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c324:	461a      	mov	r2, r3
 800c326:	69fb      	ldr	r3, [r7, #28]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	3304      	adds	r3, #4
 800c330:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	3301      	adds	r3, #1
 800c336:	61bb      	str	r3, [r7, #24]
 800c338:	69ba      	ldr	r2, [r7, #24]
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d3eb      	bcc.n	800c318 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3724      	adds	r7, #36	; 0x24
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c34e:	b480      	push	{r7}
 800c350:	b089      	sub	sp, #36	; 0x24
 800c352:	af00      	add	r7, sp, #0
 800c354:	60f8      	str	r0, [r7, #12]
 800c356:	60b9      	str	r1, [r7, #8]
 800c358:	4613      	mov	r3, r2
 800c35a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c364:	88fb      	ldrh	r3, [r7, #6]
 800c366:	3303      	adds	r3, #3
 800c368:	089b      	lsrs	r3, r3, #2
 800c36a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c36c:	2300      	movs	r3, #0
 800c36e:	61bb      	str	r3, [r7, #24]
 800c370:	e00b      	b.n	800c38a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	601a      	str	r2, [r3, #0]
    pDest++;
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	3304      	adds	r3, #4
 800c382:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	3301      	adds	r3, #1
 800c388:	61bb      	str	r3, [r7, #24]
 800c38a:	69ba      	ldr	r2, [r7, #24]
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d3ef      	bcc.n	800c372 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c392:	69fb      	ldr	r3, [r7, #28]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3724      	adds	r7, #36	; 0x24
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	695b      	ldr	r3, [r3, #20]
 800c3ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	699b      	ldr	r3, [r3, #24]
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr

0800c3c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c3c6:	b480      	push	{r7}
 800c3c8:	b083      	sub	sp, #12
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	695b      	ldr	r3, [r3, #20]
 800c3d2:	f003 0301 	and.w	r3, r3, #1
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	370c      	adds	r7, #12
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
	...

0800c3e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	60fb      	str	r3, [r7, #12]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	4a13      	ldr	r2, [pc, #76]	; (800c448 <USB_CoreReset+0x64>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d901      	bls.n	800c402 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c3fe:	2303      	movs	r3, #3
 800c400:	e01b      	b.n	800c43a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	2b00      	cmp	r3, #0
 800c408:	daf2      	bge.n	800c3f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c40a:	2300      	movs	r3, #0
 800c40c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	f043 0201 	orr.w	r2, r3, #1
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	3301      	adds	r3, #1
 800c41e:	60fb      	str	r3, [r7, #12]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	4a09      	ldr	r2, [pc, #36]	; (800c448 <USB_CoreReset+0x64>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d901      	bls.n	800c42c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c428:	2303      	movs	r3, #3
 800c42a:	e006      	b.n	800c43a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	691b      	ldr	r3, [r3, #16]
 800c430:	f003 0301 	and.w	r3, r3, #1
 800c434:	2b01      	cmp	r3, #1
 800c436:	d0f0      	beq.n	800c41a <USB_CoreReset+0x36>

  return HAL_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	00030d40 	.word	0x00030d40

0800c44c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c44c:	b084      	sub	sp, #16
 800c44e:	b580      	push	{r7, lr}
 800c450:	b084      	sub	sp, #16
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
 800c456:	f107 001c 	add.w	r0, r7, #28
 800c45a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c468:	461a      	mov	r2, r3
 800c46a:	2300      	movs	r3, #0
 800c46c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c472:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68ba      	ldr	r2, [r7, #8]
 800c490:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c494:	f023 0304 	bic.w	r3, r3, #4
 800c498:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800c49a:	2110      	movs	r1, #16
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f7ff fedd 	bl	800c25c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7ff ff00 	bl	800c2a8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	60fb      	str	r3, [r7, #12]
 800c4ac:	e015      	b.n	800c4da <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	015a      	lsls	r2, r3, #5
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c4c0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	015a      	lsls	r2, r3, #5
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	60fb      	str	r3, [r7, #12]
 800c4da:	6a3b      	ldr	r3, [r7, #32]
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d3e5      	bcc.n	800c4ae <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800c4e2:	2101      	movs	r1, #1
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 f869 	bl	800c5bc <USB_DriveVbus>

  HAL_Delay(200U);
 800c4ea:	20c8      	movs	r0, #200	; 0xc8
 800c4ec:	f7f7 fb6c 	bl	8003bc8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4fc:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2280      	movs	r2, #128	; 0x80
 800c502:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	4a0d      	ldr	r2, [pc, #52]	; (800c53c <USB_HostInit+0xf0>)
 800c508:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a0c      	ldr	r2, [pc, #48]	; (800c540 <USB_HostInit+0xf4>)
 800c50e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	699b      	ldr	r3, [r3, #24]
 800c516:	f043 0210 	orr.w	r2, r3, #16
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	699a      	ldr	r2, [r3, #24]
 800c522:	4b08      	ldr	r3, [pc, #32]	; (800c544 <USB_HostInit+0xf8>)
 800c524:	4313      	orrs	r3, r2
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c536:	b004      	add	sp, #16
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	00600080 	.word	0x00600080
 800c540:	004000e0 	.word	0x004000e0
 800c544:	a3200008 	.word	0xa3200008

0800c548 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	460b      	mov	r3, r1
 800c552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c566:	f023 0303 	bic.w	r3, r3, #3
 800c56a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	78fb      	ldrb	r3, [r7, #3]
 800c576:	f003 0303 	and.w	r3, r3, #3
 800c57a:	68f9      	ldr	r1, [r7, #12]
 800c57c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c580:	4313      	orrs	r3, r2
 800c582:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c584:	78fb      	ldrb	r3, [r7, #3]
 800c586:	2b01      	cmp	r3, #1
 800c588:	d107      	bne.n	800c59a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c590:	461a      	mov	r2, r3
 800c592:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c596:	6053      	str	r3, [r2, #4]
 800c598:	e009      	b.n	800c5ae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c59a:	78fb      	ldrb	r3, [r7, #3]
 800c59c:	2b02      	cmp	r3, #2
 800c59e:	d106      	bne.n	800c5ae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f241 7370 	movw	r3, #6000	; 0x1770
 800c5ac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3714      	adds	r7, #20
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b085      	sub	sp, #20
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c5e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d109      	bne.n	800c600 <USB_DriveVbus+0x44>
 800c5ec:	78fb      	ldrb	r3, [r7, #3]
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d106      	bne.n	800c600 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c5fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c5fe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c60a:	d109      	bne.n	800c620 <USB_DriveVbus+0x64>
 800c60c:	78fb      	ldrb	r3, [r7, #3]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d106      	bne.n	800c620 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c61a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c61e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3714      	adds	r7, #20
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c62e:	b480      	push	{r7}
 800c630:	b085      	sub	sp, #20
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c640:	689b      	ldr	r3, [r3, #8]
 800c642:	b29b      	uxth	r3, r3
}
 800c644:	4618      	mov	r0, r3
 800c646:	3714      	adds	r7, #20
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800c650:	b480      	push	{r7}
 800c652:	b087      	sub	sp, #28
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	4608      	mov	r0, r1
 800c65a:	4611      	mov	r1, r2
 800c65c:	461a      	mov	r2, r3
 800c65e:	4603      	mov	r3, r0
 800c660:	70fb      	strb	r3, [r7, #3]
 800c662:	460b      	mov	r3, r1
 800c664:	70bb      	strb	r3, [r7, #2]
 800c666:	4613      	mov	r3, r2
 800c668:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c66a:	2300      	movs	r3, #0
 800c66c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c672:	78fb      	ldrb	r3, [r7, #3]
 800c674:	015a      	lsls	r2, r3, #5
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	4413      	add	r3, r2
 800c67a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c67e:	461a      	mov	r2, r3
 800c680:	f04f 33ff 	mov.w	r3, #4294967295
 800c684:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c686:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c68a:	2b03      	cmp	r3, #3
 800c68c:	d867      	bhi.n	800c75e <USB_HC_Init+0x10e>
 800c68e:	a201      	add	r2, pc, #4	; (adr r2, 800c694 <USB_HC_Init+0x44>)
 800c690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c694:	0800c6a5 	.word	0x0800c6a5
 800c698:	0800c721 	.word	0x0800c721
 800c69c:	0800c6a5 	.word	0x0800c6a5
 800c6a0:	0800c6e3 	.word	0x0800c6e3
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c6a4:	78fb      	ldrb	r3, [r7, #3]
 800c6a6:	015a      	lsls	r2, r3, #5
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	f240 439d 	movw	r3, #1181	; 0x49d
 800c6b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c6b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	da51      	bge.n	800c764 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	015a      	lsls	r2, r3, #5
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	78fa      	ldrb	r2, [r7, #3]
 800c6d0:	0151      	lsls	r1, r2, #5
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	440a      	add	r2, r1
 800c6d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6de:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c6e0:	e040      	b.n	800c764 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c6e2:	78fb      	ldrb	r3, [r7, #3]
 800c6e4:	015a      	lsls	r2, r3, #5
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	f240 639d 	movw	r3, #1693	; 0x69d
 800c6f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c6f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	da34      	bge.n	800c768 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c6fe:	78fb      	ldrb	r3, [r7, #3]
 800c700:	015a      	lsls	r2, r3, #5
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	4413      	add	r3, r2
 800c706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	78fa      	ldrb	r2, [r7, #3]
 800c70e:	0151      	lsls	r1, r2, #5
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	440a      	add	r2, r1
 800c714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c71c:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c71e:	e023      	b.n	800c768 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c720:	78fb      	ldrb	r3, [r7, #3]
 800c722:	015a      	lsls	r2, r3, #5
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	4413      	add	r3, r2
 800c728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c72c:	461a      	mov	r2, r3
 800c72e:	f240 2325 	movw	r3, #549	; 0x225
 800c732:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c734:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	da17      	bge.n	800c76c <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c73c:	78fb      	ldrb	r3, [r7, #3]
 800c73e:	015a      	lsls	r2, r3, #5
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	4413      	add	r3, r2
 800c744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	78fa      	ldrb	r2, [r7, #3]
 800c74c:	0151      	lsls	r1, r2, #5
 800c74e:	68ba      	ldr	r2, [r7, #8]
 800c750:	440a      	add	r2, r1
 800c752:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c756:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c75a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c75c:	e006      	b.n	800c76c <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800c75e:	2301      	movs	r3, #1
 800c760:	75fb      	strb	r3, [r7, #23]
      break;
 800c762:	e004      	b.n	800c76e <USB_HC_Init+0x11e>
      break;
 800c764:	bf00      	nop
 800c766:	e002      	b.n	800c76e <USB_HC_Init+0x11e>
      break;
 800c768:	bf00      	nop
 800c76a:	e000      	b.n	800c76e <USB_HC_Init+0x11e>
      break;
 800c76c:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c774:	699a      	ldr	r2, [r3, #24]
 800c776:	78fb      	ldrb	r3, [r7, #3]
 800c778:	f003 030f 	and.w	r3, r3, #15
 800c77c:	2101      	movs	r1, #1
 800c77e:	fa01 f303 	lsl.w	r3, r1, r3
 800c782:	68b9      	ldr	r1, [r7, #8]
 800c784:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c788:	4313      	orrs	r3, r2
 800c78a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c798:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	da03      	bge.n	800c7a8 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c7a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7a4:	613b      	str	r3, [r7, #16]
 800c7a6:	e001      	b.n	800c7ac <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800c7ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d103      	bne.n	800c7bc <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c7b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c7b8:	60fb      	str	r3, [r7, #12]
 800c7ba:	e001      	b.n	800c7c0 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c7c0:	787b      	ldrb	r3, [r7, #1]
 800c7c2:	059b      	lsls	r3, r3, #22
 800c7c4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c7c8:	78bb      	ldrb	r3, [r7, #2]
 800c7ca:	02db      	lsls	r3, r3, #11
 800c7cc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c7d0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c7d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c7d6:	049b      	lsls	r3, r3, #18
 800c7d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c7dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c7de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c7e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c7e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c7ea:	78fb      	ldrb	r3, [r7, #3]
 800c7ec:	0159      	lsls	r1, r3, #5
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	440b      	add	r3, r1
 800c7f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7f6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c7fc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800c7fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c802:	2b03      	cmp	r3, #3
 800c804:	d10f      	bne.n	800c826 <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800c806:	78fb      	ldrb	r3, [r7, #3]
 800c808:	015a      	lsls	r2, r3, #5
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	4413      	add	r3, r2
 800c80e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	78fa      	ldrb	r2, [r7, #3]
 800c816:	0151      	lsls	r1, r2, #5
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	440a      	add	r2, r1
 800c81c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c820:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c824:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c826:	7dfb      	ldrb	r3, [r7, #23]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	371c      	adds	r7, #28
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b088      	sub	sp, #32
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	785b      	ldrb	r3, [r3, #1]
 800c846:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c84c:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d018      	beq.n	800c888 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	691b      	ldr	r3, [r3, #16]
 800c85a:	683a      	ldr	r2, [r7, #0]
 800c85c:	8912      	ldrh	r2, [r2, #8]
 800c85e:	4413      	add	r3, r2
 800c860:	3b01      	subs	r3, #1
 800c862:	683a      	ldr	r2, [r7, #0]
 800c864:	8912      	ldrh	r2, [r2, #8]
 800c866:	fbb3 f3f2 	udiv	r3, r3, r2
 800c86a:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 800c86c:	8bfa      	ldrh	r2, [r7, #30]
 800c86e:	8a7b      	ldrh	r3, [r7, #18]
 800c870:	429a      	cmp	r2, r3
 800c872:	d90b      	bls.n	800c88c <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 800c874:	8a7b      	ldrh	r3, [r7, #18]
 800c876:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c878:	8bfb      	ldrh	r3, [r7, #30]
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	8912      	ldrh	r2, [r2, #8]
 800c87e:	fb02 f203 	mul.w	r2, r2, r3
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	611a      	str	r2, [r3, #16]
 800c886:	e001      	b.n	800c88c <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 800c888:	2301      	movs	r3, #1
 800c88a:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	78db      	ldrb	r3, [r3, #3]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d006      	beq.n	800c8a2 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c894:	8bfb      	ldrh	r3, [r7, #30]
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	8912      	ldrh	r2, [r2, #8]
 800c89a:	fb02 f203 	mul.w	r2, r2, r3
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	691b      	ldr	r3, [r3, #16]
 800c8a6:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c8aa:	8bfb      	ldrh	r3, [r7, #30]
 800c8ac:	04d9      	lsls	r1, r3, #19
 800c8ae:	4b5f      	ldr	r3, [pc, #380]	; (800ca2c <USB_HC_StartXfer+0x1f8>)
 800c8b0:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c8b2:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	7a9b      	ldrb	r3, [r3, #10]
 800c8b8:	075b      	lsls	r3, r3, #29
 800c8ba:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c8be:	6979      	ldr	r1, [r7, #20]
 800c8c0:	0148      	lsls	r0, r1, #5
 800c8c2:	69b9      	ldr	r1, [r7, #24]
 800c8c4:	4401      	add	r1, r0
 800c8c6:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c8ca:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c8cc:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	f003 0301 	and.w	r3, r3, #1
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	bf0c      	ite	eq
 800c8de:	2301      	moveq	r3, #1
 800c8e0:	2300      	movne	r3, #0
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	015a      	lsls	r2, r3, #5
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	697a      	ldr	r2, [r7, #20]
 800c8f6:	0151      	lsls	r1, r2, #5
 800c8f8:	69ba      	ldr	r2, [r7, #24]
 800c8fa:	440a      	add	r2, r1
 800c8fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c900:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c904:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	015a      	lsls	r2, r3, #5
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	4413      	add	r3, r2
 800c90e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	7c7b      	ldrb	r3, [r7, #17]
 800c916:	075b      	lsls	r3, r3, #29
 800c918:	6979      	ldr	r1, [r7, #20]
 800c91a:	0148      	lsls	r0, r1, #5
 800c91c:	69b9      	ldr	r1, [r7, #24]
 800c91e:	4401      	add	r1, r0
 800c920:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c924:	4313      	orrs	r3, r2
 800c926:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	015a      	lsls	r2, r3, #5
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	4413      	add	r3, r2
 800c930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a3e      	ldr	r2, [pc, #248]	; (800ca30 <USB_HC_StartXfer+0x1fc>)
 800c938:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c93a:	4b3d      	ldr	r3, [pc, #244]	; (800ca30 <USB_HC_StartXfer+0x1fc>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c942:	4a3b      	ldr	r2, [pc, #236]	; (800ca30 <USB_HC_StartXfer+0x1fc>)
 800c944:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	78db      	ldrb	r3, [r3, #3]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d006      	beq.n	800c95c <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c94e:	4b38      	ldr	r3, [pc, #224]	; (800ca30 <USB_HC_StartXfer+0x1fc>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c956:	4a36      	ldr	r2, [pc, #216]	; (800ca30 <USB_HC_StartXfer+0x1fc>)
 800c958:	6013      	str	r3, [r2, #0]
 800c95a:	e005      	b.n	800c968 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c95c:	4b34      	ldr	r3, [pc, #208]	; (800ca30 <USB_HC_StartXfer+0x1fc>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c964:	4a32      	ldr	r2, [pc, #200]	; (800ca30 <USB_HC_StartXfer+0x1fc>)
 800c966:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c968:	4b31      	ldr	r3, [pc, #196]	; (800ca30 <USB_HC_StartXfer+0x1fc>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c970:	4a2f      	ldr	r2, [pc, #188]	; (800ca30 <USB_HC_StartXfer+0x1fc>)
 800c972:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	015a      	lsls	r2, r3, #5
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	4413      	add	r3, r2
 800c97c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c980:	461a      	mov	r2, r3
 800c982:	4b2b      	ldr	r3, [pc, #172]	; (800ca30 <USB_HC_StartXfer+0x1fc>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	78db      	ldrb	r3, [r3, #3]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d148      	bne.n	800ca22 <USB_HC_StartXfer+0x1ee>
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d044      	beq.n	800ca22 <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	79db      	ldrb	r3, [r3, #7]
 800c99c:	2b03      	cmp	r3, #3
 800c99e:	d831      	bhi.n	800ca04 <USB_HC_StartXfer+0x1d0>
 800c9a0:	a201      	add	r2, pc, #4	; (adr r2, 800c9a8 <USB_HC_StartXfer+0x174>)
 800c9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a6:	bf00      	nop
 800c9a8:	0800c9b9 	.word	0x0800c9b9
 800c9ac:	0800c9dd 	.word	0x0800c9dd
 800c9b0:	0800c9b9 	.word	0x0800c9b9
 800c9b4:	0800c9dd 	.word	0x0800c9dd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	691b      	ldr	r3, [r3, #16]
 800c9bc:	3303      	adds	r3, #3
 800c9be:	089b      	lsrs	r3, r3, #2
 800c9c0:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c9c2:	89fa      	ldrh	r2, [r7, #14]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d91c      	bls.n	800ca08 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	699b      	ldr	r3, [r3, #24]
 800c9d2:	f043 0220 	orr.w	r2, r3, #32
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	619a      	str	r2, [r3, #24]
          }
          break;
 800c9da:	e015      	b.n	800ca08 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	691b      	ldr	r3, [r3, #16]
 800c9e0:	3303      	adds	r3, #3
 800c9e2:	089b      	lsrs	r3, r3, #2
 800c9e4:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c9e6:	89fa      	ldrh	r2, [r7, #14]
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d90a      	bls.n	800ca0c <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	699b      	ldr	r3, [r3, #24]
 800c9fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	619a      	str	r2, [r3, #24]
          }
          break;
 800ca02:	e003      	b.n	800ca0c <USB_HC_StartXfer+0x1d8>

        default:
          break;
 800ca04:	bf00      	nop
 800ca06:	e002      	b.n	800ca0e <USB_HC_StartXfer+0x1da>
          break;
 800ca08:	bf00      	nop
 800ca0a:	e000      	b.n	800ca0e <USB_HC_StartXfer+0x1da>
          break;
 800ca0c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	68d9      	ldr	r1, [r3, #12]
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	785a      	ldrb	r2, [r3, #1]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f7ff fc65 	bl	800c2ec <USB_WritePacket>
    }

  return HAL_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3720      	adds	r7, #32
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	1ff80000 	.word	0x1ff80000
 800ca30:	200001ac 	.word	0x200001ac

0800ca34 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca46:	695b      	ldr	r3, [r3, #20]
 800ca48:	b29b      	uxth	r3, r3
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3714      	adds	r7, #20
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr

0800ca56 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ca56:	b480      	push	{r7}
 800ca58:	b087      	sub	sp, #28
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	460b      	mov	r3, r1
 800ca60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800ca66:	78fb      	ldrb	r3, [r7, #3]
 800ca68:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	015a      	lsls	r2, r3, #5
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	4413      	add	r3, r2
 800ca76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	0c9b      	lsrs	r3, r3, #18
 800ca7e:	f003 0303 	and.w	r3, r3, #3
 800ca82:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d002      	beq.n	800ca90 <USB_HC_Halt+0x3a>
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d16c      	bne.n	800cb6a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	015a      	lsls	r2, r3, #5
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	4413      	add	r3, r2
 800ca98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	0151      	lsls	r1, r2, #5
 800caa2:	693a      	ldr	r2, [r7, #16]
 800caa4:	440a      	add	r2, r1
 800caa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800caaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800caae:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d143      	bne.n	800cb44 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	015a      	lsls	r2, r3, #5
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	4413      	add	r3, r2
 800cac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	0151      	lsls	r1, r2, #5
 800cace:	693a      	ldr	r2, [r7, #16]
 800cad0:	440a      	add	r2, r1
 800cad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cad6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cada:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	015a      	lsls	r2, r3, #5
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	4413      	add	r3, r2
 800cae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	0151      	lsls	r1, r2, #5
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	440a      	add	r2, r1
 800caf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800caf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cafa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	015a      	lsls	r2, r3, #5
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	4413      	add	r3, r2
 800cb04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	68fa      	ldr	r2, [r7, #12]
 800cb0c:	0151      	lsls	r1, r2, #5
 800cb0e:	693a      	ldr	r2, [r7, #16]
 800cb10:	440a      	add	r2, r1
 800cb12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb1a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	617b      	str	r3, [r7, #20]
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb28:	d81d      	bhi.n	800cb66 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	015a      	lsls	r2, r3, #5
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	4413      	add	r3, r2
 800cb32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb40:	d0ec      	beq.n	800cb1c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cb42:	e080      	b.n	800cc46 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	015a      	lsls	r2, r3, #5
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	0151      	lsls	r1, r2, #5
 800cb56:	693a      	ldr	r2, [r7, #16]
 800cb58:	440a      	add	r2, r1
 800cb5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb62:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cb64:	e06f      	b.n	800cc46 <USB_HC_Halt+0x1f0>
          break;
 800cb66:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cb68:	e06d      	b.n	800cc46 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	015a      	lsls	r2, r3, #5
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	4413      	add	r3, r2
 800cb72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	0151      	lsls	r1, r2, #5
 800cb7c:	693a      	ldr	r2, [r7, #16]
 800cb7e:	440a      	add	r2, r1
 800cb80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb88:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d143      	bne.n	800cc22 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	015a      	lsls	r2, r3, #5
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	4413      	add	r3, r2
 800cba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	0151      	lsls	r1, r2, #5
 800cbac:	693a      	ldr	r2, [r7, #16]
 800cbae:	440a      	add	r2, r1
 800cbb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cbb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbb8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	015a      	lsls	r2, r3, #5
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	0151      	lsls	r1, r2, #5
 800cbcc:	693a      	ldr	r2, [r7, #16]
 800cbce:	440a      	add	r2, r1
 800cbd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cbd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cbd8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	015a      	lsls	r2, r3, #5
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	0151      	lsls	r1, r2, #5
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	440a      	add	r2, r1
 800cbf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cbf4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cbf8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	617b      	str	r3, [r7, #20]
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc06:	d81d      	bhi.n	800cc44 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	015a      	lsls	r2, r3, #5
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	4413      	add	r3, r2
 800cc10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc1e:	d0ec      	beq.n	800cbfa <USB_HC_Halt+0x1a4>
 800cc20:	e011      	b.n	800cc46 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	015a      	lsls	r2, r3, #5
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	4413      	add	r3, r2
 800cc2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	0151      	lsls	r1, r2, #5
 800cc34:	693a      	ldr	r2, [r7, #16]
 800cc36:	440a      	add	r2, r1
 800cc38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc40:	6013      	str	r3, [r2, #0]
 800cc42:	e000      	b.n	800cc46 <USB_HC_Halt+0x1f0>
          break;
 800cc44:	bf00      	nop
    }
  }

  return HAL_OK;
 800cc46:	2300      	movs	r3, #0
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	371c      	adds	r7, #28
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800cc60:	2300      	movs	r3, #0
 800cc62:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff fabe 	bl	800c1e6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800cc6a:	2110      	movs	r1, #16
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7ff faf5 	bl	800c25c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f7ff fb18 	bl	800c2a8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cc78:	2300      	movs	r3, #0
 800cc7a:	613b      	str	r3, [r7, #16]
 800cc7c:	e01f      	b.n	800ccbe <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	015a      	lsls	r2, r3, #5
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	4413      	add	r3, r2
 800cc86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc94:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc9c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cca4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	015a      	lsls	r2, r3, #5
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	4413      	add	r3, r2
 800ccae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	613b      	str	r3, [r7, #16]
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	2b0f      	cmp	r3, #15
 800ccc2:	d9dc      	bls.n	800cc7e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	613b      	str	r3, [r7, #16]
 800ccc8:	e034      	b.n	800cd34 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	015a      	lsls	r2, r3, #5
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cce0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cce8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ccf0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	015a      	lsls	r2, r3, #5
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccfe:	461a      	mov	r2, r3
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	3301      	adds	r3, #1
 800cd08:	617b      	str	r3, [r7, #20]
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd10:	d80c      	bhi.n	800cd2c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	015a      	lsls	r2, r3, #5
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	4413      	add	r3, r2
 800cd1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd28:	d0ec      	beq.n	800cd04 <USB_StopHost+0xb0>
 800cd2a:	e000      	b.n	800cd2e <USB_StopHost+0xda>
        break;
 800cd2c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	3301      	adds	r3, #1
 800cd32:	613b      	str	r3, [r7, #16]
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	2b0f      	cmp	r3, #15
 800cd38:	d9c7      	bls.n	800ccca <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd40:	461a      	mov	r2, r3
 800cd42:	f04f 33ff 	mov.w	r3, #4294967295
 800cd46:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd4e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f7ff fa37 	bl	800c1c4 <USB_EnableGlobalInt>

  return HAL_OK;
 800cd56:	2300      	movs	r3, #0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3718      	adds	r7, #24
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800cd60:	b590      	push	{r4, r7, lr}
 800cd62:	b089      	sub	sp, #36	; 0x24
 800cd64:	af04      	add	r7, sp, #16
 800cd66:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800cd68:	2301      	movs	r3, #1
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	2102      	movs	r1, #2
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 fc68 	bl	800d644 <USBH_FindInterface>
 800cd74:	4603      	mov	r3, r0
 800cd76:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800cd78:	7bfb      	ldrb	r3, [r7, #15]
 800cd7a:	2bff      	cmp	r3, #255	; 0xff
 800cd7c:	d002      	beq.n	800cd84 <USBH_CDC_InterfaceInit+0x24>
 800cd7e:	7bfb      	ldrb	r3, [r7, #15]
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d901      	bls.n	800cd88 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cd84:	2302      	movs	r3, #2
 800cd86:	e13d      	b.n	800d004 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800cd88:	7bfb      	ldrb	r3, [r7, #15]
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 fc3d 	bl	800d60c <USBH_SelectInterface>
 800cd92:	4603      	mov	r3, r0
 800cd94:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800cd96:	7bbb      	ldrb	r3, [r7, #14]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d001      	beq.n	800cda0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800cd9c:	2302      	movs	r3, #2
 800cd9e:	e131      	b.n	800d004 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800cda6:	2050      	movs	r0, #80	; 0x50
 800cda8:	f001 fb1e 	bl	800e3e8 <malloc>
 800cdac:	4603      	mov	r3, r0
 800cdae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdb6:	69db      	ldr	r3, [r3, #28]
 800cdb8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d101      	bne.n	800cdc4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	e11f      	b.n	800d004 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800cdc4:	2250      	movs	r2, #80	; 0x50
 800cdc6:	2100      	movs	r1, #0
 800cdc8:	68b8      	ldr	r0, [r7, #8]
 800cdca:	f001 fb1d 	bl	800e408 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800cdce:	7bfb      	ldrb	r3, [r7, #15]
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	211a      	movs	r1, #26
 800cdd4:	fb01 f303 	mul.w	r3, r1, r3
 800cdd8:	4413      	add	r3, r2
 800cdda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	b25b      	sxtb	r3, r3
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	da15      	bge.n	800ce12 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cde6:	7bfb      	ldrb	r3, [r7, #15]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	211a      	movs	r1, #26
 800cdec:	fb01 f303 	mul.w	r3, r1, r3
 800cdf0:	4413      	add	r3, r2
 800cdf2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cdf6:	781a      	ldrb	r2, [r3, #0]
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cdfc:	7bfb      	ldrb	r3, [r7, #15]
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	211a      	movs	r1, #26
 800ce02:	fb01 f303 	mul.w	r3, r1, r3
 800ce06:	4413      	add	r3, r2
 800ce08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ce0c:	881a      	ldrh	r2, [r3, #0]
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	785b      	ldrb	r3, [r3, #1]
 800ce16:	4619      	mov	r1, r3
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 ffa0 	bl	800dd5e <USBH_AllocPipe>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	461a      	mov	r2, r3
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	7819      	ldrb	r1, [r3, #0]
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	7858      	ldrb	r0, [r3, #1]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	8952      	ldrh	r2, [r2, #10]
 800ce3e:	9202      	str	r2, [sp, #8]
 800ce40:	2203      	movs	r2, #3
 800ce42:	9201      	str	r2, [sp, #4]
 800ce44:	9300      	str	r3, [sp, #0]
 800ce46:	4623      	mov	r3, r4
 800ce48:	4602      	mov	r2, r0
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 ff58 	bl	800dd00 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	2200      	movs	r2, #0
 800ce56:	4619      	mov	r1, r3
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f001 fa1f 	bl	800e29c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800ce5e:	2300      	movs	r3, #0
 800ce60:	2200      	movs	r2, #0
 800ce62:	210a      	movs	r1, #10
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 fbed 	bl	800d644 <USBH_FindInterface>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ce6e:	7bfb      	ldrb	r3, [r7, #15]
 800ce70:	2bff      	cmp	r3, #255	; 0xff
 800ce72:	d002      	beq.n	800ce7a <USBH_CDC_InterfaceInit+0x11a>
 800ce74:	7bfb      	ldrb	r3, [r7, #15]
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d901      	bls.n	800ce7e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ce7a:	2302      	movs	r3, #2
 800ce7c:	e0c2      	b.n	800d004 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800ce7e:	7bfb      	ldrb	r3, [r7, #15]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	211a      	movs	r1, #26
 800ce84:	fb01 f303 	mul.w	r3, r1, r3
 800ce88:	4413      	add	r3, r2
 800ce8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	b25b      	sxtb	r3, r3
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	da16      	bge.n	800cec4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ce96:	7bfb      	ldrb	r3, [r7, #15]
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	211a      	movs	r1, #26
 800ce9c:	fb01 f303 	mul.w	r3, r1, r3
 800cea0:	4413      	add	r3, r2
 800cea2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cea6:	781a      	ldrb	r2, [r3, #0]
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	211a      	movs	r1, #26
 800ceb2:	fb01 f303 	mul.w	r3, r1, r3
 800ceb6:	4413      	add	r3, r2
 800ceb8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cebc:	881a      	ldrh	r2, [r3, #0]
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	835a      	strh	r2, [r3, #26]
 800cec2:	e015      	b.n	800cef0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cec4:	7bfb      	ldrb	r3, [r7, #15]
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	211a      	movs	r1, #26
 800ceca:	fb01 f303 	mul.w	r3, r1, r3
 800cece:	4413      	add	r3, r2
 800ced0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ced4:	781a      	ldrb	r2, [r3, #0]
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	211a      	movs	r1, #26
 800cee0:	fb01 f303 	mul.w	r3, r1, r3
 800cee4:	4413      	add	r3, r2
 800cee6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ceea:	881a      	ldrh	r2, [r3, #0]
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800cef0:	7bfb      	ldrb	r3, [r7, #15]
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	211a      	movs	r1, #26
 800cef6:	fb01 f303 	mul.w	r3, r1, r3
 800cefa:	4413      	add	r3, r2
 800cefc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	b25b      	sxtb	r3, r3
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	da16      	bge.n	800cf36 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800cf08:	7bfb      	ldrb	r3, [r7, #15]
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	211a      	movs	r1, #26
 800cf0e:	fb01 f303 	mul.w	r3, r1, r3
 800cf12:	4413      	add	r3, r2
 800cf14:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cf18:	781a      	ldrb	r2, [r3, #0]
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cf1e:	7bfb      	ldrb	r3, [r7, #15]
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	211a      	movs	r1, #26
 800cf24:	fb01 f303 	mul.w	r3, r1, r3
 800cf28:	4413      	add	r3, r2
 800cf2a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800cf2e:	881a      	ldrh	r2, [r3, #0]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	835a      	strh	r2, [r3, #26]
 800cf34:	e015      	b.n	800cf62 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800cf36:	7bfb      	ldrb	r3, [r7, #15]
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	211a      	movs	r1, #26
 800cf3c:	fb01 f303 	mul.w	r3, r1, r3
 800cf40:	4413      	add	r3, r2
 800cf42:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cf46:	781a      	ldrb	r2, [r3, #0]
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cf4c:	7bfb      	ldrb	r3, [r7, #15]
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	211a      	movs	r1, #26
 800cf52:	fb01 f303 	mul.w	r3, r1, r3
 800cf56:	4413      	add	r3, r2
 800cf58:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800cf5c:	881a      	ldrh	r2, [r3, #0]
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	7b9b      	ldrb	r3, [r3, #14]
 800cf66:	4619      	mov	r1, r3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f000 fef8 	bl	800dd5e <USBH_AllocPipe>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	461a      	mov	r2, r3
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	7bdb      	ldrb	r3, [r3, #15]
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 feee 	bl	800dd5e <USBH_AllocPipe>
 800cf82:	4603      	mov	r3, r0
 800cf84:	461a      	mov	r2, r3
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	7b59      	ldrb	r1, [r3, #13]
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	7b98      	ldrb	r0, [r3, #14]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cf9e:	68ba      	ldr	r2, [r7, #8]
 800cfa0:	8b12      	ldrh	r2, [r2, #24]
 800cfa2:	9202      	str	r2, [sp, #8]
 800cfa4:	2202      	movs	r2, #2
 800cfa6:	9201      	str	r2, [sp, #4]
 800cfa8:	9300      	str	r3, [sp, #0]
 800cfaa:	4623      	mov	r3, r4
 800cfac:	4602      	mov	r2, r0
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 fea6 	bl	800dd00 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	7b19      	ldrb	r1, [r3, #12]
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	7bd8      	ldrb	r0, [r3, #15]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	8b52      	ldrh	r2, [r2, #26]
 800cfcc:	9202      	str	r2, [sp, #8]
 800cfce:	2202      	movs	r2, #2
 800cfd0:	9201      	str	r2, [sp, #4]
 800cfd2:	9300      	str	r3, [sp, #0]
 800cfd4:	4623      	mov	r3, r4
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 fe91 	bl	800dd00 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	7b5b      	ldrb	r3, [r3, #13]
 800cfea:	2200      	movs	r2, #0
 800cfec:	4619      	mov	r1, r3
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f001 f954 	bl	800e29c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	7b1b      	ldrb	r3, [r3, #12]
 800cff8:	2200      	movs	r2, #0
 800cffa:	4619      	mov	r1, r3
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f001 f94d 	bl	800e29c <USBH_LL_SetToggle>

  return USBH_OK;
 800d002:	2300      	movs	r3, #0
}
 800d004:	4618      	mov	r0, r3
 800d006:	3714      	adds	r7, #20
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd90      	pop	{r4, r7, pc}

0800d00c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d01a:	69db      	ldr	r3, [r3, #28]
 800d01c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00e      	beq.n	800d044 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	4619      	mov	r1, r3
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 fe86 	bl	800dd3e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	4619      	mov	r1, r3
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 feb1 	bl	800dda0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2200      	movs	r2, #0
 800d042:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	7b1b      	ldrb	r3, [r3, #12]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00e      	beq.n	800d06a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	7b1b      	ldrb	r3, [r3, #12]
 800d050:	4619      	mov	r1, r3
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 fe73 	bl	800dd3e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	7b1b      	ldrb	r3, [r3, #12]
 800d05c:	4619      	mov	r1, r3
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fe9e 	bl	800dda0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2200      	movs	r2, #0
 800d068:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	7b5b      	ldrb	r3, [r3, #13]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00e      	beq.n	800d090 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	7b5b      	ldrb	r3, [r3, #13]
 800d076:	4619      	mov	r1, r3
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 fe60 	bl	800dd3e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	7b5b      	ldrb	r3, [r3, #13]
 800d082:	4619      	mov	r1, r3
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 fe8b 	bl	800dda0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2200      	movs	r2, #0
 800d08e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d096:	69db      	ldr	r3, [r3, #28]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00b      	beq.n	800d0b4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0a2:	69db      	ldr	r3, [r3, #28]
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f001 f9a7 	bl	800e3f8 <free>
    phost->pActiveClass->pData = 0U;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b084      	sub	sp, #16
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0cc:	69db      	ldr	r3, [r3, #28]
 800d0ce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	3340      	adds	r3, #64	; 0x40
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f8b1 	bl	800d23e <GetLineCoding>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800d0e0:	7afb      	ldrb	r3, [r7, #11]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d105      	bne.n	800d0f2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0ec:	2102      	movs	r1, #2
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800d0f2:	7afb      	ldrb	r3, [r7, #11]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d104:	2301      	movs	r3, #1
 800d106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d108:	2300      	movs	r3, #0
 800d10a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d112:	69db      	ldr	r3, [r3, #28]
 800d114:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d11c:	2b04      	cmp	r3, #4
 800d11e:	d877      	bhi.n	800d210 <USBH_CDC_Process+0x114>
 800d120:	a201      	add	r2, pc, #4	; (adr r2, 800d128 <USBH_CDC_Process+0x2c>)
 800d122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d126:	bf00      	nop
 800d128:	0800d13d 	.word	0x0800d13d
 800d12c:	0800d143 	.word	0x0800d143
 800d130:	0800d173 	.word	0x0800d173
 800d134:	0800d1e7 	.word	0x0800d1e7
 800d138:	0800d1f5 	.word	0x0800d1f5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800d13c:	2300      	movs	r3, #0
 800d13e:	73fb      	strb	r3, [r7, #15]
      break;
 800d140:	e06d      	b.n	800d21e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d146:	4619      	mov	r1, r3
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 f897 	bl	800d27c <SetLineCoding>
 800d14e:	4603      	mov	r3, r0
 800d150:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d152:	7bbb      	ldrb	r3, [r7, #14]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d104      	bne.n	800d162 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	2202      	movs	r2, #2
 800d15c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d160:	e058      	b.n	800d214 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800d162:	7bbb      	ldrb	r3, [r7, #14]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d055      	beq.n	800d214 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	2204      	movs	r2, #4
 800d16c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d170:	e050      	b.n	800d214 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	3340      	adds	r3, #64	; 0x40
 800d176:	4619      	mov	r1, r3
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 f860 	bl	800d23e <GetLineCoding>
 800d17e:	4603      	mov	r3, r0
 800d180:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d182:	7bbb      	ldrb	r3, [r7, #14]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d126      	bne.n	800d1d6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d19a:	791b      	ldrb	r3, [r3, #4]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d13b      	bne.n	800d218 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1aa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d133      	bne.n	800d218 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1ba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d12b      	bne.n	800d218 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1c8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d124      	bne.n	800d218 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f95a 	bl	800d488 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d1d4:	e020      	b.n	800d218 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800d1d6:	7bbb      	ldrb	r3, [r7, #14]
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d01d      	beq.n	800d218 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	2204      	movs	r2, #4
 800d1e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d1e4:	e018      	b.n	800d218 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 f867 	bl	800d2ba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 f8dc 	bl	800d3aa <CDC_ProcessReception>
      break;
 800d1f2:	e014      	b.n	800d21e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 fb0a 	bl	800d810 <USBH_ClrFeature>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d200:	7bbb      	ldrb	r3, [r7, #14]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d10a      	bne.n	800d21c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	2200      	movs	r2, #0
 800d20a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800d20e:	e005      	b.n	800d21c <USBH_CDC_Process+0x120>

    default:
      break;
 800d210:	bf00      	nop
 800d212:	e004      	b.n	800d21e <USBH_CDC_Process+0x122>
      break;
 800d214:	bf00      	nop
 800d216:	e002      	b.n	800d21e <USBH_CDC_Process+0x122>
      break;
 800d218:	bf00      	nop
 800d21a:	e000      	b.n	800d21e <USBH_CDC_Process+0x122>
      break;
 800d21c:	bf00      	nop

  }

  return status;
 800d21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	370c      	adds	r7, #12
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr

0800d23e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800d23e:	b580      	push	{r7, lr}
 800d240:	b082      	sub	sp, #8
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
 800d246:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	22a1      	movs	r2, #161	; 0xa1
 800d24c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2221      	movs	r2, #33	; 0x21
 800d252:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2207      	movs	r2, #7
 800d264:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	2207      	movs	r2, #7
 800d26a:	4619      	mov	r1, r3
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 faf3 	bl	800d858 <USBH_CtlReq>
 800d272:	4603      	mov	r3, r0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2221      	movs	r2, #33	; 0x21
 800d28a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2220      	movs	r2, #32
 800d290:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2200      	movs	r2, #0
 800d296:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2207      	movs	r2, #7
 800d2a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2207      	movs	r2, #7
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 fad4 	bl	800d858 <USBH_CtlReq>
 800d2b0:	4603      	mov	r3, r0
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3708      	adds	r7, #8
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}

0800d2ba <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b086      	sub	sp, #24
 800d2be:	af02      	add	r7, sp, #8
 800d2c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2c8:	69db      	ldr	r3, [r3, #28]
 800d2ca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d002      	beq.n	800d2e0 <CDC_ProcessTransmission+0x26>
 800d2da:	2b02      	cmp	r3, #2
 800d2dc:	d025      	beq.n	800d32a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800d2de:	e060      	b.n	800d3a2 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e4:	68fa      	ldr	r2, [r7, #12]
 800d2e6:	8b12      	ldrh	r2, [r2, #24]
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d90c      	bls.n	800d306 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	69d9      	ldr	r1, [r3, #28]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	8b1a      	ldrh	r2, [r3, #24]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	7b58      	ldrb	r0, [r3, #13]
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 fcbb 	bl	800dc7a <USBH_BulkSendData>
 800d304:	e00c      	b.n	800d320 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800d30e:	b29a      	uxth	r2, r3
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	7b58      	ldrb	r0, [r3, #13]
 800d314:	2301      	movs	r3, #1
 800d316:	9300      	str	r3, [sp, #0]
 800d318:	4603      	mov	r3, r0
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 fcad 	bl	800dc7a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2202      	movs	r2, #2
 800d324:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d328:	e03b      	b.n	800d3a2 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	7b5b      	ldrb	r3, [r3, #13]
 800d32e:	4619      	mov	r1, r3
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 ff89 	bl	800e248 <USBH_LL_GetURBState>
 800d336:	4603      	mov	r3, r0
 800d338:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800d33a:	7afb      	ldrb	r3, [r7, #11]
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d128      	bne.n	800d392 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	8b12      	ldrh	r2, [r2, #24]
 800d348:	4293      	cmp	r3, r2
 800d34a:	d90e      	bls.n	800d36a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	8b12      	ldrh	r2, [r2, #24]
 800d354:	1a9a      	subs	r2, r3, r2
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	69db      	ldr	r3, [r3, #28]
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	8b12      	ldrh	r2, [r2, #24]
 800d362:	441a      	add	r2, r3
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	61da      	str	r2, [r3, #28]
 800d368:	e002      	b.n	800d370 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2200      	movs	r2, #0
 800d36e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d374:	2b00      	cmp	r3, #0
 800d376:	d004      	beq.n	800d382 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d380:	e00e      	b.n	800d3a0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2200      	movs	r2, #0
 800d386:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 f868 	bl	800d460 <USBH_CDC_TransmitCallback>
      break;
 800d390:	e006      	b.n	800d3a0 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800d392:	7afb      	ldrb	r3, [r7, #11]
 800d394:	2b02      	cmp	r3, #2
 800d396:	d103      	bne.n	800d3a0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2201      	movs	r2, #1
 800d39c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d3a0:	bf00      	nop
  }
}
 800d3a2:	bf00      	nop
 800d3a4:	3710      	adds	r7, #16
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}

0800d3aa <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800d3aa:	b580      	push	{r7, lr}
 800d3ac:	b086      	sub	sp, #24
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d3b8:	69db      	ldr	r3, [r3, #28]
 800d3ba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d3c6:	2b03      	cmp	r3, #3
 800d3c8:	d002      	beq.n	800d3d0 <CDC_ProcessReception+0x26>
 800d3ca:	2b04      	cmp	r3, #4
 800d3cc:	d00e      	beq.n	800d3ec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800d3ce:	e043      	b.n	800d458 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	6a19      	ldr	r1, [r3, #32]
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	8b5a      	ldrh	r2, [r3, #26]
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	7b1b      	ldrb	r3, [r3, #12]
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 fc71 	bl	800dcc4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	2204      	movs	r2, #4
 800d3e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d3ea:	e035      	b.n	800d458 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	7b1b      	ldrb	r3, [r3, #12]
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 ff28 	bl	800e248 <USBH_LL_GetURBState>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800d3fc:	7cfb      	ldrb	r3, [r7, #19]
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d129      	bne.n	800d456 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	7b1b      	ldrb	r3, [r3, #12]
 800d406:	4619      	mov	r1, r3
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 fe8b 	bl	800e124 <USBH_LL_GetLastXferSize>
 800d40e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	429a      	cmp	r2, r3
 800d418:	d016      	beq.n	800d448 <CDC_ProcessReception+0x9e>
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	8b5b      	ldrh	r3, [r3, #26]
 800d41e:	461a      	mov	r2, r3
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	4293      	cmp	r3, r2
 800d424:	d910      	bls.n	800d448 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	1ad2      	subs	r2, r2, r3
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	6a1a      	ldr	r2, [r3, #32]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	441a      	add	r2, r3
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	2203      	movs	r2, #3
 800d442:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d446:	e006      	b.n	800d456 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f80f 	bl	800d474 <USBH_CDC_ReceiveCallback>
      break;
 800d456:	bf00      	nop
  }
}
 800d458:	bf00      	nop
 800d45a:	3718      	adds	r7, #24
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d468:	bf00      	nop
 800d46a:	370c      	adds	r7, #12
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d47c:	bf00      	nop
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	4613      	mov	r3, r2
 800d4a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d101      	bne.n	800d4b4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d4b0:	2302      	movs	r3, #2
 800d4b2:	e029      	b.n	800d508 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	79fa      	ldrb	r2, [r7, #7]
 800d4b8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f000 f81f 	bl	800d510 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d003      	beq.n	800d500 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800d500:	68f8      	ldr	r0, [r7, #12]
 800d502:	f000 fd9d 	bl	800e040 <USBH_LL_Init>

  return USBH_OK;
 800d506:	2300      	movs	r3, #0
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3710      	adds	r7, #16
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d518:	2300      	movs	r3, #0
 800d51a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d51c:	2300      	movs	r3, #0
 800d51e:	60fb      	str	r3, [r7, #12]
 800d520:	e009      	b.n	800d536 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	33e0      	adds	r3, #224	; 0xe0
 800d528:	009b      	lsls	r3, r3, #2
 800d52a:	4413      	add	r3, r2
 800d52c:	2200      	movs	r2, #0
 800d52e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	3301      	adds	r3, #1
 800d534:	60fb      	str	r3, [r7, #12]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2b0e      	cmp	r3, #14
 800d53a:	d9f2      	bls.n	800d522 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d53c:	2300      	movs	r3, #0
 800d53e:	60fb      	str	r3, [r7, #12]
 800d540:	e009      	b.n	800d556 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	4413      	add	r3, r2
 800d548:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d54c:	2200      	movs	r2, #0
 800d54e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	3301      	adds	r3, #1
 800d554:	60fb      	str	r3, [r7, #12]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d55c:	d3f1      	bcc.n	800d542 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2201      	movs	r2, #1
 800d56e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2201      	movs	r2, #1
 800d57c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2240      	movs	r2, #64	; 0x40
 800d582:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2201      	movs	r2, #1
 800d596:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2200      	movs	r2, #0
 800d59e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d5aa:	2300      	movs	r3, #0
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3714      	adds	r7, #20
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d016      	beq.n	800d5fa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d10e      	bne.n	800d5f4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d5dc:	1c59      	adds	r1, r3, #1
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	33de      	adds	r3, #222	; 0xde
 800d5e8:	6839      	ldr	r1, [r7, #0]
 800d5ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	73fb      	strb	r3, [r7, #15]
 800d5f2:	e004      	b.n	800d5fe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d5f4:	2302      	movs	r3, #2
 800d5f6:	73fb      	strb	r3, [r7, #15]
 800d5f8:	e001      	b.n	800d5fe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d5fa:	2302      	movs	r3, #2
 800d5fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d600:	4618      	mov	r0, r3
 800d602:	3714      	adds	r7, #20
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b085      	sub	sp, #20
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	460b      	mov	r3, r1
 800d616:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d618:	2300      	movs	r3, #0
 800d61a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d622:	78fa      	ldrb	r2, [r7, #3]
 800d624:	429a      	cmp	r2, r3
 800d626:	d204      	bcs.n	800d632 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	78fa      	ldrb	r2, [r7, #3]
 800d62c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d630:	e001      	b.n	800d636 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d632:	2302      	movs	r3, #2
 800d634:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d636:	7bfb      	ldrb	r3, [r7, #15]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3714      	adds	r7, #20
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d644:	b480      	push	{r7}
 800d646:	b087      	sub	sp, #28
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	4608      	mov	r0, r1
 800d64e:	4611      	mov	r1, r2
 800d650:	461a      	mov	r2, r3
 800d652:	4603      	mov	r3, r0
 800d654:	70fb      	strb	r3, [r7, #3]
 800d656:	460b      	mov	r3, r1
 800d658:	70bb      	strb	r3, [r7, #2]
 800d65a:	4613      	mov	r3, r2
 800d65c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d65e:	2300      	movs	r3, #0
 800d660:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800d662:	2300      	movs	r3, #0
 800d664:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d66c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d66e:	e025      	b.n	800d6bc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d670:	7dfb      	ldrb	r3, [r7, #23]
 800d672:	221a      	movs	r2, #26
 800d674:	fb02 f303 	mul.w	r3, r2, r3
 800d678:	3308      	adds	r3, #8
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	4413      	add	r3, r2
 800d67e:	3302      	adds	r3, #2
 800d680:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	795b      	ldrb	r3, [r3, #5]
 800d686:	78fa      	ldrb	r2, [r7, #3]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d002      	beq.n	800d692 <USBH_FindInterface+0x4e>
 800d68c:	78fb      	ldrb	r3, [r7, #3]
 800d68e:	2bff      	cmp	r3, #255	; 0xff
 800d690:	d111      	bne.n	800d6b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d696:	78ba      	ldrb	r2, [r7, #2]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d002      	beq.n	800d6a2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d69c:	78bb      	ldrb	r3, [r7, #2]
 800d69e:	2bff      	cmp	r3, #255	; 0xff
 800d6a0:	d109      	bne.n	800d6b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d6a6:	787a      	ldrb	r2, [r7, #1]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d002      	beq.n	800d6b2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d6ac:	787b      	ldrb	r3, [r7, #1]
 800d6ae:	2bff      	cmp	r3, #255	; 0xff
 800d6b0:	d101      	bne.n	800d6b6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d6b2:	7dfb      	ldrb	r3, [r7, #23]
 800d6b4:	e006      	b.n	800d6c4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d6b6:	7dfb      	ldrb	r3, [r7, #23]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d6bc:	7dfb      	ldrb	r3, [r7, #23]
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d9d6      	bls.n	800d670 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d6c2:	23ff      	movs	r3, #255	; 0xff
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	371c      	adds	r7, #28
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f000 fced 	bl	800e0b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800d6de:	2101      	movs	r1, #1
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 fdc4 	bl	800e26e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d6e6:	2300      	movs	r3, #0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3708      	adds	r7, #8
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d702:	bf00      	nop
 800d704:	370c      	adds	r7, #12
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr

0800d70e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b082      	sub	sp, #8
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d71c:	1c5a      	adds	r2, r3, #1
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 f804 	bl	800d732 <USBH_HandleSof>
}
 800d72a:	bf00      	nop
 800d72c:	3708      	adds	r7, #8
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b082      	sub	sp, #8
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	2b0b      	cmp	r3, #11
 800d742:	d10a      	bne.n	800d75a <USBH_HandleSof+0x28>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d005      	beq.n	800d75a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d754:	699b      	ldr	r3, [r3, #24]
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	4798      	blx	r3
  }
}
 800d75a:	bf00      	nop
 800d75c:	3708      	adds	r7, #8
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d762:	b480      	push	{r7}
 800d764:	b083      	sub	sp, #12
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2201      	movs	r2, #1
 800d76e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800d772:	bf00      	nop
}
 800d774:	370c      	adds	r7, #12
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr

0800d77e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d77e:	b480      	push	{r7}
 800d780:	b083      	sub	sp, #12
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d78e:	bf00      	nop
}
 800d790:	370c      	adds	r7, #12
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr

0800d79a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d79a:	b480      	push	{r7}
 800d79c:	b083      	sub	sp, #12
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d7ba:	2300      	movs	r3, #0
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 fc80 	bl	800e0ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	791b      	ldrb	r3, [r3, #4]
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 fad3 	bl	800dda0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	795b      	ldrb	r3, [r3, #5]
 800d7fe:	4619      	mov	r1, r3
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 facd 	bl	800dda0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d806:	2300      	movs	r3, #0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	460b      	mov	r3, r1
 800d81a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	789b      	ldrb	r3, [r3, #2]
 800d820:	2b01      	cmp	r3, #1
 800d822:	d10f      	bne.n	800d844 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2202      	movs	r2, #2
 800d828:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2201      	movs	r2, #1
 800d82e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d836:	78fb      	ldrb	r3, [r7, #3]
 800d838:	b29a      	uxth	r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2200      	movs	r2, #0
 800d842:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d844:	2200      	movs	r2, #0
 800d846:	2100      	movs	r1, #0
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f805 	bl	800d858 <USBH_CtlReq>
 800d84e:	4603      	mov	r3, r0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b086      	sub	sp, #24
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	60b9      	str	r1, [r7, #8]
 800d862:	4613      	mov	r3, r2
 800d864:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d866:	2301      	movs	r3, #1
 800d868:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	789b      	ldrb	r3, [r3, #2]
 800d86e:	2b01      	cmp	r3, #1
 800d870:	d002      	beq.n	800d878 <USBH_CtlReq+0x20>
 800d872:	2b02      	cmp	r3, #2
 800d874:	d00f      	beq.n	800d896 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d876:	e027      	b.n	800d8c8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	68ba      	ldr	r2, [r7, #8]
 800d87c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	88fa      	ldrh	r2, [r7, #6]
 800d882:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2201      	movs	r2, #1
 800d888:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2202      	movs	r2, #2
 800d88e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d890:	2301      	movs	r3, #1
 800d892:	75fb      	strb	r3, [r7, #23]
      break;
 800d894:	e018      	b.n	800d8c8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f000 f81c 	bl	800d8d4 <USBH_HandleControl>
 800d89c:	4603      	mov	r3, r0
 800d89e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d8a0:	7dfb      	ldrb	r3, [r7, #23]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d002      	beq.n	800d8ac <USBH_CtlReq+0x54>
 800d8a6:	7dfb      	ldrb	r3, [r7, #23]
 800d8a8:	2b03      	cmp	r3, #3
 800d8aa:	d106      	bne.n	800d8ba <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	761a      	strb	r2, [r3, #24]
      break;
 800d8b8:	e005      	b.n	800d8c6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d8ba:	7dfb      	ldrb	r3, [r7, #23]
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d102      	bne.n	800d8c6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	709a      	strb	r2, [r3, #2]
      break;
 800d8c6:	bf00      	nop
  }
  return status;
 800d8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3718      	adds	r7, #24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
	...

0800d8d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b086      	sub	sp, #24
 800d8d8:	af02      	add	r7, sp, #8
 800d8da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	7e1b      	ldrb	r3, [r3, #24]
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	2b0a      	cmp	r3, #10
 800d8ec:	f200 8158 	bhi.w	800dba0 <USBH_HandleControl+0x2cc>
 800d8f0:	a201      	add	r2, pc, #4	; (adr r2, 800d8f8 <USBH_HandleControl+0x24>)
 800d8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f6:	bf00      	nop
 800d8f8:	0800d925 	.word	0x0800d925
 800d8fc:	0800d93f 	.word	0x0800d93f
 800d900:	0800d9a9 	.word	0x0800d9a9
 800d904:	0800d9cf 	.word	0x0800d9cf
 800d908:	0800da07 	.word	0x0800da07
 800d90c:	0800da33 	.word	0x0800da33
 800d910:	0800da85 	.word	0x0800da85
 800d914:	0800daa7 	.word	0x0800daa7
 800d918:	0800dae3 	.word	0x0800dae3
 800d91c:	0800db0b 	.word	0x0800db0b
 800d920:	0800db49 	.word	0x0800db49
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f103 0110 	add.w	r1, r3, #16
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	795b      	ldrb	r3, [r3, #5]
 800d92e:	461a      	mov	r2, r3
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 f945 	bl	800dbc0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2202      	movs	r2, #2
 800d93a:	761a      	strb	r2, [r3, #24]
      break;
 800d93c:	e13b      	b.n	800dbb6 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	795b      	ldrb	r3, [r3, #5]
 800d942:	4619      	mov	r1, r3
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 fc7f 	bl	800e248 <USBH_LL_GetURBState>
 800d94a:	4603      	mov	r3, r0
 800d94c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d94e:	7bbb      	ldrb	r3, [r7, #14]
 800d950:	2b01      	cmp	r3, #1
 800d952:	d11e      	bne.n	800d992 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	7c1b      	ldrb	r3, [r3, #16]
 800d958:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d95c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	8adb      	ldrh	r3, [r3, #22]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00a      	beq.n	800d97c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d966:	7b7b      	ldrb	r3, [r7, #13]
 800d968:	2b80      	cmp	r3, #128	; 0x80
 800d96a:	d103      	bne.n	800d974 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2203      	movs	r2, #3
 800d970:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d972:	e117      	b.n	800dba4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2205      	movs	r2, #5
 800d978:	761a      	strb	r2, [r3, #24]
      break;
 800d97a:	e113      	b.n	800dba4 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800d97c:	7b7b      	ldrb	r3, [r7, #13]
 800d97e:	2b80      	cmp	r3, #128	; 0x80
 800d980:	d103      	bne.n	800d98a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2209      	movs	r2, #9
 800d986:	761a      	strb	r2, [r3, #24]
      break;
 800d988:	e10c      	b.n	800dba4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2207      	movs	r2, #7
 800d98e:	761a      	strb	r2, [r3, #24]
      break;
 800d990:	e108      	b.n	800dba4 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d992:	7bbb      	ldrb	r3, [r7, #14]
 800d994:	2b04      	cmp	r3, #4
 800d996:	d003      	beq.n	800d9a0 <USBH_HandleControl+0xcc>
 800d998:	7bbb      	ldrb	r3, [r7, #14]
 800d99a:	2b02      	cmp	r3, #2
 800d99c:	f040 8102 	bne.w	800dba4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	220b      	movs	r2, #11
 800d9a4:	761a      	strb	r2, [r3, #24]
      break;
 800d9a6:	e0fd      	b.n	800dba4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6899      	ldr	r1, [r3, #8]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	899a      	ldrh	r2, [r3, #12]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	791b      	ldrb	r3, [r3, #4]
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 f93c 	bl	800dc3e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2204      	movs	r2, #4
 800d9ca:	761a      	strb	r2, [r3, #24]
      break;
 800d9cc:	e0f3      	b.n	800dbb6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	791b      	ldrb	r3, [r3, #4]
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 fc37 	bl	800e248 <USBH_LL_GetURBState>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d9de:	7bbb      	ldrb	r3, [r7, #14]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d102      	bne.n	800d9ea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2209      	movs	r2, #9
 800d9e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d9ea:	7bbb      	ldrb	r3, [r7, #14]
 800d9ec:	2b05      	cmp	r3, #5
 800d9ee:	d102      	bne.n	800d9f6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d9f0:	2303      	movs	r3, #3
 800d9f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d9f4:	e0d8      	b.n	800dba8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d9f6:	7bbb      	ldrb	r3, [r7, #14]
 800d9f8:	2b04      	cmp	r3, #4
 800d9fa:	f040 80d5 	bne.w	800dba8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	220b      	movs	r2, #11
 800da02:	761a      	strb	r2, [r3, #24]
      break;
 800da04:	e0d0      	b.n	800dba8 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6899      	ldr	r1, [r3, #8]
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	899a      	ldrh	r2, [r3, #12]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	7958      	ldrb	r0, [r3, #5]
 800da12:	2301      	movs	r3, #1
 800da14:	9300      	str	r3, [sp, #0]
 800da16:	4603      	mov	r3, r0
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 f8eb 	bl	800dbf4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800da24:	b29a      	uxth	r2, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2206      	movs	r2, #6
 800da2e:	761a      	strb	r2, [r3, #24]
      break;
 800da30:	e0c1      	b.n	800dbb6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	795b      	ldrb	r3, [r3, #5]
 800da36:	4619      	mov	r1, r3
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 fc05 	bl	800e248 <USBH_LL_GetURBState>
 800da3e:	4603      	mov	r3, r0
 800da40:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800da42:	7bbb      	ldrb	r3, [r7, #14]
 800da44:	2b01      	cmp	r3, #1
 800da46:	d103      	bne.n	800da50 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2207      	movs	r2, #7
 800da4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800da4e:	e0ad      	b.n	800dbac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800da50:	7bbb      	ldrb	r3, [r7, #14]
 800da52:	2b05      	cmp	r3, #5
 800da54:	d105      	bne.n	800da62 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	220c      	movs	r2, #12
 800da5a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800da5c:	2303      	movs	r3, #3
 800da5e:	73fb      	strb	r3, [r7, #15]
      break;
 800da60:	e0a4      	b.n	800dbac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800da62:	7bbb      	ldrb	r3, [r7, #14]
 800da64:	2b02      	cmp	r3, #2
 800da66:	d103      	bne.n	800da70 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2205      	movs	r2, #5
 800da6c:	761a      	strb	r2, [r3, #24]
      break;
 800da6e:	e09d      	b.n	800dbac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800da70:	7bbb      	ldrb	r3, [r7, #14]
 800da72:	2b04      	cmp	r3, #4
 800da74:	f040 809a 	bne.w	800dbac <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	220b      	movs	r2, #11
 800da7c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800da7e:	2302      	movs	r3, #2
 800da80:	73fb      	strb	r3, [r7, #15]
      break;
 800da82:	e093      	b.n	800dbac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	791b      	ldrb	r3, [r3, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	2100      	movs	r1, #0
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 f8d6 	bl	800dc3e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800da98:	b29a      	uxth	r2, r3
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2208      	movs	r2, #8
 800daa2:	761a      	strb	r2, [r3, #24]

      break;
 800daa4:	e087      	b.n	800dbb6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	791b      	ldrb	r3, [r3, #4]
 800daaa:	4619      	mov	r1, r3
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f000 fbcb 	bl	800e248 <USBH_LL_GetURBState>
 800dab2:	4603      	mov	r3, r0
 800dab4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dab6:	7bbb      	ldrb	r3, [r7, #14]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d105      	bne.n	800dac8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	220d      	movs	r2, #13
 800dac0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dac2:	2300      	movs	r3, #0
 800dac4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dac6:	e073      	b.n	800dbb0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800dac8:	7bbb      	ldrb	r3, [r7, #14]
 800daca:	2b04      	cmp	r3, #4
 800dacc:	d103      	bne.n	800dad6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	220b      	movs	r2, #11
 800dad2:	761a      	strb	r2, [r3, #24]
      break;
 800dad4:	e06c      	b.n	800dbb0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800dad6:	7bbb      	ldrb	r3, [r7, #14]
 800dad8:	2b05      	cmp	r3, #5
 800dada:	d169      	bne.n	800dbb0 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800dadc:	2303      	movs	r3, #3
 800dade:	73fb      	strb	r3, [r7, #15]
      break;
 800dae0:	e066      	b.n	800dbb0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	795a      	ldrb	r2, [r3, #5]
 800dae6:	2301      	movs	r3, #1
 800dae8:	9300      	str	r3, [sp, #0]
 800daea:	4613      	mov	r3, r2
 800daec:	2200      	movs	r2, #0
 800daee:	2100      	movs	r1, #0
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 f87f 	bl	800dbf4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	220a      	movs	r2, #10
 800db06:	761a      	strb	r2, [r3, #24]
      break;
 800db08:	e055      	b.n	800dbb6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	795b      	ldrb	r3, [r3, #5]
 800db0e:	4619      	mov	r1, r3
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f000 fb99 	bl	800e248 <USBH_LL_GetURBState>
 800db16:	4603      	mov	r3, r0
 800db18:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800db1a:	7bbb      	ldrb	r3, [r7, #14]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d105      	bne.n	800db2c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800db20:	2300      	movs	r3, #0
 800db22:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	220d      	movs	r2, #13
 800db28:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800db2a:	e043      	b.n	800dbb4 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800db2c:	7bbb      	ldrb	r3, [r7, #14]
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d103      	bne.n	800db3a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2209      	movs	r2, #9
 800db36:	761a      	strb	r2, [r3, #24]
      break;
 800db38:	e03c      	b.n	800dbb4 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800db3a:	7bbb      	ldrb	r3, [r7, #14]
 800db3c:	2b04      	cmp	r3, #4
 800db3e:	d139      	bne.n	800dbb4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	220b      	movs	r2, #11
 800db44:	761a      	strb	r2, [r3, #24]
      break;
 800db46:	e035      	b.n	800dbb4 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	7e5b      	ldrb	r3, [r3, #25]
 800db4c:	3301      	adds	r3, #1
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	765a      	strb	r2, [r3, #25]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	7e5b      	ldrb	r3, [r3, #25]
 800db58:	2b02      	cmp	r3, #2
 800db5a:	d806      	bhi.n	800db6a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2201      	movs	r2, #1
 800db66:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800db68:	e025      	b.n	800dbb6 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db70:	2106      	movs	r1, #6
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2200      	movs	r2, #0
 800db7a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	795b      	ldrb	r3, [r3, #5]
 800db80:	4619      	mov	r1, r3
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f000 f90c 	bl	800dda0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	791b      	ldrb	r3, [r3, #4]
 800db8c:	4619      	mov	r1, r3
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 f906 	bl	800dda0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2200      	movs	r2, #0
 800db98:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800db9a:	2302      	movs	r3, #2
 800db9c:	73fb      	strb	r3, [r7, #15]
      break;
 800db9e:	e00a      	b.n	800dbb6 <USBH_HandleControl+0x2e2>

    default:
      break;
 800dba0:	bf00      	nop
 800dba2:	e008      	b.n	800dbb6 <USBH_HandleControl+0x2e2>
      break;
 800dba4:	bf00      	nop
 800dba6:	e006      	b.n	800dbb6 <USBH_HandleControl+0x2e2>
      break;
 800dba8:	bf00      	nop
 800dbaa:	e004      	b.n	800dbb6 <USBH_HandleControl+0x2e2>
      break;
 800dbac:	bf00      	nop
 800dbae:	e002      	b.n	800dbb6 <USBH_HandleControl+0x2e2>
      break;
 800dbb0:	bf00      	nop
 800dbb2:	e000      	b.n	800dbb6 <USBH_HandleControl+0x2e2>
      break;
 800dbb4:	bf00      	nop
  }

  return status;
 800dbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3710      	adds	r7, #16
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b088      	sub	sp, #32
 800dbc4:	af04      	add	r7, sp, #16
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	4613      	mov	r3, r2
 800dbcc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dbce:	79f9      	ldrb	r1, [r7, #7]
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	9303      	str	r3, [sp, #12]
 800dbd4:	2308      	movs	r3, #8
 800dbd6:	9302      	str	r3, [sp, #8]
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	9301      	str	r3, [sp, #4]
 800dbdc:	2300      	movs	r3, #0
 800dbde:	9300      	str	r3, [sp, #0]
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f000 fafe 	bl	800e1e6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b088      	sub	sp, #32
 800dbf8:	af04      	add	r7, sp, #16
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	4611      	mov	r1, r2
 800dc00:	461a      	mov	r2, r3
 800dc02:	460b      	mov	r3, r1
 800dc04:	80fb      	strh	r3, [r7, #6]
 800dc06:	4613      	mov	r3, r2
 800dc08:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d001      	beq.n	800dc18 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dc14:	2300      	movs	r3, #0
 800dc16:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dc18:	7979      	ldrb	r1, [r7, #5]
 800dc1a:	7e3b      	ldrb	r3, [r7, #24]
 800dc1c:	9303      	str	r3, [sp, #12]
 800dc1e:	88fb      	ldrh	r3, [r7, #6]
 800dc20:	9302      	str	r3, [sp, #8]
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	9301      	str	r3, [sp, #4]
 800dc26:	2301      	movs	r3, #1
 800dc28:	9300      	str	r3, [sp, #0]
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	68f8      	ldr	r0, [r7, #12]
 800dc30:	f000 fad9 	bl	800e1e6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3710      	adds	r7, #16
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}

0800dc3e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800dc3e:	b580      	push	{r7, lr}
 800dc40:	b088      	sub	sp, #32
 800dc42:	af04      	add	r7, sp, #16
 800dc44:	60f8      	str	r0, [r7, #12]
 800dc46:	60b9      	str	r1, [r7, #8]
 800dc48:	4611      	mov	r1, r2
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	80fb      	strh	r3, [r7, #6]
 800dc50:	4613      	mov	r3, r2
 800dc52:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dc54:	7979      	ldrb	r1, [r7, #5]
 800dc56:	2300      	movs	r3, #0
 800dc58:	9303      	str	r3, [sp, #12]
 800dc5a:	88fb      	ldrh	r3, [r7, #6]
 800dc5c:	9302      	str	r3, [sp, #8]
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	9301      	str	r3, [sp, #4]
 800dc62:	2301      	movs	r3, #1
 800dc64:	9300      	str	r3, [sp, #0]
 800dc66:	2300      	movs	r3, #0
 800dc68:	2201      	movs	r2, #1
 800dc6a:	68f8      	ldr	r0, [r7, #12]
 800dc6c:	f000 fabb 	bl	800e1e6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dc70:	2300      	movs	r3, #0

}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b088      	sub	sp, #32
 800dc7e:	af04      	add	r7, sp, #16
 800dc80:	60f8      	str	r0, [r7, #12]
 800dc82:	60b9      	str	r1, [r7, #8]
 800dc84:	4611      	mov	r1, r2
 800dc86:	461a      	mov	r2, r3
 800dc88:	460b      	mov	r3, r1
 800dc8a:	80fb      	strh	r3, [r7, #6]
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d001      	beq.n	800dc9e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dc9e:	7979      	ldrb	r1, [r7, #5]
 800dca0:	7e3b      	ldrb	r3, [r7, #24]
 800dca2:	9303      	str	r3, [sp, #12]
 800dca4:	88fb      	ldrh	r3, [r7, #6]
 800dca6:	9302      	str	r3, [sp, #8]
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	9301      	str	r3, [sp, #4]
 800dcac:	2301      	movs	r3, #1
 800dcae:	9300      	str	r3, [sp, #0]
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f000 fa96 	bl	800e1e6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dcba:	2300      	movs	r3, #0
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3710      	adds	r7, #16
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b088      	sub	sp, #32
 800dcc8:	af04      	add	r7, sp, #16
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	4611      	mov	r1, r2
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	80fb      	strh	r3, [r7, #6]
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dcda:	7979      	ldrb	r1, [r7, #5]
 800dcdc:	2300      	movs	r3, #0
 800dcde:	9303      	str	r3, [sp, #12]
 800dce0:	88fb      	ldrh	r3, [r7, #6]
 800dce2:	9302      	str	r3, [sp, #8]
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	9301      	str	r3, [sp, #4]
 800dce8:	2301      	movs	r3, #1
 800dcea:	9300      	str	r3, [sp, #0]
 800dcec:	2302      	movs	r3, #2
 800dcee:	2201      	movs	r2, #1
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f000 fa78 	bl	800e1e6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dcf6:	2300      	movs	r3, #0
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b086      	sub	sp, #24
 800dd04:	af04      	add	r7, sp, #16
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	4608      	mov	r0, r1
 800dd0a:	4611      	mov	r1, r2
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	4603      	mov	r3, r0
 800dd10:	70fb      	strb	r3, [r7, #3]
 800dd12:	460b      	mov	r3, r1
 800dd14:	70bb      	strb	r3, [r7, #2]
 800dd16:	4613      	mov	r3, r2
 800dd18:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800dd1a:	7878      	ldrb	r0, [r7, #1]
 800dd1c:	78ba      	ldrb	r2, [r7, #2]
 800dd1e:	78f9      	ldrb	r1, [r7, #3]
 800dd20:	8b3b      	ldrh	r3, [r7, #24]
 800dd22:	9302      	str	r3, [sp, #8]
 800dd24:	7d3b      	ldrb	r3, [r7, #20]
 800dd26:	9301      	str	r3, [sp, #4]
 800dd28:	7c3b      	ldrb	r3, [r7, #16]
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 fa0b 	bl	800e14a <USBH_LL_OpenPipe>

  return USBH_OK;
 800dd34:	2300      	movs	r3, #0
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3708      	adds	r7, #8
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}

0800dd3e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b082      	sub	sp, #8
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
 800dd46:	460b      	mov	r3, r1
 800dd48:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800dd4a:	78fb      	ldrb	r3, [r7, #3]
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 fa2a 	bl	800e1a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800dd54:	2300      	movs	r3, #0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3708      	adds	r7, #8
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}

0800dd5e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800dd5e:	b580      	push	{r7, lr}
 800dd60:	b084      	sub	sp, #16
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	6078      	str	r0, [r7, #4]
 800dd66:	460b      	mov	r3, r1
 800dd68:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f836 	bl	800dddc <USBH_GetFreePipe>
 800dd70:	4603      	mov	r3, r0
 800dd72:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800dd74:	89fb      	ldrh	r3, [r7, #14]
 800dd76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d00a      	beq.n	800dd94 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800dd7e:	78fa      	ldrb	r2, [r7, #3]
 800dd80:	89fb      	ldrh	r3, [r7, #14]
 800dd82:	f003 030f 	and.w	r3, r3, #15
 800dd86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dd8a:	6879      	ldr	r1, [r7, #4]
 800dd8c:	33e0      	adds	r3, #224	; 0xe0
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	440b      	add	r3, r1
 800dd92:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800dd94:	89fb      	ldrh	r3, [r7, #14]
 800dd96:	b2db      	uxtb	r3, r3
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b083      	sub	sp, #12
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	460b      	mov	r3, r1
 800ddaa:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ddac:	78fb      	ldrb	r3, [r7, #3]
 800ddae:	2b0a      	cmp	r3, #10
 800ddb0:	d80d      	bhi.n	800ddce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ddb2:	78fb      	ldrb	r3, [r7, #3]
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	33e0      	adds	r3, #224	; 0xe0
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	685a      	ldr	r2, [r3, #4]
 800ddbe:	78fb      	ldrb	r3, [r7, #3]
 800ddc0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ddc4:	6879      	ldr	r1, [r7, #4]
 800ddc6:	33e0      	adds	r3, #224	; 0xe0
 800ddc8:	009b      	lsls	r3, r3, #2
 800ddca:	440b      	add	r3, r1
 800ddcc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ddce:	2300      	movs	r3, #0
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr

0800dddc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b085      	sub	sp, #20
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800dde4:	2300      	movs	r3, #0
 800dde6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800dde8:	2300      	movs	r3, #0
 800ddea:	73fb      	strb	r3, [r7, #15]
 800ddec:	e00f      	b.n	800de0e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ddee:	7bfb      	ldrb	r3, [r7, #15]
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	33e0      	adds	r3, #224	; 0xe0
 800ddf4:	009b      	lsls	r3, r3, #2
 800ddf6:	4413      	add	r3, r2
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d102      	bne.n	800de08 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800de02:	7bfb      	ldrb	r3, [r7, #15]
 800de04:	b29b      	uxth	r3, r3
 800de06:	e007      	b.n	800de18 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800de08:	7bfb      	ldrb	r3, [r7, #15]
 800de0a:	3301      	adds	r3, #1
 800de0c:	73fb      	strb	r3, [r7, #15]
 800de0e:	7bfb      	ldrb	r3, [r7, #15]
 800de10:	2b0a      	cmp	r3, #10
 800de12:	d9ec      	bls.n	800ddee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800de14:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3714      	adds	r7, #20
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800de28:	2201      	movs	r2, #1
 800de2a:	490e      	ldr	r1, [pc, #56]	; (800de64 <MX_USB_HOST_Init+0x40>)
 800de2c:	480e      	ldr	r0, [pc, #56]	; (800de68 <MX_USB_HOST_Init+0x44>)
 800de2e:	f7ff fb35 	bl	800d49c <USBH_Init>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d001      	beq.n	800de3c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800de38:	f7f3 fef8 	bl	8001c2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800de3c:	490b      	ldr	r1, [pc, #44]	; (800de6c <MX_USB_HOST_Init+0x48>)
 800de3e:	480a      	ldr	r0, [pc, #40]	; (800de68 <MX_USB_HOST_Init+0x44>)
 800de40:	f7ff fbba 	bl	800d5b8 <USBH_RegisterClass>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d001      	beq.n	800de4e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800de4a:	f7f3 feef 	bl	8001c2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800de4e:	4806      	ldr	r0, [pc, #24]	; (800de68 <MX_USB_HOST_Init+0x44>)
 800de50:	f7ff fc3e 	bl	800d6d0 <USBH_Start>
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	d001      	beq.n	800de5e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800de5a:	f7f3 fee7 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800de5e:	bf00      	nop
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	0800de71 	.word	0x0800de71
 800de68:	200065f0 	.word	0x200065f0
 800de6c:	20000064 	.word	0x20000064

0800de70 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	460b      	mov	r3, r1
 800de7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800de7c:	78fb      	ldrb	r3, [r7, #3]
 800de7e:	3b01      	subs	r3, #1
 800de80:	2b04      	cmp	r3, #4
 800de82:	d819      	bhi.n	800deb8 <USBH_UserProcess+0x48>
 800de84:	a201      	add	r2, pc, #4	; (adr r2, 800de8c <USBH_UserProcess+0x1c>)
 800de86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de8a:	bf00      	nop
 800de8c:	0800deb9 	.word	0x0800deb9
 800de90:	0800dea9 	.word	0x0800dea9
 800de94:	0800deb9 	.word	0x0800deb9
 800de98:	0800deb1 	.word	0x0800deb1
 800de9c:	0800dea1 	.word	0x0800dea1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800dea0:	4b09      	ldr	r3, [pc, #36]	; (800dec8 <USBH_UserProcess+0x58>)
 800dea2:	2203      	movs	r2, #3
 800dea4:	701a      	strb	r2, [r3, #0]
  break;
 800dea6:	e008      	b.n	800deba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800dea8:	4b07      	ldr	r3, [pc, #28]	; (800dec8 <USBH_UserProcess+0x58>)
 800deaa:	2202      	movs	r2, #2
 800deac:	701a      	strb	r2, [r3, #0]
  break;
 800deae:	e004      	b.n	800deba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800deb0:	4b05      	ldr	r3, [pc, #20]	; (800dec8 <USBH_UserProcess+0x58>)
 800deb2:	2201      	movs	r2, #1
 800deb4:	701a      	strb	r2, [r3, #0]
  break;
 800deb6:	e000      	b.n	800deba <USBH_UserProcess+0x4a>

  default:
  break;
 800deb8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800deba:	bf00      	nop
 800debc:	370c      	adds	r7, #12
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr
 800dec6:	bf00      	nop
 800dec8:	200001b0 	.word	0x200001b0

0800decc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b08a      	sub	sp, #40	; 0x28
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ded4:	f107 0314 	add.w	r3, r7, #20
 800ded8:	2200      	movs	r2, #0
 800deda:	601a      	str	r2, [r3, #0]
 800dedc:	605a      	str	r2, [r3, #4]
 800dede:	609a      	str	r2, [r3, #8]
 800dee0:	60da      	str	r2, [r3, #12]
 800dee2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800deec:	d14e      	bne.n	800df8c <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800deee:	4b29      	ldr	r3, [pc, #164]	; (800df94 <HAL_HCD_MspInit+0xc8>)
 800def0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800def2:	4a28      	ldr	r2, [pc, #160]	; (800df94 <HAL_HCD_MspInit+0xc8>)
 800def4:	f043 0301 	orr.w	r3, r3, #1
 800def8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800defa:	4b26      	ldr	r3, [pc, #152]	; (800df94 <HAL_HCD_MspInit+0xc8>)
 800defc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800defe:	f003 0301 	and.w	r3, r3, #1
 800df02:	613b      	str	r3, [r7, #16]
 800df04:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800df06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800df0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df0c:	2302      	movs	r3, #2
 800df0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df10:	2300      	movs	r3, #0
 800df12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df14:	2303      	movs	r3, #3
 800df16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800df18:	230a      	movs	r3, #10
 800df1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df1c:	f107 0314 	add.w	r3, r7, #20
 800df20:	4619      	mov	r1, r3
 800df22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800df26:	f7f6 ff41 	bl	8004dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800df2a:	4b1a      	ldr	r3, [pc, #104]	; (800df94 <HAL_HCD_MspInit+0xc8>)
 800df2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df2e:	4a19      	ldr	r2, [pc, #100]	; (800df94 <HAL_HCD_MspInit+0xc8>)
 800df30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800df34:	64d3      	str	r3, [r2, #76]	; 0x4c
 800df36:	4b17      	ldr	r3, [pc, #92]	; (800df94 <HAL_HCD_MspInit+0xc8>)
 800df38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800df3e:	60fb      	str	r3, [r7, #12]
 800df40:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800df42:	4b14      	ldr	r3, [pc, #80]	; (800df94 <HAL_HCD_MspInit+0xc8>)
 800df44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d114      	bne.n	800df78 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800df4e:	4b11      	ldr	r3, [pc, #68]	; (800df94 <HAL_HCD_MspInit+0xc8>)
 800df50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df52:	4a10      	ldr	r2, [pc, #64]	; (800df94 <HAL_HCD_MspInit+0xc8>)
 800df54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df58:	6593      	str	r3, [r2, #88]	; 0x58
 800df5a:	4b0e      	ldr	r3, [pc, #56]	; (800df94 <HAL_HCD_MspInit+0xc8>)
 800df5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df62:	60bb      	str	r3, [r7, #8]
 800df64:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800df66:	f7f9 fe83 	bl	8007c70 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800df6a:	4b0a      	ldr	r3, [pc, #40]	; (800df94 <HAL_HCD_MspInit+0xc8>)
 800df6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df6e:	4a09      	ldr	r2, [pc, #36]	; (800df94 <HAL_HCD_MspInit+0xc8>)
 800df70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df74:	6593      	str	r3, [r2, #88]	; 0x58
 800df76:	e001      	b.n	800df7c <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800df78:	f7f9 fe7a 	bl	8007c70 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800df7c:	2200      	movs	r2, #0
 800df7e:	2100      	movs	r1, #0
 800df80:	2043      	movs	r0, #67	; 0x43
 800df82:	f7f5 ff40 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800df86:	2043      	movs	r0, #67	; 0x43
 800df88:	f7f5 ff59 	bl	8003e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800df8c:	bf00      	nop
 800df8e:	3728      	adds	r7, #40	; 0x28
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	40021000 	.word	0x40021000

0800df98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7ff fbb1 	bl	800d70e <USBH_LL_IncTimer>
}
 800dfac:	bf00      	nop
 800dfae:	3708      	adds	r7, #8
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7ff fbe9 	bl	800d79a <USBH_LL_Connect>
}
 800dfc8:	bf00      	nop
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7ff fbf2 	bl	800d7c8 <USBH_LL_Disconnect>
}
 800dfe4:	bf00      	nop
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	460b      	mov	r3, r1
 800dff6:	70fb      	strb	r3, [r7, #3]
 800dff8:	4613      	mov	r3, r2
 800dffa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dffc:	bf00      	nop
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e016:	4618      	mov	r0, r3
 800e018:	f7ff fba3 	bl	800d762 <USBH_LL_PortEnabled>
}
 800e01c:	bf00      	nop
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e032:	4618      	mov	r0, r3
 800e034:	f7ff fba3 	bl	800d77e <USBH_LL_PortDisabled>
}
 800e038:	bf00      	nop
 800e03a:	3708      	adds	r7, #8
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d12a      	bne.n	800e0a8 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e052:	4a18      	ldr	r2, [pc, #96]	; (800e0b4 <USBH_LL_Init+0x74>)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	4a15      	ldr	r2, [pc, #84]	; (800e0b4 <USBH_LL_Init+0x74>)
 800e05e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e062:	4b14      	ldr	r3, [pc, #80]	; (800e0b4 <USBH_LL_Init+0x74>)
 800e064:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e068:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e06a:	4b12      	ldr	r3, [pc, #72]	; (800e0b4 <USBH_LL_Init+0x74>)
 800e06c:	2208      	movs	r2, #8
 800e06e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e070:	4b10      	ldr	r3, [pc, #64]	; (800e0b4 <USBH_LL_Init+0x74>)
 800e072:	2201      	movs	r2, #1
 800e074:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e076:	4b0f      	ldr	r3, [pc, #60]	; (800e0b4 <USBH_LL_Init+0x74>)
 800e078:	2200      	movs	r2, #0
 800e07a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e07c:	4b0d      	ldr	r3, [pc, #52]	; (800e0b4 <USBH_LL_Init+0x74>)
 800e07e:	2202      	movs	r2, #2
 800e080:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e082:	4b0c      	ldr	r3, [pc, #48]	; (800e0b4 <USBH_LL_Init+0x74>)
 800e084:	2200      	movs	r2, #0
 800e086:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e088:	480a      	ldr	r0, [pc, #40]	; (800e0b4 <USBH_LL_Init+0x74>)
 800e08a:	f7f7 f975 	bl	8005378 <HAL_HCD_Init>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d001      	beq.n	800e098 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e094:	f7f3 fdca 	bl	8001c2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e098:	4806      	ldr	r0, [pc, #24]	; (800e0b4 <USBH_LL_Init+0x74>)
 800e09a:	f7f7 fd67 	bl	8005b6c <HAL_HCD_GetCurrentFrame>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f7ff fb24 	bl	800d6f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	200069c8 	.word	0x200069c8

0800e0b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7f7 fce2 	bl	8005a98 <HAL_HCD_Start>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0d8:	7bfb      	ldrb	r3, [r7, #15]
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f000 f912 	bl	800e304 <USBH_Get_USB_Status>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e0ee:	b580      	push	{r7, lr}
 800e0f0:	b084      	sub	sp, #16
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e104:	4618      	mov	r0, r3
 800e106:	f7f7 fcea 	bl	8005ade <HAL_HCD_Stop>
 800e10a:	4603      	mov	r3, r0
 800e10c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e10e:	7bfb      	ldrb	r3, [r7, #15]
 800e110:	4618      	mov	r0, r3
 800e112:	f000 f8f7 	bl	800e304 <USBH_Get_USB_Status>
 800e116:	4603      	mov	r3, r0
 800e118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e11a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3710      	adds	r7, #16
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	460b      	mov	r3, r1
 800e12e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e136:	78fa      	ldrb	r2, [r7, #3]
 800e138:	4611      	mov	r1, r2
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7f7 fd01 	bl	8005b42 <HAL_HCD_HC_GetXferCount>
 800e140:	4603      	mov	r3, r0
}
 800e142:	4618      	mov	r0, r3
 800e144:	3708      	adds	r7, #8
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e14a:	b590      	push	{r4, r7, lr}
 800e14c:	b089      	sub	sp, #36	; 0x24
 800e14e:	af04      	add	r7, sp, #16
 800e150:	6078      	str	r0, [r7, #4]
 800e152:	4608      	mov	r0, r1
 800e154:	4611      	mov	r1, r2
 800e156:	461a      	mov	r2, r3
 800e158:	4603      	mov	r3, r0
 800e15a:	70fb      	strb	r3, [r7, #3]
 800e15c:	460b      	mov	r3, r1
 800e15e:	70bb      	strb	r3, [r7, #2]
 800e160:	4613      	mov	r3, r2
 800e162:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e164:	2300      	movs	r3, #0
 800e166:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e168:	2300      	movs	r3, #0
 800e16a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e172:	787c      	ldrb	r4, [r7, #1]
 800e174:	78ba      	ldrb	r2, [r7, #2]
 800e176:	78f9      	ldrb	r1, [r7, #3]
 800e178:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e17a:	9302      	str	r3, [sp, #8]
 800e17c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e180:	9301      	str	r3, [sp, #4]
 800e182:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	4623      	mov	r3, r4
 800e18a:	f7f7 f957 	bl	800543c <HAL_HCD_HC_Init>
 800e18e:	4603      	mov	r3, r0
 800e190:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e192:	7bfb      	ldrb	r3, [r7, #15]
 800e194:	4618      	mov	r0, r3
 800e196:	f000 f8b5 	bl	800e304 <USBH_Get_USB_Status>
 800e19a:	4603      	mov	r3, r0
 800e19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3714      	adds	r7, #20
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd90      	pop	{r4, r7, pc}

0800e1a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1c2:	78fa      	ldrb	r2, [r7, #3]
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7f7 f9d0 	bl	800556c <HAL_HCD_HC_Halt>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e1d0:	7bfb      	ldrb	r3, [r7, #15]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f000 f896 	bl	800e304 <USBH_Get_USB_Status>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e1e6:	b590      	push	{r4, r7, lr}
 800e1e8:	b089      	sub	sp, #36	; 0x24
 800e1ea:	af04      	add	r7, sp, #16
 800e1ec:	6078      	str	r0, [r7, #4]
 800e1ee:	4608      	mov	r0, r1
 800e1f0:	4611      	mov	r1, r2
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	70fb      	strb	r3, [r7, #3]
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	70bb      	strb	r3, [r7, #2]
 800e1fc:	4613      	mov	r3, r2
 800e1fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e200:	2300      	movs	r3, #0
 800e202:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e204:	2300      	movs	r3, #0
 800e206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e20e:	787c      	ldrb	r4, [r7, #1]
 800e210:	78ba      	ldrb	r2, [r7, #2]
 800e212:	78f9      	ldrb	r1, [r7, #3]
 800e214:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e218:	9303      	str	r3, [sp, #12]
 800e21a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e21c:	9302      	str	r3, [sp, #8]
 800e21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e220:	9301      	str	r3, [sp, #4]
 800e222:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e226:	9300      	str	r3, [sp, #0]
 800e228:	4623      	mov	r3, r4
 800e22a:	f7f7 f9c3 	bl	80055b4 <HAL_HCD_HC_SubmitRequest>
 800e22e:	4603      	mov	r3, r0
 800e230:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e232:	7bfb      	ldrb	r3, [r7, #15]
 800e234:	4618      	mov	r0, r3
 800e236:	f000 f865 	bl	800e304 <USBH_Get_USB_Status>
 800e23a:	4603      	mov	r3, r0
 800e23c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e23e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e240:	4618      	mov	r0, r3
 800e242:	3714      	adds	r7, #20
 800e244:	46bd      	mov	sp, r7
 800e246:	bd90      	pop	{r4, r7, pc}

0800e248 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	460b      	mov	r3, r1
 800e252:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e25a:	78fa      	ldrb	r2, [r7, #3]
 800e25c:	4611      	mov	r1, r2
 800e25e:	4618      	mov	r0, r3
 800e260:	f7f7 fc5a 	bl	8005b18 <HAL_HCD_HC_GetURBState>
 800e264:	4603      	mov	r3, r0
}
 800e266:	4618      	mov	r0, r3
 800e268:	3708      	adds	r7, #8
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e26e:	b580      	push	{r7, lr}
 800e270:	b082      	sub	sp, #8
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
 800e276:	460b      	mov	r3, r1
 800e278:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e280:	2b01      	cmp	r3, #1
 800e282:	d103      	bne.n	800e28c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e284:	78fb      	ldrb	r3, [r7, #3]
 800e286:	4618      	mov	r0, r3
 800e288:	f000 f868 	bl	800e35c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e28c:	20c8      	movs	r0, #200	; 0xc8
 800e28e:	f7f5 fc9b 	bl	8003bc8 <HAL_Delay>
  return USBH_OK;
 800e292:	2300      	movs	r3, #0
}
 800e294:	4618      	mov	r0, r3
 800e296:	3708      	adds	r7, #8
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b085      	sub	sp, #20
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	70fb      	strb	r3, [r7, #3]
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e2b4:	78fa      	ldrb	r2, [r7, #3]
 800e2b6:	68f9      	ldr	r1, [r7, #12]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	4413      	add	r3, r2
 800e2be:	00db      	lsls	r3, r3, #3
 800e2c0:	440b      	add	r3, r1
 800e2c2:	333b      	adds	r3, #59	; 0x3b
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d00a      	beq.n	800e2e0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e2ca:	78fa      	ldrb	r2, [r7, #3]
 800e2cc:	68f9      	ldr	r1, [r7, #12]
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	4413      	add	r3, r2
 800e2d4:	00db      	lsls	r3, r3, #3
 800e2d6:	440b      	add	r3, r1
 800e2d8:	3350      	adds	r3, #80	; 0x50
 800e2da:	78ba      	ldrb	r2, [r7, #2]
 800e2dc:	701a      	strb	r2, [r3, #0]
 800e2de:	e009      	b.n	800e2f4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e2e0:	78fa      	ldrb	r2, [r7, #3]
 800e2e2:	68f9      	ldr	r1, [r7, #12]
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	4413      	add	r3, r2
 800e2ea:	00db      	lsls	r3, r3, #3
 800e2ec:	440b      	add	r3, r1
 800e2ee:	3351      	adds	r3, #81	; 0x51
 800e2f0:	78ba      	ldrb	r2, [r7, #2]
 800e2f2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e2f4:	2300      	movs	r3, #0
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3714      	adds	r7, #20
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr
	...

0800e304 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e304:	b480      	push	{r7}
 800e306:	b085      	sub	sp, #20
 800e308:	af00      	add	r7, sp, #0
 800e30a:	4603      	mov	r3, r0
 800e30c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e30e:	2300      	movs	r3, #0
 800e310:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e312:	79fb      	ldrb	r3, [r7, #7]
 800e314:	2b03      	cmp	r3, #3
 800e316:	d817      	bhi.n	800e348 <USBH_Get_USB_Status+0x44>
 800e318:	a201      	add	r2, pc, #4	; (adr r2, 800e320 <USBH_Get_USB_Status+0x1c>)
 800e31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e31e:	bf00      	nop
 800e320:	0800e331 	.word	0x0800e331
 800e324:	0800e337 	.word	0x0800e337
 800e328:	0800e33d 	.word	0x0800e33d
 800e32c:	0800e343 	.word	0x0800e343
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e330:	2300      	movs	r3, #0
 800e332:	73fb      	strb	r3, [r7, #15]
    break;
 800e334:	e00b      	b.n	800e34e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e336:	2302      	movs	r3, #2
 800e338:	73fb      	strb	r3, [r7, #15]
    break;
 800e33a:	e008      	b.n	800e34e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e33c:	2301      	movs	r3, #1
 800e33e:	73fb      	strb	r3, [r7, #15]
    break;
 800e340:	e005      	b.n	800e34e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e342:	2302      	movs	r3, #2
 800e344:	73fb      	strb	r3, [r7, #15]
    break;
 800e346:	e002      	b.n	800e34e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e348:	2302      	movs	r3, #2
 800e34a:	73fb      	strb	r3, [r7, #15]
    break;
 800e34c:	bf00      	nop
  }
  return usb_status;
 800e34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3714      	adds	r7, #20
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr

0800e35c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	4603      	mov	r3, r0
 800e364:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e366:	79fb      	ldrb	r3, [r7, #7]
 800e368:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d102      	bne.n	800e376 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e370:	2301      	movs	r3, #1
 800e372:	73fb      	strb	r3, [r7, #15]
 800e374:	e001      	b.n	800e37a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e376:	2300      	movs	r3, #0
 800e378:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800e37a:	7bfb      	ldrb	r3, [r7, #15]
 800e37c:	461a      	mov	r2, r3
 800e37e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e382:	4803      	ldr	r0, [pc, #12]	; (800e390 <MX_DriverVbusFS+0x34>)
 800e384:	f7f6 ffc6 	bl	8005314 <HAL_GPIO_WritePin>
}
 800e388:	bf00      	nop
 800e38a:	3710      	adds	r7, #16
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	48000800 	.word	0x48000800

0800e394 <__errno>:
 800e394:	4b01      	ldr	r3, [pc, #4]	; (800e39c <__errno+0x8>)
 800e396:	6818      	ldr	r0, [r3, #0]
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	20000084 	.word	0x20000084

0800e3a0 <__libc_init_array>:
 800e3a0:	b570      	push	{r4, r5, r6, lr}
 800e3a2:	4e0d      	ldr	r6, [pc, #52]	; (800e3d8 <__libc_init_array+0x38>)
 800e3a4:	4c0d      	ldr	r4, [pc, #52]	; (800e3dc <__libc_init_array+0x3c>)
 800e3a6:	1ba4      	subs	r4, r4, r6
 800e3a8:	10a4      	asrs	r4, r4, #2
 800e3aa:	2500      	movs	r5, #0
 800e3ac:	42a5      	cmp	r5, r4
 800e3ae:	d109      	bne.n	800e3c4 <__libc_init_array+0x24>
 800e3b0:	4e0b      	ldr	r6, [pc, #44]	; (800e3e0 <__libc_init_array+0x40>)
 800e3b2:	4c0c      	ldr	r4, [pc, #48]	; (800e3e4 <__libc_init_array+0x44>)
 800e3b4:	f000 fc36 	bl	800ec24 <_init>
 800e3b8:	1ba4      	subs	r4, r4, r6
 800e3ba:	10a4      	asrs	r4, r4, #2
 800e3bc:	2500      	movs	r5, #0
 800e3be:	42a5      	cmp	r5, r4
 800e3c0:	d105      	bne.n	800e3ce <__libc_init_array+0x2e>
 800e3c2:	bd70      	pop	{r4, r5, r6, pc}
 800e3c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e3c8:	4798      	blx	r3
 800e3ca:	3501      	adds	r5, #1
 800e3cc:	e7ee      	b.n	800e3ac <__libc_init_array+0xc>
 800e3ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e3d2:	4798      	blx	r3
 800e3d4:	3501      	adds	r5, #1
 800e3d6:	e7f2      	b.n	800e3be <__libc_init_array+0x1e>
 800e3d8:	0800eda4 	.word	0x0800eda4
 800e3dc:	0800eda4 	.word	0x0800eda4
 800e3e0:	0800eda4 	.word	0x0800eda4
 800e3e4:	0800eda8 	.word	0x0800eda8

0800e3e8 <malloc>:
 800e3e8:	4b02      	ldr	r3, [pc, #8]	; (800e3f4 <malloc+0xc>)
 800e3ea:	4601      	mov	r1, r0
 800e3ec:	6818      	ldr	r0, [r3, #0]
 800e3ee:	f000 b861 	b.w	800e4b4 <_malloc_r>
 800e3f2:	bf00      	nop
 800e3f4:	20000084 	.word	0x20000084

0800e3f8 <free>:
 800e3f8:	4b02      	ldr	r3, [pc, #8]	; (800e404 <free+0xc>)
 800e3fa:	4601      	mov	r1, r0
 800e3fc:	6818      	ldr	r0, [r3, #0]
 800e3fe:	f000 b80b 	b.w	800e418 <_free_r>
 800e402:	bf00      	nop
 800e404:	20000084 	.word	0x20000084

0800e408 <memset>:
 800e408:	4402      	add	r2, r0
 800e40a:	4603      	mov	r3, r0
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d100      	bne.n	800e412 <memset+0xa>
 800e410:	4770      	bx	lr
 800e412:	f803 1b01 	strb.w	r1, [r3], #1
 800e416:	e7f9      	b.n	800e40c <memset+0x4>

0800e418 <_free_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	4605      	mov	r5, r0
 800e41c:	2900      	cmp	r1, #0
 800e41e:	d045      	beq.n	800e4ac <_free_r+0x94>
 800e420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e424:	1f0c      	subs	r4, r1, #4
 800e426:	2b00      	cmp	r3, #0
 800e428:	bfb8      	it	lt
 800e42a:	18e4      	addlt	r4, r4, r3
 800e42c:	f000 f8cc 	bl	800e5c8 <__malloc_lock>
 800e430:	4a1f      	ldr	r2, [pc, #124]	; (800e4b0 <_free_r+0x98>)
 800e432:	6813      	ldr	r3, [r2, #0]
 800e434:	4610      	mov	r0, r2
 800e436:	b933      	cbnz	r3, 800e446 <_free_r+0x2e>
 800e438:	6063      	str	r3, [r4, #4]
 800e43a:	6014      	str	r4, [r2, #0]
 800e43c:	4628      	mov	r0, r5
 800e43e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e442:	f000 b8c2 	b.w	800e5ca <__malloc_unlock>
 800e446:	42a3      	cmp	r3, r4
 800e448:	d90c      	bls.n	800e464 <_free_r+0x4c>
 800e44a:	6821      	ldr	r1, [r4, #0]
 800e44c:	1862      	adds	r2, r4, r1
 800e44e:	4293      	cmp	r3, r2
 800e450:	bf04      	itt	eq
 800e452:	681a      	ldreq	r2, [r3, #0]
 800e454:	685b      	ldreq	r3, [r3, #4]
 800e456:	6063      	str	r3, [r4, #4]
 800e458:	bf04      	itt	eq
 800e45a:	1852      	addeq	r2, r2, r1
 800e45c:	6022      	streq	r2, [r4, #0]
 800e45e:	6004      	str	r4, [r0, #0]
 800e460:	e7ec      	b.n	800e43c <_free_r+0x24>
 800e462:	4613      	mov	r3, r2
 800e464:	685a      	ldr	r2, [r3, #4]
 800e466:	b10a      	cbz	r2, 800e46c <_free_r+0x54>
 800e468:	42a2      	cmp	r2, r4
 800e46a:	d9fa      	bls.n	800e462 <_free_r+0x4a>
 800e46c:	6819      	ldr	r1, [r3, #0]
 800e46e:	1858      	adds	r0, r3, r1
 800e470:	42a0      	cmp	r0, r4
 800e472:	d10b      	bne.n	800e48c <_free_r+0x74>
 800e474:	6820      	ldr	r0, [r4, #0]
 800e476:	4401      	add	r1, r0
 800e478:	1858      	adds	r0, r3, r1
 800e47a:	4282      	cmp	r2, r0
 800e47c:	6019      	str	r1, [r3, #0]
 800e47e:	d1dd      	bne.n	800e43c <_free_r+0x24>
 800e480:	6810      	ldr	r0, [r2, #0]
 800e482:	6852      	ldr	r2, [r2, #4]
 800e484:	605a      	str	r2, [r3, #4]
 800e486:	4401      	add	r1, r0
 800e488:	6019      	str	r1, [r3, #0]
 800e48a:	e7d7      	b.n	800e43c <_free_r+0x24>
 800e48c:	d902      	bls.n	800e494 <_free_r+0x7c>
 800e48e:	230c      	movs	r3, #12
 800e490:	602b      	str	r3, [r5, #0]
 800e492:	e7d3      	b.n	800e43c <_free_r+0x24>
 800e494:	6820      	ldr	r0, [r4, #0]
 800e496:	1821      	adds	r1, r4, r0
 800e498:	428a      	cmp	r2, r1
 800e49a:	bf04      	itt	eq
 800e49c:	6811      	ldreq	r1, [r2, #0]
 800e49e:	6852      	ldreq	r2, [r2, #4]
 800e4a0:	6062      	str	r2, [r4, #4]
 800e4a2:	bf04      	itt	eq
 800e4a4:	1809      	addeq	r1, r1, r0
 800e4a6:	6021      	streq	r1, [r4, #0]
 800e4a8:	605c      	str	r4, [r3, #4]
 800e4aa:	e7c7      	b.n	800e43c <_free_r+0x24>
 800e4ac:	bd38      	pop	{r3, r4, r5, pc}
 800e4ae:	bf00      	nop
 800e4b0:	200001b4 	.word	0x200001b4

0800e4b4 <_malloc_r>:
 800e4b4:	b570      	push	{r4, r5, r6, lr}
 800e4b6:	1ccd      	adds	r5, r1, #3
 800e4b8:	f025 0503 	bic.w	r5, r5, #3
 800e4bc:	3508      	adds	r5, #8
 800e4be:	2d0c      	cmp	r5, #12
 800e4c0:	bf38      	it	cc
 800e4c2:	250c      	movcc	r5, #12
 800e4c4:	2d00      	cmp	r5, #0
 800e4c6:	4606      	mov	r6, r0
 800e4c8:	db01      	blt.n	800e4ce <_malloc_r+0x1a>
 800e4ca:	42a9      	cmp	r1, r5
 800e4cc:	d903      	bls.n	800e4d6 <_malloc_r+0x22>
 800e4ce:	230c      	movs	r3, #12
 800e4d0:	6033      	str	r3, [r6, #0]
 800e4d2:	2000      	movs	r0, #0
 800e4d4:	bd70      	pop	{r4, r5, r6, pc}
 800e4d6:	f000 f877 	bl	800e5c8 <__malloc_lock>
 800e4da:	4a21      	ldr	r2, [pc, #132]	; (800e560 <_malloc_r+0xac>)
 800e4dc:	6814      	ldr	r4, [r2, #0]
 800e4de:	4621      	mov	r1, r4
 800e4e0:	b991      	cbnz	r1, 800e508 <_malloc_r+0x54>
 800e4e2:	4c20      	ldr	r4, [pc, #128]	; (800e564 <_malloc_r+0xb0>)
 800e4e4:	6823      	ldr	r3, [r4, #0]
 800e4e6:	b91b      	cbnz	r3, 800e4f0 <_malloc_r+0x3c>
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	f000 f83d 	bl	800e568 <_sbrk_r>
 800e4ee:	6020      	str	r0, [r4, #0]
 800e4f0:	4629      	mov	r1, r5
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	f000 f838 	bl	800e568 <_sbrk_r>
 800e4f8:	1c43      	adds	r3, r0, #1
 800e4fa:	d124      	bne.n	800e546 <_malloc_r+0x92>
 800e4fc:	230c      	movs	r3, #12
 800e4fe:	6033      	str	r3, [r6, #0]
 800e500:	4630      	mov	r0, r6
 800e502:	f000 f862 	bl	800e5ca <__malloc_unlock>
 800e506:	e7e4      	b.n	800e4d2 <_malloc_r+0x1e>
 800e508:	680b      	ldr	r3, [r1, #0]
 800e50a:	1b5b      	subs	r3, r3, r5
 800e50c:	d418      	bmi.n	800e540 <_malloc_r+0x8c>
 800e50e:	2b0b      	cmp	r3, #11
 800e510:	d90f      	bls.n	800e532 <_malloc_r+0x7e>
 800e512:	600b      	str	r3, [r1, #0]
 800e514:	50cd      	str	r5, [r1, r3]
 800e516:	18cc      	adds	r4, r1, r3
 800e518:	4630      	mov	r0, r6
 800e51a:	f000 f856 	bl	800e5ca <__malloc_unlock>
 800e51e:	f104 000b 	add.w	r0, r4, #11
 800e522:	1d23      	adds	r3, r4, #4
 800e524:	f020 0007 	bic.w	r0, r0, #7
 800e528:	1ac3      	subs	r3, r0, r3
 800e52a:	d0d3      	beq.n	800e4d4 <_malloc_r+0x20>
 800e52c:	425a      	negs	r2, r3
 800e52e:	50e2      	str	r2, [r4, r3]
 800e530:	e7d0      	b.n	800e4d4 <_malloc_r+0x20>
 800e532:	428c      	cmp	r4, r1
 800e534:	684b      	ldr	r3, [r1, #4]
 800e536:	bf16      	itet	ne
 800e538:	6063      	strne	r3, [r4, #4]
 800e53a:	6013      	streq	r3, [r2, #0]
 800e53c:	460c      	movne	r4, r1
 800e53e:	e7eb      	b.n	800e518 <_malloc_r+0x64>
 800e540:	460c      	mov	r4, r1
 800e542:	6849      	ldr	r1, [r1, #4]
 800e544:	e7cc      	b.n	800e4e0 <_malloc_r+0x2c>
 800e546:	1cc4      	adds	r4, r0, #3
 800e548:	f024 0403 	bic.w	r4, r4, #3
 800e54c:	42a0      	cmp	r0, r4
 800e54e:	d005      	beq.n	800e55c <_malloc_r+0xa8>
 800e550:	1a21      	subs	r1, r4, r0
 800e552:	4630      	mov	r0, r6
 800e554:	f000 f808 	bl	800e568 <_sbrk_r>
 800e558:	3001      	adds	r0, #1
 800e55a:	d0cf      	beq.n	800e4fc <_malloc_r+0x48>
 800e55c:	6025      	str	r5, [r4, #0]
 800e55e:	e7db      	b.n	800e518 <_malloc_r+0x64>
 800e560:	200001b4 	.word	0x200001b4
 800e564:	200001b8 	.word	0x200001b8

0800e568 <_sbrk_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	4c06      	ldr	r4, [pc, #24]	; (800e584 <_sbrk_r+0x1c>)
 800e56c:	2300      	movs	r3, #0
 800e56e:	4605      	mov	r5, r0
 800e570:	4608      	mov	r0, r1
 800e572:	6023      	str	r3, [r4, #0]
 800e574:	f7f5 f9a2 	bl	80038bc <_sbrk>
 800e578:	1c43      	adds	r3, r0, #1
 800e57a:	d102      	bne.n	800e582 <_sbrk_r+0x1a>
 800e57c:	6823      	ldr	r3, [r4, #0]
 800e57e:	b103      	cbz	r3, 800e582 <_sbrk_r+0x1a>
 800e580:	602b      	str	r3, [r5, #0]
 800e582:	bd38      	pop	{r3, r4, r5, pc}
 800e584:	20006c8c 	.word	0x20006c8c

0800e588 <siprintf>:
 800e588:	b40e      	push	{r1, r2, r3}
 800e58a:	b500      	push	{lr}
 800e58c:	b09c      	sub	sp, #112	; 0x70
 800e58e:	ab1d      	add	r3, sp, #116	; 0x74
 800e590:	9002      	str	r0, [sp, #8]
 800e592:	9006      	str	r0, [sp, #24]
 800e594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e598:	4809      	ldr	r0, [pc, #36]	; (800e5c0 <siprintf+0x38>)
 800e59a:	9107      	str	r1, [sp, #28]
 800e59c:	9104      	str	r1, [sp, #16]
 800e59e:	4909      	ldr	r1, [pc, #36]	; (800e5c4 <siprintf+0x3c>)
 800e5a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5a4:	9105      	str	r1, [sp, #20]
 800e5a6:	6800      	ldr	r0, [r0, #0]
 800e5a8:	9301      	str	r3, [sp, #4]
 800e5aa:	a902      	add	r1, sp, #8
 800e5ac:	f000 f868 	bl	800e680 <_svfiprintf_r>
 800e5b0:	9b02      	ldr	r3, [sp, #8]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	701a      	strb	r2, [r3, #0]
 800e5b6:	b01c      	add	sp, #112	; 0x70
 800e5b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5bc:	b003      	add	sp, #12
 800e5be:	4770      	bx	lr
 800e5c0:	20000084 	.word	0x20000084
 800e5c4:	ffff0208 	.word	0xffff0208

0800e5c8 <__malloc_lock>:
 800e5c8:	4770      	bx	lr

0800e5ca <__malloc_unlock>:
 800e5ca:	4770      	bx	lr

0800e5cc <__ssputs_r>:
 800e5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5d0:	688e      	ldr	r6, [r1, #8]
 800e5d2:	429e      	cmp	r6, r3
 800e5d4:	4682      	mov	sl, r0
 800e5d6:	460c      	mov	r4, r1
 800e5d8:	4690      	mov	r8, r2
 800e5da:	4699      	mov	r9, r3
 800e5dc:	d837      	bhi.n	800e64e <__ssputs_r+0x82>
 800e5de:	898a      	ldrh	r2, [r1, #12]
 800e5e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e5e4:	d031      	beq.n	800e64a <__ssputs_r+0x7e>
 800e5e6:	6825      	ldr	r5, [r4, #0]
 800e5e8:	6909      	ldr	r1, [r1, #16]
 800e5ea:	1a6f      	subs	r7, r5, r1
 800e5ec:	6965      	ldr	r5, [r4, #20]
 800e5ee:	2302      	movs	r3, #2
 800e5f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e5f4:	fb95 f5f3 	sdiv	r5, r5, r3
 800e5f8:	f109 0301 	add.w	r3, r9, #1
 800e5fc:	443b      	add	r3, r7
 800e5fe:	429d      	cmp	r5, r3
 800e600:	bf38      	it	cc
 800e602:	461d      	movcc	r5, r3
 800e604:	0553      	lsls	r3, r2, #21
 800e606:	d530      	bpl.n	800e66a <__ssputs_r+0x9e>
 800e608:	4629      	mov	r1, r5
 800e60a:	f7ff ff53 	bl	800e4b4 <_malloc_r>
 800e60e:	4606      	mov	r6, r0
 800e610:	b950      	cbnz	r0, 800e628 <__ssputs_r+0x5c>
 800e612:	230c      	movs	r3, #12
 800e614:	f8ca 3000 	str.w	r3, [sl]
 800e618:	89a3      	ldrh	r3, [r4, #12]
 800e61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e61e:	81a3      	strh	r3, [r4, #12]
 800e620:	f04f 30ff 	mov.w	r0, #4294967295
 800e624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e628:	463a      	mov	r2, r7
 800e62a:	6921      	ldr	r1, [r4, #16]
 800e62c:	f000 faa8 	bl	800eb80 <memcpy>
 800e630:	89a3      	ldrh	r3, [r4, #12]
 800e632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e63a:	81a3      	strh	r3, [r4, #12]
 800e63c:	6126      	str	r6, [r4, #16]
 800e63e:	6165      	str	r5, [r4, #20]
 800e640:	443e      	add	r6, r7
 800e642:	1bed      	subs	r5, r5, r7
 800e644:	6026      	str	r6, [r4, #0]
 800e646:	60a5      	str	r5, [r4, #8]
 800e648:	464e      	mov	r6, r9
 800e64a:	454e      	cmp	r6, r9
 800e64c:	d900      	bls.n	800e650 <__ssputs_r+0x84>
 800e64e:	464e      	mov	r6, r9
 800e650:	4632      	mov	r2, r6
 800e652:	4641      	mov	r1, r8
 800e654:	6820      	ldr	r0, [r4, #0]
 800e656:	f000 fa9e 	bl	800eb96 <memmove>
 800e65a:	68a3      	ldr	r3, [r4, #8]
 800e65c:	1b9b      	subs	r3, r3, r6
 800e65e:	60a3      	str	r3, [r4, #8]
 800e660:	6823      	ldr	r3, [r4, #0]
 800e662:	441e      	add	r6, r3
 800e664:	6026      	str	r6, [r4, #0]
 800e666:	2000      	movs	r0, #0
 800e668:	e7dc      	b.n	800e624 <__ssputs_r+0x58>
 800e66a:	462a      	mov	r2, r5
 800e66c:	f000 faac 	bl	800ebc8 <_realloc_r>
 800e670:	4606      	mov	r6, r0
 800e672:	2800      	cmp	r0, #0
 800e674:	d1e2      	bne.n	800e63c <__ssputs_r+0x70>
 800e676:	6921      	ldr	r1, [r4, #16]
 800e678:	4650      	mov	r0, sl
 800e67a:	f7ff fecd 	bl	800e418 <_free_r>
 800e67e:	e7c8      	b.n	800e612 <__ssputs_r+0x46>

0800e680 <_svfiprintf_r>:
 800e680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e684:	461d      	mov	r5, r3
 800e686:	898b      	ldrh	r3, [r1, #12]
 800e688:	061f      	lsls	r7, r3, #24
 800e68a:	b09d      	sub	sp, #116	; 0x74
 800e68c:	4680      	mov	r8, r0
 800e68e:	460c      	mov	r4, r1
 800e690:	4616      	mov	r6, r2
 800e692:	d50f      	bpl.n	800e6b4 <_svfiprintf_r+0x34>
 800e694:	690b      	ldr	r3, [r1, #16]
 800e696:	b96b      	cbnz	r3, 800e6b4 <_svfiprintf_r+0x34>
 800e698:	2140      	movs	r1, #64	; 0x40
 800e69a:	f7ff ff0b 	bl	800e4b4 <_malloc_r>
 800e69e:	6020      	str	r0, [r4, #0]
 800e6a0:	6120      	str	r0, [r4, #16]
 800e6a2:	b928      	cbnz	r0, 800e6b0 <_svfiprintf_r+0x30>
 800e6a4:	230c      	movs	r3, #12
 800e6a6:	f8c8 3000 	str.w	r3, [r8]
 800e6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ae:	e0c8      	b.n	800e842 <_svfiprintf_r+0x1c2>
 800e6b0:	2340      	movs	r3, #64	; 0x40
 800e6b2:	6163      	str	r3, [r4, #20]
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e6b8:	2320      	movs	r3, #32
 800e6ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6be:	2330      	movs	r3, #48	; 0x30
 800e6c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6c4:	9503      	str	r5, [sp, #12]
 800e6c6:	f04f 0b01 	mov.w	fp, #1
 800e6ca:	4637      	mov	r7, r6
 800e6cc:	463d      	mov	r5, r7
 800e6ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e6d2:	b10b      	cbz	r3, 800e6d8 <_svfiprintf_r+0x58>
 800e6d4:	2b25      	cmp	r3, #37	; 0x25
 800e6d6:	d13e      	bne.n	800e756 <_svfiprintf_r+0xd6>
 800e6d8:	ebb7 0a06 	subs.w	sl, r7, r6
 800e6dc:	d00b      	beq.n	800e6f6 <_svfiprintf_r+0x76>
 800e6de:	4653      	mov	r3, sl
 800e6e0:	4632      	mov	r2, r6
 800e6e2:	4621      	mov	r1, r4
 800e6e4:	4640      	mov	r0, r8
 800e6e6:	f7ff ff71 	bl	800e5cc <__ssputs_r>
 800e6ea:	3001      	adds	r0, #1
 800e6ec:	f000 80a4 	beq.w	800e838 <_svfiprintf_r+0x1b8>
 800e6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6f2:	4453      	add	r3, sl
 800e6f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e6f6:	783b      	ldrb	r3, [r7, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	f000 809d 	beq.w	800e838 <_svfiprintf_r+0x1b8>
 800e6fe:	2300      	movs	r3, #0
 800e700:	f04f 32ff 	mov.w	r2, #4294967295
 800e704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e708:	9304      	str	r3, [sp, #16]
 800e70a:	9307      	str	r3, [sp, #28]
 800e70c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e710:	931a      	str	r3, [sp, #104]	; 0x68
 800e712:	462f      	mov	r7, r5
 800e714:	2205      	movs	r2, #5
 800e716:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e71a:	4850      	ldr	r0, [pc, #320]	; (800e85c <_svfiprintf_r+0x1dc>)
 800e71c:	f7f1 fd58 	bl	80001d0 <memchr>
 800e720:	9b04      	ldr	r3, [sp, #16]
 800e722:	b9d0      	cbnz	r0, 800e75a <_svfiprintf_r+0xda>
 800e724:	06d9      	lsls	r1, r3, #27
 800e726:	bf44      	itt	mi
 800e728:	2220      	movmi	r2, #32
 800e72a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e72e:	071a      	lsls	r2, r3, #28
 800e730:	bf44      	itt	mi
 800e732:	222b      	movmi	r2, #43	; 0x2b
 800e734:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e738:	782a      	ldrb	r2, [r5, #0]
 800e73a:	2a2a      	cmp	r2, #42	; 0x2a
 800e73c:	d015      	beq.n	800e76a <_svfiprintf_r+0xea>
 800e73e:	9a07      	ldr	r2, [sp, #28]
 800e740:	462f      	mov	r7, r5
 800e742:	2000      	movs	r0, #0
 800e744:	250a      	movs	r5, #10
 800e746:	4639      	mov	r1, r7
 800e748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e74c:	3b30      	subs	r3, #48	; 0x30
 800e74e:	2b09      	cmp	r3, #9
 800e750:	d94d      	bls.n	800e7ee <_svfiprintf_r+0x16e>
 800e752:	b1b8      	cbz	r0, 800e784 <_svfiprintf_r+0x104>
 800e754:	e00f      	b.n	800e776 <_svfiprintf_r+0xf6>
 800e756:	462f      	mov	r7, r5
 800e758:	e7b8      	b.n	800e6cc <_svfiprintf_r+0x4c>
 800e75a:	4a40      	ldr	r2, [pc, #256]	; (800e85c <_svfiprintf_r+0x1dc>)
 800e75c:	1a80      	subs	r0, r0, r2
 800e75e:	fa0b f000 	lsl.w	r0, fp, r0
 800e762:	4318      	orrs	r0, r3
 800e764:	9004      	str	r0, [sp, #16]
 800e766:	463d      	mov	r5, r7
 800e768:	e7d3      	b.n	800e712 <_svfiprintf_r+0x92>
 800e76a:	9a03      	ldr	r2, [sp, #12]
 800e76c:	1d11      	adds	r1, r2, #4
 800e76e:	6812      	ldr	r2, [r2, #0]
 800e770:	9103      	str	r1, [sp, #12]
 800e772:	2a00      	cmp	r2, #0
 800e774:	db01      	blt.n	800e77a <_svfiprintf_r+0xfa>
 800e776:	9207      	str	r2, [sp, #28]
 800e778:	e004      	b.n	800e784 <_svfiprintf_r+0x104>
 800e77a:	4252      	negs	r2, r2
 800e77c:	f043 0302 	orr.w	r3, r3, #2
 800e780:	9207      	str	r2, [sp, #28]
 800e782:	9304      	str	r3, [sp, #16]
 800e784:	783b      	ldrb	r3, [r7, #0]
 800e786:	2b2e      	cmp	r3, #46	; 0x2e
 800e788:	d10c      	bne.n	800e7a4 <_svfiprintf_r+0x124>
 800e78a:	787b      	ldrb	r3, [r7, #1]
 800e78c:	2b2a      	cmp	r3, #42	; 0x2a
 800e78e:	d133      	bne.n	800e7f8 <_svfiprintf_r+0x178>
 800e790:	9b03      	ldr	r3, [sp, #12]
 800e792:	1d1a      	adds	r2, r3, #4
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	9203      	str	r2, [sp, #12]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	bfb8      	it	lt
 800e79c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e7a0:	3702      	adds	r7, #2
 800e7a2:	9305      	str	r3, [sp, #20]
 800e7a4:	4d2e      	ldr	r5, [pc, #184]	; (800e860 <_svfiprintf_r+0x1e0>)
 800e7a6:	7839      	ldrb	r1, [r7, #0]
 800e7a8:	2203      	movs	r2, #3
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	f7f1 fd10 	bl	80001d0 <memchr>
 800e7b0:	b138      	cbz	r0, 800e7c2 <_svfiprintf_r+0x142>
 800e7b2:	2340      	movs	r3, #64	; 0x40
 800e7b4:	1b40      	subs	r0, r0, r5
 800e7b6:	fa03 f000 	lsl.w	r0, r3, r0
 800e7ba:	9b04      	ldr	r3, [sp, #16]
 800e7bc:	4303      	orrs	r3, r0
 800e7be:	3701      	adds	r7, #1
 800e7c0:	9304      	str	r3, [sp, #16]
 800e7c2:	7839      	ldrb	r1, [r7, #0]
 800e7c4:	4827      	ldr	r0, [pc, #156]	; (800e864 <_svfiprintf_r+0x1e4>)
 800e7c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7ca:	2206      	movs	r2, #6
 800e7cc:	1c7e      	adds	r6, r7, #1
 800e7ce:	f7f1 fcff 	bl	80001d0 <memchr>
 800e7d2:	2800      	cmp	r0, #0
 800e7d4:	d038      	beq.n	800e848 <_svfiprintf_r+0x1c8>
 800e7d6:	4b24      	ldr	r3, [pc, #144]	; (800e868 <_svfiprintf_r+0x1e8>)
 800e7d8:	bb13      	cbnz	r3, 800e820 <_svfiprintf_r+0x1a0>
 800e7da:	9b03      	ldr	r3, [sp, #12]
 800e7dc:	3307      	adds	r3, #7
 800e7de:	f023 0307 	bic.w	r3, r3, #7
 800e7e2:	3308      	adds	r3, #8
 800e7e4:	9303      	str	r3, [sp, #12]
 800e7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7e8:	444b      	add	r3, r9
 800e7ea:	9309      	str	r3, [sp, #36]	; 0x24
 800e7ec:	e76d      	b.n	800e6ca <_svfiprintf_r+0x4a>
 800e7ee:	fb05 3202 	mla	r2, r5, r2, r3
 800e7f2:	2001      	movs	r0, #1
 800e7f4:	460f      	mov	r7, r1
 800e7f6:	e7a6      	b.n	800e746 <_svfiprintf_r+0xc6>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	3701      	adds	r7, #1
 800e7fc:	9305      	str	r3, [sp, #20]
 800e7fe:	4619      	mov	r1, r3
 800e800:	250a      	movs	r5, #10
 800e802:	4638      	mov	r0, r7
 800e804:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e808:	3a30      	subs	r2, #48	; 0x30
 800e80a:	2a09      	cmp	r2, #9
 800e80c:	d903      	bls.n	800e816 <_svfiprintf_r+0x196>
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d0c8      	beq.n	800e7a4 <_svfiprintf_r+0x124>
 800e812:	9105      	str	r1, [sp, #20]
 800e814:	e7c6      	b.n	800e7a4 <_svfiprintf_r+0x124>
 800e816:	fb05 2101 	mla	r1, r5, r1, r2
 800e81a:	2301      	movs	r3, #1
 800e81c:	4607      	mov	r7, r0
 800e81e:	e7f0      	b.n	800e802 <_svfiprintf_r+0x182>
 800e820:	ab03      	add	r3, sp, #12
 800e822:	9300      	str	r3, [sp, #0]
 800e824:	4622      	mov	r2, r4
 800e826:	4b11      	ldr	r3, [pc, #68]	; (800e86c <_svfiprintf_r+0x1ec>)
 800e828:	a904      	add	r1, sp, #16
 800e82a:	4640      	mov	r0, r8
 800e82c:	f3af 8000 	nop.w
 800e830:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e834:	4681      	mov	r9, r0
 800e836:	d1d6      	bne.n	800e7e6 <_svfiprintf_r+0x166>
 800e838:	89a3      	ldrh	r3, [r4, #12]
 800e83a:	065b      	lsls	r3, r3, #25
 800e83c:	f53f af35 	bmi.w	800e6aa <_svfiprintf_r+0x2a>
 800e840:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e842:	b01d      	add	sp, #116	; 0x74
 800e844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e848:	ab03      	add	r3, sp, #12
 800e84a:	9300      	str	r3, [sp, #0]
 800e84c:	4622      	mov	r2, r4
 800e84e:	4b07      	ldr	r3, [pc, #28]	; (800e86c <_svfiprintf_r+0x1ec>)
 800e850:	a904      	add	r1, sp, #16
 800e852:	4640      	mov	r0, r8
 800e854:	f000 f882 	bl	800e95c <_printf_i>
 800e858:	e7ea      	b.n	800e830 <_svfiprintf_r+0x1b0>
 800e85a:	bf00      	nop
 800e85c:	0800ed68 	.word	0x0800ed68
 800e860:	0800ed6e 	.word	0x0800ed6e
 800e864:	0800ed72 	.word	0x0800ed72
 800e868:	00000000 	.word	0x00000000
 800e86c:	0800e5cd 	.word	0x0800e5cd

0800e870 <_printf_common>:
 800e870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e874:	4691      	mov	r9, r2
 800e876:	461f      	mov	r7, r3
 800e878:	688a      	ldr	r2, [r1, #8]
 800e87a:	690b      	ldr	r3, [r1, #16]
 800e87c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e880:	4293      	cmp	r3, r2
 800e882:	bfb8      	it	lt
 800e884:	4613      	movlt	r3, r2
 800e886:	f8c9 3000 	str.w	r3, [r9]
 800e88a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e88e:	4606      	mov	r6, r0
 800e890:	460c      	mov	r4, r1
 800e892:	b112      	cbz	r2, 800e89a <_printf_common+0x2a>
 800e894:	3301      	adds	r3, #1
 800e896:	f8c9 3000 	str.w	r3, [r9]
 800e89a:	6823      	ldr	r3, [r4, #0]
 800e89c:	0699      	lsls	r1, r3, #26
 800e89e:	bf42      	ittt	mi
 800e8a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e8a4:	3302      	addmi	r3, #2
 800e8a6:	f8c9 3000 	strmi.w	r3, [r9]
 800e8aa:	6825      	ldr	r5, [r4, #0]
 800e8ac:	f015 0506 	ands.w	r5, r5, #6
 800e8b0:	d107      	bne.n	800e8c2 <_printf_common+0x52>
 800e8b2:	f104 0a19 	add.w	sl, r4, #25
 800e8b6:	68e3      	ldr	r3, [r4, #12]
 800e8b8:	f8d9 2000 	ldr.w	r2, [r9]
 800e8bc:	1a9b      	subs	r3, r3, r2
 800e8be:	42ab      	cmp	r3, r5
 800e8c0:	dc28      	bgt.n	800e914 <_printf_common+0xa4>
 800e8c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e8c6:	6822      	ldr	r2, [r4, #0]
 800e8c8:	3300      	adds	r3, #0
 800e8ca:	bf18      	it	ne
 800e8cc:	2301      	movne	r3, #1
 800e8ce:	0692      	lsls	r2, r2, #26
 800e8d0:	d42d      	bmi.n	800e92e <_printf_common+0xbe>
 800e8d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e8d6:	4639      	mov	r1, r7
 800e8d8:	4630      	mov	r0, r6
 800e8da:	47c0      	blx	r8
 800e8dc:	3001      	adds	r0, #1
 800e8de:	d020      	beq.n	800e922 <_printf_common+0xb2>
 800e8e0:	6823      	ldr	r3, [r4, #0]
 800e8e2:	68e5      	ldr	r5, [r4, #12]
 800e8e4:	f8d9 2000 	ldr.w	r2, [r9]
 800e8e8:	f003 0306 	and.w	r3, r3, #6
 800e8ec:	2b04      	cmp	r3, #4
 800e8ee:	bf08      	it	eq
 800e8f0:	1aad      	subeq	r5, r5, r2
 800e8f2:	68a3      	ldr	r3, [r4, #8]
 800e8f4:	6922      	ldr	r2, [r4, #16]
 800e8f6:	bf0c      	ite	eq
 800e8f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8fc:	2500      	movne	r5, #0
 800e8fe:	4293      	cmp	r3, r2
 800e900:	bfc4      	itt	gt
 800e902:	1a9b      	subgt	r3, r3, r2
 800e904:	18ed      	addgt	r5, r5, r3
 800e906:	f04f 0900 	mov.w	r9, #0
 800e90a:	341a      	adds	r4, #26
 800e90c:	454d      	cmp	r5, r9
 800e90e:	d11a      	bne.n	800e946 <_printf_common+0xd6>
 800e910:	2000      	movs	r0, #0
 800e912:	e008      	b.n	800e926 <_printf_common+0xb6>
 800e914:	2301      	movs	r3, #1
 800e916:	4652      	mov	r2, sl
 800e918:	4639      	mov	r1, r7
 800e91a:	4630      	mov	r0, r6
 800e91c:	47c0      	blx	r8
 800e91e:	3001      	adds	r0, #1
 800e920:	d103      	bne.n	800e92a <_printf_common+0xba>
 800e922:	f04f 30ff 	mov.w	r0, #4294967295
 800e926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e92a:	3501      	adds	r5, #1
 800e92c:	e7c3      	b.n	800e8b6 <_printf_common+0x46>
 800e92e:	18e1      	adds	r1, r4, r3
 800e930:	1c5a      	adds	r2, r3, #1
 800e932:	2030      	movs	r0, #48	; 0x30
 800e934:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e938:	4422      	add	r2, r4
 800e93a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e93e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e942:	3302      	adds	r3, #2
 800e944:	e7c5      	b.n	800e8d2 <_printf_common+0x62>
 800e946:	2301      	movs	r3, #1
 800e948:	4622      	mov	r2, r4
 800e94a:	4639      	mov	r1, r7
 800e94c:	4630      	mov	r0, r6
 800e94e:	47c0      	blx	r8
 800e950:	3001      	adds	r0, #1
 800e952:	d0e6      	beq.n	800e922 <_printf_common+0xb2>
 800e954:	f109 0901 	add.w	r9, r9, #1
 800e958:	e7d8      	b.n	800e90c <_printf_common+0x9c>
	...

0800e95c <_printf_i>:
 800e95c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e960:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e964:	460c      	mov	r4, r1
 800e966:	7e09      	ldrb	r1, [r1, #24]
 800e968:	b085      	sub	sp, #20
 800e96a:	296e      	cmp	r1, #110	; 0x6e
 800e96c:	4617      	mov	r7, r2
 800e96e:	4606      	mov	r6, r0
 800e970:	4698      	mov	r8, r3
 800e972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e974:	f000 80b3 	beq.w	800eade <_printf_i+0x182>
 800e978:	d822      	bhi.n	800e9c0 <_printf_i+0x64>
 800e97a:	2963      	cmp	r1, #99	; 0x63
 800e97c:	d036      	beq.n	800e9ec <_printf_i+0x90>
 800e97e:	d80a      	bhi.n	800e996 <_printf_i+0x3a>
 800e980:	2900      	cmp	r1, #0
 800e982:	f000 80b9 	beq.w	800eaf8 <_printf_i+0x19c>
 800e986:	2958      	cmp	r1, #88	; 0x58
 800e988:	f000 8083 	beq.w	800ea92 <_printf_i+0x136>
 800e98c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e990:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e994:	e032      	b.n	800e9fc <_printf_i+0xa0>
 800e996:	2964      	cmp	r1, #100	; 0x64
 800e998:	d001      	beq.n	800e99e <_printf_i+0x42>
 800e99a:	2969      	cmp	r1, #105	; 0x69
 800e99c:	d1f6      	bne.n	800e98c <_printf_i+0x30>
 800e99e:	6820      	ldr	r0, [r4, #0]
 800e9a0:	6813      	ldr	r3, [r2, #0]
 800e9a2:	0605      	lsls	r5, r0, #24
 800e9a4:	f103 0104 	add.w	r1, r3, #4
 800e9a8:	d52a      	bpl.n	800ea00 <_printf_i+0xa4>
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	6011      	str	r1, [r2, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	da03      	bge.n	800e9ba <_printf_i+0x5e>
 800e9b2:	222d      	movs	r2, #45	; 0x2d
 800e9b4:	425b      	negs	r3, r3
 800e9b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e9ba:	486f      	ldr	r0, [pc, #444]	; (800eb78 <_printf_i+0x21c>)
 800e9bc:	220a      	movs	r2, #10
 800e9be:	e039      	b.n	800ea34 <_printf_i+0xd8>
 800e9c0:	2973      	cmp	r1, #115	; 0x73
 800e9c2:	f000 809d 	beq.w	800eb00 <_printf_i+0x1a4>
 800e9c6:	d808      	bhi.n	800e9da <_printf_i+0x7e>
 800e9c8:	296f      	cmp	r1, #111	; 0x6f
 800e9ca:	d020      	beq.n	800ea0e <_printf_i+0xb2>
 800e9cc:	2970      	cmp	r1, #112	; 0x70
 800e9ce:	d1dd      	bne.n	800e98c <_printf_i+0x30>
 800e9d0:	6823      	ldr	r3, [r4, #0]
 800e9d2:	f043 0320 	orr.w	r3, r3, #32
 800e9d6:	6023      	str	r3, [r4, #0]
 800e9d8:	e003      	b.n	800e9e2 <_printf_i+0x86>
 800e9da:	2975      	cmp	r1, #117	; 0x75
 800e9dc:	d017      	beq.n	800ea0e <_printf_i+0xb2>
 800e9de:	2978      	cmp	r1, #120	; 0x78
 800e9e0:	d1d4      	bne.n	800e98c <_printf_i+0x30>
 800e9e2:	2378      	movs	r3, #120	; 0x78
 800e9e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9e8:	4864      	ldr	r0, [pc, #400]	; (800eb7c <_printf_i+0x220>)
 800e9ea:	e055      	b.n	800ea98 <_printf_i+0x13c>
 800e9ec:	6813      	ldr	r3, [r2, #0]
 800e9ee:	1d19      	adds	r1, r3, #4
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	6011      	str	r1, [r2, #0]
 800e9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	e08c      	b.n	800eb1a <_printf_i+0x1be>
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	6011      	str	r1, [r2, #0]
 800ea04:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ea08:	bf18      	it	ne
 800ea0a:	b21b      	sxthne	r3, r3
 800ea0c:	e7cf      	b.n	800e9ae <_printf_i+0x52>
 800ea0e:	6813      	ldr	r3, [r2, #0]
 800ea10:	6825      	ldr	r5, [r4, #0]
 800ea12:	1d18      	adds	r0, r3, #4
 800ea14:	6010      	str	r0, [r2, #0]
 800ea16:	0628      	lsls	r0, r5, #24
 800ea18:	d501      	bpl.n	800ea1e <_printf_i+0xc2>
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	e002      	b.n	800ea24 <_printf_i+0xc8>
 800ea1e:	0668      	lsls	r0, r5, #25
 800ea20:	d5fb      	bpl.n	800ea1a <_printf_i+0xbe>
 800ea22:	881b      	ldrh	r3, [r3, #0]
 800ea24:	4854      	ldr	r0, [pc, #336]	; (800eb78 <_printf_i+0x21c>)
 800ea26:	296f      	cmp	r1, #111	; 0x6f
 800ea28:	bf14      	ite	ne
 800ea2a:	220a      	movne	r2, #10
 800ea2c:	2208      	moveq	r2, #8
 800ea2e:	2100      	movs	r1, #0
 800ea30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea34:	6865      	ldr	r5, [r4, #4]
 800ea36:	60a5      	str	r5, [r4, #8]
 800ea38:	2d00      	cmp	r5, #0
 800ea3a:	f2c0 8095 	blt.w	800eb68 <_printf_i+0x20c>
 800ea3e:	6821      	ldr	r1, [r4, #0]
 800ea40:	f021 0104 	bic.w	r1, r1, #4
 800ea44:	6021      	str	r1, [r4, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d13d      	bne.n	800eac6 <_printf_i+0x16a>
 800ea4a:	2d00      	cmp	r5, #0
 800ea4c:	f040 808e 	bne.w	800eb6c <_printf_i+0x210>
 800ea50:	4665      	mov	r5, ip
 800ea52:	2a08      	cmp	r2, #8
 800ea54:	d10b      	bne.n	800ea6e <_printf_i+0x112>
 800ea56:	6823      	ldr	r3, [r4, #0]
 800ea58:	07db      	lsls	r3, r3, #31
 800ea5a:	d508      	bpl.n	800ea6e <_printf_i+0x112>
 800ea5c:	6923      	ldr	r3, [r4, #16]
 800ea5e:	6862      	ldr	r2, [r4, #4]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	bfde      	ittt	le
 800ea64:	2330      	movle	r3, #48	; 0x30
 800ea66:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ea6e:	ebac 0305 	sub.w	r3, ip, r5
 800ea72:	6123      	str	r3, [r4, #16]
 800ea74:	f8cd 8000 	str.w	r8, [sp]
 800ea78:	463b      	mov	r3, r7
 800ea7a:	aa03      	add	r2, sp, #12
 800ea7c:	4621      	mov	r1, r4
 800ea7e:	4630      	mov	r0, r6
 800ea80:	f7ff fef6 	bl	800e870 <_printf_common>
 800ea84:	3001      	adds	r0, #1
 800ea86:	d14d      	bne.n	800eb24 <_printf_i+0x1c8>
 800ea88:	f04f 30ff 	mov.w	r0, #4294967295
 800ea8c:	b005      	add	sp, #20
 800ea8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea92:	4839      	ldr	r0, [pc, #228]	; (800eb78 <_printf_i+0x21c>)
 800ea94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ea98:	6813      	ldr	r3, [r2, #0]
 800ea9a:	6821      	ldr	r1, [r4, #0]
 800ea9c:	1d1d      	adds	r5, r3, #4
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	6015      	str	r5, [r2, #0]
 800eaa2:	060a      	lsls	r2, r1, #24
 800eaa4:	d50b      	bpl.n	800eabe <_printf_i+0x162>
 800eaa6:	07ca      	lsls	r2, r1, #31
 800eaa8:	bf44      	itt	mi
 800eaaa:	f041 0120 	orrmi.w	r1, r1, #32
 800eaae:	6021      	strmi	r1, [r4, #0]
 800eab0:	b91b      	cbnz	r3, 800eaba <_printf_i+0x15e>
 800eab2:	6822      	ldr	r2, [r4, #0]
 800eab4:	f022 0220 	bic.w	r2, r2, #32
 800eab8:	6022      	str	r2, [r4, #0]
 800eaba:	2210      	movs	r2, #16
 800eabc:	e7b7      	b.n	800ea2e <_printf_i+0xd2>
 800eabe:	064d      	lsls	r5, r1, #25
 800eac0:	bf48      	it	mi
 800eac2:	b29b      	uxthmi	r3, r3
 800eac4:	e7ef      	b.n	800eaa6 <_printf_i+0x14a>
 800eac6:	4665      	mov	r5, ip
 800eac8:	fbb3 f1f2 	udiv	r1, r3, r2
 800eacc:	fb02 3311 	mls	r3, r2, r1, r3
 800ead0:	5cc3      	ldrb	r3, [r0, r3]
 800ead2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ead6:	460b      	mov	r3, r1
 800ead8:	2900      	cmp	r1, #0
 800eada:	d1f5      	bne.n	800eac8 <_printf_i+0x16c>
 800eadc:	e7b9      	b.n	800ea52 <_printf_i+0xf6>
 800eade:	6813      	ldr	r3, [r2, #0]
 800eae0:	6825      	ldr	r5, [r4, #0]
 800eae2:	6961      	ldr	r1, [r4, #20]
 800eae4:	1d18      	adds	r0, r3, #4
 800eae6:	6010      	str	r0, [r2, #0]
 800eae8:	0628      	lsls	r0, r5, #24
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	d501      	bpl.n	800eaf2 <_printf_i+0x196>
 800eaee:	6019      	str	r1, [r3, #0]
 800eaf0:	e002      	b.n	800eaf8 <_printf_i+0x19c>
 800eaf2:	066a      	lsls	r2, r5, #25
 800eaf4:	d5fb      	bpl.n	800eaee <_printf_i+0x192>
 800eaf6:	8019      	strh	r1, [r3, #0]
 800eaf8:	2300      	movs	r3, #0
 800eafa:	6123      	str	r3, [r4, #16]
 800eafc:	4665      	mov	r5, ip
 800eafe:	e7b9      	b.n	800ea74 <_printf_i+0x118>
 800eb00:	6813      	ldr	r3, [r2, #0]
 800eb02:	1d19      	adds	r1, r3, #4
 800eb04:	6011      	str	r1, [r2, #0]
 800eb06:	681d      	ldr	r5, [r3, #0]
 800eb08:	6862      	ldr	r2, [r4, #4]
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	4628      	mov	r0, r5
 800eb0e:	f7f1 fb5f 	bl	80001d0 <memchr>
 800eb12:	b108      	cbz	r0, 800eb18 <_printf_i+0x1bc>
 800eb14:	1b40      	subs	r0, r0, r5
 800eb16:	6060      	str	r0, [r4, #4]
 800eb18:	6863      	ldr	r3, [r4, #4]
 800eb1a:	6123      	str	r3, [r4, #16]
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb22:	e7a7      	b.n	800ea74 <_printf_i+0x118>
 800eb24:	6923      	ldr	r3, [r4, #16]
 800eb26:	462a      	mov	r2, r5
 800eb28:	4639      	mov	r1, r7
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	47c0      	blx	r8
 800eb2e:	3001      	adds	r0, #1
 800eb30:	d0aa      	beq.n	800ea88 <_printf_i+0x12c>
 800eb32:	6823      	ldr	r3, [r4, #0]
 800eb34:	079b      	lsls	r3, r3, #30
 800eb36:	d413      	bmi.n	800eb60 <_printf_i+0x204>
 800eb38:	68e0      	ldr	r0, [r4, #12]
 800eb3a:	9b03      	ldr	r3, [sp, #12]
 800eb3c:	4298      	cmp	r0, r3
 800eb3e:	bfb8      	it	lt
 800eb40:	4618      	movlt	r0, r3
 800eb42:	e7a3      	b.n	800ea8c <_printf_i+0x130>
 800eb44:	2301      	movs	r3, #1
 800eb46:	464a      	mov	r2, r9
 800eb48:	4639      	mov	r1, r7
 800eb4a:	4630      	mov	r0, r6
 800eb4c:	47c0      	blx	r8
 800eb4e:	3001      	adds	r0, #1
 800eb50:	d09a      	beq.n	800ea88 <_printf_i+0x12c>
 800eb52:	3501      	adds	r5, #1
 800eb54:	68e3      	ldr	r3, [r4, #12]
 800eb56:	9a03      	ldr	r2, [sp, #12]
 800eb58:	1a9b      	subs	r3, r3, r2
 800eb5a:	42ab      	cmp	r3, r5
 800eb5c:	dcf2      	bgt.n	800eb44 <_printf_i+0x1e8>
 800eb5e:	e7eb      	b.n	800eb38 <_printf_i+0x1dc>
 800eb60:	2500      	movs	r5, #0
 800eb62:	f104 0919 	add.w	r9, r4, #25
 800eb66:	e7f5      	b.n	800eb54 <_printf_i+0x1f8>
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d1ac      	bne.n	800eac6 <_printf_i+0x16a>
 800eb6c:	7803      	ldrb	r3, [r0, #0]
 800eb6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb76:	e76c      	b.n	800ea52 <_printf_i+0xf6>
 800eb78:	0800ed79 	.word	0x0800ed79
 800eb7c:	0800ed8a 	.word	0x0800ed8a

0800eb80 <memcpy>:
 800eb80:	b510      	push	{r4, lr}
 800eb82:	1e43      	subs	r3, r0, #1
 800eb84:	440a      	add	r2, r1
 800eb86:	4291      	cmp	r1, r2
 800eb88:	d100      	bne.n	800eb8c <memcpy+0xc>
 800eb8a:	bd10      	pop	{r4, pc}
 800eb8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb94:	e7f7      	b.n	800eb86 <memcpy+0x6>

0800eb96 <memmove>:
 800eb96:	4288      	cmp	r0, r1
 800eb98:	b510      	push	{r4, lr}
 800eb9a:	eb01 0302 	add.w	r3, r1, r2
 800eb9e:	d807      	bhi.n	800ebb0 <memmove+0x1a>
 800eba0:	1e42      	subs	r2, r0, #1
 800eba2:	4299      	cmp	r1, r3
 800eba4:	d00a      	beq.n	800ebbc <memmove+0x26>
 800eba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebaa:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ebae:	e7f8      	b.n	800eba2 <memmove+0xc>
 800ebb0:	4283      	cmp	r3, r0
 800ebb2:	d9f5      	bls.n	800eba0 <memmove+0xa>
 800ebb4:	1881      	adds	r1, r0, r2
 800ebb6:	1ad2      	subs	r2, r2, r3
 800ebb8:	42d3      	cmn	r3, r2
 800ebba:	d100      	bne.n	800ebbe <memmove+0x28>
 800ebbc:	bd10      	pop	{r4, pc}
 800ebbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebc2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ebc6:	e7f7      	b.n	800ebb8 <memmove+0x22>

0800ebc8 <_realloc_r>:
 800ebc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebca:	4607      	mov	r7, r0
 800ebcc:	4614      	mov	r4, r2
 800ebce:	460e      	mov	r6, r1
 800ebd0:	b921      	cbnz	r1, 800ebdc <_realloc_r+0x14>
 800ebd2:	4611      	mov	r1, r2
 800ebd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ebd8:	f7ff bc6c 	b.w	800e4b4 <_malloc_r>
 800ebdc:	b922      	cbnz	r2, 800ebe8 <_realloc_r+0x20>
 800ebde:	f7ff fc1b 	bl	800e418 <_free_r>
 800ebe2:	4625      	mov	r5, r4
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebe8:	f000 f814 	bl	800ec14 <_malloc_usable_size_r>
 800ebec:	42a0      	cmp	r0, r4
 800ebee:	d20f      	bcs.n	800ec10 <_realloc_r+0x48>
 800ebf0:	4621      	mov	r1, r4
 800ebf2:	4638      	mov	r0, r7
 800ebf4:	f7ff fc5e 	bl	800e4b4 <_malloc_r>
 800ebf8:	4605      	mov	r5, r0
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d0f2      	beq.n	800ebe4 <_realloc_r+0x1c>
 800ebfe:	4631      	mov	r1, r6
 800ec00:	4622      	mov	r2, r4
 800ec02:	f7ff ffbd 	bl	800eb80 <memcpy>
 800ec06:	4631      	mov	r1, r6
 800ec08:	4638      	mov	r0, r7
 800ec0a:	f7ff fc05 	bl	800e418 <_free_r>
 800ec0e:	e7e9      	b.n	800ebe4 <_realloc_r+0x1c>
 800ec10:	4635      	mov	r5, r6
 800ec12:	e7e7      	b.n	800ebe4 <_realloc_r+0x1c>

0800ec14 <_malloc_usable_size_r>:
 800ec14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec18:	1f18      	subs	r0, r3, #4
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	bfbc      	itt	lt
 800ec1e:	580b      	ldrlt	r3, [r1, r0]
 800ec20:	18c0      	addlt	r0, r0, r3
 800ec22:	4770      	bx	lr

0800ec24 <_init>:
 800ec24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec26:	bf00      	nop
 800ec28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec2a:	bc08      	pop	{r3}
 800ec2c:	469e      	mov	lr, r3
 800ec2e:	4770      	bx	lr

0800ec30 <_fini>:
 800ec30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec32:	bf00      	nop
 800ec34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec36:	bc08      	pop	{r3}
 800ec38:	469e      	mov	lr, r3
 800ec3a:	4770      	bx	lr
