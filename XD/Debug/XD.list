
XD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009864  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080099ec  080099ec  000199ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a94  08009a94  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08009a94  08009a94  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a94  08009a94  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a94  08009a94  00019a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08009a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029b8  20000164  08009c00  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b1c  08009c00  00022b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015616  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e47  00000000  00000000  000357aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  000395f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  0003a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac5d  00000000  00000000  0003b7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175fb  00000000  00000000  00066425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecac5  00000000  00000000  0007da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a4e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000466c  00000000  00000000  0016a538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080099d4 	.word	0x080099d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000168 	.word	0x20000168
 80001c4:	080099d4 	.word	0x080099d4

080001c8 <MX_GPIO_Init>:
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
     PB9   ------> LCD_COM3
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08c      	sub	sp, #48	; 0x30
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 031c 	add.w	r3, r7, #28
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001de:	4bb7      	ldr	r3, [pc, #732]	; (80004bc <MX_GPIO_Init+0x2f4>)
 80001e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e2:	4ab6      	ldr	r2, [pc, #728]	; (80004bc <MX_GPIO_Init+0x2f4>)
 80001e4:	f043 0310 	orr.w	r3, r3, #16
 80001e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001ea:	4bb4      	ldr	r3, [pc, #720]	; (80004bc <MX_GPIO_Init+0x2f4>)
 80001ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001ee:	f003 0310 	and.w	r3, r3, #16
 80001f2:	61bb      	str	r3, [r7, #24]
 80001f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f6:	4bb1      	ldr	r3, [pc, #708]	; (80004bc <MX_GPIO_Init+0x2f4>)
 80001f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001fa:	4ab0      	ldr	r2, [pc, #704]	; (80004bc <MX_GPIO_Init+0x2f4>)
 80001fc:	f043 0304 	orr.w	r3, r3, #4
 8000200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000202:	4bae      	ldr	r3, [pc, #696]	; (80004bc <MX_GPIO_Init+0x2f4>)
 8000204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000206:	f003 0304 	and.w	r3, r3, #4
 800020a:	617b      	str	r3, [r7, #20]
 800020c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800020e:	4bab      	ldr	r3, [pc, #684]	; (80004bc <MX_GPIO_Init+0x2f4>)
 8000210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000212:	4aaa      	ldr	r2, [pc, #680]	; (80004bc <MX_GPIO_Init+0x2f4>)
 8000214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800021a:	4ba8      	ldr	r3, [pc, #672]	; (80004bc <MX_GPIO_Init+0x2f4>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000222:	613b      	str	r3, [r7, #16]
 8000224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	4ba5      	ldr	r3, [pc, #660]	; (80004bc <MX_GPIO_Init+0x2f4>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022a:	4aa4      	ldr	r2, [pc, #656]	; (80004bc <MX_GPIO_Init+0x2f4>)
 800022c:	f043 0301 	orr.w	r3, r3, #1
 8000230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000232:	4ba2      	ldr	r3, [pc, #648]	; (80004bc <MX_GPIO_Init+0x2f4>)
 8000234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000236:	f003 0301 	and.w	r3, r3, #1
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023e:	4b9f      	ldr	r3, [pc, #636]	; (80004bc <MX_GPIO_Init+0x2f4>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000242:	4a9e      	ldr	r2, [pc, #632]	; (80004bc <MX_GPIO_Init+0x2f4>)
 8000244:	f043 0302 	orr.w	r3, r3, #2
 8000248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800024a:	4b9c      	ldr	r3, [pc, #624]	; (80004bc <MX_GPIO_Init+0x2f4>)
 800024c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024e:	f003 0302 	and.w	r3, r3, #2
 8000252:	60bb      	str	r3, [r7, #8]
 8000254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000256:	4b99      	ldr	r3, [pc, #612]	; (80004bc <MX_GPIO_Init+0x2f4>)
 8000258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025a:	4a98      	ldr	r2, [pc, #608]	; (80004bc <MX_GPIO_Init+0x2f4>)
 800025c:	f043 0308 	orr.w	r3, r3, #8
 8000260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000262:	4b96      	ldr	r3, [pc, #600]	; (80004bc <MX_GPIO_Init+0x2f4>)
 8000264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000266:	f003 0308 	and.w	r3, r3, #8
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LED_GREEN_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	f240 1109 	movw	r1, #265	; 0x109
 8000274:	4892      	ldr	r0, [pc, #584]	; (80004c0 <MX_GPIO_Init+0x2f8>)
 8000276:	f001 f96f 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	210c      	movs	r1, #12
 800027e:	4891      	ldr	r0, [pc, #580]	; (80004c4 <MX_GPIO_Init+0x2fc>)
 8000280:	f001 f96a 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 7100 	mov.w	r1, #512	; 0x200
 800028a:	488f      	ldr	r0, [pc, #572]	; (80004c8 <MX_GPIO_Init+0x300>)
 800028c:	f001 f964 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	2180      	movs	r1, #128	; 0x80
 8000294:	488d      	ldr	r0, [pc, #564]	; (80004cc <MX_GPIO_Init+0x304>)
 8000296:	f001 f95f 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin
 800029a:	23f4      	movs	r3, #244	; 0xf4
 800029c:	61fb      	str	r3, [r7, #28]
                          |AUDIO_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800029e:	2302      	movs	r3, #2
 80002a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a2:	2300      	movs	r3, #0
 80002a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002a6:	2303      	movs	r3, #3
 80002a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80002aa:	230d      	movs	r3, #13
 80002ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80002ae:	f107 031c 	add.w	r3, r7, #28
 80002b2:	4619      	mov	r1, r3
 80002b4:	4882      	ldr	r0, [pc, #520]	; (80004c0 <MX_GPIO_Init+0x2f8>)
 80002b6:	f000 ffa5 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 80002ba:	2308      	movs	r3, #8
 80002bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002be:	2301      	movs	r3, #1
 80002c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c2:	2300      	movs	r3, #0
 80002c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c6:	2302      	movs	r3, #2
 80002c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 80002ca:	f107 031c 	add.w	r3, r7, #28
 80002ce:	4619      	mov	r1, r3
 80002d0:	487b      	ldr	r0, [pc, #492]	; (80004c0 <MX_GPIO_Init+0x2f8>)
 80002d2:	f000 ff97 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 80002d6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80002da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80002dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80002e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e2:	2300      	movs	r3, #0
 80002e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002e6:	f107 031c 	add.w	r3, r7, #28
 80002ea:	4619      	mov	r1, r3
 80002ec:	4876      	ldr	r0, [pc, #472]	; (80004c8 <MX_GPIO_Init+0x300>)
 80002ee:	f000 ff89 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin|USB_VBUS_Pin;
 80002f2:	f640 0307 	movw	r3, #2055	; 0x807
 80002f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f8:	2300      	movs	r3, #0
 80002fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000300:	f107 031c 	add.w	r3, r7, #28
 8000304:	4619      	mov	r1, r3
 8000306:	4870      	ldr	r0, [pc, #448]	; (80004c8 <MX_GPIO_Init+0x300>)
 8000308:	f000 ff7c 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 800030c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000310:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000312:	2302      	movs	r3, #2
 8000314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031a:	2300      	movs	r3, #0
 800031c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800031e:	230b      	movs	r3, #11
 8000320:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000322:	f107 031c 	add.w	r3, r7, #28
 8000326:	4619      	mov	r1, r3
 8000328:	4867      	ldr	r0, [pc, #412]	; (80004c8 <MX_GPIO_Init+0x300>)
 800032a:	f000 ff6b 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 800032e:	232f      	movs	r3, #47	; 0x2f
 8000330:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000332:	2300      	movs	r3, #0
 8000334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000336:	2302      	movs	r3, #2
 8000338:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033a:	f107 031c 	add.w	r3, r7, #28
 800033e:	4619      	mov	r1, r3
 8000340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000344:	f000 ff5e 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000348:	2310      	movs	r3, #16
 800034a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800034c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	2300      	movs	r3, #0
 8000354:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000356:	f107 031c 	add.w	r3, r7, #28
 800035a:	4619      	mov	r1, r3
 800035c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000360:	f000 ff50 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8000364:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000368:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800036a:	2302      	movs	r3, #2
 800036c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	2300      	movs	r3, #0
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000372:	2300      	movs	r3, #0
 8000374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000376:	230b      	movs	r3, #11
 8000378:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037a:	f107 031c 	add.w	r3, r7, #28
 800037e:	4619      	mov	r1, r3
 8000380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000384:	f000 ff3e 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 8000388:	f24f 2333 	movw	r3, #62003	; 0xf233
 800038c:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800038e:	2302      	movs	r3, #2
 8000390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000396:	2300      	movs	r3, #0
 8000398:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800039a:	230b      	movs	r3, #11
 800039c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039e:	f107 031c 	add.w	r3, r7, #28
 80003a2:	4619      	mov	r1, r3
 80003a4:	4847      	ldr	r0, [pc, #284]	; (80004c4 <MX_GPIO_Init+0x2fc>)
 80003a6:	f000 ff2d 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80003aa:	2304      	movs	r3, #4
 80003ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ae:	2301      	movs	r3, #1
 80003b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003b6:	2303      	movs	r3, #3
 80003b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80003ba:	f107 031c 	add.w	r3, r7, #28
 80003be:	4619      	mov	r1, r3
 80003c0:	4840      	ldr	r0, [pc, #256]	; (80004c4 <MX_GPIO_Init+0x2fc>)
 80003c2:	f000 ff1f 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80003c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003cc:	2301      	movs	r3, #1
 80003ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003d4:	2303      	movs	r3, #3
 80003d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80003d8:	f107 031c 	add.w	r3, r7, #28
 80003dc:	4619      	mov	r1, r3
 80003de:	4838      	ldr	r0, [pc, #224]	; (80004c0 <MX_GPIO_Init+0x2f8>)
 80003e0:	f000 ff10 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 80003e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ea:	2302      	movs	r3, #2
 80003ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f2:	2300      	movs	r3, #0
 80003f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80003f6:	230d      	movs	r3, #13
 80003f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 80003fa:	f107 031c 	add.w	r3, r7, #28
 80003fe:	4619      	mov	r1, r3
 8000400:	482f      	ldr	r0, [pc, #188]	; (80004c0 <MX_GPIO_Init+0x2f8>)
 8000402:	f000 feff 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000406:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800040a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800040c:	2312      	movs	r3, #18
 800040e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000410:	2300      	movs	r3, #0
 8000412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000414:	2303      	movs	r3, #3
 8000416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000418:	2304      	movs	r3, #4
 800041a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041c:	f107 031c 	add.w	r3, r7, #28
 8000420:	4619      	mov	r1, r3
 8000422:	4828      	ldr	r0, [pc, #160]	; (80004c4 <MX_GPIO_Init+0x2fc>)
 8000424:	f000 feee 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8000428:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800042c:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800042e:	2302      	movs	r3, #2
 8000430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	2300      	movs	r3, #0
 8000438:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800043a:	230b      	movs	r3, #11
 800043c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800043e:	f107 031c 	add.w	r3, r7, #28
 8000442:	4619      	mov	r1, r3
 8000444:	4821      	ldr	r0, [pc, #132]	; (80004cc <MX_GPIO_Init+0x304>)
 8000446:	f000 fedd 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800044a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800044e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000450:	2301      	movs	r3, #1
 8000452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000458:	2300      	movs	r3, #0
 800045a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800045c:	f107 031c 	add.w	r3, r7, #28
 8000460:	4619      	mov	r1, r3
 8000462:	4819      	ldr	r0, [pc, #100]	; (80004c8 <MX_GPIO_Init+0x300>)
 8000464:	f000 fece 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000468:	2305      	movs	r3, #5
 800046a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800046c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000476:	f107 031c 	add.w	r3, r7, #28
 800047a:	4619      	mov	r1, r3
 800047c:	4813      	ldr	r0, [pc, #76]	; (80004cc <MX_GPIO_Init+0x304>)
 800047e:	f000 fec1 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8000482:	231a      	movs	r3, #26
 8000484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000486:	2302      	movs	r3, #2
 8000488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800048e:	2303      	movs	r3, #3
 8000490:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000492:	2305      	movs	r3, #5
 8000494:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000496:	f107 031c 	add.w	r3, r7, #28
 800049a:	4619      	mov	r1, r3
 800049c:	480b      	ldr	r0, [pc, #44]	; (80004cc <MX_GPIO_Init+0x304>)
 800049e:	f000 feb1 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004a2:	2360      	movs	r3, #96	; 0x60
 80004a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a6:	2302      	movs	r3, #2
 80004a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004ae:	2303      	movs	r3, #3
 80004b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004b2:	2307      	movs	r3, #7
 80004b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004b6:	f107 031c 	add.w	r3, r7, #28
 80004ba:	e009      	b.n	80004d0 <MX_GPIO_Init+0x308>
 80004bc:	40021000 	.word	0x40021000
 80004c0:	48001000 	.word	0x48001000
 80004c4:	48000400 	.word	0x48000400
 80004c8:	48000800 	.word	0x48000800
 80004cc:	48000c00 	.word	0x48000c00
 80004d0:	4619      	mov	r1, r3
 80004d2:	482e      	ldr	r0, [pc, #184]	; (800058c <MX_GPIO_Init+0x3c4>)
 80004d4:	f000 fe96 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	2301      	movs	r3, #1
 80004de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004e4:	2303      	movs	r3, #3
 80004e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80004e8:	f107 031c 	add.w	r3, r7, #28
 80004ec:	4619      	mov	r1, r3
 80004ee:	4827      	ldr	r0, [pc, #156]	; (800058c <MX_GPIO_Init+0x3c4>)
 80004f0:	f000 fe88 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 80004f4:	2308      	movs	r3, #8
 80004f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f8:	2301      	movs	r3, #1
 80004fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	2300      	movs	r3, #0
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000500:	2300      	movs	r3, #0
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000504:	f107 031c 	add.w	r3, r7, #28
 8000508:	4619      	mov	r1, r3
 800050a:	4821      	ldr	r0, [pc, #132]	; (8000590 <MX_GPIO_Init+0x3c8>)
 800050c:	f000 fe7a 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000510:	23c0      	movs	r3, #192	; 0xc0
 8000512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000514:	2312      	movs	r3, #18
 8000516:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800051c:	2303      	movs	r3, #3
 800051e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000520:	2304      	movs	r3, #4
 8000522:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000524:	f107 031c 	add.w	r3, r7, #28
 8000528:	4619      	mov	r1, r3
 800052a:	4819      	ldr	r0, [pc, #100]	; (8000590 <MX_GPIO_Init+0x3c8>)
 800052c:	f000 fe6a 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000536:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800053a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000540:	f107 031c 	add.w	r3, r7, #28
 8000544:	4619      	mov	r1, r3
 8000546:	4812      	ldr	r0, [pc, #72]	; (8000590 <MX_GPIO_Init+0x3c8>)
 8000548:	f000 fe5c 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 800054c:	2301      	movs	r3, #1
 800054e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000550:	2301      	movs	r3, #1
 8000552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2300      	movs	r3, #0
 800055a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 800055c:	f107 031c 	add.w	r3, r7, #28
 8000560:	4619      	mov	r1, r3
 8000562:	480c      	ldr	r0, [pc, #48]	; (8000594 <MX_GPIO_Init+0x3cc>)
 8000564:	f000 fe4e 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000568:	2302      	movs	r3, #2
 800056a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800056c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	4619      	mov	r1, r3
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_GPIO_Init+0x3cc>)
 800057e:	f000 fe41 	bl	8001204 <HAL_GPIO_Init>

}
 8000582:	bf00      	nop
 8000584:	3730      	adds	r7, #48	; 0x30
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	48000c00 	.word	0x48000c00
 8000590:	48000400 	.word	0x48000400
 8000594:	48001000 	.word	0x48001000

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fc42 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f808 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f7ff fe10 	bl	80001c8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80005a8:	f000 f86c 	bl	8000684 <MX_QUADSPI_Init>
  MX_USB_DEVICE_Init();
 80005ac:	f008 fb1c 	bl	8008be8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x18>
	...

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	; 0x58
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2244      	movs	r2, #68	; 0x44
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f009 f9fe 	bl	80099c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005da:	f002 f8c1 	bl	8002760 <HAL_PWREx_ControlVoltageScaling>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e4:	f000 f848 	bl	8000678 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e8:	f002 f89c 	bl	8002724 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <SystemClock_Config+0xc0>)
 80005ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005f2:	4a20      	ldr	r2, [pc, #128]	; (8000674 <SystemClock_Config+0xc0>)
 80005f4:	f023 0318 	bic.w	r3, r3, #24
 80005f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005fc:	2314      	movs	r3, #20
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800060c:	2360      	movs	r3, #96	; 0x60
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000614:	2301      	movs	r3, #1
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800061c:	2328      	movs	r3, #40	; 0x28
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000620:	2307      	movs	r3, #7
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fdb7 	bl	80031a4 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800063c:	f000 f81c 	bl	8000678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2303      	movs	r3, #3
 8000646:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	2104      	movs	r1, #4
 8000658:	4618      	mov	r0, r3
 800065a:	f003 f98b 	bl	8003974 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000664:	f000 f808 	bl	8000678 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000668:	f003 fe48 	bl	80042fc <HAL_RCCEx_EnableMSIPLLMode>
}
 800066c:	bf00      	nop
 800066e:	3758      	adds	r7, #88	; 0x58
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_QUADSPI_Init+0x44>)
 800068a:	4a10      	ldr	r2, [pc, #64]	; (80006cc <MX_QUADSPI_Init+0x48>)
 800068c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_QUADSPI_Init+0x44>)
 8000690:	2200      	movs	r2, #0
 8000692:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_QUADSPI_Init+0x44>)
 8000696:	2204      	movs	r2, #4
 8000698:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_QUADSPI_Init+0x44>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 0x17;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_QUADSPI_Init+0x44>)
 80006a2:	2217      	movs	r2, #23
 80006a4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_QUADSPI_Init+0x44>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_QUADSPI_Init+0x44>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_QUADSPI_Init+0x44>)
 80006b4:	f002 f8ba 	bl	800282c <HAL_QSPI_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80006be:	f7ff ffdb 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000180 	.word	0x20000180
 80006cc:	a0001000 	.word	0xa0001000

080006d0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a17      	ldr	r2, [pc, #92]	; (800074c <HAL_QSPI_MspInit+0x7c>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d128      	bne.n	8000744 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <HAL_QSPI_MspInit+0x80>)
 80006f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <HAL_QSPI_MspInit+0x80>)
 80006f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006fc:	6513      	str	r3, [r2, #80]	; 0x50
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <HAL_QSPI_MspInit+0x80>)
 8000700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <HAL_QSPI_MspInit+0x80>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a10      	ldr	r2, [pc, #64]	; (8000750 <HAL_QSPI_MspInit+0x80>)
 8000710:	f043 0310 	orr.w	r3, r3, #16
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <HAL_QSPI_MspInit+0x80>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0310 	and.w	r3, r3, #16
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|QUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000722:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000726:	617b      	str	r3, [r7, #20]
                          |QUADSPI_BK1_IO2_Pin|QUADSPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000734:	230a      	movs	r3, #10
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <HAL_QSPI_MspInit+0x84>)
 8000740:	f000 fd60 	bl	8001204 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	a0001000 	.word	0xa0001000
 8000750:	40021000 	.word	0x40021000
 8000754:	48001000 	.word	0x48001000

08000758 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&hqspi) != QSPI_OK)
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <BSP_QSPI_Init+0x2c>)
 800075e:	f000 f98e 	bl	8000a7e <QSPI_ResetMemory>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <BSP_QSPI_Init+0x14>
  {
    return QSPI_NOT_SUPPORTED;
 8000768:	2304      	movs	r3, #4
 800076a:	e008      	b.n	800077e <BSP_QSPI_Init+0x26>
  }
 
  /* Configuration of the dummy cucles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != QSPI_OK)
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <BSP_QSPI_Init+0x2c>)
 800076e:	f000 f9c8 	bl	8000b02 <QSPI_DummyCyclesCfg>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <BSP_QSPI_Init+0x24>
  {
    return QSPI_NOT_SUPPORTED;
 8000778:	2304      	movs	r3, #4
 800077a:	e000      	b.n	800077e <BSP_QSPI_Init+0x26>
  }
  
  return QSPI_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000180 	.word	0x20000180

08000788 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b092      	sub	sp, #72	; 0x48
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800079a:	23eb      	movs	r3, #235	; 0xeb
 800079c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 800079e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80007a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a8:	61fb      	str	r3, [r7, #28]
  sCommand.Address           = ReadAddr;
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80007b2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80007b8:	230a      	movs	r3, #10
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = Size;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80007c4:	2300      	movs	r3, #0
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80007c8:	2300      	movs	r3, #0
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <BSP_QSPI_Read+0x80>)
 80007d8:	f002 f89e 	bl	8002918 <HAL_QSPI_Command>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00b      	b.n	80007fe <BSP_QSPI_Read+0x76>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80007e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80007ea:	68f9      	ldr	r1, [r7, #12]
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <BSP_QSPI_Read+0x80>)
 80007ee:	f002 f988 	bl	8002b02 <HAL_QSPI_Receive>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <BSP_QSPI_Read+0x74>
  {
    return QSPI_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e000      	b.n	80007fe <BSP_QSPI_Read+0x76>
  }

  return QSPI_OK;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3748      	adds	r7, #72	; 0x48
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000180 	.word	0x20000180

0800080c <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b096      	sub	sp, #88	; 0x58
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	653b      	str	r3, [r7, #80]	; 0x50

  while (current_addr <= WriteAddr)
 800081c:	e003      	b.n	8000826 <BSP_QSPI_Write+0x1a>
  {
    current_addr += N25Q128A_PAGE_SIZE;
 800081e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000820:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000824:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 8000826:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	429a      	cmp	r2, r3
 800082c:	d9f7      	bls.n	800081e <BSP_QSPI_Write+0x12>
  }
  current_size = current_addr - WriteAddr;
 800082e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8000836:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	429a      	cmp	r2, r3
 800083c:	d901      	bls.n	8000842 <BSP_QSPI_Write+0x36>
  {
    current_size = Size;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4413      	add	r3, r2
 800084c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800084e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8000854:	2312      	movs	r3, #18
 8000856:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000858:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 800085e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000862:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8000868:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800086c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000876:	2300      	movs	r3, #0
 8000878:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800087a:	2300      	movs	r3, #0
 800087c:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 800087e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000880:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8000882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000884:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&hqspi) != QSPI_OK)
 8000886:	4824      	ldr	r0, [pc, #144]	; (8000918 <BSP_QSPI_Write+0x10c>)
 8000888:	f000 f9b6 	bl	8000bf8 <QSPI_WriteEnable>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <BSP_QSPI_Write+0x8a>
    {
      return QSPI_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e03b      	b.n	800090e <BSP_QSPI_Write+0x102>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	f241 3288 	movw	r2, #5000	; 0x1388
 800089e:	4619      	mov	r1, r3
 80008a0:	481d      	ldr	r0, [pc, #116]	; (8000918 <BSP_QSPI_Write+0x10c>)
 80008a2:	f002 f839 	bl	8002918 <HAL_QSPI_Command>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <BSP_QSPI_Write+0xa4>
    {
      return QSPI_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	e02e      	b.n	800090e <BSP_QSPI_Write+0x102>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80008b4:	68f9      	ldr	r1, [r7, #12]
 80008b6:	4818      	ldr	r0, [pc, #96]	; (8000918 <BSP_QSPI_Write+0x10c>)
 80008b8:	f002 f88c 	bl	80029d4 <HAL_QSPI_Transmit>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e023      	b.n	800090e <BSP_QSPI_Write+0x102>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80008c6:	f241 3188 	movw	r1, #5000	; 0x1388
 80008ca:	4813      	ldr	r0, [pc, #76]	; (8000918 <BSP_QSPI_Write+0x10c>)
 80008cc:	f000 f9dd 	bl	8000c8a <QSPI_AutoPollingMemReady>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <BSP_QSPI_Write+0xce>
    {
      return QSPI_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e019      	b.n	800090e <BSP_QSPI_Write+0x102>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 80008da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80008dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008de:	4413      	add	r3, r2
 80008e0:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008e6:	4413      	add	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 80008ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80008f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d203      	bcs.n	80008fe <BSP_QSPI_Write+0xf2>
 80008f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80008f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	e001      	b.n	8000902 <BSP_QSPI_Write+0xf6>
 80008fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000902:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8000904:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000908:	429a      	cmp	r2, r3
 800090a:	d3b8      	bcc.n	800087e <BSP_QSPI_Write+0x72>
  
  return QSPI_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3758      	adds	r7, #88	; 0x58
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000180 	.word	0x20000180

0800091c <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b090      	sub	sp, #64	; 0x40
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000928:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = SUBSECTOR_ERASE_CMD;
 800092a:	2320      	movs	r3, #32
 800092c:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 800092e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000938:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800094e:	2300      	movs	r3, #0
 8000950:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000952:	2300      	movs	r3, #0
 8000954:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&hqspi) != QSPI_OK)
 8000956:	4812      	ldr	r0, [pc, #72]	; (80009a0 <BSP_QSPI_Erase_Block+0x84>)
 8000958:	f000 f94e 	bl	8000bf8 <QSPI_WriteEnable>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	e017      	b.n	8000996 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	f241 3288 	movw	r2, #5000	; 0x1388
 800096e:	4619      	mov	r1, r3
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <BSP_QSPI_Erase_Block+0x84>)
 8000972:	f001 ffd1 	bl	8002918 <HAL_QSPI_Command>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 800097c:	2301      	movs	r3, #1
 800097e:	e00a      	b.n	8000996 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&hqspi, N25Q128A_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8000980:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000984:	4806      	ldr	r0, [pc, #24]	; (80009a0 <BSP_QSPI_Erase_Block+0x84>)
 8000986:	f000 f980 	bl	8000c8a <QSPI_AutoPollingMemReady>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e000      	b.n	8000996 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3740      	adds	r7, #64	; 0x40
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000180 	.word	0x20000180

080009a4 <BSP_QSPI_GetStatus>:
/**
  * @brief  Reads current status of the QSPI memory.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetStatus(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b090      	sub	sp, #64	; 0x40
 80009a8:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read flag status register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80009aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ae:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = READ_FLAG_STATUS_REG_CMD;
 80009b0:	2370      	movs	r3, #112	; 0x70
 80009b2:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80009bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  sCommand.NbData            = 1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80009ce:	2300      	movs	r3, #0
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80009d2:	2300      	movs	r3, #0
 80009d4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	f241 3288 	movw	r2, #5000	; 0x1388
 80009de:	4619      	mov	r1, r3
 80009e0:	4816      	ldr	r0, [pc, #88]	; (8000a3c <BSP_QSPI_GetStatus+0x98>)
 80009e2:	f001 ff99 	bl	8002918 <HAL_QSPI_Command>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <BSP_QSPI_GetStatus+0x4c>
  {
    return QSPI_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	e020      	b.n	8000a32 <BSP_QSPI_GetStatus+0x8e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80009f6:	4619      	mov	r1, r3
 80009f8:	4810      	ldr	r0, [pc, #64]	; (8000a3c <BSP_QSPI_GetStatus+0x98>)
 80009fa:	f002 f882 	bl	8002b02 <HAL_QSPI_Receive>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <BSP_QSPI_GetStatus+0x64>
  {
    return QSPI_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e014      	b.n	8000a32 <BSP_QSPI_GetStatus+0x8e>
  }
  
  /* Check the value of the register */
  if ((reg & (N25Q128A_FSR_PRERR | N25Q128A_FSR_VPPERR | N25Q128A_FSR_PGERR | N25Q128A_FSR_ERERR)) != 0)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <BSP_QSPI_GetStatus+0x72>
  {
    return QSPI_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00d      	b.n	8000a32 <BSP_QSPI_GetStatus+0x8e>
  }
  else if ((reg & (N25Q128A_FSR_PGSUS | N25Q128A_FSR_ERSUS)) != 0)
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <BSP_QSPI_GetStatus+0x80>
  {
    return QSPI_SUSPENDED;
 8000a20:	2308      	movs	r3, #8
 8000a22:	e006      	b.n	8000a32 <BSP_QSPI_GetStatus+0x8e>
  }
  else if ((reg & N25Q128A_FSR_READY) != 0)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	da01      	bge.n	8000a30 <BSP_QSPI_GetStatus+0x8c>
  {
    return QSPI_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	e000      	b.n	8000a32 <BSP_QSPI_GetStatus+0x8e>
  }
  else
  {
    return QSPI_BUSY;
 8000a30:	2302      	movs	r3, #2
  }
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3740      	adds	r7, #64	; 0x40
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000180 	.word	0x20000180

08000a40 <BSP_QSPI_GetInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo: pointer on the configuration structure  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetInfo(QSPI_Info* pInfo)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize          = N25Q128A_FLASH_SIZE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a4e:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = N25Q128A_SUBSECTOR_SIZE;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a56:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber = (N25Q128A_FLASH_SIZE/N25Q128A_SUBSECTOR_SIZE);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a5e:	609a      	str	r2, [r3, #8]
  pInfo->ProgPageSize       = N25Q128A_PAGE_SIZE;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	60da      	str	r2, [r3, #12]
  pInfo->ProgPagesNumber    = (N25Q128A_FLASH_SIZE/N25Q128A_PAGE_SIZE);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a6e:	611a      	str	r2, [r3, #16]
  
  return QSPI_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b090      	sub	sp, #64	; 0x40
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8a:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8000a8c:	2366      	movs	r3, #102	; 0x66
 8000a8e:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f001 ff2e 	bl	8002918 <HAL_QSPI_Command>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e019      	b.n	8000afa <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8000ac6:	2399      	movs	r3, #153	; 0x99
 8000ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f001 ff1f 	bl	8002918 <HAL_QSPI_Command>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e00a      	b.n	8000afa <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8000ae4:	f241 3188 	movw	r1, #5000	; 0x1388
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 f8ce 	bl	8000c8a <QSPI_AutoPollingMemReady>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3740      	adds	r7, #64	; 0x40
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b094      	sub	sp, #80	; 0x50
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 8000b10:	2385      	movs	r3, #133	; 0x85
 8000b12:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8000b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000b32:	2300      	movs	r3, #0
 8000b34:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b3e:	4619      	mov	r1, r3
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f001 fee9 	bl	8002918 <HAL_QSPI_Command>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e04f      	b.n	8000bf0 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b50:	f107 030b 	add.w	r3, r7, #11
 8000b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b58:	4619      	mov	r1, r3
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f001 ffd1 	bl	8002b02 <HAL_QSPI_Receive>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e042      	b.n	8000bf0 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 f844 	bl	8000bf8 <QSPI_WriteEnable>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e03a      	b.n	8000bf0 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8000b7a:	2381      	movs	r3, #129	; 0x81
 8000b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8000b7e:	7afb      	ldrb	r3, [r7, #11]
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	b25a      	sxtb	r2, r3
 8000b88:	23f0      	movs	r3, #240	; 0xf0
 8000b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b8e:	fa93 f3a3 	rbit	r3, r3
 8000b92:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b96:	64fb      	str	r3, [r7, #76]	; 0x4c
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <QSPI_DummyCyclesCfg+0xa0>
  {
    return 32U;
 8000b9e:	2320      	movs	r3, #32
 8000ba0:	e003      	b.n	8000baa <QSPI_DummyCyclesCfg+0xa8>
  }
  return __builtin_clz(value);
 8000ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ba4:	fab3 f383 	clz	r3, r3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4619      	mov	r1, r3
 8000bac:	230a      	movs	r3, #10
 8000bae:	408b      	lsls	r3, r1
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	72fb      	strb	r3, [r7, #11]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f001 fea7 	bl	8002918 <HAL_QSPI_Command>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e00d      	b.n	8000bf0 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bd4:	f107 030b 	add.w	r3, r7, #11
 8000bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bdc:	4619      	mov	r1, r3
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f001 fef8 	bl	80029d4 <HAL_QSPI_Transmit>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e000      	b.n	8000bf0 <QSPI_DummyCyclesCfg+0xee>
  }
  
  return QSPI_OK;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3750      	adds	r7, #80	; 0x50
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b096      	sub	sp, #88	; 0x58
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c04:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8000c06:	2306      	movs	r3, #6
 8000c08:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000c22:	2300      	movs	r3, #0
 8000c24:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c2e:	4619      	mov	r1, r3
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f001 fe71 	bl	8002918 <HAL_QSPI_Command>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e020      	b.n	8000c82 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = N25Q128A_SR_WREN;
 8000c40:	2302      	movs	r3, #2
 8000c42:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 8000c44:	2302      	movs	r3, #2
 8000c46:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8000c50:	2310      	movs	r3, #16
 8000c52:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000c54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c58:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8000c5a:	2305      	movs	r3, #5
 8000c5c:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8000c5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c62:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c64:	f107 0208 	add.w	r2, r7, #8
 8000c68:	f107 0120 	add.w	r1, r7, #32
 8000c6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f001 ffe8 	bl	8002c46 <HAL_QSPI_AutoPolling>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e000      	b.n	8000c82 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3758      	adds	r7, #88	; 0x58
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b096      	sub	sp, #88	; 0x58
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8000ca6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000caa:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000cd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cd4:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &sCommand, &sConfig, Timeout) != HAL_OK)
 8000cd6:	f107 0208 	add.w	r2, r7, #8
 8000cda:	f107 0120 	add.w	r1, r7, #32
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f001 ffb0 	bl	8002c46 <HAL_QSPI_AutoPolling>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e000      	b.n	8000cf2 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3758      	adds	r7, #88	; 0x58
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_MspInit+0x44>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_MspInit+0x44>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_MspInit+0x44>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_MspInit+0x44>)
 8000d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_MspInit+0x44>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	6593      	str	r3, [r2, #88]	; 0x58
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MspInit+0x44>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40021000 	.word	0x40021000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d90:	f000 f8a4 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <OTG_FS_IRQHandler+0x10>)
 8000d9e:	f000 fd46 	bl	800182e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000169c 	.word	0x2000169c

08000dac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd4:	f7ff ffea 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	; (8000e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <LoopForever+0xe>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	; (8000e1c <LoopForever+0x16>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f008 fdbd 	bl	800997c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e02:	f7ff fbc9 	bl	8000598 <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000e14:	08009a9c 	.word	0x08009a9c
  ldr r2, =_sbss
 8000e18:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000e1c:	20002b1c 	.word	0x20002b1c

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_Init+0x3c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <HAL_Init+0x3c>)
 8000e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	f000 f962 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 f80f 	bl	8000e64 <HAL_InitTick>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	71fb      	strb	r3, [r7, #7]
 8000e50:	e001      	b.n	8000e56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e52:	f7ff ff53 	bl	8000cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e56:	79fb      	ldrb	r3, [r7, #7]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40022000 	.word	0x40022000

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_InitTick+0x6c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d023      	beq.n	8000ec0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_InitTick+0x70>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_InitTick+0x6c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f96d 	bl	800116e <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10f      	bne.n	8000eba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d809      	bhi.n	8000eb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 f937 	bl	800111a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_InitTick+0x74>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e007      	b.n	8000ec4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e004      	b.n	8000ec4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e001      	b.n	8000ec4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000004 	.word	0x20000004

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	200001c4 	.word	0x200001c4

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200001c4 	.word	0x200001c4

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffee 	bl	8000f04 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_Delay+0x44>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f42:	bf00      	nop
 8000f44:	f7ff ffde 	bl	8000f04 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
  {
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	; (8001000 <__NVIC_EnableIRQ+0x38>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f7ff ff8e 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff29 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff3e 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff8e 	bl	8001058 <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5d 	bl	8001004 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff31 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffa2 	bl	80010c0 <SysTick_Config>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001186:	b480      	push	{r7}
 8001188:	b085      	sub	sp, #20
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d008      	beq.n	80011b0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2204      	movs	r2, #4
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e022      	b.n	80011f6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 020e 	bic.w	r2, r2, #14
 80011be:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0201 	bic.w	r2, r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d4:	f003 021c 	and.w	r2, r3, #28
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	2101      	movs	r1, #1
 80011de:	fa01 f202 	lsl.w	r2, r1, r2
 80011e2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001212:	e17f      	b.n	8001514 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	2101      	movs	r1, #1
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 8171 	beq.w	800150e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d005      	beq.n	8001244 <HAL_GPIO_Init+0x40>
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d130      	bne.n	80012a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800127a:	2201      	movs	r2, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	f003 0201 	and.w	r2, r3, #1
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d118      	bne.n	80012e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012b8:	2201      	movs	r2, #1
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	08db      	lsrs	r3, r3, #3
 80012ce:	f003 0201 	and.w	r2, r3, #1
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d017      	beq.n	8001320 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d123      	bne.n	8001374 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	220f      	movs	r2, #15
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	6939      	ldr	r1, [r7, #16]
 8001370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0203 	and.w	r2, r3, #3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80ac 	beq.w	800150e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <HAL_GPIO_Init+0x330>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	4a5e      	ldr	r2, [pc, #376]	; (8001534 <HAL_GPIO_Init+0x330>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6613      	str	r3, [r2, #96]	; 0x60
 80013c2:	4b5c      	ldr	r3, [pc, #368]	; (8001534 <HAL_GPIO_Init+0x330>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013ce:	4a5a      	ldr	r2, [pc, #360]	; (8001538 <HAL_GPIO_Init+0x334>)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	3302      	adds	r3, #2
 80013d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	220f      	movs	r2, #15
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013f8:	d025      	beq.n	8001446 <HAL_GPIO_Init+0x242>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4f      	ldr	r2, [pc, #316]	; (800153c <HAL_GPIO_Init+0x338>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d01f      	beq.n	8001442 <HAL_GPIO_Init+0x23e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4e      	ldr	r2, [pc, #312]	; (8001540 <HAL_GPIO_Init+0x33c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d019      	beq.n	800143e <HAL_GPIO_Init+0x23a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4d      	ldr	r2, [pc, #308]	; (8001544 <HAL_GPIO_Init+0x340>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x236>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4c      	ldr	r2, [pc, #304]	; (8001548 <HAL_GPIO_Init+0x344>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x232>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4b      	ldr	r2, [pc, #300]	; (800154c <HAL_GPIO_Init+0x348>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x22e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4a      	ldr	r2, [pc, #296]	; (8001550 <HAL_GPIO_Init+0x34c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x22a>
 800142a:	2306      	movs	r3, #6
 800142c:	e00c      	b.n	8001448 <HAL_GPIO_Init+0x244>
 800142e:	2307      	movs	r3, #7
 8001430:	e00a      	b.n	8001448 <HAL_GPIO_Init+0x244>
 8001432:	2305      	movs	r3, #5
 8001434:	e008      	b.n	8001448 <HAL_GPIO_Init+0x244>
 8001436:	2304      	movs	r3, #4
 8001438:	e006      	b.n	8001448 <HAL_GPIO_Init+0x244>
 800143a:	2303      	movs	r3, #3
 800143c:	e004      	b.n	8001448 <HAL_GPIO_Init+0x244>
 800143e:	2302      	movs	r3, #2
 8001440:	e002      	b.n	8001448 <HAL_GPIO_Init+0x244>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x244>
 8001446:	2300      	movs	r3, #0
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	f002 0203 	and.w	r2, r2, #3
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	4093      	lsls	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001458:	4937      	ldr	r1, [pc, #220]	; (8001538 <HAL_GPIO_Init+0x334>)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001466:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <HAL_GPIO_Init+0x350>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800148a:	4a32      	ldr	r2, [pc, #200]	; (8001554 <HAL_GPIO_Init+0x350>)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001490:	4b30      	ldr	r3, [pc, #192]	; (8001554 <HAL_GPIO_Init+0x350>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b4:	4a27      	ldr	r2, [pc, #156]	; (8001554 <HAL_GPIO_Init+0x350>)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_GPIO_Init+0x350>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014de:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_GPIO_Init+0x350>)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_GPIO_Init+0x350>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <HAL_GPIO_Init+0x350>)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa22 f303 	lsr.w	r3, r2, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	f47f ae78 	bne.w	8001214 <HAL_GPIO_Init+0x10>
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	40010000 	.word	0x40010000
 800153c:	48000400 	.word	0x48000400
 8001540:	48000800 	.word	0x48000800
 8001544:	48000c00 	.word	0x48000c00
 8001548:	48001000 	.word	0x48001000
 800154c:	48001400 	.word	0x48001400
 8001550:	48001800 	.word	0x48001800
 8001554:	40010400 	.word	0x40010400

08001558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]
 8001564:	4613      	mov	r3, r2
 8001566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001568:	787b      	ldrb	r3, [r7, #1]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800156e:	887a      	ldrh	r2, [r7, #2]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001574:	e002      	b.n	800157c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158a:	b08f      	sub	sp, #60	; 0x3c
 800158c:	af0a      	add	r7, sp, #40	; 0x28
 800158e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e116      	b.n	80017c8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d106      	bne.n	80015ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f007 fdb5 	bl	8009124 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2203      	movs	r2, #3
 80015be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 f94a 	bl	8004872 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	687e      	ldr	r6, [r7, #4]
 80015e6:	466d      	mov	r5, sp
 80015e8:	f106 0410 	add.w	r4, r6, #16
 80015ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80015fc:	1d33      	adds	r3, r6, #4
 80015fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001600:	6838      	ldr	r0, [r7, #0]
 8001602:	f003 f85d 	bl	80046c0 <USB_CoreInit>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2202      	movs	r2, #2
 8001610:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0d7      	b.n	80017c8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f003 f938 	bl	8004894 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e04a      	b.n	80016c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	333d      	adds	r3, #61	; 0x3d
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	440b      	add	r3, r1
 800164c:	333c      	adds	r3, #60	; 0x3c
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	b298      	uxth	r0, r3
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3342      	adds	r3, #66	; 0x42
 8001666:	4602      	mov	r2, r0
 8001668:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	333f      	adds	r3, #63	; 0x3f
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800167e:	7bfa      	ldrb	r2, [r7, #15]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	1a9b      	subs	r3, r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	3344      	adds	r3, #68	; 0x44
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	1a9b      	subs	r3, r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	3348      	adds	r3, #72	; 0x48
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	1a9b      	subs	r3, r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	3350      	adds	r3, #80	; 0x50
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	3301      	adds	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d3af      	bcc.n	800162a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	e044      	b.n	800175a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016e6:	7bfa      	ldrb	r2, [r7, #15]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	1a9b      	subs	r3, r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016fc:	7bfa      	ldrb	r2, [r7, #15]
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	1a9b      	subs	r3, r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001712:	7bfa      	ldrb	r2, [r7, #15]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	1a9b      	subs	r3, r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800173e:	7bfa      	ldrb	r2, [r7, #15]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	1a9b      	subs	r3, r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	3301      	adds	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	7bfa      	ldrb	r2, [r7, #15]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	429a      	cmp	r2, r3
 8001762:	d3b5      	bcc.n	80016d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	687e      	ldr	r6, [r7, #4]
 800176c:	466d      	mov	r5, sp
 800176e:	f106 0410 	add.w	r4, r6, #16
 8001772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800177e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001782:	1d33      	adds	r3, r6, #4
 8001784:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001786:	6838      	ldr	r0, [r7, #0]
 8001788:	f003 f8d0 	bl	800492c <USB_DevInit>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2202      	movs	r2, #2
 8001796:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e014      	b.n	80017c8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d102      	bne.n	80017bc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 ff84 	bl	80026c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 f8a2 	bl	800590a <USB_DevDisconnect>

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_PCD_Start+0x1c>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e01c      	b.n	8001826 <HAL_PCD_Start+0x56>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001800:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f003 f81f 	bl	8004850 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f004 f856 	bl	80058c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800182e:	b590      	push	{r4, r7, lr}
 8001830:	b08d      	sub	sp, #52	; 0x34
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f004 f914 	bl	8005a72 <USB_GetMode>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	f040 8384 	bne.w	8001f5a <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f004 f878 	bl	800594c <USB_ReadInterrupts>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 837a 	beq.w	8001f58 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f004 f86f 	bl	800594c <USB_ReadInterrupts>
 800186e:	4603      	mov	r3, r0
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b02      	cmp	r3, #2
 8001876:	d107      	bne.n	8001888 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f002 0202 	and.w	r2, r2, #2
 8001886:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f004 f85d 	bl	800594c <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b10      	cmp	r3, #16
 800189a:	d161      	bne.n	8001960 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699a      	ldr	r2, [r3, #24]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0210 	bic.w	r2, r2, #16
 80018aa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	f003 020f 	and.w	r2, r3, #15
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	1a9b      	subs	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	3304      	adds	r3, #4
 80018ca:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	0c5b      	lsrs	r3, r3, #17
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d124      	bne.n	8001922 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d035      	beq.n	8001950 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	6a38      	ldr	r0, [r7, #32]
 80018f8:	f003 fe94 	bl	8005624 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001908:	441a      	add	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	699a      	ldr	r2, [r3, #24]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800191a:	441a      	add	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	619a      	str	r2, [r3, #24]
 8001920:	e016      	b.n	8001950 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	0c5b      	lsrs	r3, r3, #17
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	2b06      	cmp	r3, #6
 800192c:	d110      	bne.n	8001950 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001934:	2208      	movs	r2, #8
 8001936:	4619      	mov	r1, r3
 8001938:	6a38      	ldr	r0, [r7, #32]
 800193a:	f003 fe73 	bl	8005624 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800194a:	441a      	add	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699a      	ldr	r2, [r3, #24]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0210 	orr.w	r2, r2, #16
 800195e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f003 fff1 	bl	800594c <USB_ReadInterrupts>
 800196a:	4603      	mov	r3, r0
 800196c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001970:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001974:	d16e      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f003 fff7 	bl	8005972 <USB_ReadDevAllOutEpInterrupt>
 8001984:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001986:	e062      	b.n	8001a4e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d057      	beq.n	8001a42 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f004 f81c 	bl	80059da <USB_ReadDevOutEPInterrupt>
 80019a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00c      	beq.n	80019c8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	015a      	lsls	r2, r3, #5
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	4413      	add	r3, r2
 80019b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ba:	461a      	mov	r2, r3
 80019bc:	2301      	movs	r3, #1
 80019be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80019c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 fda4 	bl	8002510 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00c      	beq.n	80019ec <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	015a      	lsls	r2, r3, #5
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	4413      	add	r3, r2
 80019da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019de:	461a      	mov	r2, r3
 80019e0:	2308      	movs	r3, #8
 80019e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80019e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fde0 	bl	80025ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d008      	beq.n	8001a08 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a02:	461a      	mov	r2, r3
 8001a04:	2310      	movs	r3, #16
 8001a06:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	015a      	lsls	r2, r3, #5
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	4413      	add	r3, r2
 8001a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a1e:	461a      	mov	r2, r3
 8001a20:	2320      	movs	r3, #32
 8001a22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	015a      	lsls	r2, r3, #5
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a40:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	3301      	adds	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4a:	085b      	lsrs	r3, r3, #1
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d199      	bne.n	8001988 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 ff77 	bl	800594c <USB_ReadInterrupts>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a68:	f040 808c 	bne.w	8001b84 <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 ff98 	bl	80059a6 <USB_ReadDevAllInEpInterrupt>
 8001a76:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001a7c:	e07e      	b.n	8001b7c <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d073      	beq.n	8001b70 <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 ffbf 	bl	8005a16 <USB_ReadDevInEPInterrupt>
 8001a98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d020      	beq.n	8001ae6 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	2201      	movs	r2, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69f9      	ldr	r1, [r7, #28]
 8001ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f007 fbde 	bl	80092a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	015a      	lsls	r2, r3, #5
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	4413      	add	r3, r2
 8001af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001afc:	461a      	mov	r2, r3
 8001afe:	2308      	movs	r3, #8
 8001b00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2310      	movs	r3, #16
 8001b1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	015a      	lsls	r2, r3, #5
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	4413      	add	r3, r2
 8001b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b34:	461a      	mov	r2, r3
 8001b36:	2340      	movs	r3, #64	; 0x40
 8001b38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00c      	beq.n	8001b5e <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b46:	6a38      	ldr	r0, [r7, #32]
 8001b48:	f003 f83c 	bl	8004bc4 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fc47 	bl	80023fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	3301      	adds	r3, #1
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b78:	085b      	lsrs	r3, r3, #1
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f47f af7d 	bne.w	8001a7e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fedf 	bl	800594c <USB_ReadInterrupts>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b98:	d122      	bne.n	8001be0 <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d108      	bne.n	8001bca <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 fda2 	bl	800270c <HAL_PCDEx_LPM_Callback>
 8001bc8:	e002      	b.n	8001bd0 <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f007 fbd6 	bl	800937c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f003 feb1 	bl	800594c <USB_ReadInterrupts>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bf4:	d112      	bne.n	8001c1c <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f007 fb92 	bl	8009330 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fe93 	bl	800594c <USB_ReadInterrupts>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c30:	d121      	bne.n	8001c76 <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001c40:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d111      	bne.n	8001c70 <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	f003 020f 	and.w	r2, r3, #15
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c66:	2101      	movs	r1, #1
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fd4f 	bl	800270c <HAL_PCDEx_LPM_Callback>
 8001c6e:	e002      	b.n	8001c76 <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f007 fb5d 	bl	8009330 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 fe66 	bl	800594c <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c8a:	f040 80b5 	bne.w	8001df8 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2110      	movs	r1, #16
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 ff8b 	bl	8004bc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb2:	e046      	b.n	8001d42 <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001cc6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd8:	0151      	lsls	r1, r2, #5
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	440a      	add	r2, r1
 8001cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ce6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001cfa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0c:	0151      	lsls	r1, r2, #5
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	440a      	add	r2, r1
 8001d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1e:	015a      	lsls	r2, r3, #5
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d2c:	0151      	lsls	r1, r2, #5
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	440a      	add	r2, r1
 8001d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d3a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3e:	3301      	adds	r3, #1
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d3b3      	bcc.n	8001cb4 <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d5a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001d5e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d016      	beq.n	8001d96 <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d78:	f043 030b 	orr.w	r3, r3, #11
 8001d7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d8e:	f043 030b 	orr.w	r3, r3, #11
 8001d92:	6453      	str	r3, [r2, #68]	; 0x44
 8001d94:	e015      	b.n	8001dc2 <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001da4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001da8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001dac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dbc:	f043 030b 	orr.w	r3, r3, #11
 8001dc0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dd0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001dd4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f003 fe76 	bl	8005ad4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fda5 	bl	800594c <USB_ReadInterrupts>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e0c:	d124      	bne.n	8001e58 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 fe3b 	bl	8005a8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 ff4a 	bl	8004cb6 <USB_GetDevSpeed>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681c      	ldr	r4, [r3, #0]
 8001e2e:	f001 ff0f 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8001e32:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f002 fc6b 	bl	8004718 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f007 fa55 	bl	80092f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 fd75 	bl	800594c <USB_ReadInterrupts>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d10a      	bne.n	8001e82 <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f007 fa32 	bl	80092d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f002 0208 	and.w	r2, r2, #8
 8001e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 fd60 	bl	800594c <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e96:	d10f      	bne.n	8001eb8 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f007 faa4 	bl	80093f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 fd45 	bl	800594c <USB_ReadInterrupts>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ecc:	d10f      	bne.n	8001eee <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f007 fa77 	bl	80093cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001eec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 fd2a 	bl	800594c <USB_ReadInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f02:	d10a      	bne.n	8001f1a <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f007 fa85 	bl	8009414 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fd14 	bl	800594c <USB_ReadInterrupts>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d115      	bne.n	8001f5a <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f007 fa75 	bl	8009430 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	e000      	b.n	8001f5a <HAL_PCD_IRQHandler+0x72c>
      return;
 8001f58:	bf00      	nop
    }
  }
}
 8001f5a:	3734      	adds	r7, #52	; 0x34
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd90      	pop	{r4, r7, pc}

08001f60 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_PCD_SetAddress+0x1a>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e013      	b.n	8001fa2 <HAL_PCD_SetAddress+0x42>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	78fa      	ldrb	r2, [r7, #3]
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 fc72 	bl	800587c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	4608      	mov	r0, r1
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4603      	mov	r3, r0
 8001fba:	70fb      	strb	r3, [r7, #3]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	803b      	strh	r3, [r7, #0]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	da0f      	bge.n	8001ff0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	f003 020f 	and.w	r2, r3, #15
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	3338      	adds	r3, #56	; 0x38
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2201      	movs	r2, #1
 8001fec:	705a      	strb	r2, [r3, #1]
 8001fee:	e00f      	b.n	8002010 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	f003 020f 	and.w	r2, r3, #15
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	b2da      	uxtb	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800201c:	883a      	ldrh	r2, [r7, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	78ba      	ldrb	r2, [r7, #2]
 8002026:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d004      	beq.n	800203a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800203a:	78bb      	ldrb	r3, [r7, #2]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d102      	bne.n	8002046 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_PCD_EP_Open+0xaa>
 8002050:	2302      	movs	r3, #2
 8002052:	e00e      	b.n	8002072 <HAL_PCD_EP_Open+0xc8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68f9      	ldr	r1, [r7, #12]
 8002062:	4618      	mov	r0, r3
 8002064:	f002 fe46 	bl	8004cf4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002070:	7afb      	ldrb	r3, [r7, #11]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208a:	2b00      	cmp	r3, #0
 800208c:	da0f      	bge.n	80020ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	f003 020f 	and.w	r2, r3, #15
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	3338      	adds	r3, #56	; 0x38
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	3304      	adds	r3, #4
 80020a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	705a      	strb	r2, [r3, #1]
 80020ac:	e00f      	b.n	80020ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 020f 	and.w	r2, r3, #15
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	3304      	adds	r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_PCD_EP_Close+0x6e>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e00e      	b.n	8002106 <HAL_PCD_EP_Close+0x8c>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68f9      	ldr	r1, [r7, #12]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f002 fe84 	bl	8004e04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	460b      	mov	r3, r1
 800211c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800211e:	7afb      	ldrb	r3, [r7, #11]
 8002120:	f003 020f 	and.w	r2, r3, #15
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	3304      	adds	r3, #4
 8002136:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2200      	movs	r2, #0
 800214e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002150:	7afb      	ldrb	r3, [r7, #11]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	b2da      	uxtb	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800215c:	7afb      	ldrb	r3, [r7, #11]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6979      	ldr	r1, [r7, #20]
 800216c:	4618      	mov	r0, r3
 800216e:	f003 f901 	bl	8005374 <USB_EP0StartXfer>
 8002172:	e005      	b.n	8002180 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6979      	ldr	r1, [r7, #20]
 800217a:	4618      	mov	r0, r3
 800217c:	f002 ff1e 	bl	8004fbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 020f 	and.w	r2, r3, #15
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80021ac:	681b      	ldr	r3, [r3, #0]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	460b      	mov	r3, r1
 80021c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ca:	7afb      	ldrb	r3, [r7, #11]
 80021cc:	f003 020f 	and.w	r2, r3, #15
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	3338      	adds	r3, #56	; 0x38
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	3304      	adds	r3, #4
 80021e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2201      	movs	r2, #1
 80021f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021fa:	7afb      	ldrb	r3, [r7, #11]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	b2da      	uxtb	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002206:	7afb      	ldrb	r3, [r7, #11]
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6979      	ldr	r1, [r7, #20]
 8002216:	4618      	mov	r0, r3
 8002218:	f003 f8ac 	bl	8005374 <USB_EP0StartXfer>
 800221c:	e005      	b.n	800222a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6979      	ldr	r1, [r7, #20]
 8002224:	4618      	mov	r0, r3
 8002226:	f002 fec9 	bl	8004fbc <USB_EPStartXfer>
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	f003 020f 	and.w	r2, r3, #15
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	429a      	cmp	r2, r3
 800224c:	d901      	bls.n	8002252 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e04e      	b.n	80022f0 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002256:	2b00      	cmp	r3, #0
 8002258:	da0f      	bge.n	800227a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 020f 	and.w	r2, r3, #15
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	3338      	adds	r3, #56	; 0x38
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	3304      	adds	r3, #4
 8002270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	705a      	strb	r2, [r3, #1]
 8002278:	e00d      	b.n	8002296 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	3304      	adds	r3, #4
 800228e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_PCD_EP_SetStall+0x82>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e01c      	b.n	80022f0 <HAL_PCD_EP_SetStall+0xbc>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68f9      	ldr	r1, [r7, #12]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 fa05 	bl	80056d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d108      	bne.n	80022e6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022de:	4619      	mov	r1, r3
 80022e0:	4610      	mov	r0, r2
 80022e2:	f003 fbf7 	bl	8005ad4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	f003 020f 	and.w	r2, r3, #15
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	429a      	cmp	r2, r3
 8002310:	d901      	bls.n	8002316 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e042      	b.n	800239c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800231a:	2b00      	cmp	r3, #0
 800231c:	da0f      	bge.n	800233e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	f003 020f 	and.w	r2, r3, #15
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	3338      	adds	r3, #56	; 0x38
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	3304      	adds	r3, #4
 8002334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	705a      	strb	r2, [r3, #1]
 800233c:	e00f      	b.n	800235e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	f003 020f 	and.w	r2, r3, #15
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	3304      	adds	r3, #4
 8002356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	b2da      	uxtb	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_PCD_EP_ClrStall+0x86>
 800237a:	2302      	movs	r3, #2
 800237c:	e00e      	b.n	800239c <HAL_PCD_EP_ClrStall+0xa4>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68f9      	ldr	r1, [r7, #12]
 800238c:	4618      	mov	r0, r3
 800238e:	f003 fa0f 	bl	80057b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_PCD_EP_Flush+0x1a>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e01b      	b.n	80023f6 <HAL_PCD_EP_Flush+0x52>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80023c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	da09      	bge.n	80023e2 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f002 fbf2 	bl	8004bc4 <USB_FlushTxFifo>
 80023e0:	e004      	b.n	80023ec <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 fc1e 	bl	8004c28 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b088      	sub	sp, #32
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	3338      	adds	r3, #56	; 0x38
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	3304      	adds	r3, #4
 8002424:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	429a      	cmp	r2, r3
 8002430:	d901      	bls.n	8002436 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e067      	b.n	8002506 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	429a      	cmp	r2, r3
 800244a:	d902      	bls.n	8002452 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3303      	adds	r3, #3
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800245a:	e026      	b.n	80024aa <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	429a      	cmp	r2, r3
 8002470:	d902      	bls.n	8002478 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	3303      	adds	r3, #3
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	68d9      	ldr	r1, [r3, #12]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	b29b      	uxth	r3, r3
 800248c:	6978      	ldr	r0, [r7, #20]
 800248e:	f003 f88f 	bl	80055b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	441a      	add	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	441a      	add	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d809      	bhi.n	80024d4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d203      	bcs.n	80024d4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1c3      	bne.n	800245c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d811      	bhi.n	8002504 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	2201      	movs	r2, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	6939      	ldr	r1, [r7, #16]
 80024fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002500:	4013      	ands	r3, r2
 8002502:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	333c      	adds	r3, #60	; 0x3c
 8002528:	3304      	adds	r3, #4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <PCD_EP_OutXfrComplete_int+0x98>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d124      	bne.n	8002590 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255c:	461a      	mov	r2, r3
 800255e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002562:	6093      	str	r3, [r2, #8]
 8002564:	e01a      	b.n	800259c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800257c:	461a      	mov	r2, r3
 800257e:	2320      	movs	r3, #32
 8002580:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4619      	mov	r1, r3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f006 fe6f 	bl	800926c <HAL_PCD_DataOutStageCallback>
 800258e:	e005      	b.n	800259c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f006 fe68 	bl	800926c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	4f54310a 	.word	0x4f54310a

080025ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	333c      	adds	r3, #60	; 0x3c
 80025c4:	3304      	adds	r3, #4
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4a0c      	ldr	r2, [pc, #48]	; (8002610 <PCD_EP_OutSetupPacket_int+0x64>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d90e      	bls.n	8002600 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d009      	beq.n	8002600 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f8:	461a      	mov	r2, r3
 80025fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f006 fe21 	bl	8009248 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	4f54300a 	.word	0x4f54300a

08002614 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	70fb      	strb	r3, [r7, #3]
 8002620:	4613      	mov	r3, r2
 8002622:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d107      	bne.n	8002642 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002632:	883b      	ldrh	r3, [r7, #0]
 8002634:	0419      	lsls	r1, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	430a      	orrs	r2, r1
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
 8002640:	e028      	b.n	8002694 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	0c1b      	lsrs	r3, r3, #16
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	4413      	add	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	e00d      	b.n	8002672 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	3340      	adds	r3, #64	; 0x40
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	4413      	add	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	3301      	adds	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	3b01      	subs	r3, #1
 8002678:	429a      	cmp	r2, r3
 800267a:	d3ec      	bcc.n	8002656 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800267c:	883b      	ldrh	r3, [r7, #0]
 800267e:	0418      	lsls	r0, r3, #16
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	3b01      	subs	r3, #1
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	4302      	orrs	r2, r0
 800268c:	3340      	adds	r3, #64	; 0x40
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	887a      	ldrh	r2, [r7, #2]
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f6:	f043 0303 	orr.w	r3, r3, #3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800272e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40007000 	.word	0x40007000

08002744 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <HAL_PWREx_GetVoltageRange+0x18>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40007000 	.word	0x40007000

08002760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276e:	d130      	bne.n	80027d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002770:	4b23      	ldr	r3, [pc, #140]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800277c:	d038      	beq.n	80027f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002786:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2232      	movs	r2, #50	; 0x32
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0c9b      	lsrs	r3, r3, #18
 80027a0:	3301      	adds	r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a4:	e002      	b.n	80027ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b8:	d102      	bne.n	80027c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f2      	bne.n	80027a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027cc:	d110      	bne.n	80027f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e00f      	b.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027de:	d007      	beq.n	80027f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027e8:	4a05      	ldr	r2, [pc, #20]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40007000 	.word	0x40007000
 8002804:	20000000 	.word	0x20000000
 8002808:	431bde83 	.word	0x431bde83

0800280c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281a:	6053      	str	r3, [r2, #4]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40007000 	.word	0x40007000

0800282c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af02      	add	r7, sp, #8
 8002832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002834:	f7fe fb66 	bl	8000f04 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e063      	b.n	800290c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7fd ff39 	bl	80006d0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800285e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fad3 	bl	8002e0e <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	3b01      	subs	r3, #1
 8002878:	021a      	lsls	r2, r3, #8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	2120      	movs	r1, #32
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 facb 	bl	8002e2a <QSPI_WaitFlagStateUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002898:	7afb      	ldrb	r3, [r7, #11]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d131      	bne.n	8002902 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028a8:	f023 0310 	bic.w	r3, r3, #16
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6852      	ldr	r2, [r2, #4]
 80028b0:	0611      	lsls	r1, r2, #24
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68d2      	ldr	r2, [r2, #12]
 80028b6:	4311      	orrs	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	430b      	orrs	r3, r1
 80028be:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <HAL_QSPI_Init+0xe8>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6912      	ldr	r2, [r2, #16]
 80028ce:	0411      	lsls	r1, r2, #16
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6952      	ldr	r2, [r2, #20]
 80028d4:	4311      	orrs	r1, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6992      	ldr	r2, [r2, #24]
 80028da:	4311      	orrs	r1, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	430b      	orrs	r3, r1
 80028e2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800290a:	7afb      	ldrb	r3, [r7, #11]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	ffe0f8fe 	.word	0xffe0f8fe

08002918 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002924:	f7fe faee 	bl	8000f04 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_QSPI_Command+0x22>
 8002936:	2302      	movs	r3, #2
 8002938:	e048      	b.n	80029cc <HAL_QSPI_Command+0xb4>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d137      	bne.n	80029be <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	2200      	movs	r2, #0
 8002964:	2120      	movs	r1, #32
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fa5f 	bl	8002e2a <QSPI_WaitFlagStateUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d125      	bne.n	80029c2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002976:	2200      	movs	r2, #0
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fa8c 	bl	8002e98 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	2b00      	cmp	r3, #0
 8002986:	d115      	bne.n	80029b4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2201      	movs	r2, #1
 8002990:	2102      	movs	r1, #2
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fa49 	bl	8002e2a <QSPI_WaitFlagStateUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10f      	bne.n	80029c2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2202      	movs	r2, #2
 80029a8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80029b2:	e006      	b.n	80029c2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80029bc:	e001      	b.n	80029c2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80029be:	2302      	movs	r3, #2
 80029c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80029e4:	f7fe fa8e 	bl	8000f04 <HAL_GetTick>
 80029e8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3320      	adds	r3, #32
 80029f0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_QSPI_Transmit+0x2e>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e07b      	b.n	8002afa <HAL_QSPI_Transmit+0x126>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d16a      	bne.n	8002aec <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d05b      	beq.n	8002ada <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2212      	movs	r2, #18
 8002a26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002a56:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002a58:	e01b      	b.n	8002a92 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	2201      	movs	r2, #1
 8002a62:	2104      	movs	r1, #4
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f9e0 	bl	8002e2a <QSPI_WaitFlagStateUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002a6e:	7ffb      	ldrb	r3, [r7, #31]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d113      	bne.n	8002a9c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	1e5a      	subs	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1df      	bne.n	8002a5a <HAL_QSPI_Transmit+0x86>
 8002a9a:	e000      	b.n	8002a9e <HAL_QSPI_Transmit+0xca>
          break;
 8002a9c:	bf00      	nop
      }

      if (status == HAL_OK)
 8002a9e:	7ffb      	ldrb	r3, [r7, #31]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d115      	bne.n	8002ad0 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	2102      	movs	r1, #2
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f9bb 	bl	8002e2a <QSPI_WaitFlagStateUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002ab8:	7ffb      	ldrb	r3, [r7, #31]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d108      	bne.n	8002ad0 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f934 	bl	8002d34 <HAL_QSPI_Abort>
 8002acc:	4603      	mov	r3, r0
 8002ace:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002ad8:	e00a      	b.n	8002af0 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ade:	f043 0208 	orr.w	r2, r3, #8
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	77fb      	strb	r3, [r7, #31]
 8002aea:	e001      	b.n	8002af0 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
 8002aee:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002af8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b08a      	sub	sp, #40	; 0x28
 8002b06:	af02      	add	r7, sp, #8
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002b12:	f7fe f9f7 	bl	8000f04 <HAL_GetTick>
 8002b16:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3320      	adds	r3, #32
 8002b26:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_QSPI_Receive+0x36>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e082      	b.n	8002c3e <HAL_QSPI_Receive+0x13c>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d171      	bne.n	8002c30 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d062      	beq.n	8002c1e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2222      	movs	r2, #34	; 0x22
 8002b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b90:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002b9a:	e01c      	b.n	8002bd6 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2106      	movs	r1, #6
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f93f 	bl	8002e2a <QSPI_WaitFlagStateUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8002bb0:	7ffb      	ldrb	r3, [r7, #31]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d114      	bne.n	8002be0 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	7812      	ldrb	r2, [r2, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	1e5a      	subs	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1de      	bne.n	8002b9c <HAL_QSPI_Receive+0x9a>
 8002bde:	e000      	b.n	8002be2 <HAL_QSPI_Receive+0xe0>
          break;
 8002be0:	bf00      	nop
      }

      if (status == HAL_OK)
 8002be2:	7ffb      	ldrb	r3, [r7, #31]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d115      	bne.n	8002c14 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f919 	bl	8002e2a <QSPI_WaitFlagStateUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8002bfc:	7ffb      	ldrb	r3, [r7, #31]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d108      	bne.n	8002c14 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2202      	movs	r2, #2
 8002c08:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f892 	bl	8002d34 <HAL_QSPI_Abort>
 8002c10:	4603      	mov	r3, r0
 8002c12:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002c1c:	e00a      	b.n	8002c34 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	f043 0208 	orr.w	r2, r3, #8
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	77fb      	strb	r3, [r7, #31]
 8002c2e:	e001      	b.n	8002c34 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
 8002c32:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002c3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b088      	sub	sp, #32
 8002c4a:	af02      	add	r7, sp, #8
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002c54:	f7fe f956 	bl	8000f04 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_QSPI_AutoPolling+0x24>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e060      	b.n	8002d2c <HAL_QSPI_AutoPolling+0xe6>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d14f      	bne.n	8002d1e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2242      	movs	r2, #66	; 0x42
 8002c88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2200      	movs	r2, #0
 8002c94:	2120      	movs	r1, #32
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f8c7 	bl	8002e2a <QSPI_WaitFlagStateUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d13d      	bne.n	8002d22 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6852      	ldr	r2, [r2, #4]
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6892      	ldr	r2, [r2, #8]
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002cdc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8002ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f8d3 	bl	8002e98 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	2108      	movs	r1, #8
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f894 	bl	8002e2a <QSPI_WaitFlagStateUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002d06:	7dfb      	ldrb	r3, [r7, #23]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2208      	movs	r2, #8
 8002d12:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002d1c:	e001      	b.n	8002d22 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7fe f8e0 	bl	8000f04 <HAL_GetTick>
 8002d44:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d056      	beq.n	8002e04 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d017      	beq.n	8002d9c <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0204 	bic.w	r2, r2, #4
 8002d7a:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe fa00 	bl	8001186 <HAL_DMA_Abort>
 8002d86:	4603      	mov	r3, r0
 8002d88:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d94:	f043 0204 	orr.w	r2, r3, #4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0202 	orr.w	r2, r2, #2
 8002daa:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2201      	movs	r2, #1
 8002db6:	2102      	movs	r1, #2
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f836 	bl	8002e2a <QSPI_WaitFlagStateUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10e      	bne.n	8002de6 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2202      	movs	r2, #2
 8002dce:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2120      	movs	r1, #32
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f824 	bl	8002e2a <QSPI_WaitFlagStateUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002dfa:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	603b      	str	r3, [r7, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e3a:	e01a      	b.n	8002e72 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d016      	beq.n	8002e72 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e44:	f7fe f85e 	bl	8000f04 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d302      	bcc.n	8002e5a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10b      	bne.n	8002e72 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	f043 0201 	orr.w	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00e      	b.n	8002e90 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf14      	ite	ne
 8002e80:	2301      	movne	r3, #1
 8002e82:	2300      	moveq	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d1d6      	bne.n	8002e3c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <QSPI_Config+0x28>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002eb2:	d005      	beq.n	8002ec0 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3a01      	subs	r2, #1
 8002ebe:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80b9 	beq.w	800303c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d05f      	beq.n	8002f92 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	6892      	ldr	r2, [r2, #8]
 8002eda:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d031      	beq.n	8002f48 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	431a      	orrs	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	049b      	lsls	r3, r3, #18
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	ea42 0103 	orr.w	r1, r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002f38:	f000 812e 	beq.w	8003198 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	6852      	ldr	r2, [r2, #4]
 8002f44:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002f46:	e127      	b.n	8003198 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	431a      	orrs	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	431a      	orrs	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	049b      	lsls	r3, r3, #18
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	ea42 0103 	orr.w	r1, r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	615a      	str	r2, [r3, #20]
}
 8002f90:	e102      	b.n	8003198 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d02e      	beq.n	8002ff8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	049b      	lsls	r3, r3, #18
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	ea42 0103 	orr.w	r1, r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002fe8:	f000 80d6 	beq.w	8003198 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	6852      	ldr	r2, [r2, #4]
 8002ff4:	619a      	str	r2, [r3, #24]
}
 8002ff6:	e0cf      	b.n	8003198 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	431a      	orrs	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003006:	431a      	orrs	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	431a      	orrs	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	049b      	lsls	r3, r3, #18
 8003014:	431a      	orrs	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	431a      	orrs	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	431a      	orrs	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	431a      	orrs	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	ea42 0103 	orr.w	r1, r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	430a      	orrs	r2, r1
 8003038:	615a      	str	r2, [r3, #20]
}
 800303a:	e0ad      	b.n	8003198 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d058      	beq.n	80030f6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	6892      	ldr	r2, [r2, #8]
 800304c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d02d      	beq.n	80030b2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	431a      	orrs	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003064:	431a      	orrs	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	431a      	orrs	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	049b      	lsls	r3, r3, #18
 8003072:	431a      	orrs	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	431a      	orrs	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	431a      	orrs	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	431a      	orrs	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	431a      	orrs	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	ea42 0103 	orr.w	r1, r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	430a      	orrs	r2, r1
 800309c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80030a4:	d078      	beq.n	8003198 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	6852      	ldr	r2, [r2, #4]
 80030ae:	619a      	str	r2, [r3, #24]
}
 80030b0:	e072      	b.n	8003198 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	431a      	orrs	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c0:	431a      	orrs	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	431a      	orrs	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	049b      	lsls	r3, r3, #18
 80030ce:	431a      	orrs	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	431a      	orrs	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	431a      	orrs	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	ea42 0103 	orr.w	r1, r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	615a      	str	r2, [r3, #20]
}
 80030f4:	e050      	b.n	8003198 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d02a      	beq.n	8003154 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	431a      	orrs	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	431a      	orrs	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	431a      	orrs	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	049b      	lsls	r3, r3, #18
 800311a:	431a      	orrs	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	431a      	orrs	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	431a      	orrs	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	431a      	orrs	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	ea42 0103 	orr.w	r1, r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	430a      	orrs	r2, r1
 800313e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003146:	d027      	beq.n	8003198 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	6852      	ldr	r2, [r2, #4]
 8003150:	619a      	str	r2, [r3, #24]
}
 8003152:	e021      	b.n	8003198 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01d      	beq.n	8003198 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	431a      	orrs	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316a:	431a      	orrs	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	431a      	orrs	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	049b      	lsls	r3, r3, #18
 8003178:	431a      	orrs	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	431a      	orrs	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	431a      	orrs	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	ea42 0103 	orr.w	r1, r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	430a      	orrs	r2, r1
 8003196:	615a      	str	r2, [r3, #20]
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e3d8      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b6:	4b97      	ldr	r3, [pc, #604]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031c0:	4b94      	ldr	r3, [pc, #592]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 80e4 	beq.w	80033a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d007      	beq.n	80031ee <HAL_RCC_OscConfig+0x4a>
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	f040 808b 	bne.w	80032fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	f040 8087 	bne.w	80032fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031ee:	4b89      	ldr	r3, [pc, #548]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_RCC_OscConfig+0x62>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e3b0      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1a      	ldr	r2, [r3, #32]
 800320a:	4b82      	ldr	r3, [pc, #520]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <HAL_RCC_OscConfig+0x7c>
 8003216:	4b7f      	ldr	r3, [pc, #508]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800321e:	e005      	b.n	800322c <HAL_RCC_OscConfig+0x88>
 8003220:	4b7c      	ldr	r3, [pc, #496]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800322c:	4293      	cmp	r3, r2
 800322e:	d223      	bcs.n	8003278 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fd17 	bl	8003c68 <RCC_SetFlashLatencyFromMSIRange>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e391      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003244:	4b73      	ldr	r3, [pc, #460]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a72      	ldr	r2, [pc, #456]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800324a:	f043 0308 	orr.w	r3, r3, #8
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b70      	ldr	r3, [pc, #448]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	496d      	ldr	r1, [pc, #436]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003262:	4b6c      	ldr	r3, [pc, #432]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	4968      	ldr	r1, [pc, #416]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]
 8003276:	e025      	b.n	80032c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003278:	4b66      	ldr	r3, [pc, #408]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a65      	ldr	r2, [pc, #404]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800327e:	f043 0308 	orr.w	r3, r3, #8
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b63      	ldr	r3, [pc, #396]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	4960      	ldr	r1, [pc, #384]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003296:	4b5f      	ldr	r3, [pc, #380]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	495b      	ldr	r1, [pc, #364]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fcd7 	bl	8003c68 <RCC_SetFlashLatencyFromMSIRange>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e351      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032c4:	f000 fc38 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b52      	ldr	r3, [pc, #328]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	4950      	ldr	r1, [pc, #320]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80032d6:	5ccb      	ldrb	r3, [r1, r3]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
 80032e0:	4a4e      	ldr	r2, [pc, #312]	; (800341c <HAL_RCC_OscConfig+0x278>)
 80032e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032e4:	4b4e      	ldr	r3, [pc, #312]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd fdbb 	bl	8000e64 <HAL_InitTick>
 80032ee:	4603      	mov	r3, r0
 80032f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d052      	beq.n	800339e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	e335      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d032      	beq.n	800336a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003304:	4b43      	ldr	r3, [pc, #268]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a42      	ldr	r2, [pc, #264]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003310:	f7fd fdf8 	bl	8000f04 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003318:	f7fd fdf4 	bl	8000f04 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e31e      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800332a:	4b3a      	ldr	r3, [pc, #232]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003336:	4b37      	ldr	r3, [pc, #220]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a36      	ldr	r2, [pc, #216]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	4b34      	ldr	r3, [pc, #208]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	4931      	ldr	r1, [pc, #196]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003354:	4b2f      	ldr	r3, [pc, #188]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	492c      	ldr	r1, [pc, #176]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
 8003368:	e01a      	b.n	80033a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800336a:	4b2a      	ldr	r3, [pc, #168]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a29      	ldr	r2, [pc, #164]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003376:	f7fd fdc5 	bl	8000f04 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800337e:	f7fd fdc1 	bl	8000f04 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e2eb      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003390:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f0      	bne.n	800337e <HAL_RCC_OscConfig+0x1da>
 800339c:	e000      	b.n	80033a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800339e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d074      	beq.n	8003496 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d005      	beq.n	80033be <HAL_RCC_OscConfig+0x21a>
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d10e      	bne.n	80033d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d10b      	bne.n	80033d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d064      	beq.n	8003494 <HAL_RCC_OscConfig+0x2f0>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d160      	bne.n	8003494 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e2c8      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x24a>
 80033e0:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0b      	ldr	r2, [pc, #44]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80033e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e026      	b.n	800343c <HAL_RCC_OscConfig+0x298>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f6:	d115      	bne.n	8003424 <HAL_RCC_OscConfig+0x280>
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a05      	ldr	r2, [pc, #20]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80033fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a02      	ldr	r2, [pc, #8]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800340a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	e014      	b.n	800343c <HAL_RCC_OscConfig+0x298>
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	08009a30 	.word	0x08009a30
 800341c:	20000000 	.word	0x20000000
 8003420:	20000004 	.word	0x20000004
 8003424:	4ba0      	ldr	r3, [pc, #640]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a9f      	ldr	r2, [pc, #636]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 800342a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4b9d      	ldr	r3, [pc, #628]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a9c      	ldr	r2, [pc, #624]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 8003436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d013      	beq.n	800346c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fd fd5e 	bl	8000f04 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800344c:	f7fd fd5a 	bl	8000f04 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e284      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800345e:	4b92      	ldr	r3, [pc, #584]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x2a8>
 800346a:	e014      	b.n	8003496 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fd fd4a 	bl	8000f04 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003474:	f7fd fd46 	bl	8000f04 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e270      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003486:	4b88      	ldr	r3, [pc, #544]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x2d0>
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d060      	beq.n	8003564 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_OscConfig+0x310>
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d119      	bne.n	80034e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d116      	bne.n	80034e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b4:	4b7c      	ldr	r3, [pc, #496]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_RCC_OscConfig+0x328>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e24d      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034cc:	4b76      	ldr	r3, [pc, #472]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	4973      	ldr	r1, [pc, #460]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034e0:	e040      	b.n	8003564 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d023      	beq.n	8003532 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ea:	4b6f      	ldr	r3, [pc, #444]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a6e      	ldr	r2, [pc, #440]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 80034f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fd fd05 	bl	8000f04 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fe:	f7fd fd01 	bl	8000f04 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e22b      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003510:	4b65      	ldr	r3, [pc, #404]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351c:	4b62      	ldr	r3, [pc, #392]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	061b      	lsls	r3, r3, #24
 800352a:	495f      	ldr	r1, [pc, #380]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
 8003530:	e018      	b.n	8003564 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003532:	4b5d      	ldr	r3, [pc, #372]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a5c      	ldr	r2, [pc, #368]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 8003538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800353c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7fd fce1 	bl	8000f04 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003546:	f7fd fcdd 	bl	8000f04 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e207      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003558:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f0      	bne.n	8003546 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d03c      	beq.n	80035ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01c      	beq.n	80035b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003578:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 800357a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357e:	4a4a      	ldr	r2, [pc, #296]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fd fcbc 	bl	8000f04 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003590:	f7fd fcb8 	bl	8000f04 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e1e2      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035a2:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 80035a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ef      	beq.n	8003590 <HAL_RCC_OscConfig+0x3ec>
 80035b0:	e01b      	b.n	80035ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b2:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 80035b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b8:	4a3b      	ldr	r2, [pc, #236]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c2:	f7fd fc9f 	bl	8000f04 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ca:	f7fd fc9b 	bl	8000f04 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e1c5      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035dc:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 80035de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1ef      	bne.n	80035ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80a6 	beq.w	8003744 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f8:	2300      	movs	r3, #0
 80035fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035fc:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10d      	bne.n	8003624 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003608:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	4a26      	ldr	r2, [pc, #152]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 800360e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003612:	6593      	str	r3, [r2, #88]	; 0x58
 8003614:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003620:	2301      	movs	r3, #1
 8003622:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003624:	4b21      	ldr	r3, [pc, #132]	; (80036ac <HAL_RCC_OscConfig+0x508>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d118      	bne.n	8003662 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003630:	4b1e      	ldr	r3, [pc, #120]	; (80036ac <HAL_RCC_OscConfig+0x508>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <HAL_RCC_OscConfig+0x508>)
 8003636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363c:	f7fd fc62 	bl	8000f04 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003644:	f7fd fc5e 	bl	8000f04 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e188      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003656:	4b15      	ldr	r3, [pc, #84]	; (80036ac <HAL_RCC_OscConfig+0x508>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d108      	bne.n	800367c <HAL_RCC_OscConfig+0x4d8>
 800366a:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003670:	4a0d      	ldr	r2, [pc, #52]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800367a:	e029      	b.n	80036d0 <HAL_RCC_OscConfig+0x52c>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b05      	cmp	r3, #5
 8003682:	d115      	bne.n	80036b0 <HAL_RCC_OscConfig+0x50c>
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	4a07      	ldr	r2, [pc, #28]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 800368c:	f043 0304 	orr.w	r3, r3, #4
 8003690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003694:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	4a03      	ldr	r2, [pc, #12]	; (80036a8 <HAL_RCC_OscConfig+0x504>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036a4:	e014      	b.n	80036d0 <HAL_RCC_OscConfig+0x52c>
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40007000 	.word	0x40007000
 80036b0:	4b91      	ldr	r3, [pc, #580]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	4a90      	ldr	r2, [pc, #576]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036c0:	4b8d      	ldr	r3, [pc, #564]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	4a8c      	ldr	r2, [pc, #560]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80036c8:	f023 0304 	bic.w	r3, r3, #4
 80036cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d016      	beq.n	8003706 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fd fc14 	bl	8000f04 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e0:	f7fd fc10 	bl	8000f04 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e138      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f6:	4b80      	ldr	r3, [pc, #512]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ed      	beq.n	80036e0 <HAL_RCC_OscConfig+0x53c>
 8003704:	e015      	b.n	8003732 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fd fbfd 	bl	8000f04 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370e:	f7fd fbf9 	bl	8000f04 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f241 3288 	movw	r2, #5000	; 0x1388
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e121      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003724:	4b74      	ldr	r3, [pc, #464]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1ed      	bne.n	800370e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003732:	7ffb      	ldrb	r3, [r7, #31]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d105      	bne.n	8003744 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003738:	4b6f      	ldr	r3, [pc, #444]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	4a6e      	ldr	r2, [pc, #440]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 800373e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003742:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 810c 	beq.w	8003966 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	2b02      	cmp	r3, #2
 8003754:	f040 80d4 	bne.w	8003900 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003758:	4b67      	ldr	r3, [pc, #412]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f003 0203 	and.w	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	429a      	cmp	r2, r3
 800376a:	d130      	bne.n	80037ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	3b01      	subs	r3, #1
 8003778:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d127      	bne.n	80037ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003788:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d11f      	bne.n	80037ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003798:	2a07      	cmp	r2, #7
 800379a:	bf14      	ite	ne
 800379c:	2201      	movne	r2, #1
 800379e:	2200      	moveq	r2, #0
 80037a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d113      	bne.n	80037ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	3b01      	subs	r3, #1
 80037b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d109      	bne.n	80037ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	3b01      	subs	r3, #1
 80037c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d06e      	beq.n	80038ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b0c      	cmp	r3, #12
 80037d2:	d069      	beq.n	80038a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037d4:	4b48      	ldr	r3, [pc, #288]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d105      	bne.n	80037ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037e0:	4b45      	ldr	r3, [pc, #276]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0bb      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037f0:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a40      	ldr	r2, [pc, #256]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80037f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037fc:	f7fd fb82 	bl	8000f04 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003804:	f7fd fb7e 	bl	8000f04 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e0a8      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003816:	4b38      	ldr	r3, [pc, #224]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003822:	4b35      	ldr	r3, [pc, #212]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	4b35      	ldr	r3, [pc, #212]	; (80038fc <HAL_RCC_OscConfig+0x758>)
 8003828:	4013      	ands	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003832:	3a01      	subs	r2, #1
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	4311      	orrs	r1, r2
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800383c:	0212      	lsls	r2, r2, #8
 800383e:	4311      	orrs	r1, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003844:	0852      	lsrs	r2, r2, #1
 8003846:	3a01      	subs	r2, #1
 8003848:	0552      	lsls	r2, r2, #21
 800384a:	4311      	orrs	r1, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003850:	0852      	lsrs	r2, r2, #1
 8003852:	3a01      	subs	r2, #1
 8003854:	0652      	lsls	r2, r2, #25
 8003856:	4311      	orrs	r1, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800385c:	0912      	lsrs	r2, r2, #4
 800385e:	0452      	lsls	r2, r2, #17
 8003860:	430a      	orrs	r2, r1
 8003862:	4925      	ldr	r1, [pc, #148]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 8003864:	4313      	orrs	r3, r2
 8003866:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003868:	4b23      	ldr	r3, [pc, #140]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a22      	ldr	r2, [pc, #136]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 800386e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003872:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003874:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 800387a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003880:	f7fd fb40 	bl	8000f04 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003888:	f7fd fb3c 	bl	8000f04 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e066      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389a:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038a6:	e05e      	b.n	8003966 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e05d      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d156      	bne.n	8003966 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a0e      	ldr	r2, [pc, #56]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80038be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4a0b      	ldr	r2, [pc, #44]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80038ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038d0:	f7fd fb18 	bl	8000f04 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d8:	f7fd fb14 	bl	8000f04 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e03e      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ea:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <HAL_RCC_OscConfig+0x754>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x734>
 80038f6:	e036      	b.n	8003966 <HAL_RCC_OscConfig+0x7c2>
 80038f8:	40021000 	.word	0x40021000
 80038fc:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2b0c      	cmp	r3, #12
 8003904:	d02d      	beq.n	8003962 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003906:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <HAL_RCC_OscConfig+0x7cc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a19      	ldr	r2, [pc, #100]	; (8003970 <HAL_RCC_OscConfig+0x7cc>)
 800390c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003910:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003912:	4b17      	ldr	r3, [pc, #92]	; (8003970 <HAL_RCC_OscConfig+0x7cc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d105      	bne.n	800392a <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800391e:	4b14      	ldr	r3, [pc, #80]	; (8003970 <HAL_RCC_OscConfig+0x7cc>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	4a13      	ldr	r2, [pc, #76]	; (8003970 <HAL_RCC_OscConfig+0x7cc>)
 8003924:	f023 0303 	bic.w	r3, r3, #3
 8003928:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_RCC_OscConfig+0x7cc>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	4a10      	ldr	r2, [pc, #64]	; (8003970 <HAL_RCC_OscConfig+0x7cc>)
 8003930:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003938:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393a:	f7fd fae3 	bl	8000f04 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003942:	f7fd fadf 	bl	8000f04 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e009      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_RCC_OscConfig+0x7cc>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f0      	bne.n	8003942 <HAL_RCC_OscConfig+0x79e>
 8003960:	e001      	b.n	8003966 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40021000 	.word	0x40021000

08003974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0c8      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003988:	4b66      	ldr	r3, [pc, #408]	; (8003b24 <HAL_RCC_ClockConfig+0x1b0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d910      	bls.n	80039b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b63      	ldr	r3, [pc, #396]	; (8003b24 <HAL_RCC_ClockConfig+0x1b0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 0207 	bic.w	r2, r3, #7
 800399e:	4961      	ldr	r1, [pc, #388]	; (8003b24 <HAL_RCC_ClockConfig+0x1b0>)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b5f      	ldr	r3, [pc, #380]	; (8003b24 <HAL_RCC_ClockConfig+0x1b0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0b0      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d04c      	beq.n	8003a5e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d107      	bne.n	80039dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039cc:	4b56      	ldr	r3, [pc, #344]	; (8003b28 <HAL_RCC_ClockConfig+0x1b4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d121      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e09e      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039e4:	4b50      	ldr	r3, [pc, #320]	; (8003b28 <HAL_RCC_ClockConfig+0x1b4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d115      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e092      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039fc:	4b4a      	ldr	r3, [pc, #296]	; (8003b28 <HAL_RCC_ClockConfig+0x1b4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e086      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a0c:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <HAL_RCC_ClockConfig+0x1b4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e07e      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a1c:	4b42      	ldr	r3, [pc, #264]	; (8003b28 <HAL_RCC_ClockConfig+0x1b4>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f023 0203 	bic.w	r2, r3, #3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	493f      	ldr	r1, [pc, #252]	; (8003b28 <HAL_RCC_ClockConfig+0x1b4>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2e:	f7fd fa69 	bl	8000f04 <HAL_GetTick>
 8003a32:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a36:	f7fd fa65 	bl	8000f04 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e066      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4c:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <HAL_RCC_ClockConfig+0x1b4>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 020c 	and.w	r2, r3, #12
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d1eb      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a6a:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <HAL_RCC_ClockConfig+0x1b4>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	492c      	ldr	r1, [pc, #176]	; (8003b28 <HAL_RCC_ClockConfig+0x1b4>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7c:	4b29      	ldr	r3, [pc, #164]	; (8003b24 <HAL_RCC_ClockConfig+0x1b0>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d210      	bcs.n	8003aac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <HAL_RCC_ClockConfig+0x1b0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 0207 	bic.w	r2, r3, #7
 8003a92:	4924      	ldr	r1, [pc, #144]	; (8003b24 <HAL_RCC_ClockConfig+0x1b0>)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b22      	ldr	r3, [pc, #136]	; (8003b24 <HAL_RCC_ClockConfig+0x1b0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e036      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <HAL_RCC_ClockConfig+0x1b4>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4918      	ldr	r1, [pc, #96]	; (8003b28 <HAL_RCC_ClockConfig+0x1b4>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ad6:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <HAL_RCC_ClockConfig+0x1b4>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4910      	ldr	r1, [pc, #64]	; (8003b28 <HAL_RCC_ClockConfig+0x1b4>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aea:	f000 f825 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8003aee:	4602      	mov	r2, r0
 8003af0:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <HAL_RCC_ClockConfig+0x1b4>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	490c      	ldr	r1, [pc, #48]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	5ccb      	ldrb	r3, [r1, r3]
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	fa22 f303 	lsr.w	r3, r2, r3
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fd f9a8 	bl	8000e64 <HAL_InitTick>
 8003b14:	4603      	mov	r3, r0
 8003b16:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b18:	7afb      	ldrb	r3, [r7, #11]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40022000 	.word	0x40022000
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	08009a30 	.word	0x08009a30
 8003b30:	20000000 	.word	0x20000000
 8003b34:	20000004 	.word	0x20000004

08003b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b46:	4b3e      	ldr	r3, [pc, #248]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b50:	4b3b      	ldr	r3, [pc, #236]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x34>
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d121      	bne.n	8003baa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d11e      	bne.n	8003baa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b6c:	4b34      	ldr	r3, [pc, #208]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b78:	4b31      	ldr	r3, [pc, #196]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	e005      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b88:	4b2d      	ldr	r3, [pc, #180]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b94:	4a2b      	ldr	r2, [pc, #172]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10d      	bne.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d102      	bne.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bb0:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	e004      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bbc:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x114>)
 8003bbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b0c      	cmp	r3, #12
 8003bc4:	d134      	bne.n	8003c30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bc6:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d003      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0xa6>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d003      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0xac>
 8003bdc:	e005      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bde:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x110>)
 8003be0:	617b      	str	r3, [r7, #20]
      break;
 8003be2:	e005      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x114>)
 8003be6:	617b      	str	r3, [r7, #20]
      break;
 8003be8:	e002      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	617b      	str	r3, [r7, #20]
      break;
 8003bee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bf0:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	fb03 f202 	mul.w	r2, r3, r2
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	0e5b      	lsrs	r3, r3, #25
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	3301      	adds	r3, #1
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c30:	69bb      	ldr	r3, [r7, #24]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3724      	adds	r7, #36	; 0x24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000
 8003c44:	08009a40 	.word	0x08009a40
 8003c48:	00f42400 	.word	0x00f42400
 8003c4c:	007a1200 	.word	0x007a1200

08003c50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c54:	4b03      	ldr	r3, [pc, #12]	; (8003c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	20000000 	.word	0x20000000

08003c68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c70:	2300      	movs	r3, #0
 8003c72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c74:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c80:	f7fe fd60 	bl	8002744 <HAL_PWREx_GetVoltageRange>
 8003c84:	6178      	str	r0, [r7, #20]
 8003c86:	e014      	b.n	8003cb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	4a24      	ldr	r2, [pc, #144]	; (8003d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6593      	str	r3, [r2, #88]	; 0x58
 8003c94:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ca0:	f7fe fd50 	bl	8002744 <HAL_PWREx_GetVoltageRange>
 8003ca4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ca6:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb8:	d10b      	bne.n	8003cd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b80      	cmp	r3, #128	; 0x80
 8003cbe:	d919      	bls.n	8003cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2ba0      	cmp	r3, #160	; 0xa0
 8003cc4:	d902      	bls.n	8003ccc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	e013      	b.n	8003cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ccc:	2301      	movs	r3, #1
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	e010      	b.n	8003cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b80      	cmp	r3, #128	; 0x80
 8003cd6:	d902      	bls.n	8003cde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cd8:	2303      	movs	r3, #3
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	e00a      	b.n	8003cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d102      	bne.n	8003cea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	e004      	b.n	8003cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b70      	cmp	r3, #112	; 0x70
 8003cee:	d101      	bne.n	8003cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f023 0207 	bic.w	r2, r3, #7
 8003cfc:	4909      	ldr	r1, [pc, #36]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d001      	beq.n	8003d16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40022000 	.word	0x40022000

08003d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d30:	2300      	movs	r3, #0
 8003d32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d34:	2300      	movs	r3, #0
 8003d36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d041      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d4c:	d02a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d52:	d824      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d58:	d008      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d5e:	d81e      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d68:	d010      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d6a:	e018      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d6c:	4b86      	ldr	r3, [pc, #536]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a85      	ldr	r2, [pc, #532]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d78:	e015      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 facb 	bl	800431c <RCCEx_PLLSAI1_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d8a:	e00c      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3320      	adds	r3, #32
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fbb6 	bl	8004504 <RCCEx_PLLSAI2_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d9c:	e003      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	74fb      	strb	r3, [r7, #19]
      break;
 8003da2:	e000      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da6:	7cfb      	ldrb	r3, [r7, #19]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dac:	4b76      	ldr	r3, [pc, #472]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dba:	4973      	ldr	r1, [pc, #460]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dc2:	e001      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc4:	7cfb      	ldrb	r3, [r7, #19]
 8003dc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d041      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ddc:	d02a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003dde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003de2:	d824      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003de4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003de8:	d008      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dee:	d81e      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003df8:	d010      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dfa:	e018      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dfc:	4b62      	ldr	r3, [pc, #392]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4a61      	ldr	r2, [pc, #388]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e08:	e015      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fa83 	bl	800431c <RCCEx_PLLSAI1_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e1a:	e00c      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3320      	adds	r3, #32
 8003e20:	2100      	movs	r1, #0
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fb6e 	bl	8004504 <RCCEx_PLLSAI2_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e2c:	e003      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	74fb      	strb	r3, [r7, #19]
      break;
 8003e32:	e000      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e36:	7cfb      	ldrb	r3, [r7, #19]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e3c:	4b52      	ldr	r3, [pc, #328]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e4a:	494f      	ldr	r1, [pc, #316]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e52:	e001      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80a0 	beq.w	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e66:	2300      	movs	r3, #0
 8003e68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e6a:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00d      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e80:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e84:	4a40      	ldr	r2, [pc, #256]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e8c:	4b3e      	ldr	r3, [pc, #248]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e9c:	4b3b      	ldr	r3, [pc, #236]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a3a      	ldr	r2, [pc, #232]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ea8:	f7fd f82c 	bl	8000f04 <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003eae:	e009      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb0:	f7fd f828 	bl	8000f04 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d902      	bls.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	74fb      	strb	r3, [r7, #19]
        break;
 8003ec2:	e005      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ec4:	4b31      	ldr	r3, [pc, #196]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0ef      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d15c      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ed6:	4b2c      	ldr	r3, [pc, #176]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01f      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d019      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ef4:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f00:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f06:	4a20      	ldr	r2, [pc, #128]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f10:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f20:	4a19      	ldr	r2, [pc, #100]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d016      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f32:	f7fc ffe7 	bl	8000f04 <HAL_GetTick>
 8003f36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f38:	e00b      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3a:	f7fc ffe3 	bl	8000f04 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d902      	bls.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	74fb      	strb	r3, [r7, #19]
            break;
 8003f50:	e006      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f52:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ec      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f66:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f76:	4904      	ldr	r1, [pc, #16]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f7e:	e009      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f80:	7cfb      	ldrb	r3, [r7, #19]
 8003f82:	74bb      	strb	r3, [r7, #18]
 8003f84:	e006      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f94:	7c7b      	ldrb	r3, [r7, #17]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d105      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9a:	4b9e      	ldr	r3, [pc, #632]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9e:	4a9d      	ldr	r2, [pc, #628]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fb2:	4b98      	ldr	r3, [pc, #608]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	f023 0203 	bic.w	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	4994      	ldr	r1, [pc, #592]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fd4:	4b8f      	ldr	r3, [pc, #572]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f023 020c 	bic.w	r2, r3, #12
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe2:	498c      	ldr	r1, [pc, #560]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ff6:	4b87      	ldr	r3, [pc, #540]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	4983      	ldr	r1, [pc, #524]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004018:	4b7e      	ldr	r3, [pc, #504]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	497b      	ldr	r1, [pc, #492]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800403a:	4b76      	ldr	r3, [pc, #472]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004048:	4972      	ldr	r1, [pc, #456]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800405c:	4b6d      	ldr	r3, [pc, #436]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	496a      	ldr	r1, [pc, #424]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800407e:	4b65      	ldr	r3, [pc, #404]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004084:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	4961      	ldr	r1, [pc, #388]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040a0:	4b5c      	ldr	r3, [pc, #368]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ae:	4959      	ldr	r1, [pc, #356]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040c2:	4b54      	ldr	r3, [pc, #336]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d0:	4950      	ldr	r1, [pc, #320]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040e4:	4b4b      	ldr	r3, [pc, #300]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	4948      	ldr	r1, [pc, #288]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004106:	4b43      	ldr	r3, [pc, #268]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	493f      	ldr	r1, [pc, #252]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d028      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004128:	4b3a      	ldr	r3, [pc, #232]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004136:	4937      	ldr	r1, [pc, #220]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004146:	d106      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004148:	4b32      	ldr	r3, [pc, #200]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4a31      	ldr	r2, [pc, #196]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004152:	60d3      	str	r3, [r2, #12]
 8004154:	e011      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800415a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800415e:	d10c      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	2101      	movs	r1, #1
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f8d8 	bl	800431c <RCCEx_PLLSAI1_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004176:	7cfb      	ldrb	r3, [r7, #19]
 8004178:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d028      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004186:	4b23      	ldr	r3, [pc, #140]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004194:	491f      	ldr	r1, [pc, #124]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a4:	d106      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a6:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	4a1a      	ldr	r2, [pc, #104]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041b0:	60d3      	str	r3, [r2, #12]
 80041b2:	e011      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3304      	adds	r3, #4
 80041c2:	2101      	movs	r1, #1
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 f8a9 	bl	800431c <RCCEx_PLLSAI1_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ce:	7cfb      	ldrb	r3, [r7, #19]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80041d4:	7cfb      	ldrb	r3, [r7, #19]
 80041d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d02b      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f2:	4908      	ldr	r1, [pc, #32]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004202:	d109      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004204:	4b03      	ldr	r3, [pc, #12]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4a02      	ldr	r2, [pc, #8]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800420e:	60d3      	str	r3, [r2, #12]
 8004210:	e014      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004212:	bf00      	nop
 8004214:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800421c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004220:	d10c      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3304      	adds	r3, #4
 8004226:	2101      	movs	r1, #1
 8004228:	4618      	mov	r0, r3
 800422a:	f000 f877 	bl	800431c <RCCEx_PLLSAI1_Config>
 800422e:	4603      	mov	r3, r0
 8004230:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004232:	7cfb      	ldrb	r3, [r7, #19]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004238:	7cfb      	ldrb	r3, [r7, #19]
 800423a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d02f      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004248:	4b2b      	ldr	r3, [pc, #172]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004256:	4928      	ldr	r1, [pc, #160]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004266:	d10d      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	2102      	movs	r1, #2
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f854 	bl	800431c <RCCEx_PLLSAI1_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004278:	7cfb      	ldrb	r3, [r7, #19]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d014      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800427e:	7cfb      	ldrb	r3, [r7, #19]
 8004280:	74bb      	strb	r3, [r7, #18]
 8004282:	e011      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800428c:	d10c      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3320      	adds	r3, #32
 8004292:	2102      	movs	r1, #2
 8004294:	4618      	mov	r0, r3
 8004296:	f000 f935 	bl	8004504 <RCCEx_PLLSAI2_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800429e:	7cfb      	ldrb	r3, [r7, #19]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042b4:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c2:	490d      	ldr	r1, [pc, #52]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e6:	4904      	ldr	r1, [pc, #16]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40021000 	.word	0x40021000

080042fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a04      	ldr	r2, [pc, #16]	; (8004318 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004306:	f043 0304 	orr.w	r3, r3, #4
 800430a:	6013      	str	r3, [r2, #0]
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40021000 	.word	0x40021000

0800431c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800432a:	4b75      	ldr	r3, [pc, #468]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d018      	beq.n	8004368 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004336:	4b72      	ldr	r3, [pc, #456]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0203 	and.w	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d10d      	bne.n	8004362 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
       ||
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800434e:	4b6c      	ldr	r3, [pc, #432]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
       ||
 800435e:	429a      	cmp	r2, r3
 8004360:	d047      	beq.n	80043f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]
 8004366:	e044      	b.n	80043f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b03      	cmp	r3, #3
 800436e:	d018      	beq.n	80043a2 <RCCEx_PLLSAI1_Config+0x86>
 8004370:	2b03      	cmp	r3, #3
 8004372:	d825      	bhi.n	80043c0 <RCCEx_PLLSAI1_Config+0xa4>
 8004374:	2b01      	cmp	r3, #1
 8004376:	d002      	beq.n	800437e <RCCEx_PLLSAI1_Config+0x62>
 8004378:	2b02      	cmp	r3, #2
 800437a:	d009      	beq.n	8004390 <RCCEx_PLLSAI1_Config+0x74>
 800437c:	e020      	b.n	80043c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800437e:	4b60      	ldr	r3, [pc, #384]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d11d      	bne.n	80043c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800438e:	e01a      	b.n	80043c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004390:	4b5b      	ldr	r3, [pc, #364]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004398:	2b00      	cmp	r3, #0
 800439a:	d116      	bne.n	80043ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a0:	e013      	b.n	80043ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043a2:	4b57      	ldr	r3, [pc, #348]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10f      	bne.n	80043ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ae:	4b54      	ldr	r3, [pc, #336]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043be:	e006      	b.n	80043ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
      break;
 80043c4:	e004      	b.n	80043d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043c6:	bf00      	nop
 80043c8:	e002      	b.n	80043d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10d      	bne.n	80043f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043d6:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6819      	ldr	r1, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	430b      	orrs	r3, r1
 80043ec:	4944      	ldr	r1, [pc, #272]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d17d      	bne.n	80044f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043f8:	4b41      	ldr	r3, [pc, #260]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a40      	ldr	r2, [pc, #256]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004404:	f7fc fd7e 	bl	8000f04 <HAL_GetTick>
 8004408:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800440a:	e009      	b.n	8004420 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800440c:	f7fc fd7a 	bl	8000f04 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d902      	bls.n	8004420 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	73fb      	strb	r3, [r7, #15]
        break;
 800441e:	e005      	b.n	800442c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004420:	4b37      	ldr	r3, [pc, #220]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1ef      	bne.n	800440c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d160      	bne.n	80044f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d111      	bne.n	800445c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004438:	4b31      	ldr	r3, [pc, #196]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6892      	ldr	r2, [r2, #8]
 8004448:	0211      	lsls	r1, r2, #8
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	68d2      	ldr	r2, [r2, #12]
 800444e:	0912      	lsrs	r2, r2, #4
 8004450:	0452      	lsls	r2, r2, #17
 8004452:	430a      	orrs	r2, r1
 8004454:	492a      	ldr	r1, [pc, #168]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004456:	4313      	orrs	r3, r2
 8004458:	610b      	str	r3, [r1, #16]
 800445a:	e027      	b.n	80044ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d112      	bne.n	8004488 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004462:	4b27      	ldr	r3, [pc, #156]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800446a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6892      	ldr	r2, [r2, #8]
 8004472:	0211      	lsls	r1, r2, #8
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6912      	ldr	r2, [r2, #16]
 8004478:	0852      	lsrs	r2, r2, #1
 800447a:	3a01      	subs	r2, #1
 800447c:	0552      	lsls	r2, r2, #21
 800447e:	430a      	orrs	r2, r1
 8004480:	491f      	ldr	r1, [pc, #124]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004482:	4313      	orrs	r3, r2
 8004484:	610b      	str	r3, [r1, #16]
 8004486:	e011      	b.n	80044ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004488:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004490:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6892      	ldr	r2, [r2, #8]
 8004498:	0211      	lsls	r1, r2, #8
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6952      	ldr	r2, [r2, #20]
 800449e:	0852      	lsrs	r2, r2, #1
 80044a0:	3a01      	subs	r2, #1
 80044a2:	0652      	lsls	r2, r2, #25
 80044a4:	430a      	orrs	r2, r1
 80044a6:	4916      	ldr	r1, [pc, #88]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044ac:	4b14      	ldr	r3, [pc, #80]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a13      	ldr	r2, [pc, #76]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fc fd24 	bl	8000f04 <HAL_GetTick>
 80044bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044be:	e009      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044c0:	f7fc fd20 	bl	8000f04 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d902      	bls.n	80044d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	73fb      	strb	r3, [r7, #15]
          break;
 80044d2:	e005      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044d4:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0ef      	beq.n	80044c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	4904      	ldr	r1, [pc, #16]	; (8004500 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40021000 	.word	0x40021000

08004504 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004512:	4b6a      	ldr	r3, [pc, #424]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d018      	beq.n	8004550 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800451e:	4b67      	ldr	r3, [pc, #412]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0203 	and.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d10d      	bne.n	800454a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
       ||
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004536:	4b61      	ldr	r3, [pc, #388]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
       ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d047      	beq.n	80045da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	73fb      	strb	r3, [r7, #15]
 800454e:	e044      	b.n	80045da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d018      	beq.n	800458a <RCCEx_PLLSAI2_Config+0x86>
 8004558:	2b03      	cmp	r3, #3
 800455a:	d825      	bhi.n	80045a8 <RCCEx_PLLSAI2_Config+0xa4>
 800455c:	2b01      	cmp	r3, #1
 800455e:	d002      	beq.n	8004566 <RCCEx_PLLSAI2_Config+0x62>
 8004560:	2b02      	cmp	r3, #2
 8004562:	d009      	beq.n	8004578 <RCCEx_PLLSAI2_Config+0x74>
 8004564:	e020      	b.n	80045a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004566:	4b55      	ldr	r3, [pc, #340]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d11d      	bne.n	80045ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004576:	e01a      	b.n	80045ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004578:	4b50      	ldr	r3, [pc, #320]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004580:	2b00      	cmp	r3, #0
 8004582:	d116      	bne.n	80045b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004588:	e013      	b.n	80045b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800458a:	4b4c      	ldr	r3, [pc, #304]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10f      	bne.n	80045b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004596:	4b49      	ldr	r3, [pc, #292]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045a6:	e006      	b.n	80045b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
      break;
 80045ac:	e004      	b.n	80045b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045ae:	bf00      	nop
 80045b0:	e002      	b.n	80045b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045b2:	bf00      	nop
 80045b4:	e000      	b.n	80045b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10d      	bne.n	80045da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045be:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6819      	ldr	r1, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	430b      	orrs	r3, r1
 80045d4:	4939      	ldr	r1, [pc, #228]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d167      	bne.n	80046b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045e0:	4b36      	ldr	r3, [pc, #216]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a35      	ldr	r2, [pc, #212]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ec:	f7fc fc8a 	bl	8000f04 <HAL_GetTick>
 80045f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045f2:	e009      	b.n	8004608 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045f4:	f7fc fc86 	bl	8000f04 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d902      	bls.n	8004608 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	73fb      	strb	r3, [r7, #15]
        break;
 8004606:	e005      	b.n	8004614 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004608:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1ef      	bne.n	80045f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d14a      	bne.n	80046b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d111      	bne.n	8004644 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004620:	4b26      	ldr	r3, [pc, #152]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6892      	ldr	r2, [r2, #8]
 8004630:	0211      	lsls	r1, r2, #8
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68d2      	ldr	r2, [r2, #12]
 8004636:	0912      	lsrs	r2, r2, #4
 8004638:	0452      	lsls	r2, r2, #17
 800463a:	430a      	orrs	r2, r1
 800463c:	491f      	ldr	r1, [pc, #124]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800463e:	4313      	orrs	r3, r2
 8004640:	614b      	str	r3, [r1, #20]
 8004642:	e011      	b.n	8004668 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004644:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800464c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6892      	ldr	r2, [r2, #8]
 8004654:	0211      	lsls	r1, r2, #8
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6912      	ldr	r2, [r2, #16]
 800465a:	0852      	lsrs	r2, r2, #1
 800465c:	3a01      	subs	r2, #1
 800465e:	0652      	lsls	r2, r2, #25
 8004660:	430a      	orrs	r2, r1
 8004662:	4916      	ldr	r1, [pc, #88]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004664:	4313      	orrs	r3, r2
 8004666:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004668:	4b14      	ldr	r3, [pc, #80]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a13      	ldr	r2, [pc, #76]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800466e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004672:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004674:	f7fc fc46 	bl	8000f04 <HAL_GetTick>
 8004678:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800467a:	e009      	b.n	8004690 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800467c:	f7fc fc42 	bl	8000f04 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d902      	bls.n	8004690 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	73fb      	strb	r3, [r7, #15]
          break;
 800468e:	e005      	b.n	800469c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004690:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ef      	beq.n	800467c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	4904      	ldr	r1, [pc, #16]	; (80046bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000

080046c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046c0:	b084      	sub	sp, #16
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	f107 001c 	add.w	r0, r7, #28
 80046ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f001 fa40 	bl	8005b64 <USB_CoreReset>
 80046e4:	4603      	mov	r3, r0
 80046e6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80046e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	639a      	str	r2, [r3, #56]	; 0x38
 80046fa:	e005      	b.n	8004708 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004708:	7bfb      	ldrb	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004714:	b004      	add	sp, #16
 8004716:	4770      	bx	lr

08004718 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	4613      	mov	r3, r2
 8004724:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	2b02      	cmp	r3, #2
 800472a:	d165      	bne.n	80047f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4a3e      	ldr	r2, [pc, #248]	; (8004828 <USB_SetTurnaroundTime+0x110>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d906      	bls.n	8004742 <USB_SetTurnaroundTime+0x2a>
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4a3d      	ldr	r2, [pc, #244]	; (800482c <USB_SetTurnaroundTime+0x114>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d202      	bcs.n	8004742 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800473c:	230f      	movs	r3, #15
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	e05c      	b.n	80047fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	4a39      	ldr	r2, [pc, #228]	; (800482c <USB_SetTurnaroundTime+0x114>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d306      	bcc.n	8004758 <USB_SetTurnaroundTime+0x40>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4a38      	ldr	r2, [pc, #224]	; (8004830 <USB_SetTurnaroundTime+0x118>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d202      	bcs.n	8004758 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004752:	230e      	movs	r3, #14
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	e051      	b.n	80047fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4a35      	ldr	r2, [pc, #212]	; (8004830 <USB_SetTurnaroundTime+0x118>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d306      	bcc.n	800476e <USB_SetTurnaroundTime+0x56>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4a34      	ldr	r2, [pc, #208]	; (8004834 <USB_SetTurnaroundTime+0x11c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d202      	bcs.n	800476e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004768:	230d      	movs	r3, #13
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	e046      	b.n	80047fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4a30      	ldr	r2, [pc, #192]	; (8004834 <USB_SetTurnaroundTime+0x11c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d306      	bcc.n	8004784 <USB_SetTurnaroundTime+0x6c>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	4a2f      	ldr	r2, [pc, #188]	; (8004838 <USB_SetTurnaroundTime+0x120>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d802      	bhi.n	8004784 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800477e:	230c      	movs	r3, #12
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	e03b      	b.n	80047fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4a2c      	ldr	r2, [pc, #176]	; (8004838 <USB_SetTurnaroundTime+0x120>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d906      	bls.n	800479a <USB_SetTurnaroundTime+0x82>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4a2b      	ldr	r2, [pc, #172]	; (800483c <USB_SetTurnaroundTime+0x124>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d802      	bhi.n	800479a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004794:	230b      	movs	r3, #11
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e030      	b.n	80047fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4a27      	ldr	r2, [pc, #156]	; (800483c <USB_SetTurnaroundTime+0x124>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d906      	bls.n	80047b0 <USB_SetTurnaroundTime+0x98>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4a26      	ldr	r2, [pc, #152]	; (8004840 <USB_SetTurnaroundTime+0x128>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d802      	bhi.n	80047b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80047aa:	230a      	movs	r3, #10
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e025      	b.n	80047fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4a23      	ldr	r2, [pc, #140]	; (8004840 <USB_SetTurnaroundTime+0x128>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d906      	bls.n	80047c6 <USB_SetTurnaroundTime+0xae>
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4a22      	ldr	r2, [pc, #136]	; (8004844 <USB_SetTurnaroundTime+0x12c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d202      	bcs.n	80047c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80047c0:	2309      	movs	r3, #9
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	e01a      	b.n	80047fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <USB_SetTurnaroundTime+0x12c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d306      	bcc.n	80047dc <USB_SetTurnaroundTime+0xc4>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	4a1d      	ldr	r2, [pc, #116]	; (8004848 <USB_SetTurnaroundTime+0x130>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d802      	bhi.n	80047dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80047d6:	2308      	movs	r3, #8
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	e00f      	b.n	80047fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4a1a      	ldr	r2, [pc, #104]	; (8004848 <USB_SetTurnaroundTime+0x130>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d906      	bls.n	80047f2 <USB_SetTurnaroundTime+0xda>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4a19      	ldr	r2, [pc, #100]	; (800484c <USB_SetTurnaroundTime+0x134>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d202      	bcs.n	80047f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047ec:	2307      	movs	r3, #7
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	e004      	b.n	80047fc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047f2:	2306      	movs	r3, #6
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e001      	b.n	80047fc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047f8:	2309      	movs	r3, #9
 80047fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	029b      	lsls	r3, r3, #10
 8004810:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004814:	431a      	orrs	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	00d8acbf 	.word	0x00d8acbf
 800482c:	00e4e1c0 	.word	0x00e4e1c0
 8004830:	00f42400 	.word	0x00f42400
 8004834:	01067380 	.word	0x01067380
 8004838:	011a499f 	.word	0x011a499f
 800483c:	01312cff 	.word	0x01312cff
 8004840:	014ca43f 	.word	0x014ca43f
 8004844:	016e3600 	.word	0x016e3600
 8004848:	01a6ab1f 	.word	0x01a6ab1f
 800484c:	01e84800 	.word	0x01e84800

08004850 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f043 0201 	orr.w	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f023 0201 	bic.w	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d115      	bne.n	80048e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048c2:	2001      	movs	r0, #1
 80048c4:	f7fc fb2a 	bl	8000f1c <HAL_Delay>
      ms++;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3301      	adds	r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f001 f8cf 	bl	8005a72 <USB_GetMode>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d01e      	beq.n	8004918 <USB_SetCurrentMode+0x84>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b31      	cmp	r3, #49	; 0x31
 80048de:	d9f0      	bls.n	80048c2 <USB_SetCurrentMode+0x2e>
 80048e0:	e01a      	b.n	8004918 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d115      	bne.n	8004914 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048f4:	2001      	movs	r0, #1
 80048f6:	f7fc fb11 	bl	8000f1c <HAL_Delay>
      ms++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3301      	adds	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f001 f8b6 	bl	8005a72 <USB_GetMode>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <USB_SetCurrentMode+0x84>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b31      	cmp	r3, #49	; 0x31
 8004910:	d9f0      	bls.n	80048f4 <USB_SetCurrentMode+0x60>
 8004912:	e001      	b.n	8004918 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e005      	b.n	8004924 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b32      	cmp	r3, #50	; 0x32
 800491c:	d101      	bne.n	8004922 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800492c:	b084      	sub	sp, #16
 800492e:	b580      	push	{r7, lr}
 8004930:	b086      	sub	sp, #24
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800493a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004946:	2300      	movs	r3, #0
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	e009      	b.n	8004960 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	3340      	adds	r3, #64	; 0x40
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	2200      	movs	r2, #0
 8004958:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	3301      	adds	r3, #1
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2b0e      	cmp	r3, #14
 8004964:	d9f2      	bls.n	800494c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d11c      	bne.n	80049a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800497a:	f043 0302 	orr.w	r3, r3, #2
 800497e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	e005      	b.n	80049b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049b8:	461a      	mov	r2, r3
 80049ba:	2300      	movs	r3, #0
 80049bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c4:	4619      	mov	r1, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049cc:	461a      	mov	r2, r3
 80049ce:	680b      	ldr	r3, [r1, #0]
 80049d0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049d2:	2103      	movs	r1, #3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f955 	bl	8004c84 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049da:	2110      	movs	r1, #16
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f8f1 	bl	8004bc4 <USB_FlushTxFifo>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f91b 	bl	8004c28 <USB_FlushRxFifo>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a02:	461a      	mov	r2, r3
 8004a04:	2300      	movs	r3, #0
 8004a06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2300      	movs	r3, #0
 8004a12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	e043      	b.n	8004aae <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a3c:	d118      	bne.n	8004a70 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	461a      	mov	r2, r3
 8004a52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	e013      	b.n	8004a82 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a66:	461a      	mov	r2, r3
 8004a68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e008      	b.n	8004a82 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	2300      	movs	r3, #0
 8004a80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8e:	461a      	mov	r2, r3
 8004a90:	2300      	movs	r3, #0
 8004a92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004aa6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d3b7      	bcc.n	8004a26 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	e043      	b.n	8004b44 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ad2:	d118      	bne.n	8004b06 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	e013      	b.n	8004b18 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	461a      	mov	r2, r3
 8004afe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	e008      	b.n	8004b18 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b12:	461a      	mov	r2, r3
 8004b14:	2300      	movs	r3, #0
 8004b16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b24:	461a      	mov	r2, r3
 8004b26:	2300      	movs	r3, #0
 8004b28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b36:	461a      	mov	r2, r3
 8004b38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	3301      	adds	r3, #1
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d3b7      	bcc.n	8004abc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f043 0210 	orr.w	r2, r3, #16
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <USB_DevInit+0x294>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	f043 0208 	orr.w	r2, r3, #8
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d107      	bne.n	8004bae <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ba6:	f043 0304 	orr.w	r3, r3, #4
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bba:	b004      	add	sp, #16
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	803c3800 	.word	0x803c3800

08004bc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	4a12      	ldr	r2, [pc, #72]	; (8004c24 <USB_FlushTxFifo+0x60>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d901      	bls.n	8004be2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e01a      	b.n	8004c18 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	daf3      	bge.n	8004bd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	019b      	lsls	r3, r3, #6
 8004bf2:	f043 0220 	orr.w	r2, r3, #32
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <USB_FlushTxFifo+0x60>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e006      	b.n	8004c18 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d0f1      	beq.n	8004bfa <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	00030d40 	.word	0x00030d40

08004c28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3301      	adds	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	4a11      	ldr	r2, [pc, #68]	; (8004c80 <USB_FlushRxFifo+0x58>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d901      	bls.n	8004c44 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e017      	b.n	8004c74 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	daf3      	bge.n	8004c34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2210      	movs	r2, #16
 8004c54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	4a08      	ldr	r2, [pc, #32]	; (8004c80 <USB_FlushRxFifo+0x58>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d901      	bls.n	8004c66 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e006      	b.n	8004c74 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2b10      	cmp	r3, #16
 8004c70:	d0f1      	beq.n	8004c56 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	00030d40 	.word	0x00030d40

08004c84 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	68f9      	ldr	r1, [r7, #12]
 8004ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b087      	sub	sp, #28
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0306 	and.w	r3, r3, #6
 8004cce:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d002      	beq.n	8004cdc <USB_GetDevSpeed+0x26>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b06      	cmp	r3, #6
 8004cda:	d102      	bne.n	8004ce2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004cdc:	2302      	movs	r3, #2
 8004cde:	75fb      	strb	r3, [r7, #23]
 8004ce0:	e001      	b.n	8004ce6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004ce2:	230f      	movs	r3, #15
 8004ce4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	785b      	ldrb	r3, [r3, #1]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d13a      	bne.n	8004d86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	2101      	movs	r1, #1
 8004d22:	fa01 f303 	lsl.w	r3, r1, r3
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	68f9      	ldr	r1, [r7, #12]
 8004d2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d155      	bne.n	8004df4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	78db      	ldrb	r3, [r3, #3]
 8004d62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	059b      	lsls	r3, r3, #22
 8004d6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	0151      	lsls	r1, r2, #5
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	440a      	add	r2, r1
 8004d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	e036      	b.n	8004df4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8c:	69da      	ldr	r2, [r3, #28]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	2101      	movs	r1, #1
 8004d98:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9c:	041b      	lsls	r3, r3, #16
 8004d9e:	68f9      	ldr	r1, [r7, #12]
 8004da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da4:	4313      	orrs	r3, r2
 8004da6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d11a      	bne.n	8004df4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	78db      	ldrb	r3, [r3, #3]
 8004dd8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d161      	bne.n	8004ee4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e36:	d11f      	bne.n	8004e78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	0151      	lsls	r1, r2, #5
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	f003 030f 	and.w	r3, r3, #15
 8004e88:	2101      	movs	r1, #1
 8004e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	43db      	mvns	r3, r3
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e98:	4013      	ands	r3, r2
 8004e9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	2101      	movs	r1, #1
 8004eae:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	68f9      	ldr	r1, [r7, #12]
 8004eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	0159      	lsls	r1, r3, #5
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	440b      	add	r3, r1
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eda:	4619      	mov	r1, r3
 8004edc:	4b35      	ldr	r3, [pc, #212]	; (8004fb4 <USB_DeactivateEndpoint+0x1b0>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]
 8004ee2:	e060      	b.n	8004fa6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004efa:	d11f      	bne.n	8004f3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f52:	041b      	lsls	r3, r3, #16
 8004f54:	43db      	mvns	r3, r3
 8004f56:	68f9      	ldr	r1, [r7, #12]
 8004f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	2101      	movs	r1, #1
 8004f72:	fa01 f303 	lsl.w	r3, r1, r3
 8004f76:	041b      	lsls	r3, r3, #16
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	68f9      	ldr	r1, [r7, #12]
 8004f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f80:	4013      	ands	r3, r2
 8004f82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	0159      	lsls	r1, r3, #5
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	440b      	add	r3, r1
 8004f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <USB_DeactivateEndpoint+0x1b4>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	ec337800 	.word	0xec337800
 8004fb8:	eff37800 	.word	0xeff37800

08004fbc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	f040 810a 	bne.w	80051ee <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d132      	bne.n	8005048 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005000:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005004:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	440a      	add	r2, r1
 800501c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005020:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005024:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	440a      	add	r2, r1
 800503c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005040:	0cdb      	lsrs	r3, r3, #19
 8005042:	04db      	lsls	r3, r3, #19
 8005044:	6113      	str	r3, [r2, #16]
 8005046:	e074      	b.n	8005132 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005062:	0cdb      	lsrs	r3, r3, #19
 8005064:	04db      	lsls	r3, r3, #19
 8005066:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	0151      	lsls	r1, r2, #5
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	440a      	add	r2, r1
 800507e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005082:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005086:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800508a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6959      	ldr	r1, [r3, #20]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	440b      	add	r3, r1
 80050a4:	1e59      	subs	r1, r3, #1
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80050ae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050b0:	4baf      	ldr	r3, [pc, #700]	; (8005370 <USB_EPStartXfer+0x3b4>)
 80050b2:	400b      	ands	r3, r1
 80050b4:	6939      	ldr	r1, [r7, #16]
 80050b6:	0148      	lsls	r0, r1, #5
 80050b8:	6979      	ldr	r1, [r7, #20]
 80050ba:	4401      	add	r1, r0
 80050bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050c0:	4313      	orrs	r3, r2
 80050c2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050da:	6939      	ldr	r1, [r7, #16]
 80050dc:	0148      	lsls	r0, r1, #5
 80050de:	6979      	ldr	r1, [r7, #20]
 80050e0:	4401      	add	r1, r0
 80050e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050e6:	4313      	orrs	r3, r2
 80050e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	78db      	ldrb	r3, [r3, #3]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d11f      	bne.n	8005132 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	0151      	lsls	r1, r2, #5
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	440a      	add	r2, r1
 8005108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800510c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005110:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	440a      	add	r2, r1
 8005128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005130:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	0151      	lsls	r1, r2, #5
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	440a      	add	r2, r1
 8005148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800514c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005150:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	78db      	ldrb	r3, [r3, #3]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d015      	beq.n	8005186 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 8100 	beq.w	8005364 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	2101      	movs	r1, #1
 8005176:	fa01 f303 	lsl.w	r3, r1, r3
 800517a:	6979      	ldr	r1, [r7, #20]
 800517c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005180:	4313      	orrs	r3, r2
 8005182:	634b      	str	r3, [r1, #52]	; 0x34
 8005184:	e0ee      	b.n	8005364 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005192:	2b00      	cmp	r3, #0
 8005194:	d110      	bne.n	80051b8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	e00f      	b.n	80051d8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68d9      	ldr	r1, [r3, #12]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781a      	ldrb	r2, [r3, #0]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f9e2 	bl	80055b0 <USB_WritePacket>
 80051ec:	e0ba      	b.n	8005364 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	0151      	lsls	r1, r2, #5
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	440a      	add	r2, r1
 8005204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005208:	0cdb      	lsrs	r3, r3, #19
 800520a:	04db      	lsls	r3, r3, #19
 800520c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	0151      	lsls	r1, r2, #5
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	440a      	add	r2, r1
 8005224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005228:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800522c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005230:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d123      	bne.n	8005282 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005250:	6939      	ldr	r1, [r7, #16]
 8005252:	0148      	lsls	r0, r1, #5
 8005254:	6979      	ldr	r1, [r7, #20]
 8005256:	4401      	add	r1, r0
 8005258:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800525c:	4313      	orrs	r3, r2
 800525e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	440a      	add	r2, r1
 8005276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800527e:	6113      	str	r3, [r2, #16]
 8005280:	e033      	b.n	80052ea <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	695a      	ldr	r2, [r3, #20]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	4413      	add	r3, r2
 800528c:	1e5a      	subs	r2, r3, #1
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	fbb2 f3f3 	udiv	r3, r2, r3
 8005296:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	89fb      	ldrh	r3, [r7, #14]
 80052a8:	04d9      	lsls	r1, r3, #19
 80052aa:	4b31      	ldr	r3, [pc, #196]	; (8005370 <USB_EPStartXfer+0x3b4>)
 80052ac:	400b      	ands	r3, r1
 80052ae:	6939      	ldr	r1, [r7, #16]
 80052b0:	0148      	lsls	r0, r1, #5
 80052b2:	6979      	ldr	r1, [r7, #20]
 80052b4:	4401      	add	r1, r0
 80052b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052ba:	4313      	orrs	r3, r2
 80052bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	89f9      	ldrh	r1, [r7, #14]
 80052d2:	fb01 f303 	mul.w	r3, r1, r3
 80052d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052da:	6939      	ldr	r1, [r7, #16]
 80052dc:	0148      	lsls	r0, r1, #5
 80052de:	6979      	ldr	r1, [r7, #20]
 80052e0:	4401      	add	r1, r0
 80052e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052e6:	4313      	orrs	r3, r2
 80052e8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	78db      	ldrb	r3, [r3, #3]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d128      	bne.n	8005344 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d110      	bne.n	8005324 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	0151      	lsls	r1, r2, #5
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	440a      	add	r2, r1
 8005318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e00f      	b.n	8005344 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	0151      	lsls	r1, r2, #5
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	440a      	add	r2, r1
 800533a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800533e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005342:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	440a      	add	r2, r1
 800535a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800535e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005362:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	1ff80000 	.word	0x1ff80000

08005374 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b01      	cmp	r3, #1
 800538e:	f040 80ab 	bne.w	80054e8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d132      	bne.n	8005400 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f8:	0cdb      	lsrs	r3, r3, #19
 80053fa:	04db      	lsls	r3, r3, #19
 80053fc:	6113      	str	r3, [r2, #16]
 80053fe:	e04e      	b.n	800549e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	440a      	add	r2, r1
 8005416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541a:	0cdb      	lsrs	r3, r3, #19
 800541c:	04db      	lsls	r3, r3, #19
 800541e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	0151      	lsls	r1, r2, #5
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	440a      	add	r2, r1
 8005436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800543e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005442:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	695a      	ldr	r2, [r3, #20]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	d903      	bls.n	8005458 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005472:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005476:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005484:	691a      	ldr	r2, [r3, #16]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	0148      	lsls	r0, r1, #5
 8005492:	68f9      	ldr	r1, [r7, #12]
 8005494:	4401      	add	r1, r0
 8005496:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800549a:	4313      	orrs	r3, r2
 800549c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054bc:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d06d      	beq.n	80055a2 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	2101      	movs	r1, #1
 80054d8:	fa01 f303 	lsl.w	r3, r1, r3
 80054dc:	68f9      	ldr	r1, [r7, #12]
 80054de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e2:	4313      	orrs	r3, r2
 80054e4:	634b      	str	r3, [r1, #52]	; 0x34
 80054e6:	e05c      	b.n	80055a2 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	0151      	lsls	r1, r2, #5
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	440a      	add	r2, r1
 80054fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005502:	0cdb      	lsrs	r3, r3, #19
 8005504:	04db      	lsls	r3, r3, #19
 8005506:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	440a      	add	r2, r1
 800551e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005522:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005526:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800552a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005556:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800555a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	0148      	lsls	r0, r1, #5
 8005576:	68f9      	ldr	r1, [r7, #12]
 8005578:	4401      	add	r1, r0
 800557a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800557e:	4313      	orrs	r3, r2
 8005580:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	440a      	add	r2, r1
 8005598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b089      	sub	sp, #36	; 0x24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	4611      	mov	r1, r2
 80055bc:	461a      	mov	r2, r3
 80055be:	460b      	mov	r3, r1
 80055c0:	71fb      	strb	r3, [r7, #7]
 80055c2:	4613      	mov	r3, r2
 80055c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80055ce:	88bb      	ldrh	r3, [r7, #4]
 80055d0:	3303      	adds	r3, #3
 80055d2:	089b      	lsrs	r3, r3, #2
 80055d4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80055d6:	2300      	movs	r3, #0
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	e018      	b.n	800560e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	031a      	lsls	r2, r3, #12
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e8:	461a      	mov	r2, r3
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6013      	str	r3, [r2, #0]
    pSrc++;
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	3301      	adds	r3, #1
 80055f4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	3301      	adds	r3, #1
 80055fa:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	3301      	adds	r3, #1
 8005600:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	3301      	adds	r3, #1
 8005606:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	3301      	adds	r3, #1
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	429a      	cmp	r2, r3
 8005614:	d3e2      	bcc.n	80055dc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3724      	adds	r7, #36	; 0x24
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005624:	b480      	push	{r7}
 8005626:	b08b      	sub	sp, #44	; 0x2c
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	4613      	mov	r3, r2
 8005630:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	089b      	lsrs	r3, r3, #2
 800563e:	b29b      	uxth	r3, r3
 8005640:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005642:	88fb      	ldrh	r3, [r7, #6]
 8005644:	f003 0303 	and.w	r3, r3, #3
 8005648:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800564a:	2300      	movs	r3, #0
 800564c:	623b      	str	r3, [r7, #32]
 800564e:	e014      	b.n	800567a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	601a      	str	r2, [r3, #0]
    pDest++;
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	3301      	adds	r3, #1
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	3301      	adds	r3, #1
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	3301      	adds	r3, #1
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	3301      	adds	r3, #1
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	3301      	adds	r3, #1
 8005678:	623b      	str	r3, [r7, #32]
 800567a:	6a3a      	ldr	r2, [r7, #32]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	429a      	cmp	r2, r3
 8005680:	d3e6      	bcc.n	8005650 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005682:	8bfb      	ldrh	r3, [r7, #30]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01e      	beq.n	80056c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005692:	461a      	mov	r2, r3
 8005694:	f107 0310 	add.w	r3, r7, #16
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	701a      	strb	r2, [r3, #0]
      i++;
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	3301      	adds	r3, #1
 80056b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	3301      	adds	r3, #1
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80056ba:	8bfb      	ldrh	r3, [r7, #30]
 80056bc:	3b01      	subs	r3, #1
 80056be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056c0:	8bfb      	ldrh	r3, [r7, #30]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1ea      	bne.n	800569c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	372c      	adds	r7, #44	; 0x2c
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d12c      	bne.n	800574a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	db12      	blt.n	8005728 <USB_EPSetStall+0x54>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00f      	beq.n	8005728 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005722:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005726:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	440a      	add	r2, r1
 800573e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	e02b      	b.n	80057a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	db12      	blt.n	8005782 <USB_EPSetStall+0xae>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00f      	beq.n	8005782 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800577c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005780:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	440a      	add	r2, r1
 8005798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d128      	bne.n	800581e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	78db      	ldrb	r3, [r3, #3]
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d003      	beq.n	80057fc <USB_EPClearStall+0x4c>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	78db      	ldrb	r3, [r3, #3]
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d138      	bne.n	800586e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	440a      	add	r2, r1
 8005812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	e027      	b.n	800586e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	0151      	lsls	r1, r2, #5
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	440a      	add	r2, r1
 8005834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005838:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800583c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	78db      	ldrb	r3, [r3, #3]
 8005842:	2b03      	cmp	r3, #3
 8005844:	d003      	beq.n	800584e <USB_EPClearStall+0x9e>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	78db      	ldrb	r3, [r3, #3]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d10f      	bne.n	800586e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	440a      	add	r2, r1
 8005864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800589a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800589e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80058b0:	68f9      	ldr	r1, [r7, #12]
 80058b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b6:	4313      	orrs	r3, r2
 80058b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058e2:	f023 0303 	bic.w	r3, r3, #3
 80058e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058f6:	f023 0302 	bic.w	r3, r3, #2
 80058fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800590a:	b480      	push	{r7}
 800590c:	b085      	sub	sp, #20
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005924:	f023 0303 	bic.w	r3, r3, #3
 8005928:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005938:	f043 0302 	orr.w	r3, r3, #2
 800593c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4013      	ands	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005964:	68fb      	ldr	r3, [r7, #12]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	4013      	ands	r3, r2
 8005994:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	0c1b      	lsrs	r3, r3, #16
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	4013      	ands	r3, r2
 80059c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	b29b      	uxth	r3, r3
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059da:	b480      	push	{r7}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	460b      	mov	r3, r1
 80059e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	4013      	ands	r3, r2
 8005a06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a08:	68bb      	ldr	r3, [r7, #8]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b087      	sub	sp, #28
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	fa22 f303 	lsr.w	r3, r2, r3
 8005a46:	01db      	lsls	r3, r3, #7
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4013      	ands	r3, r2
 8005a62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a64:	68bb      	ldr	r3, [r7, #8]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005aac:	f023 0307 	bic.w	r3, r3, #7
 8005ab0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	333c      	adds	r3, #60	; 0x3c
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4a1c      	ldr	r2, [pc, #112]	; (8005b60 <USB_EP0_OutStart+0x8c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d90a      	bls.n	8005b0a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b04:	d101      	bne.n	8005b0a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e024      	b.n	8005b54 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b10:	461a      	mov	r2, r3
 8005b12:	2300      	movs	r3, #0
 8005b14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b38:	f043 0318 	orr.w	r3, r3, #24
 8005b3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b50:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	4f54300a 	.word	0x4f54300a

08005b64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	4a13      	ldr	r2, [pc, #76]	; (8005bc4 <USB_CoreReset+0x60>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d901      	bls.n	8005b80 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e01a      	b.n	8005bb6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	daf3      	bge.n	8005b70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f043 0201 	orr.w	r2, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	4a09      	ldr	r2, [pc, #36]	; (8005bc4 <USB_CoreReset+0x60>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d901      	bls.n	8005ba8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e006      	b.n	8005bb6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d0f1      	beq.n	8005b98 <USB_CoreReset+0x34>

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	00030d40 	.word	0x00030d40

08005bc8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8005bd4:	f241 0074 	movw	r0, #4212	; 0x1074
 8005bd8:	f003 feb2 	bl	8009940 <USBD_static_malloc>
 8005bdc:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005bec:	2302      	movs	r3, #2
 8005bee:	e034      	b.n	8005c5a <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	7c1b      	ldrb	r3, [r3, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d115      	bne.n	8005c2c <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8005c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c04:	2202      	movs	r2, #2
 8005c06:	2101      	movs	r1, #1
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f003 fc9d 	bl	8009548 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8005c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	2181      	movs	r1, #129	; 0x81
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f003 fc92 	bl	8009548 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	871a      	strh	r2, [r3, #56]	; 0x38
 8005c2a:	e012      	b.n	8005c52 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8005c2c:	2340      	movs	r3, #64	; 0x40
 8005c2e:	2202      	movs	r2, #2
 8005c30:	2101      	movs	r1, #1
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f003 fc88 	bl	8009548 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8005c40:	2340      	movs	r3, #64	; 0x40
 8005c42:	2202      	movs	r2, #2
 8005c44:	2181      	movs	r1, #129	; 0x81
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f003 fc7e 	bl	8009548 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f999 	bl	8005f8a <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b082      	sub	sp, #8
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8005c6e:	2101      	movs	r1, #1
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f003 fca7 	bl	80095c4 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8005c7e:	2181      	movs	r1, #129	; 0x81
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f003 fc9f 	bl	80095c4 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00c      	beq.n	8005cb0 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f9dd 	bl	8006056 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f003 fe5a 	bl	800995c <USBD_static_free>
    pdev->pClassData = NULL;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ccc:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e0db      	b.n	8005e98 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d04e      	beq.n	8005d8a <USBD_MSC_Setup+0xce>
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	f040 80cb 	bne.w	8005e88 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	785b      	ldrb	r3, [r3, #1]
 8005cf6:	2bfe      	cmp	r3, #254	; 0xfe
 8005cf8:	d002      	beq.n	8005d00 <USBD_MSC_Setup+0x44>
 8005cfa:	2bff      	cmp	r3, #255	; 0xff
 8005cfc:	d025      	beq.n	8005d4a <USBD_MSC_Setup+0x8e>
 8005cfe:	e03c      	b.n	8005d7a <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	885b      	ldrh	r3, [r3, #2]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d119      	bne.n	8005d3c <USBD_MSC_Setup+0x80>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	88db      	ldrh	r3, [r3, #6]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d115      	bne.n	8005d3c <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	da10      	bge.n	8005d3c <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	4798      	blx	r3
 8005d24:	4603      	mov	r3, r0
 8005d26:	461a      	mov	r2, r3
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f002 fef5 	bl	8008b22 <USBD_CtlSendData>
 8005d38:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d3a:	e025      	b.n	8005d88 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f002 fe7e 	bl	8008a40 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d44:	2303      	movs	r3, #3
 8005d46:	75fb      	strb	r3, [r7, #23]
          break;
 8005d48:	e01e      	b.n	8005d88 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	885b      	ldrh	r3, [r3, #2]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10c      	bne.n	8005d6c <USBD_MSC_Setup+0xb0>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	88db      	ldrh	r3, [r3, #6]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d108      	bne.n	8005d6c <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	db03      	blt.n	8005d6c <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f94f 	bl	8006008 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d6a:	e00d      	b.n	8005d88 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f002 fe66 	bl	8008a40 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d74:	2303      	movs	r3, #3
 8005d76:	75fb      	strb	r3, [r7, #23]
          break;
 8005d78:	e006      	b.n	8005d88 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f002 fe5f 	bl	8008a40 <USBD_CtlError>
          ret = USBD_FAIL;
 8005d82:	2303      	movs	r3, #3
 8005d84:	75fb      	strb	r3, [r7, #23]
          break;
 8005d86:	bf00      	nop
      }
      break;
 8005d88:	e085      	b.n	8005e96 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	785b      	ldrb	r3, [r3, #1]
 8005d8e:	2b0b      	cmp	r3, #11
 8005d90:	d871      	bhi.n	8005e76 <USBD_MSC_Setup+0x1ba>
 8005d92:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <USBD_MSC_Setup+0xdc>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005dc9 	.word	0x08005dc9
 8005d9c:	08005e45 	.word	0x08005e45
 8005da0:	08005e77 	.word	0x08005e77
 8005da4:	08005e77 	.word	0x08005e77
 8005da8:	08005e77 	.word	0x08005e77
 8005dac:	08005e77 	.word	0x08005e77
 8005db0:	08005e77 	.word	0x08005e77
 8005db4:	08005e77 	.word	0x08005e77
 8005db8:	08005e77 	.word	0x08005e77
 8005dbc:	08005e77 	.word	0x08005e77
 8005dc0:	08005df3 	.word	0x08005df3
 8005dc4:	08005e1d 	.word	0x08005e1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d107      	bne.n	8005de4 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005dd4:	f107 030e 	add.w	r3, r7, #14
 8005dd8:	2202      	movs	r2, #2
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f002 fea0 	bl	8008b22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005de2:	e050      	b.n	8005e86 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f002 fe2a 	bl	8008a40 <USBD_CtlError>
            ret = USBD_FAIL;
 8005dec:	2303      	movs	r3, #3
 8005dee:	75fb      	strb	r3, [r7, #23]
          break;
 8005df0:	e049      	b.n	8005e86 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d107      	bne.n	8005e0e <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	3304      	adds	r3, #4
 8005e02:	2201      	movs	r2, #1
 8005e04:	4619      	mov	r1, r3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f002 fe8b 	bl	8008b22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e0c:	e03b      	b.n	8005e86 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f002 fe15 	bl	8008a40 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e16:	2303      	movs	r3, #3
 8005e18:	75fb      	strb	r3, [r7, #23]
          break;
 8005e1a:	e034      	b.n	8005e86 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d106      	bne.n	8005e36 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	885b      	ldrh	r3, [r3, #2]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e34:	e027      	b.n	8005e86 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f002 fe01 	bl	8008a40 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	75fb      	strb	r3, [r7, #23]
          break;
 8005e42:	e020      	b.n	8005e86 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d119      	bne.n	8005e84 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	885b      	ldrh	r3, [r3, #2]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d115      	bne.n	8005e84 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	889b      	ldrh	r3, [r3, #4]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f003 fbe5 	bl	8009630 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	889b      	ldrh	r3, [r3, #4]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 faa6 	bl	80063c0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8005e74:	e006      	b.n	8005e84 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f002 fde1 	bl	8008a40 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	75fb      	strb	r3, [r7, #23]
          break;
 8005e82:	e000      	b.n	8005e86 <USBD_MSC_Setup+0x1ca>
          break;
 8005e84:	bf00      	nop
      }
      break;
 8005e86:	e006      	b.n	8005e96 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f002 fdd8 	bl	8008a40 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e90:	2303      	movs	r3, #3
 8005e92:	75fb      	strb	r3, [r7, #23]
      break;
 8005e94:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f8e4 	bl	800607e <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f90c 	bl	80060ee <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8005eee:	4b03      	ldr	r3, [pc, #12]	; (8005efc <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	20000044 	.word	0x20000044

08005f00 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8005f0e:	4b03      	ldr	r3, [pc, #12]	; (8005f1c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	20000064 	.word	0x20000064

08005f20 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8005f2e:	4b03      	ldr	r3, [pc, #12]	; (8005f3c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	20000084 	.word	0x20000084

08005f40 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	220a      	movs	r2, #10
 8005f4c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8005f4e:	4b03      	ldr	r3, [pc, #12]	; (8005f5c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	200000a4 	.word	0x200000a4

08005f60 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e004      	b.n	8005f7e <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f98:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d02f      	beq.n	8006000 <MSC_BOT_Init+0x76>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2000      	movs	r0, #0
 8005fda:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8005fdc:	2101      	movs	r1, #1
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f003 fb26 	bl	8009630 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8005fe4:	2181      	movs	r1, #129	; 0x81
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f003 fb22 	bl	8009630 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8005ff2:	3210      	adds	r2, #16
 8005ff4:	231f      	movs	r3, #31
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f003 fc55 	bl	80098a8 <USBD_LL_PrepareReceive>
 8005ffe:	e000      	b.n	8006002 <MSC_BOT_Init+0x78>
    return;
 8006000:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006016:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d017      	beq.n	800604e <MSC_BOT_Reset+0x46>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2201      	movs	r2, #1
 8006028:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800602a:	2181      	movs	r1, #129	; 0x81
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f003 fb6b 	bl	8009708 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8006032:	2101      	movs	r1, #1
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f003 fb67 	bl	8009708 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8006040:	3210      	adds	r2, #16
 8006042:	231f      	movs	r3, #31
 8006044:	2101      	movs	r1, #1
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f003 fc2e 	bl	80098a8 <USBD_LL_PrepareReceive>
 800604c:	e000      	b.n	8006050 <MSC_BOT_Reset+0x48>
    return;
 800604e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006056:	b480      	push	{r7}
 8006058:	b085      	sub	sp, #20
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006064:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	721a      	strb	r2, [r3, #8]
  }
}
 8006072:	bf00      	nop
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b084      	sub	sp, #16
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	460b      	mov	r3, r1
 8006088:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006090:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d022      	beq.n	80060de <MSC_BOT_DataIn+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	7a1b      	ldrb	r3, [r3, #8]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d005      	beq.n	80060ac <MSC_BOT_DataIn+0x2e>
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	db1e      	blt.n	80060e2 <MSC_BOT_DataIn+0x64>
 80060a4:	3b03      	subs	r3, #3
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d81b      	bhi.n	80060e2 <MSC_BOT_DataIn+0x64>
 80060aa:	e013      	b.n	80060d4 <MSC_BOT_DataIn+0x56>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b2:	7f59      	ldrb	r1, [r3, #29]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ba:	331f      	adds	r3, #31
 80060bc:	461a      	mov	r2, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f9ac 	bl	800641c <SCSI_ProcessCmd>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da0d      	bge.n	80060e6 <MSC_BOT_DataIn+0x68>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80060ca:	2101      	movs	r1, #1
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f90d 	bl	80062ec <MSC_BOT_SendCSW>
      }
      break;
 80060d2:	e008      	b.n	80060e6 <MSC_BOT_DataIn+0x68>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80060d4:	2100      	movs	r1, #0
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f908 	bl	80062ec <MSC_BOT_SendCSW>
      break;
 80060dc:	e004      	b.n	80060e8 <MSC_BOT_DataIn+0x6a>
    return;
 80060de:	bf00      	nop
 80060e0:	e002      	b.n	80060e8 <MSC_BOT_DataIn+0x6a>

    default:
      break;
 80060e2:	bf00      	nop
 80060e4:	e000      	b.n	80060e8 <MSC_BOT_DataIn+0x6a>
      break;
 80060e6:	bf00      	nop
  }
}
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006100:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01e      	beq.n	8006146 <MSC_BOT_DataOut+0x58>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	7a1b      	ldrb	r3, [r3, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <MSC_BOT_DataOut+0x28>
 8006110:	2b01      	cmp	r3, #1
 8006112:	d004      	beq.n	800611e <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006114:	e01a      	b.n	800614c <MSC_BOT_DataOut+0x5e>
      MSC_BOT_CBW_Decode(pdev);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f81c 	bl	8006154 <MSC_BOT_CBW_Decode>
      break;
 800611c:	e016      	b.n	800614c <MSC_BOT_DataOut+0x5e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006124:	7f59      	ldrb	r1, [r3, #29]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800612c:	331f      	adds	r3, #31
 800612e:	461a      	mov	r2, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f973 	bl	800641c <SCSI_ProcessCmd>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	da06      	bge.n	800614a <MSC_BOT_DataOut+0x5c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800613c:	2101      	movs	r1, #1
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f8d4 	bl	80062ec <MSC_BOT_SendCSW>
      break;
 8006144:	e001      	b.n	800614a <MSC_BOT_DataOut+0x5c>
    return;
 8006146:	bf00      	nop
 8006148:	e000      	b.n	800614c <MSC_BOT_DataOut+0x5e>
      break;
 800614a:	bf00      	nop
  }
}
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006162:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 8083 	beq.w	8006272 <MSC_BOT_CBW_Decode+0x11e>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800617a:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800618a:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800618c:	2101      	movs	r1, #1
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f003 fbc2 	bl	8009918 <USBD_LL_GetRxDataSize>
 8006194:	4603      	mov	r3, r0
 8006196:	2b1f      	cmp	r3, #31
 8006198:	d118      	bne.n	80061cc <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a0:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80061a2:	4a37      	ldr	r2, [pc, #220]	; (8006280 <MSC_BOT_CBW_Decode+0x12c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d111      	bne.n	80061cc <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ae:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d80b      	bhi.n	80061cc <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ba:	7f9b      	ldrb	r3, [r3, #30]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bCBLength > 16U))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061c6:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80061c8:	2b10      	cmp	r3, #16
 80061ca:	d90f      	bls.n	80061ec <MSC_BOT_CBW_Decode+0x98>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d2:	7f59      	ldrb	r1, [r3, #29]
 80061d4:	2320      	movs	r3, #32
 80061d6:	2205      	movs	r2, #5
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fe0d 	bl	8006df8 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2202      	movs	r2, #2
 80061e2:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f8b7 	bl	8006358 <MSC_BOT_Abort>
 80061ea:	e045      	b.n	8006278 <MSC_BOT_CBW_Decode+0x124>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061f2:	7f59      	ldrb	r1, [r3, #29]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061fa:	331f      	adds	r3, #31
 80061fc:	461a      	mov	r2, r3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f90c 	bl	800641c <SCSI_ProcessCmd>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	da0c      	bge.n	8006224 <MSC_BOT_CBW_Decode+0xd0>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	7a1b      	ldrb	r3, [r3, #8]
 800620e:	2b05      	cmp	r3, #5
 8006210:	d104      	bne.n	800621c <MSC_BOT_CBW_Decode+0xc8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006212:	2101      	movs	r1, #1
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f869 	bl	80062ec <MSC_BOT_SendCSW>
 800621a:	e02d      	b.n	8006278 <MSC_BOT_CBW_Decode+0x124>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f89b 	bl	8006358 <MSC_BOT_Abort>
 8006222:	e029      	b.n	8006278 <MSC_BOT_CBW_Decode+0x124>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	7a1b      	ldrb	r3, [r3, #8]
 8006228:	2b02      	cmp	r3, #2
 800622a:	d024      	beq.n	8006276 <MSC_BOT_CBW_Decode+0x122>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006230:	2b01      	cmp	r3, #1
 8006232:	d020      	beq.n	8006276 <MSC_BOT_CBW_Decode+0x122>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006238:	2b03      	cmp	r3, #3
 800623a:	d01c      	beq.n	8006276 <MSC_BOT_CBW_Decode+0x122>
    {
      if (hmsc->bot_data_length > 0U)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d009      	beq.n	8006258 <MSC_BOT_CBW_Decode+0x104>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f103 0110 	add.w	r1, r3, #16
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	461a      	mov	r2, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f817 	bl	8006284 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006256:	e00f      	b.n	8006278 <MSC_BOT_CBW_Decode+0x124>
      }
      else if (hmsc->bot_data_length == 0U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <MSC_BOT_CBW_Decode+0x116>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006260:	2100      	movs	r1, #0
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f842 	bl	80062ec <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006268:	e006      	b.n	8006278 <MSC_BOT_CBW_Decode+0x124>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f874 	bl	8006358 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006270:	e002      	b.n	8006278 <MSC_BOT_CBW_Decode+0x124>
    return;
 8006272:	bf00      	nop
 8006274:	e000      	b.n	8006278 <MSC_BOT_CBW_Decode+0x124>
      }
    }
    else
    {
      return;
 8006276:	bf00      	nop
    }
  }
}
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	43425355 	.word	0x43425355

08006284 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006296:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	4293      	cmp	r3, r2
 80062a4:	bf28      	it	cs
 80062a6:	4613      	movcs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d019      	beq.n	80062e4 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062c2:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2204      	movs	r2, #4
 80062d4:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	2181      	movs	r1, #129	; 0x81
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f003 faab 	bl	8009838 <USBD_LL_Transmit>
 80062e2:	e000      	b.n	80062e6 <MSC_BOT_SendData+0x62>
    return;
 80062e4:	bf00      	nop
}
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062fe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d022      	beq.n	800634c <MSC_BOT_SendCSW+0x60>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800630c:	461a      	mov	r2, r3
 800630e:	4b11      	ldr	r3, [pc, #68]	; (8006354 <MSC_BOT_SendCSW+0x68>)
 8006310:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006318:	461a      	mov	r2, r3
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 800632c:	3210      	adds	r2, #16
 800632e:	230d      	movs	r3, #13
 8006330:	2181      	movs	r1, #129	; 0x81
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f003 fa80 	bl	8009838 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800633e:	3210      	adds	r2, #16
 8006340:	231f      	movs	r3, #31
 8006342:	2101      	movs	r1, #1
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f003 faaf 	bl	80098a8 <USBD_LL_PrepareReceive>
 800634a:	e000      	b.n	800634e <MSC_BOT_SendCSW+0x62>
    return;
 800634c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	53425355 	.word	0x53425355

08006358 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006366:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d024      	beq.n	80063b8 <MSC_BOT_Abort+0x60>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006374:	7f1b      	ldrb	r3, [r3, #28]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10d      	bne.n	8006396 <MSC_BOT_Abort+0x3e>
      (hmsc->cbw.dDataLength != 0U) &&
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006380:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006382:	2b00      	cmp	r3, #0
 8006384:	d007      	beq.n	8006396 <MSC_BOT_Abort+0x3e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800638a:	2b00      	cmp	r3, #0
 800638c:	d103      	bne.n	8006396 <MSC_BOT_Abort+0x3e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800638e:	2101      	movs	r1, #1
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f003 f983 	bl	800969c <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006396:	2181      	movs	r1, #129	; 0x81
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f003 f97f 	bl	800969c <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	7a5b      	ldrb	r3, [r3, #9]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d109      	bne.n	80063ba <MSC_BOT_Abort+0x62>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80063a6:	2181      	movs	r1, #129	; 0x81
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f003 f977 	bl	800969c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80063ae:	2101      	movs	r1, #1
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f003 f973 	bl	800969c <USBD_LL_StallEP>
 80063b6:	e000      	b.n	80063ba <MSC_BOT_Abort+0x62>
    return;
 80063b8:	bf00      	nop
  }
}
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063d2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d019      	beq.n	800640e <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	7a5b      	ldrb	r3, [r3, #9]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d108      	bne.n	80063f4 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80063e2:	2181      	movs	r1, #129	; 0x81
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f003 f959 	bl	800969c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80063ea:	2101      	movs	r1, #1
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f003 f955 	bl	800969c <USBD_LL_StallEP>
 80063f2:	e00f      	b.n	8006414 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80063f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	da0a      	bge.n	8006412 <MSC_BOT_CplClrFeature+0x52>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	7a5b      	ldrb	r3, [r3, #9]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d006      	beq.n	8006412 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006404:	2101      	movs	r1, #1
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff ff70 	bl	80062ec <MSC_BOT_SendCSW>
 800640c:	e002      	b.n	8006414 <MSC_BOT_CplClrFeature+0x54>
    return;
 800640e:	bf00      	nop
 8006410:	e000      	b.n	8006414 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8006412:	bf00      	nop
  }
}
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	460b      	mov	r3, r1
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006430:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8006438:	f04f 33ff 	mov.w	r3, #4294967295
 800643c:	e168      	b.n	8006710 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2baa      	cmp	r3, #170	; 0xaa
 8006444:	f000 8144 	beq.w	80066d0 <SCSI_ProcessCmd+0x2b4>
 8006448:	2baa      	cmp	r3, #170	; 0xaa
 800644a:	f300 8153 	bgt.w	80066f4 <SCSI_ProcessCmd+0x2d8>
 800644e:	2ba8      	cmp	r3, #168	; 0xa8
 8006450:	f000 812c 	beq.w	80066ac <SCSI_ProcessCmd+0x290>
 8006454:	2ba8      	cmp	r3, #168	; 0xa8
 8006456:	f300 814d 	bgt.w	80066f4 <SCSI_ProcessCmd+0x2d8>
 800645a:	2b5a      	cmp	r3, #90	; 0x5a
 800645c:	f300 80c0 	bgt.w	80065e0 <SCSI_ProcessCmd+0x1c4>
 8006460:	2b00      	cmp	r3, #0
 8006462:	f2c0 8147 	blt.w	80066f4 <SCSI_ProcessCmd+0x2d8>
 8006466:	2b5a      	cmp	r3, #90	; 0x5a
 8006468:	f200 8144 	bhi.w	80066f4 <SCSI_ProcessCmd+0x2d8>
 800646c:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <SCSI_ProcessCmd+0x58>)
 800646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006472:	bf00      	nop
 8006474:	080065e7 	.word	0x080065e7
 8006478:	080066f5 	.word	0x080066f5
 800647c:	080066f5 	.word	0x080066f5
 8006480:	080065f9 	.word	0x080065f9
 8006484:	080066f5 	.word	0x080066f5
 8006488:	080066f5 	.word	0x080066f5
 800648c:	080066f5 	.word	0x080066f5
 8006490:	080066f5 	.word	0x080066f5
 8006494:	080066f5 	.word	0x080066f5
 8006498:	080066f5 	.word	0x080066f5
 800649c:	080066f5 	.word	0x080066f5
 80064a0:	080066f5 	.word	0x080066f5
 80064a4:	080066f5 	.word	0x080066f5
 80064a8:	080066f5 	.word	0x080066f5
 80064ac:	080066f5 	.word	0x080066f5
 80064b0:	080066f5 	.word	0x080066f5
 80064b4:	080066f5 	.word	0x080066f5
 80064b8:	080066f5 	.word	0x080066f5
 80064bc:	0800660b 	.word	0x0800660b
 80064c0:	080066f5 	.word	0x080066f5
 80064c4:	080066f5 	.word	0x080066f5
 80064c8:	080066f5 	.word	0x080066f5
 80064cc:	080066f5 	.word	0x080066f5
 80064d0:	080066f5 	.word	0x080066f5
 80064d4:	080066f5 	.word	0x080066f5
 80064d8:	080066f5 	.word	0x080066f5
 80064dc:	08006641 	.word	0x08006641
 80064e0:	0800661d 	.word	0x0800661d
 80064e4:	080066f5 	.word	0x080066f5
 80064e8:	080066f5 	.word	0x080066f5
 80064ec:	0800662f 	.word	0x0800662f
 80064f0:	080066f5 	.word	0x080066f5
 80064f4:	080066f5 	.word	0x080066f5
 80064f8:	080066f5 	.word	0x080066f5
 80064fc:	080066f5 	.word	0x080066f5
 8006500:	08006665 	.word	0x08006665
 8006504:	080066f5 	.word	0x080066f5
 8006508:	08006677 	.word	0x08006677
 800650c:	080066f5 	.word	0x080066f5
 8006510:	080066f5 	.word	0x080066f5
 8006514:	0800669b 	.word	0x0800669b
 8006518:	080066f5 	.word	0x080066f5
 800651c:	080066bf 	.word	0x080066bf
 8006520:	080066f5 	.word	0x080066f5
 8006524:	080066f5 	.word	0x080066f5
 8006528:	080066f5 	.word	0x080066f5
 800652c:	080066f5 	.word	0x080066f5
 8006530:	080066e3 	.word	0x080066e3
 8006534:	080066f5 	.word	0x080066f5
 8006538:	080066f5 	.word	0x080066f5
 800653c:	080066f5 	.word	0x080066f5
 8006540:	080066f5 	.word	0x080066f5
 8006544:	080066f5 	.word	0x080066f5
 8006548:	080066f5 	.word	0x080066f5
 800654c:	080066f5 	.word	0x080066f5
 8006550:	080066f5 	.word	0x080066f5
 8006554:	080066f5 	.word	0x080066f5
 8006558:	080066f5 	.word	0x080066f5
 800655c:	080066f5 	.word	0x080066f5
 8006560:	080066f5 	.word	0x080066f5
 8006564:	080066f5 	.word	0x080066f5
 8006568:	080066f5 	.word	0x080066f5
 800656c:	080066f5 	.word	0x080066f5
 8006570:	080066f5 	.word	0x080066f5
 8006574:	080066f5 	.word	0x080066f5
 8006578:	080066f5 	.word	0x080066f5
 800657c:	080066f5 	.word	0x080066f5
 8006580:	080066f5 	.word	0x080066f5
 8006584:	080066f5 	.word	0x080066f5
 8006588:	080066f5 	.word	0x080066f5
 800658c:	080066f5 	.word	0x080066f5
 8006590:	080066f5 	.word	0x080066f5
 8006594:	080066f5 	.word	0x080066f5
 8006598:	080066f5 	.word	0x080066f5
 800659c:	080066f5 	.word	0x080066f5
 80065a0:	080066f5 	.word	0x080066f5
 80065a4:	080066f5 	.word	0x080066f5
 80065a8:	080066f5 	.word	0x080066f5
 80065ac:	080066f5 	.word	0x080066f5
 80065b0:	080066f5 	.word	0x080066f5
 80065b4:	080066f5 	.word	0x080066f5
 80065b8:	080066f5 	.word	0x080066f5
 80065bc:	080066f5 	.word	0x080066f5
 80065c0:	080066f5 	.word	0x080066f5
 80065c4:	080066f5 	.word	0x080066f5
 80065c8:	080066f5 	.word	0x080066f5
 80065cc:	080066f5 	.word	0x080066f5
 80065d0:	080066f5 	.word	0x080066f5
 80065d4:	080066f5 	.word	0x080066f5
 80065d8:	080066f5 	.word	0x080066f5
 80065dc:	08006653 	.word	0x08006653
 80065e0:	2b9e      	cmp	r3, #158	; 0x9e
 80065e2:	d051      	beq.n	8006688 <SCSI_ProcessCmd+0x26c>
 80065e4:	e086      	b.n	80066f4 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80065e6:	7afb      	ldrb	r3, [r7, #11]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	4619      	mov	r1, r3
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 f893 	bl	8006718 <SCSI_TestUnitReady>
 80065f2:	4603      	mov	r3, r0
 80065f4:	75fb      	strb	r3, [r7, #23]
      break;
 80065f6:	e089      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80065f8:	7afb      	ldrb	r3, [r7, #11]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	4619      	mov	r1, r3
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 fb64 	bl	8006ccc <SCSI_RequestSense>
 8006604:	4603      	mov	r3, r0
 8006606:	75fb      	strb	r3, [r7, #23]
      break;
 8006608:	e080      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800660a:	7afb      	ldrb	r3, [r7, #11]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4619      	mov	r1, r3
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 f8d5 	bl	80067c0 <SCSI_Inquiry>
 8006616:	4603      	mov	r3, r0
 8006618:	75fb      	strb	r3, [r7, #23]
      break;
 800661a:	e077      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800661c:	7afb      	ldrb	r3, [r7, #11]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	4619      	mov	r1, r3
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 fc40 	bl	8006ea8 <SCSI_StartStopUnit>
 8006628:	4603      	mov	r3, r0
 800662a:	75fb      	strb	r3, [r7, #23]
      break;
 800662c:	e06e      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800662e:	7afb      	ldrb	r3, [r7, #11]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4619      	mov	r1, r3
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 fc90 	bl	8006f5a <SCSI_AllowPreventRemovable>
 800663a:	4603      	mov	r3, r0
 800663c:	75fb      	strb	r3, [r7, #23]
      break;
 800663e:	e065      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8006640:	7afb      	ldrb	r3, [r7, #11]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	4619      	mov	r1, r3
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fae8 	bl	8006c1c <SCSI_ModeSense6>
 800664c:	4603      	mov	r3, r0
 800664e:	75fb      	strb	r3, [r7, #23]
      break;
 8006650:	e05c      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8006652:	7afb      	ldrb	r3, [r7, #11]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	4619      	mov	r1, r3
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 fb0b 	bl	8006c74 <SCSI_ModeSense10>
 800665e:	4603      	mov	r3, r0
 8006660:	75fb      	strb	r3, [r7, #23]
      break;
 8006662:	e053      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006664:	7afb      	ldrb	r3, [r7, #11]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	4619      	mov	r1, r3
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 fa61 	bl	8006b32 <SCSI_ReadFormatCapacity>
 8006670:	4603      	mov	r3, r0
 8006672:	75fb      	strb	r3, [r7, #23]
      break;
 8006674:	e04a      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8006676:	7afb      	ldrb	r3, [r7, #11]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	4619      	mov	r1, r3
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f917 	bl	80068b0 <SCSI_ReadCapacity10>
 8006682:	4603      	mov	r3, r0
 8006684:	75fb      	strb	r3, [r7, #23]
      break;
 8006686:	e041      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8006688:	7afb      	ldrb	r3, [r7, #11]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	4619      	mov	r1, r3
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f994 	bl	80069bc <SCSI_ReadCapacity16>
 8006694:	4603      	mov	r3, r0
 8006696:	75fb      	strb	r3, [r7, #23]
      break;
 8006698:	e038      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800669a:	7afb      	ldrb	r3, [r7, #11]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	4619      	mov	r1, r3
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fc87 	bl	8006fb4 <SCSI_Read10>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75fb      	strb	r3, [r7, #23]
      break;
 80066aa:	e02f      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80066ac:	7afb      	ldrb	r3, [r7, #11]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	4619      	mov	r1, r3
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 fd2c 	bl	8007110 <SCSI_Read12>
 80066b8:	4603      	mov	r3, r0
 80066ba:	75fb      	strb	r3, [r7, #23]
      break;
 80066bc:	e026      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80066be:	7afb      	ldrb	r3, [r7, #11]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	4619      	mov	r1, r3
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 fddb 	bl	8007280 <SCSI_Write10>
 80066ca:	4603      	mov	r3, r0
 80066cc:	75fb      	strb	r3, [r7, #23]
      break;
 80066ce:	e01d      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80066d0:	7afb      	ldrb	r3, [r7, #11]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	4619      	mov	r1, r3
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 fea4 	bl	8007424 <SCSI_Write12>
 80066dc:	4603      	mov	r3, r0
 80066de:	75fb      	strb	r3, [r7, #23]
      break;
 80066e0:	e014      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80066e2:	7afb      	ldrb	r3, [r7, #11]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	4619      	mov	r1, r3
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 ff7d 	bl	80075e8 <SCSI_Verify10>
 80066ee:	4603      	mov	r3, r0
 80066f0:	75fb      	strb	r3, [r7, #23]
      break;
 80066f2:	e00b      	b.n	800670c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80066f4:	7af9      	ldrb	r1, [r7, #11]
 80066f6:	2320      	movs	r3, #32
 80066f8:	2205      	movs	r2, #5
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 fb7c 	bl	8006df8 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	2202      	movs	r2, #2
 8006704:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8006706:	23ff      	movs	r3, #255	; 0xff
 8006708:	75fb      	strb	r3, [r7, #23]
      break;
 800670a:	bf00      	nop
  }

  return ret;
 800670c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	460b      	mov	r3, r1
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800672c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d102      	bne.n	800673a <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8006734:	f04f 33ff 	mov.w	r3, #4294967295
 8006738:	e03e      	b.n	80067b8 <SCSI_TestUnitReady+0xa0>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <SCSI_TestUnitReady+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800674c:	7f59      	ldrb	r1, [r3, #29]
 800674e:	2320      	movs	r3, #32
 8006750:	2205      	movs	r2, #5
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 fb50 	bl	8006df8 <SCSI_SenseCode>

    return -1;
 8006758:	f04f 33ff 	mov.w	r3, #4294967295
 800675c:	e02c      	b.n	80067b8 <SCSI_TestUnitReady+0xa0>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006764:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006768:	2b02      	cmp	r3, #2
 800676a:	d10b      	bne.n	8006784 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800676c:	7af9      	ldrb	r1, [r7, #11]
 800676e:	233a      	movs	r3, #58	; 0x3a
 8006770:	2202      	movs	r2, #2
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 fb40 	bl	8006df8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	2205      	movs	r2, #5
 800677c:	721a      	strb	r2, [r3, #8]
    return -1;
 800677e:	f04f 33ff 	mov.w	r3, #4294967295
 8006782:	e019      	b.n	80067b8 <SCSI_TestUnitReady+0xa0>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	7afa      	ldrb	r2, [r7, #11]
 800678e:	4610      	mov	r0, r2
 8006790:	4798      	blx	r3
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <SCSI_TestUnitReady+0x98>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006798:	7af9      	ldrb	r1, [r7, #11]
 800679a:	233a      	movs	r3, #58	; 0x3a
 800679c:	2202      	movs	r2, #2
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 fb2a 	bl	8006df8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2205      	movs	r2, #5
 80067a8:	721a      	strb	r2, [r3, #8]

    return -1;
 80067aa:	f04f 33ff 	mov.w	r3, #4294967295
 80067ae:	e003      	b.n	80067b8 <SCSI_TestUnitReady+0xa0>
  }
  hmsc->bot_data_length = 0U;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2200      	movs	r2, #0
 80067b4:	60da      	str	r2, [r3, #12]

  return 0;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	460b      	mov	r3, r1
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067d4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <SCSI_Inquiry+0x22>
  {
    return -1;
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295
 80067e0:	e05d      	b.n	800689e <SCSI_Inquiry+0xde>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10b      	bne.n	8006806 <SCSI_Inquiry+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f4:	7f59      	ldrb	r1, [r3, #29]
 80067f6:	2320      	movs	r3, #32
 80067f8:	2205      	movs	r2, #5
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 fafc 	bl	8006df8 <SCSI_SenseCode>
    return -1;
 8006800:	f04f 33ff 	mov.w	r3, #4294967295
 8006804:	e04b      	b.n	800689e <SCSI_Inquiry+0xde>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3301      	adds	r3, #1
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d021      	beq.n	8006858 <SCSI_Inquiry+0x98>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3302      	adds	r3, #2
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d105      	bne.n	800682a <SCSI_Inquiry+0x6a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800681e:	2206      	movs	r2, #6
 8006820:	4921      	ldr	r1, [pc, #132]	; (80068a8 <SCSI_Inquiry+0xe8>)
 8006822:	69b8      	ldr	r0, [r7, #24]
 8006824:	f001 f86b 	bl	80078fe <SCSI_UpdateBotData>
 8006828:	e038      	b.n	800689c <SCSI_Inquiry+0xdc>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3302      	adds	r3, #2
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b80      	cmp	r3, #128	; 0x80
 8006832:	d105      	bne.n	8006840 <SCSI_Inquiry+0x80>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8006834:	2208      	movs	r2, #8
 8006836:	491d      	ldr	r1, [pc, #116]	; (80068ac <SCSI_Inquiry+0xec>)
 8006838:	69b8      	ldr	r0, [r7, #24]
 800683a:	f001 f860 	bl	80078fe <SCSI_UpdateBotData>
 800683e:	e02d      	b.n	800689c <SCSI_Inquiry+0xdc>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006846:	7f59      	ldrb	r1, [r3, #29]
 8006848:	2324      	movs	r3, #36	; 0x24
 800684a:	2205      	movs	r2, #5
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 fad3 	bl	8006df8 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8006852:	f04f 33ff 	mov.w	r3, #4294967295
 8006856:	e022      	b.n	800689e <SCSI_Inquiry+0xde>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800685e:	69d9      	ldr	r1, [r3, #28]
 8006860:	7afa      	ldrb	r2, [r7, #11]
 8006862:	4613      	mov	r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	3304      	adds	r3, #4
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	b29b      	uxth	r3, r3
 8006876:	3305      	adds	r3, #5
 8006878:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3304      	adds	r3, #4
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	b29b      	uxth	r3, r3
 8006882:	8bfa      	ldrh	r2, [r7, #30]
 8006884:	429a      	cmp	r2, r3
 8006886:	d303      	bcc.n	8006890 <SCSI_Inquiry+0xd0>
    {
      len = params[4];
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3304      	adds	r3, #4
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8006890:	8bfb      	ldrh	r3, [r7, #30]
 8006892:	461a      	mov	r2, r3
 8006894:	6979      	ldr	r1, [r7, #20]
 8006896:	69b8      	ldr	r0, [r7, #24]
 8006898:	f001 f831 	bl	80078fe <SCSI_UpdateBotData>
  }

  return 0;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	200000b0 	.word	0x200000b0
 80068ac:	200000b8 	.word	0x200000b8

080068b0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80068b0:	b590      	push	{r4, r7, lr}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	460b      	mov	r3, r1
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068c4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d102      	bne.n	80068d2 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 80068cc:	f04f 33ff 	mov.w	r3, #4294967295
 80068d0:	e070      	b.n	80069b4 <SCSI_ReadCapacity10+0x104>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068d8:	685c      	ldr	r4, [r3, #4]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80068e0:	3308      	adds	r3, #8
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 80068e8:	3204      	adds	r2, #4
 80068ea:	7af8      	ldrb	r0, [r7, #11]
 80068ec:	4619      	mov	r1, r3
 80068ee:	47a0      	blx	r4
 80068f0:	4603      	mov	r3, r0
 80068f2:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80068f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d106      	bne.n	800690a <SCSI_ReadCapacity10+0x5a>
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006902:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006906:	2b02      	cmp	r3, #2
 8006908:	d108      	bne.n	800691c <SCSI_ReadCapacity10+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800690a:	7af9      	ldrb	r1, [r7, #11]
 800690c:	233a      	movs	r3, #58	; 0x3a
 800690e:	2202      	movs	r2, #2
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 fa71 	bl	8006df8 <SCSI_SenseCode>
    return -1;
 8006916:	f04f 33ff 	mov.w	r3, #4294967295
 800691a:	e04b      	b.n	80069b4 <SCSI_ReadCapacity10+0x104>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006924:	3b01      	subs	r3, #1
 8006926:	0e1b      	lsrs	r3, r3, #24
 8006928:	b2da      	uxtb	r2, r3
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006936:	3b01      	subs	r3, #1
 8006938:	0c1b      	lsrs	r3, r3, #16
 800693a:	b2da      	uxtb	r2, r3
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006948:	3b01      	subs	r3, #1
 800694a:	0a1b      	lsrs	r3, r3, #8
 800694c:	b2da      	uxtb	r2, r3
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695a:	b2db      	uxtb	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b2da      	uxtb	r2, r3
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800696a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800696e:	161b      	asrs	r3, r3, #24
 8006970:	b2da      	uxtb	r2, r3
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800697c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006980:	141b      	asrs	r3, r3, #16
 8006982:	b2da      	uxtb	r2, r3
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800698e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	b29b      	uxth	r3, r3
 8006996:	b2da      	uxtb	r2, r3
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2208      	movs	r2, #8
 80069b0:	60da      	str	r2, [r3, #12]

  return 0;
 80069b2:	2300      	movs	r3, #0

}
 80069b4:	4618      	mov	r0, r3
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd90      	pop	{r4, r7, pc}

080069bc <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80069bc:	b590      	push	{r4, r7, lr}
 80069be:	b089      	sub	sp, #36	; 0x24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	460b      	mov	r3, r1
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069d0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d102      	bne.n	80069de <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 80069d8:	f04f 33ff 	mov.w	r3, #4294967295
 80069dc:	e0a5      	b.n	8006b2a <SCSI_ReadCapacity16+0x16e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069e4:	685c      	ldr	r4, [r3, #4]
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80069ec:	3308      	adds	r3, #8
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 80069f4:	3204      	adds	r2, #4
 80069f6:	7af8      	ldrb	r0, [r7, #11]
 80069f8:	4619      	mov	r1, r3
 80069fa:	47a0      	blx	r4
 80069fc:	4603      	mov	r3, r0
 80069fe:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006a00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d106      	bne.n	8006a16 <SCSI_ReadCapacity16+0x5a>
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d108      	bne.n	8006a28 <SCSI_ReadCapacity16+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006a16:	7af9      	ldrb	r1, [r7, #11]
 8006a18:	233a      	movs	r3, #58	; 0x3a
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 f9eb 	bl	8006df8 <SCSI_SenseCode>
    return -1;
 8006a22:	f04f 33ff 	mov.w	r3, #4294967295
 8006a26:	e080      	b.n	8006b2a <SCSI_ReadCapacity16+0x16e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	330a      	adds	r3, #10
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	330b      	adds	r3, #11
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006a38:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	330c      	adds	r3, #12
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006a42:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	320d      	adds	r2, #13
 8006a48:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8006a4a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006a50:	2300      	movs	r3, #0
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e007      	b.n	8006a66 <SCSI_ReadCapacity16+0xaa>
  {
    hmsc->bot_data[idx] = 0U;
 8006a56:	7ffb      	ldrb	r3, [r7, #31]
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006a60:	7ffb      	ldrb	r3, [r7, #31]
 8006a62:	3301      	adds	r3, #1
 8006a64:	77fb      	strb	r3, [r7, #31]
 8006a66:	7ffa      	ldrb	r2, [r7, #31]
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d3f2      	bcc.n	8006a56 <SCSI_ReadCapacity16+0x9a>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	0e1b      	lsrs	r3, r3, #24
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	0c1b      	lsrs	r3, r3, #16
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	0a1b      	lsrs	r3, r3, #8
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006abe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006ac2:	161b      	asrs	r3, r3, #24
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006ad4:	141b      	asrs	r3, r3, #16
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006ae6:	0a1b      	lsrs	r3, r3, #8
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	330a      	adds	r3, #10
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	330b      	adds	r3, #11
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006b10:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	330c      	adds	r3, #12
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006b1a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	320d      	adds	r2, #13
 8006b20:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8006b22:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	60da      	str	r2, [r3, #12]

  return 0;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3724      	adds	r7, #36	; 0x24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd90      	pop	{r4, r7, pc}

08006b32 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b088      	sub	sp, #32
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	607a      	str	r2, [r7, #4]
 8006b3e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b46:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d102      	bne.n	8006b54 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8006b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b52:	e05e      	b.n	8006c12 <SCSI_ReadFormatCapacity+0xe0>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f107 0214 	add.w	r2, r7, #20
 8006b60:	f107 0110 	add.w	r1, r7, #16
 8006b64:	7af8      	ldrb	r0, [r7, #11]
 8006b66:	4798      	blx	r3
 8006b68:	4603      	mov	r3, r0
 8006b6a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006b6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d106      	bne.n	8006b82 <SCSI_ReadFormatCapacity+0x50>
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b7a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d108      	bne.n	8006b94 <SCSI_ReadFormatCapacity+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006b82:	7af9      	ldrb	r1, [r7, #11]
 8006b84:	233a      	movs	r3, #58	; 0x3a
 8006b86:	2202      	movs	r2, #2
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 f935 	bl	8006df8 <SCSI_SenseCode>
    return -1;
 8006b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b92:	e03e      	b.n	8006c12 <SCSI_ReadFormatCapacity+0xe0>
  }

  for (i = 0U; i < 12U ; i++)
 8006b94:	2300      	movs	r3, #0
 8006b96:	83fb      	strh	r3, [r7, #30]
 8006b98:	e007      	b.n	8006baa <SCSI_ReadFormatCapacity+0x78>
  {
    hmsc->bot_data[i] = 0U;
 8006b9a:	8bfb      	ldrh	r3, [r7, #30]
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8006ba4:	8bfb      	ldrh	r3, [r7, #30]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	83fb      	strh	r3, [r7, #30]
 8006baa:	8bfb      	ldrh	r3, [r7, #30]
 8006bac:	2b0b      	cmp	r3, #11
 8006bae:	d9f4      	bls.n	8006b9a <SCSI_ReadFormatCapacity+0x68>
  }

  hmsc->bot_data[3] = 0x08U;
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2208      	movs	r2, #8
 8006bb4:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	0e1b      	lsrs	r3, r3, #24
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	0c1b      	lsrs	r3, r3, #16
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	0a1b      	lsrs	r3, r3, #8
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	2202      	movs	r2, #2
 8006bea:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006bec:	8abb      	ldrh	r3, [r7, #20]
 8006bee:	141b      	asrs	r3, r3, #16
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8006bf6:	8abb      	ldrh	r3, [r7, #20]
 8006bf8:	0a1b      	lsrs	r3, r3, #8
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8006c02:	8abb      	ldrh	r3, [r7, #20]
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	220c      	movs	r2, #12
 8006c0e:	60da      	str	r2, [r3, #12]

  return 0;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	460b      	mov	r3, r1
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c30:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8006c32:	2317      	movs	r3, #23
 8006c34:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d102      	bne.n	8006c42 <SCSI_ModeSense6+0x26>
  {
    return -1;
 8006c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c40:	e011      	b.n	8006c66 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3304      	adds	r3, #4
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	8afa      	ldrh	r2, [r7, #22]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d303      	bcc.n	8006c58 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3304      	adds	r3, #4
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8006c58:	8afb      	ldrh	r3, [r7, #22]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4904      	ldr	r1, [pc, #16]	; (8006c70 <SCSI_ModeSense6+0x54>)
 8006c5e:	6938      	ldr	r0, [r7, #16]
 8006c60:	f000 fe4d 	bl	80078fe <SCSI_UpdateBotData>

  return 0;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	200000c0 	.word	0x200000c0

08006c74 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c88:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8006c8a:	231b      	movs	r3, #27
 8006c8c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d102      	bne.n	8006c9a <SCSI_ModeSense10+0x26>
  {
    return -1;
 8006c94:	f04f 33ff 	mov.w	r3, #4294967295
 8006c98:	e011      	b.n	8006cbe <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	8afa      	ldrh	r2, [r7, #22]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d303      	bcc.n	8006cb0 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3308      	adds	r3, #8
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8006cb0:	8afb      	ldrh	r3, [r7, #22]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	4904      	ldr	r1, [pc, #16]	; (8006cc8 <SCSI_ModeSense10+0x54>)
 8006cb6:	6938      	ldr	r0, [r7, #16]
 8006cb8:	f000 fe21 	bl	80078fe <SCSI_UpdateBotData>

  return 0;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	200000d8 	.word	0x200000d8

08006ccc <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ce0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d102      	bne.n	8006cee <SCSI_RequestSense+0x22>
  {
    return -1;
 8006ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cec:	e080      	b.n	8006df0 <SCSI_RequestSense+0x124>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10b      	bne.n	8006d12 <SCSI_RequestSense+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d00:	7f59      	ldrb	r1, [r3, #29]
 8006d02:	2320      	movs	r3, #32
 8006d04:	2205      	movs	r2, #5
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 f876 	bl	8006df8 <SCSI_SenseCode>
    return -1;
 8006d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d10:	e06e      	b.n	8006df0 <SCSI_RequestSense+0x124>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8006d12:	2300      	movs	r3, #0
 8006d14:	75fb      	strb	r3, [r7, #23]
 8006d16:	e007      	b.n	8006d28 <SCSI_RequestSense+0x5c>
  {
    hmsc->bot_data[i] = 0U;
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	2200      	movs	r2, #0
 8006d20:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8006d22:	7dfb      	ldrb	r3, [r7, #23]
 8006d24:	3301      	adds	r3, #1
 8006d26:	75fb      	strb	r3, [r7, #23]
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
 8006d2a:	2b11      	cmp	r3, #17
 8006d2c:	d9f4      	bls.n	8006d18 <SCSI_RequestSense+0x4c>
  }

  hmsc->bot_data[0] = 0x70U;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2270      	movs	r2, #112	; 0x70
 8006d32:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	220c      	movs	r2, #12
 8006d38:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d40:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d4a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d03f      	beq.n	8006dd2 <SCSI_RequestSense+0x106>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d58:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8006d64:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d72:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	4413      	add	r3, r2
 8006d80:	791a      	ldrb	r2, [r3, #4]
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d8c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	4413      	add	r3, r2
 8006d9a:	795a      	ldrb	r2, [r3, #5]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006daa:	3301      	adds	r3, #1
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dbe:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d105      	bne.n	8006dd2 <SCSI_RequestSense+0x106>
    {
      hmsc->scsi_sense_head = 0U;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2212      	movs	r2, #18
 8006dd6:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	2b12      	cmp	r3, #18
 8006de0:	d805      	bhi.n	8006dee <SCSI_RequestSense+0x122>
  {
    hmsc->bot_data_length = params[4];
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3304      	adds	r3, #4
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	461a      	mov	r2, r3
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	4608      	mov	r0, r1
 8006e02:	4611      	mov	r1, r2
 8006e04:	461a      	mov	r2, r3
 8006e06:	4603      	mov	r3, r0
 8006e08:	70fb      	strb	r3, [r7, #3]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	70bb      	strb	r3, [r7, #2]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e18:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d03d      	beq.n	8006e9c <SCSI_SenseCode+0xa4>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e26:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8006e32:	78b9      	ldrb	r1, [r7, #2]
 8006e34:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e3e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	4413      	add	r3, r2
 8006e4c:	787a      	ldrb	r2, [r7, #1]
 8006e4e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e56:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	4413      	add	r3, r2
 8006e64:	2200      	movs	r2, #0
 8006e66:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e6e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006e72:	3301      	adds	r3, #1
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e7c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e86:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d107      	bne.n	8006e9e <SCSI_SenseCode+0xa6>
  {
    hmsc->scsi_sense_tail = 0U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8006e9a:	e000      	b.n	8006e9e <SCSI_SenseCode+0xa6>
    return;
 8006e9c:	bf00      	nop
  }
}
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ebc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d102      	bne.n	8006eca <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8006ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec8:	e043      	b.n	8006f52 <SCSI_StartStopUnit+0xaa>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ed0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d10f      	bne.n	8006ef8 <SCSI_StartStopUnit+0x50>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3304      	adds	r3, #4
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d108      	bne.n	8006ef8 <SCSI_StartStopUnit+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8006ee6:	7af9      	ldrb	r1, [r7, #11]
 8006ee8:	2324      	movs	r3, #36	; 0x24
 8006eea:	2205      	movs	r2, #5
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7ff ff83 	bl	8006df8 <SCSI_SenseCode>

    return -1;
 8006ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef6:	e02c      	b.n	8006f52 <SCSI_StartStopUnit+0xaa>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3304      	adds	r3, #4
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d106      	bne.n	8006f14 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8006f12:	e01a      	b.n	8006f4a <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3304      	adds	r3, #4
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d106      	bne.n	8006f30 <SCSI_StartStopUnit+0x88>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f28:	2202      	movs	r2, #2
 8006f2a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8006f2e:	e00c      	b.n	8006f4a <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3304      	adds	r3, #4
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d105      	bne.n	8006f4a <SCSI_StartStopUnit+0xa2>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	60da      	str	r2, [r3, #12]

  return 0;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b087      	sub	sp, #28
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	460b      	mov	r3, r1
 8006f64:	607a      	str	r2, [r7, #4]
 8006f66:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f6e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d102      	bne.n	8006f7c <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8006f76:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7a:	e015      	b.n	8006fa8 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d106      	bne.n	8006f94 <SCSI_AllowPreventRemovable+0x3a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8006f92:	e005      	b.n	8006fa0 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	60da      	str	r2, [r3, #12]

  return 0;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	371c      	adds	r7, #28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fc8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d102      	bne.n	8006fd6 <SCSI_Read10+0x22>
  {
    return -1;
 8006fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd4:	e098      	b.n	8007108 <SCSI_Read10+0x154>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	7a1b      	ldrb	r3, [r3, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f040 808a 	bne.w	80070f4 <SCSI_Read10+0x140>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe6:	7f1b      	ldrb	r3, [r3, #28]
 8006fe8:	b25b      	sxtb	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	db0b      	blt.n	8007006 <SCSI_Read10+0x52>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff4:	7f59      	ldrb	r1, [r3, #29]
 8006ff6:	2320      	movs	r3, #32
 8006ff8:	2205      	movs	r2, #5
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff fefc 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 8007000:	f04f 33ff 	mov.w	r3, #4294967295
 8007004:	e080      	b.n	8007108 <SCSI_Read10+0x154>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800700c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007010:	2b02      	cmp	r3, #2
 8007012:	d108      	bne.n	8007026 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007014:	7af9      	ldrb	r1, [r7, #11]
 8007016:	233a      	movs	r3, #58	; 0x3a
 8007018:	2202      	movs	r2, #2
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f7ff feec 	bl	8006df8 <SCSI_SenseCode>

      return -1;
 8007020:	f04f 33ff 	mov.w	r3, #4294967295
 8007024:	e070      	b.n	8007108 <SCSI_Read10+0x154>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	7afa      	ldrb	r2, [r7, #11]
 8007030:	4610      	mov	r0, r2
 8007032:	4798      	blx	r3
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d008      	beq.n	800704c <SCSI_Read10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800703a:	7af9      	ldrb	r1, [r7, #11]
 800703c:	233a      	movs	r3, #58	; 0x3a
 800703e:	2202      	movs	r2, #2
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f7ff fed9 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 8007046:	f04f 33ff 	mov.w	r3, #4294967295
 800704a:	e05d      	b.n	8007108 <SCSI_Read10+0x154>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3302      	adds	r3, #2
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3303      	adds	r3, #3
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800705c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3304      	adds	r3, #4
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007066:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	3205      	adds	r2, #5
 800706c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800706e:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007076:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3307      	adds	r3, #7
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	021b      	lsls	r3, r3, #8
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	3208      	adds	r2, #8
 8007084:	7812      	ldrb	r2, [r2, #0]
 8007086:	4313      	orrs	r3, r2
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800708e:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007096:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800709e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a0:	7af9      	ldrb	r1, [r7, #11]
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 fadb 	bl	800765e <SCSI_CheckAddressRange>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	da02      	bge.n	80070b4 <SCSI_Read10+0x100>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80070ae:	f04f 33ff 	mov.w	r3, #4294967295
 80070b2:	e029      	b.n	8007108 <SCSI_Read10+0x154>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ba:	699a      	ldr	r2, [r3, #24]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c4:	6979      	ldr	r1, [r7, #20]
 80070c6:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80070ca:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 80070ce:	fb01 f303 	mul.w	r3, r1, r3
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d00b      	beq.n	80070ee <SCSI_Read10+0x13a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070dc:	7f59      	ldrb	r1, [r3, #29]
 80070de:	2320      	movs	r3, #32
 80070e0:	2205      	movs	r2, #5
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff fe88 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 80070e8:	f04f 33ff 	mov.w	r3, #4294967295
 80070ec:	e00c      	b.n	8007108 <SCSI_Read10+0x154>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2202      	movs	r2, #2
 80070f2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80070fa:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80070fc:	7afb      	ldrb	r3, [r7, #11]
 80070fe:	4619      	mov	r1, r3
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 fad5 	bl	80076b0 <SCSI_ProcessRead>
 8007106:	4603      	mov	r3, r0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	460b      	mov	r3, r1
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007124:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d102      	bne.n	8007132 <SCSI_Read12+0x22>
  {
    return -1;
 800712c:	f04f 33ff 	mov.w	r3, #4294967295
 8007130:	e0a2      	b.n	8007278 <SCSI_Read12+0x168>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	7a1b      	ldrb	r3, [r3, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	f040 8094 	bne.w	8007264 <SCSI_Read12+0x154>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007142:	7f1b      	ldrb	r3, [r3, #28]
 8007144:	b25b      	sxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	db0b      	blt.n	8007162 <SCSI_Read12+0x52>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007150:	7f59      	ldrb	r1, [r3, #29]
 8007152:	2320      	movs	r3, #32
 8007154:	2205      	movs	r2, #5
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7ff fe4e 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 800715c:	f04f 33ff 	mov.w	r3, #4294967295
 8007160:	e08a      	b.n	8007278 <SCSI_Read12+0x168>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007168:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800716c:	2b02      	cmp	r3, #2
 800716e:	d108      	bne.n	8007182 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007170:	7af9      	ldrb	r1, [r7, #11]
 8007172:	233a      	movs	r3, #58	; 0x3a
 8007174:	2202      	movs	r2, #2
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f7ff fe3e 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 800717c:	f04f 33ff 	mov.w	r3, #4294967295
 8007180:	e07a      	b.n	8007278 <SCSI_Read12+0x168>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	7afa      	ldrb	r2, [r7, #11]
 800718c:	4610      	mov	r0, r2
 800718e:	4798      	blx	r3
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d008      	beq.n	80071a8 <SCSI_Read12+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007196:	7af9      	ldrb	r1, [r7, #11]
 8007198:	233a      	movs	r3, #58	; 0x3a
 800719a:	2202      	movs	r2, #2
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff fe2b 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 80071a2:	f04f 33ff 	mov.w	r3, #4294967295
 80071a6:	e067      	b.n	8007278 <SCSI_Read12+0x168>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3302      	adds	r3, #2
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3303      	adds	r3, #3
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80071b8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3304      	adds	r3, #4
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80071c2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	3205      	adds	r2, #5
 80071c8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80071ca:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071d2:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3306      	adds	r3, #6
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3307      	adds	r3, #7
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80071e4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3308      	adds	r3, #8
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80071ee:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	3209      	adds	r2, #9
 80071f4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80071f6:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071fe:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007206:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800720e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007210:	7af9      	ldrb	r1, [r7, #11]
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 fa23 	bl	800765e <SCSI_CheckAddressRange>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	da02      	bge.n	8007224 <SCSI_Read12+0x114>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800721e:	f04f 33ff 	mov.w	r3, #4294967295
 8007222:	e029      	b.n	8007278 <SCSI_Read12+0x168>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722a:	699a      	ldr	r2, [r3, #24]
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007234:	6979      	ldr	r1, [r7, #20]
 8007236:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800723a:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800723e:	fb01 f303 	mul.w	r3, r1, r3
 8007242:	429a      	cmp	r2, r3
 8007244:	d00b      	beq.n	800725e <SCSI_Read12+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800724c:	7f59      	ldrb	r1, [r3, #29]
 800724e:	2320      	movs	r3, #32
 8007250:	2205      	movs	r2, #5
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7ff fdd0 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 8007258:	f04f 33ff 	mov.w	r3, #4294967295
 800725c:	e00c      	b.n	8007278 <SCSI_Read12+0x168>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2202      	movs	r2, #2
 8007262:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800726a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800726c:	7afb      	ldrb	r3, [r7, #11]
 800726e:	4619      	mov	r1, r3
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 fa1d 	bl	80076b0 <SCSI_ProcessRead>
 8007276:	4603      	mov	r3, r0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	460b      	mov	r3, r1
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007294:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <SCSI_Write10+0x22>
  {
    return -1;
 800729c:	f04f 33ff 	mov.w	r3, #4294967295
 80072a0:	e0bc      	b.n	800741c <SCSI_Write10+0x19c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	7a1b      	ldrb	r3, [r3, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f040 80b2 	bne.w	8007410 <SCSI_Write10+0x190>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10b      	bne.n	80072d0 <SCSI_Write10+0x50>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072be:	7f59      	ldrb	r1, [r3, #29]
 80072c0:	2320      	movs	r3, #32
 80072c2:	2205      	movs	r2, #5
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f7ff fd97 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 80072ca:	f04f 33ff 	mov.w	r3, #4294967295
 80072ce:	e0a5      	b.n	800741c <SCSI_Write10+0x19c>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d6:	7f1b      	ldrb	r3, [r3, #28]
 80072d8:	b25b      	sxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	da0b      	bge.n	80072f6 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e4:	7f59      	ldrb	r1, [r3, #29]
 80072e6:	2320      	movs	r3, #32
 80072e8:	2205      	movs	r2, #5
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f7ff fd84 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 80072f0:	f04f 33ff 	mov.w	r3, #4294967295
 80072f4:	e092      	b.n	800741c <SCSI_Write10+0x19c>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	7afa      	ldrb	r2, [r7, #11]
 8007300:	4610      	mov	r0, r2
 8007302:	4798      	blx	r3
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d008      	beq.n	800731c <SCSI_Write10+0x9c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800730a:	7af9      	ldrb	r1, [r7, #11]
 800730c:	233a      	movs	r3, #58	; 0x3a
 800730e:	2202      	movs	r2, #2
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7ff fd71 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 8007316:	f04f 33ff 	mov.w	r3, #4294967295
 800731a:	e07f      	b.n	800741c <SCSI_Write10+0x19c>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	7afa      	ldrb	r2, [r7, #11]
 8007326:	4610      	mov	r0, r2
 8007328:	4798      	blx	r3
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d008      	beq.n	8007342 <SCSI_Write10+0xc2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007330:	7af9      	ldrb	r1, [r7, #11]
 8007332:	2327      	movs	r3, #39	; 0x27
 8007334:	2202      	movs	r2, #2
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f7ff fd5e 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 800733c:	f04f 33ff 	mov.w	r3, #4294967295
 8007340:	e06c      	b.n	800741c <SCSI_Write10+0x19c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3302      	adds	r3, #2
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3303      	adds	r3, #3
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007352:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3304      	adds	r3, #4
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800735c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	3205      	adds	r2, #5
 8007362:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007364:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800736c:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3307      	adds	r3, #7
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	3208      	adds	r2, #8
 800737a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800737c:	4313      	orrs	r3, r2
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007384:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800738c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007396:	7af9      	ldrb	r1, [r7, #11]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f960 	bl	800765e <SCSI_CheckAddressRange>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	da02      	bge.n	80073aa <SCSI_Write10+0x12a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80073a4:	f04f 33ff 	mov.w	r3, #4294967295
 80073a8:	e038      	b.n	800741c <SCSI_Write10+0x19c>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073b8:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80073bc:	fb02 f303 	mul.w	r3, r2, r3
 80073c0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d00b      	beq.n	80073e8 <SCSI_Write10+0x168>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073d6:	7f59      	ldrb	r1, [r3, #29]
 80073d8:	2320      	movs	r3, #32
 80073da:	2205      	movs	r2, #5
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f7ff fd0b 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 80073e2:	f04f 33ff 	mov.w	r3, #4294967295
 80073e6:	e019      	b.n	800741c <SCSI_Write10+0x19c>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ee:	bf28      	it	cs
 80073f0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 80073f4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2201      	movs	r2, #1
 80073fa:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f103 0210 	add.w	r2, r3, #16
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	2101      	movs	r1, #1
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f002 fa4e 	bl	80098a8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800740c:	2300      	movs	r3, #0
 800740e:	e005      	b.n	800741c <SCSI_Write10+0x19c>
    return SCSI_ProcessWrite(pdev, lun);
 8007410:	7afb      	ldrb	r3, [r7, #11]
 8007412:	4619      	mov	r1, r3
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f9d5 	bl	80077c4 <SCSI_ProcessWrite>
 800741a:	4603      	mov	r3, r0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	460b      	mov	r3, r1
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007438:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d102      	bne.n	8007446 <SCSI_Write12+0x22>
  {
    return -1;
 8007440:	f04f 33ff 	mov.w	r3, #4294967295
 8007444:	e0cc      	b.n	80075e0 <SCSI_Write12+0x1bc>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	7a1b      	ldrb	r3, [r3, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	f040 80c2 	bne.w	80075d4 <SCSI_Write12+0x1b0>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10b      	bne.n	8007474 <SCSI_Write12+0x50>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007462:	7f59      	ldrb	r1, [r3, #29]
 8007464:	2320      	movs	r3, #32
 8007466:	2205      	movs	r2, #5
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7ff fcc5 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 800746e:	f04f 33ff 	mov.w	r3, #4294967295
 8007472:	e0b5      	b.n	80075e0 <SCSI_Write12+0x1bc>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800747a:	7f1b      	ldrb	r3, [r3, #28]
 800747c:	b25b      	sxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	da0b      	bge.n	800749a <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007488:	7f59      	ldrb	r1, [r3, #29]
 800748a:	2320      	movs	r3, #32
 800748c:	2205      	movs	r2, #5
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff fcb2 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 8007494:	f04f 33ff 	mov.w	r3, #4294967295
 8007498:	e0a2      	b.n	80075e0 <SCSI_Write12+0x1bc>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	7afa      	ldrb	r2, [r7, #11]
 80074a4:	4610      	mov	r0, r2
 80074a6:	4798      	blx	r3
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00b      	beq.n	80074c6 <SCSI_Write12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80074ae:	7af9      	ldrb	r1, [r7, #11]
 80074b0:	233a      	movs	r3, #58	; 0x3a
 80074b2:	2202      	movs	r2, #2
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff fc9f 	bl	8006df8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2205      	movs	r2, #5
 80074be:	721a      	strb	r2, [r3, #8]
      return -1;
 80074c0:	f04f 33ff 	mov.w	r3, #4294967295
 80074c4:	e08c      	b.n	80075e0 <SCSI_Write12+0x1bc>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	7afa      	ldrb	r2, [r7, #11]
 80074d0:	4610      	mov	r0, r2
 80074d2:	4798      	blx	r3
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00b      	beq.n	80074f2 <SCSI_Write12+0xce>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80074da:	7af9      	ldrb	r1, [r7, #11]
 80074dc:	2327      	movs	r3, #39	; 0x27
 80074de:	2202      	movs	r2, #2
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f7ff fc89 	bl	8006df8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	2205      	movs	r2, #5
 80074ea:	721a      	strb	r2, [r3, #8]
      return -1;
 80074ec:	f04f 33ff 	mov.w	r3, #4294967295
 80074f0:	e076      	b.n	80075e0 <SCSI_Write12+0x1bc>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	3302      	adds	r3, #2
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	3303      	adds	r3, #3
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007502:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3304      	adds	r3, #4
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800750c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	3205      	adds	r2, #5
 8007512:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007514:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800751c:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3306      	adds	r3, #6
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3307      	adds	r3, #7
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800752e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3308      	adds	r3, #8
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007538:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	3209      	adds	r2, #9
 800753e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007540:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007548:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007550:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755a:	7af9      	ldrb	r1, [r7, #11]
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 f87e 	bl	800765e <SCSI_CheckAddressRange>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	da02      	bge.n	800756e <SCSI_Write12+0x14a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007568:	f04f 33ff 	mov.w	r3, #4294967295
 800756c:	e038      	b.n	80075e0 <SCSI_Write12+0x1bc>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800757c:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8007580:	fb02 f303 	mul.w	r3, r2, r3
 8007584:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	429a      	cmp	r2, r3
 8007592:	d00b      	beq.n	80075ac <SCSI_Write12+0x188>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800759a:	7f59      	ldrb	r1, [r3, #29]
 800759c:	2320      	movs	r3, #32
 800759e:	2205      	movs	r2, #5
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f7ff fc29 	bl	8006df8 <SCSI_SenseCode>
      return -1;
 80075a6:	f04f 33ff 	mov.w	r3, #4294967295
 80075aa:	e019      	b.n	80075e0 <SCSI_Write12+0x1bc>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b2:	bf28      	it	cs
 80075b4:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 80075b8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2201      	movs	r2, #1
 80075be:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f103 0210 	add.w	r2, r3, #16
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	2101      	movs	r1, #1
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f002 f96c 	bl	80098a8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	e005      	b.n	80075e0 <SCSI_Write12+0x1bc>
    return SCSI_ProcessWrite(pdev, lun);
 80075d4:	7afb      	ldrb	r3, [r7, #11]
 80075d6:	4619      	mov	r1, r3
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 f8f3 	bl	80077c4 <SCSI_ProcessWrite>
 80075de:	4603      	mov	r3, r0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	460b      	mov	r3, r1
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075fc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <SCSI_Verify10+0x22>
  {
    return -1;
 8007604:	f04f 33ff 	mov.w	r3, #4294967295
 8007608:	e025      	b.n	8007656 <SCSI_Verify10+0x6e>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3301      	adds	r3, #1
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d008      	beq.n	800762a <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007618:	7af9      	ldrb	r1, [r7, #11]
 800761a:	2324      	movs	r3, #36	; 0x24
 800761c:	2205      	movs	r2, #5
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f7ff fbea 	bl	8006df8 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007624:	f04f 33ff 	mov.w	r3, #4294967295
 8007628:	e015      	b.n	8007656 <SCSI_Verify10+0x6e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007630:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763a:	7af9      	ldrb	r1, [r7, #11]
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f80e 	bl	800765e <SCSI_CheckAddressRange>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	da02      	bge.n	800764e <SCSI_Verify10+0x66>
  {
    return -1; /* error */
 8007648:	f04f 33ff 	mov.w	r3, #4294967295
 800764c:	e003      	b.n	8007656 <SCSI_Verify10+0x6e>
  }

  hmsc->bot_data_length = 0U;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2200      	movs	r2, #0
 8007652:	60da      	str	r2, [r3, #12]

  return 0;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b086      	sub	sp, #24
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	603b      	str	r3, [r7, #0]
 800766a:	460b      	mov	r3, r1
 800766c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007674:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800767c:	f04f 33ff 	mov.w	r3, #4294967295
 8007680:	e012      	b.n	80076a8 <SCSI_CheckAddressRange+0x4a>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	441a      	add	r2, r3
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800768e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007690:	429a      	cmp	r2, r3
 8007692:	d908      	bls.n	80076a6 <SCSI_CheckAddressRange+0x48>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007694:	7af9      	ldrb	r1, [r7, #11]
 8007696:	2321      	movs	r3, #33	; 0x21
 8007698:	2205      	movs	r2, #5
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7ff fbac 	bl	8006df8 <SCSI_SenseCode>
    return -1;
 80076a0:	f04f 33ff 	mov.w	r3, #4294967295
 80076a4:	e000      	b.n	80076a8 <SCSI_CheckAddressRange+0x4a>
  }

  return 0;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80076b0:	b590      	push	{r4, r7, lr}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076c2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076d2:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80076d6:	fb02 f303 	mul.w	r3, r2, r3
 80076da:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d102      	bne.n	80076e8 <SCSI_ProcessRead+0x38>
  {
    return -1;
 80076e2:	f04f 33ff 	mov.w	r3, #4294967295
 80076e6:	e069      	b.n	80077bc <SCSI_ProcessRead+0x10c>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ee:	bf28      	it	cs
 80076f0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 80076f4:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076fc:	691c      	ldr	r4, [r3, #16]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f103 0110 	add.w	r1, r3, #16
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800770a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007712:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007716:	4618      	mov	r0, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800771e:	b29b      	uxth	r3, r3
 8007720:	78f8      	ldrb	r0, [r7, #3]
 8007722:	47a0      	blx	r4
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	da08      	bge.n	800773c <SCSI_ProcessRead+0x8c>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800772a:	78f9      	ldrb	r1, [r7, #3]
 800772c:	2311      	movs	r3, #17
 800772e:	2204      	movs	r2, #4
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7ff fb61 	bl	8006df8 <SCSI_SenseCode>
    return -1;
 8007736:	f04f 33ff 	mov.w	r3, #4294967295
 800773a:	e03f      	b.n	80077bc <SCSI_ProcessRead+0x10c>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f103 0210 	add.w	r2, r3, #16
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2181      	movs	r1, #129	; 0x81
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f002 f876 	bl	8009838 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007752:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800775a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800775e:	4619      	mov	r1, r3
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	fbb3 f3f1 	udiv	r3, r3, r1
 8007766:	4413      	add	r3, r2
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800776e:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007776:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800777e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007782:	4619      	mov	r1, r3
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	fbb3 f3f1 	udiv	r3, r3, r1
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007792:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800779a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077a6:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d102      	bne.n	80077ba <SCSI_ProcessRead+0x10a>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2203      	movs	r2, #3
 80077b8:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd90      	pop	{r4, r7, pc}

080077c4 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80077c4:	b590      	push	{r4, r7, lr}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077d6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077e6:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80077ea:	fb02 f303 	mul.w	r3, r2, r3
 80077ee:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d102      	bne.n	80077fc <SCSI_ProcessWrite+0x38>
  {
    return -1;
 80077f6:	f04f 33ff 	mov.w	r3, #4294967295
 80077fa:	e07c      	b.n	80078f6 <SCSI_ProcessWrite+0x132>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007802:	bf28      	it	cs
 8007804:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8007808:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007810:	695c      	ldr	r4, [r3, #20]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f103 0110 	add.w	r1, r3, #16
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800781e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007826:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800782a:	4618      	mov	r0, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007832:	b29b      	uxth	r3, r3
 8007834:	78f8      	ldrb	r0, [r7, #3]
 8007836:	47a0      	blx	r4
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	da08      	bge.n	8007850 <SCSI_ProcessWrite+0x8c>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800783e:	78f9      	ldrb	r1, [r7, #3]
 8007840:	2303      	movs	r3, #3
 8007842:	2204      	movs	r2, #4
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff fad7 	bl	8006df8 <SCSI_SenseCode>
    return -1;
 800784a:	f04f 33ff 	mov.w	r3, #4294967295
 800784e:	e052      	b.n	80078f6 <SCSI_ProcessWrite+0x132>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007856:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800785e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007862:	4619      	mov	r1, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	fbb3 f3f1 	udiv	r3, r3, r1
 800786a:	4413      	add	r3, r2
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007872:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800787a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007882:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007886:	4619      	mov	r1, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	fbb3 f3f1 	udiv	r3, r3, r1
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007896:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800789e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078aa:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d104      	bne.n	80078c2 <SCSI_ProcessWrite+0xfe>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80078b8:	2100      	movs	r1, #0
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7fe fd16 	bl	80062ec <MSC_BOT_SendCSW>
 80078c0:	e018      	b.n	80078f4 <SCSI_ProcessWrite+0x130>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078d0:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80078d4:	fb02 f303 	mul.w	r3, r2, r3
 80078d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078dc:	bf28      	it	cs
 80078de:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 80078e2:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f103 0210 	add.w	r2, r3, #16
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2101      	movs	r1, #1
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f001 ffda 	bl	80098a8 <USBD_LL_PrepareReceive>
  }

  return 0;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd90      	pop	{r4, r7, pc}

080078fe <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80078fe:	b480      	push	{r7}
 8007900:	b087      	sub	sp, #28
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	60b9      	str	r1, [r7, #8]
 8007908:	4613      	mov	r3, r2
 800790a:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800790c:	88fb      	ldrh	r3, [r7, #6]
 800790e:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d102      	bne.n	800791c <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8007916:	f04f 33ff 	mov.w	r3, #4294967295
 800791a:	e013      	b.n	8007944 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800791c:	8afa      	ldrh	r2, [r7, #22]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8007922:	e00b      	b.n	800793c <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8007924:	8afb      	ldrh	r3, [r7, #22]
 8007926:	3b01      	subs	r3, #1
 8007928:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800792a:	8afb      	ldrh	r3, [r7, #22]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	441a      	add	r2, r3
 8007930:	8afb      	ldrh	r3, [r7, #22]
 8007932:	7811      	ldrb	r1, [r2, #0]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	460a      	mov	r2, r1
 800793a:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800793c:	8afb      	ldrh	r3, [r7, #22]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f0      	bne.n	8007924 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	4613      	mov	r3, r2
 800795c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007964:	2303      	movs	r3, #3
 8007966:	e01f      	b.n	80079a8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	79fa      	ldrb	r2, [r7, #7]
 800799a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f001 fd55 	bl	800944c <USBD_LL_Init>
 80079a2:	4603      	mov	r3, r0
 80079a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e016      	b.n	80079f6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	f107 020e 	add.w	r2, r7, #14
 80079e8:	4610      	mov	r0, r2
 80079ea:	4798      	blx	r3
 80079ec:	4602      	mov	r2, r0
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f001 fd6c 	bl	80094e4 <USBD_LL_Start>
 8007a0c:	4603      	mov	r3, r0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d009      	beq.n	8007a5a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	78fa      	ldrb	r2, [r7, #3]
 8007a50:	4611      	mov	r1, r2
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	78fa      	ldrb	r2, [r7, #3]
 8007a84:	4611      	mov	r1, r2
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	4798      	blx	r3
  }

  return USBD_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 ff90 	bl	80089cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007aba:	461a      	mov	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ac8:	f003 031f 	and.w	r3, r3, #31
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d01a      	beq.n	8007b06 <USBD_LL_SetupStage+0x72>
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d822      	bhi.n	8007b1a <USBD_LL_SetupStage+0x86>
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <USBD_LL_SetupStage+0x4a>
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d00a      	beq.n	8007af2 <USBD_LL_SetupStage+0x5e>
 8007adc:	e01d      	b.n	8007b1a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa62 	bl	8007fb0 <USBD_StdDevReq>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73fb      	strb	r3, [r7, #15]
      break;
 8007af0:	e020      	b.n	8007b34 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fac6 	bl	800808c <USBD_StdItfReq>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73fb      	strb	r3, [r7, #15]
      break;
 8007b04:	e016      	b.n	8007b34 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fb05 	bl	800811e <USBD_StdEPReq>
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]
      break;
 8007b18:	e00c      	b.n	8007b34 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 fdb7 	bl	800969c <USBD_LL_StallEP>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73fb      	strb	r3, [r7, #15]
      break;
 8007b32:	bf00      	nop
  }

  return ret;
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b086      	sub	sp, #24
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	460b      	mov	r3, r1
 8007b48:	607a      	str	r2, [r7, #4]
 8007b4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b4c:	7afb      	ldrb	r3, [r7, #11]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d138      	bne.n	8007bc4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	d14a      	bne.n	8007bfa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d913      	bls.n	8007b98 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	1ad2      	subs	r2, r2, r3
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	4293      	cmp	r3, r2
 8007b88:	bf28      	it	cs
 8007b8a:	4613      	movcs	r3, r2
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 fff2 	bl	8008b7a <USBD_CtlContinueRx>
 8007b96:	e030      	b.n	8007bfa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d10b      	bne.n	8007bbc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 ffed 	bl	8008b9c <USBD_CtlSendStatus>
 8007bc2:	e01a      	b.n	8007bfa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d114      	bne.n	8007bfa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00e      	beq.n	8007bfa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	7afa      	ldrb	r2, [r7, #11]
 8007be6:	4611      	mov	r1, r2
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	4798      	blx	r3
 8007bec:	4603      	mov	r3, r0
 8007bee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
 8007bf8:	e000      	b.n	8007bfc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007c12:	7afb      	ldrb	r3, [r7, #11]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d16b      	bne.n	8007cf0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3314      	adds	r3, #20
 8007c1c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d156      	bne.n	8007cd6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d914      	bls.n	8007c5e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	1ad2      	subs	r2, r2, r3
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	461a      	mov	r2, r3
 8007c48:	6879      	ldr	r1, [r7, #4]
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 ff84 	bl	8008b58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c50:	2300      	movs	r3, #0
 8007c52:	2200      	movs	r2, #0
 8007c54:	2100      	movs	r1, #0
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f001 fe26 	bl	80098a8 <USBD_LL_PrepareReceive>
 8007c5c:	e03b      	b.n	8007cd6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	68da      	ldr	r2, [r3, #12]
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d11c      	bne.n	8007ca4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d316      	bcc.n	8007ca4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d20f      	bcs.n	8007ca4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c84:	2200      	movs	r2, #0
 8007c86:	2100      	movs	r1, #0
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 ff65 	bl	8008b58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c96:	2300      	movs	r3, #0
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f001 fe03 	bl	80098a8 <USBD_LL_PrepareReceive>
 8007ca2:	e018      	b.n	8007cd6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d10b      	bne.n	8007cc8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d005      	beq.n	8007cc8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cc8:	2180      	movs	r1, #128	; 0x80
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f001 fce6 	bl	800969c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 ff76 	bl	8008bc2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d122      	bne.n	8007d26 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7ff fe98 	bl	8007a16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007cee:	e01a      	b.n	8007d26 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b03      	cmp	r3, #3
 8007cfa:	d114      	bne.n	8007d26 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00e      	beq.n	8007d26 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	7afa      	ldrb	r2, [r7, #11]
 8007d12:	4611      	mov	r1, r2
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	4798      	blx	r3
 8007d18:	4603      	mov	r3, r0
 8007d1a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007d1c:	7dfb      	ldrb	r3, [r7, #23]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	e000      	b.n	8007d28 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3718      	adds	r7, #24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e02f      	b.n	8007dc4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00f      	beq.n	8007d8e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d009      	beq.n	8007d8e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6852      	ldr	r2, [r2, #4]
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	4611      	mov	r1, r2
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d8e:	2340      	movs	r3, #64	; 0x40
 8007d90:	2200      	movs	r2, #0
 8007d92:	2100      	movs	r1, #0
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 fbd7 	bl	8009548 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2240      	movs	r2, #64	; 0x40
 8007da6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007daa:	2340      	movs	r3, #64	; 0x40
 8007dac:	2200      	movs	r2, #0
 8007dae:	2180      	movs	r1, #128	; 0x80
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 fbc9 	bl	8009548 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2240      	movs	r2, #64	; 0x40
 8007dc0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	78fa      	ldrb	r2, [r7, #3]
 8007ddc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2204      	movs	r2, #4
 8007e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	d106      	bne.n	8007e3a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e012      	b.n	8007e84 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d10b      	bne.n	8007e82 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e014      	b.n	8007ed0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d10d      	bne.n	8007ece <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d007      	beq.n	8007ece <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	4611      	mov	r1, r2
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e014      	b.n	8007f1c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d10d      	bne.n	8007f1a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d007      	beq.n	8007f1a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	78fa      	ldrb	r2, [r7, #3]
 8007f14:	4611      	mov	r1, r2
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d009      	beq.n	8007f68 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	6852      	ldr	r2, [r2, #4]
 8007f60:	b2d2      	uxtb	r2, r2
 8007f62:	4611      	mov	r1, r2
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	4798      	blx	r3
  }

  return USBD_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b087      	sub	sp, #28
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	3301      	adds	r3, #1
 8007f88:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f90:	8a3b      	ldrh	r3, [r7, #16]
 8007f92:	021b      	lsls	r3, r3, #8
 8007f94:	b21a      	sxth	r2, r3
 8007f96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	b21b      	sxth	r3, r3
 8007f9e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fa0:	89fb      	ldrh	r3, [r7, #14]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
	...

08007fb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d005      	beq.n	8007fd6 <USBD_StdDevReq+0x26>
 8007fca:	2b40      	cmp	r3, #64	; 0x40
 8007fcc:	d853      	bhi.n	8008076 <USBD_StdDevReq+0xc6>
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00b      	beq.n	8007fea <USBD_StdDevReq+0x3a>
 8007fd2:	2b20      	cmp	r3, #32
 8007fd4:	d14f      	bne.n	8008076 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	4798      	blx	r3
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fe8:	e04a      	b.n	8008080 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	785b      	ldrb	r3, [r3, #1]
 8007fee:	2b09      	cmp	r3, #9
 8007ff0:	d83b      	bhi.n	800806a <USBD_StdDevReq+0xba>
 8007ff2:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <USBD_StdDevReq+0x48>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	0800804d 	.word	0x0800804d
 8007ffc:	08008061 	.word	0x08008061
 8008000:	0800806b 	.word	0x0800806b
 8008004:	08008057 	.word	0x08008057
 8008008:	0800806b 	.word	0x0800806b
 800800c:	0800802b 	.word	0x0800802b
 8008010:	08008021 	.word	0x08008021
 8008014:	0800806b 	.word	0x0800806b
 8008018:	08008043 	.word	0x08008043
 800801c:	08008035 	.word	0x08008035
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f9de 	bl	80083e4 <USBD_GetDescriptor>
          break;
 8008028:	e024      	b.n	8008074 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fb43 	bl	80086b8 <USBD_SetAddress>
          break;
 8008032:	e01f      	b.n	8008074 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fb82 	bl	8008740 <USBD_SetConfig>
 800803c:	4603      	mov	r3, r0
 800803e:	73fb      	strb	r3, [r7, #15]
          break;
 8008040:	e018      	b.n	8008074 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fc21 	bl	800888c <USBD_GetConfig>
          break;
 800804a:	e013      	b.n	8008074 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fc52 	bl	80088f8 <USBD_GetStatus>
          break;
 8008054:	e00e      	b.n	8008074 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fc81 	bl	8008960 <USBD_SetFeature>
          break;
 800805e:	e009      	b.n	8008074 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fc90 	bl	8008988 <USBD_ClrFeature>
          break;
 8008068:	e004      	b.n	8008074 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fce7 	bl	8008a40 <USBD_CtlError>
          break;
 8008072:	bf00      	nop
      }
      break;
 8008074:	e004      	b.n	8008080 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fce1 	bl	8008a40 <USBD_CtlError>
      break;
 800807e:	bf00      	nop
  }

  return ret;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop

0800808c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080a2:	2b40      	cmp	r3, #64	; 0x40
 80080a4:	d005      	beq.n	80080b2 <USBD_StdItfReq+0x26>
 80080a6:	2b40      	cmp	r3, #64	; 0x40
 80080a8:	d82f      	bhi.n	800810a <USBD_StdItfReq+0x7e>
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <USBD_StdItfReq+0x26>
 80080ae:	2b20      	cmp	r3, #32
 80080b0:	d12b      	bne.n	800810a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	3b01      	subs	r3, #1
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d81d      	bhi.n	80080fc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	889b      	ldrh	r3, [r3, #4]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d813      	bhi.n	80080f2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	88db      	ldrh	r3, [r3, #6]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d110      	bne.n	8008106 <USBD_StdItfReq+0x7a>
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10d      	bne.n	8008106 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fd56 	bl	8008b9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080f0:	e009      	b.n	8008106 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fca3 	bl	8008a40 <USBD_CtlError>
          break;
 80080fa:	e004      	b.n	8008106 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fc9e 	bl	8008a40 <USBD_CtlError>
          break;
 8008104:	e000      	b.n	8008108 <USBD_StdItfReq+0x7c>
          break;
 8008106:	bf00      	nop
      }
      break;
 8008108:	e004      	b.n	8008114 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fc97 	bl	8008a40 <USBD_CtlError>
      break;
 8008112:	bf00      	nop
  }

  return ret;
 8008114:	7bfb      	ldrb	r3, [r7, #15]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	889b      	ldrh	r3, [r3, #4]
 8008130:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800813a:	2b40      	cmp	r3, #64	; 0x40
 800813c:	d007      	beq.n	800814e <USBD_StdEPReq+0x30>
 800813e:	2b40      	cmp	r3, #64	; 0x40
 8008140:	f200 8145 	bhi.w	80083ce <USBD_StdEPReq+0x2b0>
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00c      	beq.n	8008162 <USBD_StdEPReq+0x44>
 8008148:	2b20      	cmp	r3, #32
 800814a:	f040 8140 	bne.w	80083ce <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	4798      	blx	r3
 800815c:	4603      	mov	r3, r0
 800815e:	73fb      	strb	r3, [r7, #15]
      break;
 8008160:	e13a      	b.n	80083d8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	2b03      	cmp	r3, #3
 8008168:	d007      	beq.n	800817a <USBD_StdEPReq+0x5c>
 800816a:	2b03      	cmp	r3, #3
 800816c:	f300 8129 	bgt.w	80083c2 <USBD_StdEPReq+0x2a4>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d07f      	beq.n	8008274 <USBD_StdEPReq+0x156>
 8008174:	2b01      	cmp	r3, #1
 8008176:	d03c      	beq.n	80081f2 <USBD_StdEPReq+0xd4>
 8008178:	e123      	b.n	80083c2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d002      	beq.n	800818c <USBD_StdEPReq+0x6e>
 8008186:	2b03      	cmp	r3, #3
 8008188:	d016      	beq.n	80081b8 <USBD_StdEPReq+0x9a>
 800818a:	e02c      	b.n	80081e6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00d      	beq.n	80081ae <USBD_StdEPReq+0x90>
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	2b80      	cmp	r3, #128	; 0x80
 8008196:	d00a      	beq.n	80081ae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 fa7d 	bl	800969c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081a2:	2180      	movs	r1, #128	; 0x80
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 fa79 	bl	800969c <USBD_LL_StallEP>
 80081aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081ac:	e020      	b.n	80081f0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fc45 	bl	8008a40 <USBD_CtlError>
              break;
 80081b6:	e01b      	b.n	80081f0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	885b      	ldrh	r3, [r3, #2]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10e      	bne.n	80081de <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00b      	beq.n	80081de <USBD_StdEPReq+0xc0>
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	2b80      	cmp	r3, #128	; 0x80
 80081ca:	d008      	beq.n	80081de <USBD_StdEPReq+0xc0>
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	88db      	ldrh	r3, [r3, #6]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d104      	bne.n	80081de <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f001 fa5f 	bl	800969c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fcdc 	bl	8008b9c <USBD_CtlSendStatus>

              break;
 80081e4:	e004      	b.n	80081f0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fc29 	bl	8008a40 <USBD_CtlError>
              break;
 80081ee:	bf00      	nop
          }
          break;
 80081f0:	e0ec      	b.n	80083cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d002      	beq.n	8008204 <USBD_StdEPReq+0xe6>
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d016      	beq.n	8008230 <USBD_StdEPReq+0x112>
 8008202:	e030      	b.n	8008266 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00d      	beq.n	8008226 <USBD_StdEPReq+0x108>
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b80      	cmp	r3, #128	; 0x80
 800820e:	d00a      	beq.n	8008226 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 fa41 	bl	800969c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800821a:	2180      	movs	r1, #128	; 0x80
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 fa3d 	bl	800969c <USBD_LL_StallEP>
 8008222:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008224:	e025      	b.n	8008272 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fc09 	bl	8008a40 <USBD_CtlError>
              break;
 800822e:	e020      	b.n	8008272 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	885b      	ldrh	r3, [r3, #2]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d11b      	bne.n	8008270 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823e:	2b00      	cmp	r3, #0
 8008240:	d004      	beq.n	800824c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 fa5e 	bl	8009708 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fca5 	bl	8008b9c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	4798      	blx	r3
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008264:	e004      	b.n	8008270 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fbe9 	bl	8008a40 <USBD_CtlError>
              break;
 800826e:	e000      	b.n	8008272 <USBD_StdEPReq+0x154>
              break;
 8008270:	bf00      	nop
          }
          break;
 8008272:	e0ab      	b.n	80083cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d002      	beq.n	8008286 <USBD_StdEPReq+0x168>
 8008280:	2b03      	cmp	r3, #3
 8008282:	d032      	beq.n	80082ea <USBD_StdEPReq+0x1cc>
 8008284:	e097      	b.n	80083b6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d007      	beq.n	800829c <USBD_StdEPReq+0x17e>
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	2b80      	cmp	r3, #128	; 0x80
 8008290:	d004      	beq.n	800829c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fbd3 	bl	8008a40 <USBD_CtlError>
                break;
 800829a:	e091      	b.n	80083c0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800829c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	da0b      	bge.n	80082bc <USBD_StdEPReq+0x19e>
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082aa:	4613      	mov	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	3310      	adds	r3, #16
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	4413      	add	r3, r2
 80082b8:	3304      	adds	r3, #4
 80082ba:	e00b      	b.n	80082d4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	4413      	add	r3, r2
 80082d2:	3304      	adds	r3, #4
 80082d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2202      	movs	r2, #2
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fc1d 	bl	8008b22 <USBD_CtlSendData>
              break;
 80082e8:	e06a      	b.n	80083c0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	da11      	bge.n	8008316 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
 80082f4:	f003 020f 	and.w	r2, r3, #15
 80082f8:	6879      	ldr	r1, [r7, #4]
 80082fa:	4613      	mov	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	440b      	add	r3, r1
 8008304:	3324      	adds	r3, #36	; 0x24
 8008306:	881b      	ldrh	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d117      	bne.n	800833c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fb96 	bl	8008a40 <USBD_CtlError>
                  break;
 8008314:	e054      	b.n	80083c0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	f003 020f 	and.w	r2, r3, #15
 800831c:	6879      	ldr	r1, [r7, #4]
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	440b      	add	r3, r1
 8008328:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d104      	bne.n	800833c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fb83 	bl	8008a40 <USBD_CtlError>
                  break;
 800833a:	e041      	b.n	80083c0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800833c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008340:	2b00      	cmp	r3, #0
 8008342:	da0b      	bge.n	800835c <USBD_StdEPReq+0x23e>
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800834a:	4613      	mov	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	3310      	adds	r3, #16
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	4413      	add	r3, r2
 8008358:	3304      	adds	r3, #4
 800835a:	e00b      	b.n	8008374 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008362:	4613      	mov	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	4413      	add	r3, r2
 8008372:	3304      	adds	r3, #4
 8008374:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <USBD_StdEPReq+0x264>
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	2b80      	cmp	r3, #128	; 0x80
 8008380:	d103      	bne.n	800838a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	e00e      	b.n	80083a8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 f9f0 	bl	8009774 <USBD_LL_IsStallEP>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2201      	movs	r2, #1
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	e002      	b.n	80083a8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2200      	movs	r2, #0
 80083a6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2202      	movs	r2, #2
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fbb7 	bl	8008b22 <USBD_CtlSendData>
              break;
 80083b4:	e004      	b.n	80083c0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fb41 	bl	8008a40 <USBD_CtlError>
              break;
 80083be:	bf00      	nop
          }
          break;
 80083c0:	e004      	b.n	80083cc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fb3b 	bl	8008a40 <USBD_CtlError>
          break;
 80083ca:	bf00      	nop
      }
      break;
 80083cc:	e004      	b.n	80083d8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fb35 	bl	8008a40 <USBD_CtlError>
      break;
 80083d6:	bf00      	nop
  }

  return ret;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083ee:	2300      	movs	r3, #0
 80083f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083f2:	2300      	movs	r3, #0
 80083f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	885b      	ldrh	r3, [r3, #2]
 80083fe:	0a1b      	lsrs	r3, r3, #8
 8008400:	b29b      	uxth	r3, r3
 8008402:	3b01      	subs	r3, #1
 8008404:	2b06      	cmp	r3, #6
 8008406:	f200 8128 	bhi.w	800865a <USBD_GetDescriptor+0x276>
 800840a:	a201      	add	r2, pc, #4	; (adr r2, 8008410 <USBD_GetDescriptor+0x2c>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	0800842d 	.word	0x0800842d
 8008414:	08008445 	.word	0x08008445
 8008418:	08008485 	.word	0x08008485
 800841c:	0800865b 	.word	0x0800865b
 8008420:	0800865b 	.word	0x0800865b
 8008424:	080085fb 	.word	0x080085fb
 8008428:	08008627 	.word	0x08008627
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	7c12      	ldrb	r2, [r2, #16]
 8008438:	f107 0108 	add.w	r1, r7, #8
 800843c:	4610      	mov	r0, r2
 800843e:	4798      	blx	r3
 8008440:	60f8      	str	r0, [r7, #12]
      break;
 8008442:	e112      	b.n	800866a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	7c1b      	ldrb	r3, [r3, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10d      	bne.n	8008468 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008454:	f107 0208 	add.w	r2, r7, #8
 8008458:	4610      	mov	r0, r2
 800845a:	4798      	blx	r3
 800845c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3301      	adds	r3, #1
 8008462:	2202      	movs	r2, #2
 8008464:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008466:	e100      	b.n	800866a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	f107 0208 	add.w	r2, r7, #8
 8008474:	4610      	mov	r0, r2
 8008476:	4798      	blx	r3
 8008478:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3301      	adds	r3, #1
 800847e:	2202      	movs	r2, #2
 8008480:	701a      	strb	r2, [r3, #0]
      break;
 8008482:	e0f2      	b.n	800866a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	885b      	ldrh	r3, [r3, #2]
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b05      	cmp	r3, #5
 800848c:	f200 80ac 	bhi.w	80085e8 <USBD_GetDescriptor+0x204>
 8008490:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <USBD_GetDescriptor+0xb4>)
 8008492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008496:	bf00      	nop
 8008498:	080084b1 	.word	0x080084b1
 800849c:	080084e5 	.word	0x080084e5
 80084a0:	08008519 	.word	0x08008519
 80084a4:	0800854d 	.word	0x0800854d
 80084a8:	08008581 	.word	0x08008581
 80084ac:	080085b5 	.word	0x080085b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00b      	beq.n	80084d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	7c12      	ldrb	r2, [r2, #16]
 80084c8:	f107 0108 	add.w	r1, r7, #8
 80084cc:	4610      	mov	r0, r2
 80084ce:	4798      	blx	r3
 80084d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084d2:	e091      	b.n	80085f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fab2 	bl	8008a40 <USBD_CtlError>
            err++;
 80084dc:	7afb      	ldrb	r3, [r7, #11]
 80084de:	3301      	adds	r3, #1
 80084e0:	72fb      	strb	r3, [r7, #11]
          break;
 80084e2:	e089      	b.n	80085f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00b      	beq.n	8008508 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	7c12      	ldrb	r2, [r2, #16]
 80084fc:	f107 0108 	add.w	r1, r7, #8
 8008500:	4610      	mov	r0, r2
 8008502:	4798      	blx	r3
 8008504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008506:	e077      	b.n	80085f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fa98 	bl	8008a40 <USBD_CtlError>
            err++;
 8008510:	7afb      	ldrb	r3, [r7, #11]
 8008512:	3301      	adds	r3, #1
 8008514:	72fb      	strb	r3, [r7, #11]
          break;
 8008516:	e06f      	b.n	80085f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00b      	beq.n	800853c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	7c12      	ldrb	r2, [r2, #16]
 8008530:	f107 0108 	add.w	r1, r7, #8
 8008534:	4610      	mov	r0, r2
 8008536:	4798      	blx	r3
 8008538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800853a:	e05d      	b.n	80085f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fa7e 	bl	8008a40 <USBD_CtlError>
            err++;
 8008544:	7afb      	ldrb	r3, [r7, #11]
 8008546:	3301      	adds	r3, #1
 8008548:	72fb      	strb	r3, [r7, #11]
          break;
 800854a:	e055      	b.n	80085f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00b      	beq.n	8008570 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	7c12      	ldrb	r2, [r2, #16]
 8008564:	f107 0108 	add.w	r1, r7, #8
 8008568:	4610      	mov	r0, r2
 800856a:	4798      	blx	r3
 800856c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800856e:	e043      	b.n	80085f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fa64 	bl	8008a40 <USBD_CtlError>
            err++;
 8008578:	7afb      	ldrb	r3, [r7, #11]
 800857a:	3301      	adds	r3, #1
 800857c:	72fb      	strb	r3, [r7, #11]
          break;
 800857e:	e03b      	b.n	80085f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008586:	695b      	ldr	r3, [r3, #20]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	7c12      	ldrb	r2, [r2, #16]
 8008598:	f107 0108 	add.w	r1, r7, #8
 800859c:	4610      	mov	r0, r2
 800859e:	4798      	blx	r3
 80085a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085a2:	e029      	b.n	80085f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fa4a 	bl	8008a40 <USBD_CtlError>
            err++;
 80085ac:	7afb      	ldrb	r3, [r7, #11]
 80085ae:	3301      	adds	r3, #1
 80085b0:	72fb      	strb	r3, [r7, #11]
          break;
 80085b2:	e021      	b.n	80085f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00b      	beq.n	80085d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	7c12      	ldrb	r2, [r2, #16]
 80085cc:	f107 0108 	add.w	r1, r7, #8
 80085d0:	4610      	mov	r0, r2
 80085d2:	4798      	blx	r3
 80085d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085d6:	e00f      	b.n	80085f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fa30 	bl	8008a40 <USBD_CtlError>
            err++;
 80085e0:	7afb      	ldrb	r3, [r7, #11]
 80085e2:	3301      	adds	r3, #1
 80085e4:	72fb      	strb	r3, [r7, #11]
          break;
 80085e6:	e007      	b.n	80085f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fa28 	bl	8008a40 <USBD_CtlError>
          err++;
 80085f0:	7afb      	ldrb	r3, [r7, #11]
 80085f2:	3301      	adds	r3, #1
 80085f4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80085f6:	bf00      	nop
      }
      break;
 80085f8:	e037      	b.n	800866a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	7c1b      	ldrb	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d109      	bne.n	8008616 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860a:	f107 0208 	add.w	r2, r7, #8
 800860e:	4610      	mov	r0, r2
 8008610:	4798      	blx	r3
 8008612:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008614:	e029      	b.n	800866a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fa11 	bl	8008a40 <USBD_CtlError>
        err++;
 800861e:	7afb      	ldrb	r3, [r7, #11]
 8008620:	3301      	adds	r3, #1
 8008622:	72fb      	strb	r3, [r7, #11]
      break;
 8008624:	e021      	b.n	800866a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	7c1b      	ldrb	r3, [r3, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10d      	bne.n	800864a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008636:	f107 0208 	add.w	r2, r7, #8
 800863a:	4610      	mov	r0, r2
 800863c:	4798      	blx	r3
 800863e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3301      	adds	r3, #1
 8008644:	2207      	movs	r2, #7
 8008646:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008648:	e00f      	b.n	800866a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f9f7 	bl	8008a40 <USBD_CtlError>
        err++;
 8008652:	7afb      	ldrb	r3, [r7, #11]
 8008654:	3301      	adds	r3, #1
 8008656:	72fb      	strb	r3, [r7, #11]
      break;
 8008658:	e007      	b.n	800866a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f9ef 	bl	8008a40 <USBD_CtlError>
      err++;
 8008662:	7afb      	ldrb	r3, [r7, #11]
 8008664:	3301      	adds	r3, #1
 8008666:	72fb      	strb	r3, [r7, #11]
      break;
 8008668:	bf00      	nop
  }

  if (err != 0U)
 800866a:	7afb      	ldrb	r3, [r7, #11]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d11e      	bne.n	80086ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	88db      	ldrh	r3, [r3, #6]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d016      	beq.n	80086a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008678:	893b      	ldrh	r3, [r7, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00e      	beq.n	800869c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	88da      	ldrh	r2, [r3, #6]
 8008682:	893b      	ldrh	r3, [r7, #8]
 8008684:	4293      	cmp	r3, r2
 8008686:	bf28      	it	cs
 8008688:	4613      	movcs	r3, r2
 800868a:	b29b      	uxth	r3, r3
 800868c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800868e:	893b      	ldrh	r3, [r7, #8]
 8008690:	461a      	mov	r2, r3
 8008692:	68f9      	ldr	r1, [r7, #12]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fa44 	bl	8008b22 <USBD_CtlSendData>
 800869a:	e009      	b.n	80086b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f9ce 	bl	8008a40 <USBD_CtlError>
 80086a4:	e004      	b.n	80086b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fa78 	bl	8008b9c <USBD_CtlSendStatus>
 80086ac:	e000      	b.n	80086b0 <USBD_GetDescriptor+0x2cc>
    return;
 80086ae:	bf00      	nop
  }
}
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop

080086b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	889b      	ldrh	r3, [r3, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d131      	bne.n	800872e <USBD_SetAddress+0x76>
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	88db      	ldrh	r3, [r3, #6]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d12d      	bne.n	800872e <USBD_SetAddress+0x76>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	885b      	ldrh	r3, [r3, #2]
 80086d6:	2b7f      	cmp	r3, #127	; 0x7f
 80086d8:	d829      	bhi.n	800872e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	885b      	ldrh	r3, [r3, #2]
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d104      	bne.n	80086fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f9a3 	bl	8008a40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fa:	e01d      	b.n	8008738 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	7bfa      	ldrb	r2, [r7, #15]
 8008700:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 f85f 	bl	80097cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa44 	bl	8008b9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d004      	beq.n	8008724 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2202      	movs	r2, #2
 800871e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008722:	e009      	b.n	8008738 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800872c:	e004      	b.n	8008738 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f985 	bl	8008a40 <USBD_CtlError>
  }
}
 8008736:	bf00      	nop
 8008738:	bf00      	nop
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	885b      	ldrh	r3, [r3, #2]
 8008752:	b2da      	uxtb	r2, r3
 8008754:	4b4c      	ldr	r3, [pc, #304]	; (8008888 <USBD_SetConfig+0x148>)
 8008756:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008758:	4b4b      	ldr	r3, [pc, #300]	; (8008888 <USBD_SetConfig+0x148>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d905      	bls.n	800876c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f96c 	bl	8008a40 <USBD_CtlError>
    return USBD_FAIL;
 8008768:	2303      	movs	r3, #3
 800876a:	e088      	b.n	800887e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b02      	cmp	r3, #2
 8008776:	d002      	beq.n	800877e <USBD_SetConfig+0x3e>
 8008778:	2b03      	cmp	r3, #3
 800877a:	d025      	beq.n	80087c8 <USBD_SetConfig+0x88>
 800877c:	e071      	b.n	8008862 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800877e:	4b42      	ldr	r3, [pc, #264]	; (8008888 <USBD_SetConfig+0x148>)
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d01c      	beq.n	80087c0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008786:	4b40      	ldr	r3, [pc, #256]	; (8008888 <USBD_SetConfig+0x148>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008790:	4b3d      	ldr	r3, [pc, #244]	; (8008888 <USBD_SetConfig+0x148>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7ff f948 	bl	8007a2c <USBD_SetClassConfig>
 800879c:	4603      	mov	r3, r0
 800879e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d004      	beq.n	80087b0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f949 	bl	8008a40 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087ae:	e065      	b.n	800887c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f9f3 	bl	8008b9c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2203      	movs	r2, #3
 80087ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80087be:	e05d      	b.n	800887c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f9eb 	bl	8008b9c <USBD_CtlSendStatus>
      break;
 80087c6:	e059      	b.n	800887c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80087c8:	4b2f      	ldr	r3, [pc, #188]	; (8008888 <USBD_SetConfig+0x148>)
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d112      	bne.n	80087f6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80087d8:	4b2b      	ldr	r3, [pc, #172]	; (8008888 <USBD_SetConfig+0x148>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087e2:	4b29      	ldr	r3, [pc, #164]	; (8008888 <USBD_SetConfig+0x148>)
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7ff f93b 	bl	8007a64 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f9d4 	bl	8008b9c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087f4:	e042      	b.n	800887c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80087f6:	4b24      	ldr	r3, [pc, #144]	; (8008888 <USBD_SetConfig+0x148>)
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	461a      	mov	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	429a      	cmp	r2, r3
 8008802:	d02a      	beq.n	800885a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	b2db      	uxtb	r3, r3
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7ff f929 	bl	8007a64 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008812:	4b1d      	ldr	r3, [pc, #116]	; (8008888 <USBD_SetConfig+0x148>)
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800881c:	4b1a      	ldr	r3, [pc, #104]	; (8008888 <USBD_SetConfig+0x148>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7ff f902 	bl	8007a2c <USBD_SetClassConfig>
 8008828:	4603      	mov	r3, r0
 800882a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00f      	beq.n	8008852 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f903 	bl	8008a40 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	b2db      	uxtb	r3, r3
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff f90e 	bl	8007a64 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008850:	e014      	b.n	800887c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f9a2 	bl	8008b9c <USBD_CtlSendStatus>
      break;
 8008858:	e010      	b.n	800887c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f99e 	bl	8008b9c <USBD_CtlSendStatus>
      break;
 8008860:	e00c      	b.n	800887c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f8eb 	bl	8008a40 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800886a:	4b07      	ldr	r3, [pc, #28]	; (8008888 <USBD_SetConfig+0x148>)
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff f8f7 	bl	8007a64 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008876:	2303      	movs	r3, #3
 8008878:	73fb      	strb	r3, [r7, #15]
      break;
 800887a:	bf00      	nop
  }

  return ret;
 800887c:	7bfb      	ldrb	r3, [r7, #15]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	200001c8 	.word	0x200001c8

0800888c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	88db      	ldrh	r3, [r3, #6]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d004      	beq.n	80088a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800889e:	6839      	ldr	r1, [r7, #0]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f8cd 	bl	8008a40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088a6:	e023      	b.n	80088f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	dc02      	bgt.n	80088ba <USBD_GetConfig+0x2e>
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dc03      	bgt.n	80088c0 <USBD_GetConfig+0x34>
 80088b8:	e015      	b.n	80088e6 <USBD_GetConfig+0x5a>
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d00b      	beq.n	80088d6 <USBD_GetConfig+0x4a>
 80088be:	e012      	b.n	80088e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3308      	adds	r3, #8
 80088ca:	2201      	movs	r2, #1
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f927 	bl	8008b22 <USBD_CtlSendData>
        break;
 80088d4:	e00c      	b.n	80088f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	3304      	adds	r3, #4
 80088da:	2201      	movs	r2, #1
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f91f 	bl	8008b22 <USBD_CtlSendData>
        break;
 80088e4:	e004      	b.n	80088f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f8a9 	bl	8008a40 <USBD_CtlError>
        break;
 80088ee:	bf00      	nop
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008908:	b2db      	uxtb	r3, r3
 800890a:	3b01      	subs	r3, #1
 800890c:	2b02      	cmp	r3, #2
 800890e:	d81e      	bhi.n	800894e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	88db      	ldrh	r3, [r3, #6]
 8008914:	2b02      	cmp	r3, #2
 8008916:	d004      	beq.n	8008922 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f890 	bl	8008a40 <USBD_CtlError>
        break;
 8008920:	e01a      	b.n	8008958 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800892e:	2b00      	cmp	r3, #0
 8008930:	d005      	beq.n	800893e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	f043 0202 	orr.w	r2, r3, #2
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	330c      	adds	r3, #12
 8008942:	2202      	movs	r2, #2
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f8eb 	bl	8008b22 <USBD_CtlSendData>
      break;
 800894c:	e004      	b.n	8008958 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f875 	bl	8008a40 <USBD_CtlError>
      break;
 8008956:	bf00      	nop
  }
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	885b      	ldrh	r3, [r3, #2]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d106      	bne.n	8008980 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f90e 	bl	8008b9c <USBD_CtlSendStatus>
  }
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008998:	b2db      	uxtb	r3, r3
 800899a:	3b01      	subs	r3, #1
 800899c:	2b02      	cmp	r3, #2
 800899e:	d80b      	bhi.n	80089b8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	885b      	ldrh	r3, [r3, #2]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d10c      	bne.n	80089c2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f8f3 	bl	8008b9c <USBD_CtlSendStatus>
      }
      break;
 80089b6:	e004      	b.n	80089c2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f840 	bl	8008a40 <USBD_CtlError>
      break;
 80089c0:	e000      	b.n	80089c4 <USBD_ClrFeature+0x3c>
      break;
 80089c2:	bf00      	nop
  }
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	781a      	ldrb	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3301      	adds	r3, #1
 80089e6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	781a      	ldrb	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3301      	adds	r3, #1
 80089f4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f7ff fabb 	bl	8007f72 <SWAPBYTE>
 80089fc:	4603      	mov	r3, r0
 80089fe:	461a      	mov	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3301      	adds	r3, #1
 8008a08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f7ff faae 	bl	8007f72 <SWAPBYTE>
 8008a16:	4603      	mov	r3, r0
 8008a18:	461a      	mov	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3301      	adds	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f7ff faa1 	bl	8007f72 <SWAPBYTE>
 8008a30:	4603      	mov	r3, r0
 8008a32:	461a      	mov	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	80da      	strh	r2, [r3, #6]
}
 8008a38:	bf00      	nop
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a4a:	2180      	movs	r1, #128	; 0x80
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fe25 	bl	800969c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a52:	2100      	movs	r1, #0
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fe21 	bl	800969c <USBD_LL_StallEP>
}
 8008a5a:	bf00      	nop
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b086      	sub	sp, #24
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d036      	beq.n	8008ae6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008a7c:	6938      	ldr	r0, [r7, #16]
 8008a7e:	f000 f836 	bl	8008aee <USBD_GetLen>
 8008a82:	4603      	mov	r3, r0
 8008a84:	3301      	adds	r3, #1
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	4413      	add	r3, r2
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	7812      	ldrb	r2, [r2, #0]
 8008a9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a9c:	7dfb      	ldrb	r3, [r7, #23]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	2203      	movs	r2, #3
 8008aaa:	701a      	strb	r2, [r3, #0]
  idx++;
 8008aac:	7dfb      	ldrb	r3, [r7, #23]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ab2:	e013      	b.n	8008adc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	4413      	add	r3, r2
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	7812      	ldrb	r2, [r2, #0]
 8008abe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	613b      	str	r3, [r7, #16]
    idx++;
 8008ac6:	7dfb      	ldrb	r3, [r7, #23]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1e7      	bne.n	8008ab4 <USBD_GetString+0x52>
 8008ae4:	e000      	b.n	8008ae8 <USBD_GetString+0x86>
    return;
 8008ae6:	bf00      	nop
  }
}
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b085      	sub	sp, #20
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008af6:	2300      	movs	r3, #0
 8008af8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008afe:	e005      	b.n	8008b0c <USBD_GetLen+0x1e>
  {
    len++;
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
 8008b02:	3301      	adds	r3, #1
 8008b04:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1f5      	bne.n	8008b00 <USBD_GetLen+0x12>
  }

  return len;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	60b9      	str	r1, [r7, #8]
 8008b2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2202      	movs	r2, #2
 8008b32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	2100      	movs	r1, #0
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 fe75 	bl	8009838 <USBD_LL_Transmit>

  return USBD_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	2100      	movs	r1, #0
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 fe64 	bl	8009838 <USBD_LL_Transmit>

  return USBD_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	60f8      	str	r0, [r7, #12]
 8008b82:	60b9      	str	r1, [r7, #8]
 8008b84:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f000 fe8b 	bl	80098a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2204      	movs	r2, #4
 8008ba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bac:	2300      	movs	r3, #0
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fe40 	bl	8009838 <USBD_LL_Transmit>

  return USBD_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2205      	movs	r2, #5
 8008bce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fe65 	bl	80098a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008bec:	2200      	movs	r2, #0
 8008bee:	4912      	ldr	r1, [pc, #72]	; (8008c38 <MX_USB_DEVICE_Init+0x50>)
 8008bf0:	4812      	ldr	r0, [pc, #72]	; (8008c3c <MX_USB_DEVICE_Init+0x54>)
 8008bf2:	f7fe fead 	bl	8007950 <USBD_Init>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bfc:	f7f7 fd3c 	bl	8000678 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8008c00:	490f      	ldr	r1, [pc, #60]	; (8008c40 <MX_USB_DEVICE_Init+0x58>)
 8008c02:	480e      	ldr	r0, [pc, #56]	; (8008c3c <MX_USB_DEVICE_Init+0x54>)
 8008c04:	f7fe fed4 	bl	80079b0 <USBD_RegisterClass>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c0e:	f7f7 fd33 	bl	8000678 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8008c12:	490c      	ldr	r1, [pc, #48]	; (8008c44 <MX_USB_DEVICE_Init+0x5c>)
 8008c14:	4809      	ldr	r0, [pc, #36]	; (8008c3c <MX_USB_DEVICE_Init+0x54>)
 8008c16:	f7fd f9a3 	bl	8005f60 <USBD_MSC_RegisterStorage>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c20:	f7f7 fd2a 	bl	8000678 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c24:	4805      	ldr	r0, [pc, #20]	; (8008c3c <MX_USB_DEVICE_Init+0x54>)
 8008c26:	f7fe feea 	bl	80079fe <USBD_Start>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c30:	f7f7 fd22 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c34:	bf00      	nop
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	200000f4 	.word	0x200000f4
 8008c3c:	200001cc 	.word	0x200001cc
 8008c40:	2000000c 	.word	0x2000000c
 8008c44:	20000144 	.word	0x20000144

08008c48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	6039      	str	r1, [r7, #0]
 8008c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2212      	movs	r2, #18
 8008c58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c5a:	4b03      	ldr	r3, [pc, #12]	; (8008c68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	20000110 	.word	0x20000110

08008c6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2204      	movs	r2, #4
 8008c7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c7e:	4b03      	ldr	r3, [pc, #12]	; (8008c8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	20000124 	.word	0x20000124

08008c90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	6039      	str	r1, [r7, #0]
 8008c9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c9c:	79fb      	ldrb	r3, [r7, #7]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d105      	bne.n	8008cae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	4907      	ldr	r1, [pc, #28]	; (8008cc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ca6:	4808      	ldr	r0, [pc, #32]	; (8008cc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ca8:	f7ff fedb 	bl	8008a62 <USBD_GetString>
 8008cac:	e004      	b.n	8008cb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	4904      	ldr	r1, [pc, #16]	; (8008cc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cb2:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cb4:	f7ff fed5 	bl	8008a62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cb8:	4b02      	ldr	r3, [pc, #8]	; (8008cc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	2000049c 	.word	0x2000049c
 8008cc8:	080099ec 	.word	0x080099ec

08008ccc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	6039      	str	r1, [r7, #0]
 8008cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	4904      	ldr	r1, [pc, #16]	; (8008cec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008cdc:	4804      	ldr	r0, [pc, #16]	; (8008cf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008cde:	f7ff fec0 	bl	8008a62 <USBD_GetString>
  return USBD_StrDesc;
 8008ce2:	4b02      	ldr	r3, [pc, #8]	; (8008cec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	2000049c 	.word	0x2000049c
 8008cf0:	08009a00 	.word	0x08009a00

08008cf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	6039      	str	r1, [r7, #0]
 8008cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	221a      	movs	r2, #26
 8008d04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d06:	f000 f843 	bl	8008d90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d0a:	4b02      	ldr	r3, [pc, #8]	; (8008d14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20000128 	.word	0x20000128

08008d18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	6039      	str	r1, [r7, #0]
 8008d22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d105      	bne.n	8008d36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	4907      	ldr	r1, [pc, #28]	; (8008d4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d2e:	4808      	ldr	r0, [pc, #32]	; (8008d50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d30:	f7ff fe97 	bl	8008a62 <USBD_GetString>
 8008d34:	e004      	b.n	8008d40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	4904      	ldr	r1, [pc, #16]	; (8008d4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d3a:	4805      	ldr	r0, [pc, #20]	; (8008d50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d3c:	f7ff fe91 	bl	8008a62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d40:	4b02      	ldr	r3, [pc, #8]	; (8008d4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	2000049c 	.word	0x2000049c
 8008d50:	08009a14 	.word	0x08009a14

08008d54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	6039      	str	r1, [r7, #0]
 8008d5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d60:	79fb      	ldrb	r3, [r7, #7]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d105      	bne.n	8008d72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	4907      	ldr	r1, [pc, #28]	; (8008d88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d6a:	4808      	ldr	r0, [pc, #32]	; (8008d8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d6c:	f7ff fe79 	bl	8008a62 <USBD_GetString>
 8008d70:	e004      	b.n	8008d7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	4904      	ldr	r1, [pc, #16]	; (8008d88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d76:	4805      	ldr	r0, [pc, #20]	; (8008d8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d78:	f7ff fe73 	bl	8008a62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d7c:	4b02      	ldr	r3, [pc, #8]	; (8008d88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	2000049c 	.word	0x2000049c
 8008d8c:	08009a20 	.word	0x08009a20

08008d90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d96:	4b0f      	ldr	r3, [pc, #60]	; (8008dd4 <Get_SerialNum+0x44>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d9c:	4b0e      	ldr	r3, [pc, #56]	; (8008dd8 <Get_SerialNum+0x48>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008da2:	4b0e      	ldr	r3, [pc, #56]	; (8008ddc <Get_SerialNum+0x4c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4413      	add	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d009      	beq.n	8008dca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008db6:	2208      	movs	r2, #8
 8008db8:	4909      	ldr	r1, [pc, #36]	; (8008de0 <Get_SerialNum+0x50>)
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f000 f814 	bl	8008de8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008dc0:	2204      	movs	r2, #4
 8008dc2:	4908      	ldr	r1, [pc, #32]	; (8008de4 <Get_SerialNum+0x54>)
 8008dc4:	68b8      	ldr	r0, [r7, #8]
 8008dc6:	f000 f80f 	bl	8008de8 <IntToUnicode>
  }
}
 8008dca:	bf00      	nop
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	1fff7590 	.word	0x1fff7590
 8008dd8:	1fff7594 	.word	0x1fff7594
 8008ddc:	1fff7598 	.word	0x1fff7598
 8008de0:	2000012a 	.word	0x2000012a
 8008de4:	2000013a 	.word	0x2000013a

08008de8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b087      	sub	sp, #28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	4613      	mov	r3, r2
 8008df4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	75fb      	strb	r3, [r7, #23]
 8008dfe:	e027      	b.n	8008e50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	0f1b      	lsrs	r3, r3, #28
 8008e04:	2b09      	cmp	r3, #9
 8008e06:	d80b      	bhi.n	8008e20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	0f1b      	lsrs	r3, r3, #28
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
 8008e10:	005b      	lsls	r3, r3, #1
 8008e12:	4619      	mov	r1, r3
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	440b      	add	r3, r1
 8008e18:	3230      	adds	r2, #48	; 0x30
 8008e1a:	b2d2      	uxtb	r2, r2
 8008e1c:	701a      	strb	r2, [r3, #0]
 8008e1e:	e00a      	b.n	8008e36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	0f1b      	lsrs	r3, r3, #28
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	440b      	add	r3, r1
 8008e30:	3237      	adds	r2, #55	; 0x37
 8008e32:	b2d2      	uxtb	r2, r2
 8008e34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	3301      	adds	r3, #1
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	4413      	add	r3, r2
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	75fb      	strb	r3, [r7, #23]
 8008e50:	7dfa      	ldrb	r2, [r7, #23]
 8008e52:	79fb      	ldrb	r3, [r7, #7]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d3d3      	bcc.n	8008e00 <IntToUnicode+0x18>
  }
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	371c      	adds	r7, #28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
	...

08008e68 <STORAGE_Init_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_Init_FS (uint8_t lun)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */

  if (BSP_QSPI_GetStatus() != QSPI_OK)
 8008e72:	f7f7 fd97 	bl	80009a4 <BSP_QSPI_GetStatus>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d009      	beq.n	8008e90 <STORAGE_Init_FS+0x28>
  {
    HAL_QSPI_Init(&hqspi);
 8008e7c:	4807      	ldr	r0, [pc, #28]	; (8008e9c <STORAGE_Init_FS+0x34>)
 8008e7e:	f7f9 fcd5 	bl	800282c <HAL_QSPI_Init>

    if (BSP_QSPI_Init() != QSPI_OK)
 8008e82:	f7f7 fc69 	bl	8000758 <BSP_QSPI_Init>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d001      	beq.n	8008e90 <STORAGE_Init_FS+0x28>
    {
      return (USBD_FAIL);
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e000      	b.n	8008e92 <STORAGE_Init_FS+0x2a>
    }
  }

  return (USBD_OK);
 8008e90:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	20000180 	.word	0x20000180

08008ea0 <STORAGE_GetCapacity_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetCapacity_FS (uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08a      	sub	sp, #40	; 0x28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  QSPI_Info info;

  BSP_QSPI_GetInfo(&info);
 8008eae:	f107 0314 	add.w	r3, r7, #20
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7f7 fdc4 	bl	8000a40 <BSP_QSPI_GetInfo>
  *block_num = (info.FlashSize)/STORAGE_BLK_SIZ_USER;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	0b1a      	lsrs	r2, r3, #12
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ_USER;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008ec6:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 8008ec8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3728      	adds	r7, #40	; 0x28
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <STORAGE_IsReady_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsReady_FS (uint8_t lun)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	4603      	mov	r3, r0
 8008eda:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */

  uint8_t status = QSPI_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	73bb      	strb	r3, [r7, #14]
  int8_t ret = USBD_FAIL;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	73fb      	strb	r3, [r7, #15]

  status = BSP_QSPI_GetStatus();
 8008ee4:	f7f7 fd5e 	bl	80009a4 <BSP_QSPI_GetStatus>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	73bb      	strb	r3, [r7, #14]

  switch(status)
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d009      	beq.n	8008f06 <STORAGE_IsReady_FS+0x34>
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	dc0d      	bgt.n	8008f12 <STORAGE_IsReady_FS+0x40>
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <STORAGE_IsReady_FS+0x2e>
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d006      	beq.n	8008f0c <STORAGE_IsReady_FS+0x3a>
 8008efe:	e008      	b.n	8008f12 <STORAGE_IsReady_FS+0x40>
  {
  case QSPI_OK:
    ret = USBD_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73fb      	strb	r3, [r7, #15]
    break;
 8008f04:	e008      	b.n	8008f18 <STORAGE_IsReady_FS+0x46>
  case QSPI_BUSY:
    ret = USBD_BUSY;
 8008f06:	2301      	movs	r3, #1
 8008f08:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0a:	e005      	b.n	8008f18 <STORAGE_IsReady_FS+0x46>
  case QSPI_ERROR:
    ret = USBD_FAIL;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f10:	e002      	b.n	8008f18 <STORAGE_IsReady_FS+0x46>
  default:
    ret = USBD_FAIL;
 8008f12:	2303      	movs	r3, #3
 8008f14:	73fb      	strb	r3, [r7, #15]
    break;
 8008f16:	bf00      	nop
  }

  return ret;
 8008f18:	f997 300f 	ldrsb.w	r3, [r7, #15]

  /* USER CODE END 4 */
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <STORAGE_IsWriteProtected_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsWriteProtected_FS (uint8_t lun)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008f2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <STORAGE_Read_FS>:
*******************************************************************************/
int8_t STORAGE_Read_FS (uint8_t lun,
                        uint8_t *buf,
                        uint32_t blk_addr,
                        uint16_t blk_len)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60b9      	str	r1, [r7, #8]
 8008f44:	607a      	str	r2, [r7, #4]
 8008f46:	461a      	mov	r2, r3
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73fb      	strb	r3, [r7, #15]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  uint32_t erasedSector = 1;
 8008f50:	2301      	movs	r3, #1
 8008f52:	61fb      	str	r3, [r7, #28]
  BSP_QSPI_Read(QSPI_ReadBuffer, blk_addr * STORAGE_BLK_SIZ_USER, blk_len * STORAGE_BLK_SIZ_USER);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	0319      	lsls	r1, r3, #12
 8008f58:	89bb      	ldrh	r3, [r7, #12]
 8008f5a:	031b      	lsls	r3, r3, #12
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	4820      	ldr	r0, [pc, #128]	; (8008fe0 <STORAGE_Read_FS+0xa4>)
 8008f60:	f7f7 fc12 	bl	8000788 <BSP_QSPI_Read>

  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 8008f64:	2300      	movs	r3, #0
 8008f66:	61bb      	str	r3, [r7, #24]
 8008f68:	e00b      	b.n	8008f82 <STORAGE_Read_FS+0x46>
  {
    if (QSPI_ReadBuffer[i] != 0xFF)
 8008f6a:	4a1d      	ldr	r2, [pc, #116]	; (8008fe0 <STORAGE_Read_FS+0xa4>)
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	4413      	add	r3, r2
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	2bff      	cmp	r3, #255	; 0xff
 8008f74:	d002      	beq.n	8008f7c <STORAGE_Read_FS+0x40>
    {
      erasedSector = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	61fb      	str	r3, [r7, #28]
      break;
 8008f7a:	e006      	b.n	8008f8a <STORAGE_Read_FS+0x4e>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	61bb      	str	r3, [r7, #24]
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f88:	d3ef      	bcc.n	8008f6a <STORAGE_Read_FS+0x2e>
    }
  }
  if (erasedSector == 1)
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d10f      	bne.n	8008fb0 <STORAGE_Read_FS+0x74>
  {
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 8008f90:	2300      	movs	r3, #0
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	e007      	b.n	8008fa6 <STORAGE_Read_FS+0x6a>
    {
      buf[i] = 0x00;
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	617b      	str	r3, [r7, #20]
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fac:	d3f3      	bcc.n	8008f96 <STORAGE_Read_FS+0x5a>
 8008fae:	e011      	b.n	8008fd4 <STORAGE_Read_FS+0x98>
    }
  }
  else {
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	613b      	str	r3, [r7, #16]
 8008fb4:	e00a      	b.n	8008fcc <STORAGE_Read_FS+0x90>
    {
      buf[i] = QSPI_ReadBuffer[i];
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	4413      	add	r3, r2
 8008fbc:	4908      	ldr	r1, [pc, #32]	; (8008fe0 <STORAGE_Read_FS+0xa4>)
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	440a      	add	r2, r1
 8008fc2:	7812      	ldrb	r2, [r2, #0]
 8008fc4:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	613b      	str	r3, [r7, #16]
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fd2:	d3f0      	bcc.n	8008fb6 <STORAGE_Read_FS+0x7a>
    }
  }
  return (USBD_OK);
 8008fd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3720      	adds	r7, #32
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	2000069c 	.word	0x2000069c

08008fe4 <STORAGE_Write_FS>:
*******************************************************************************/
int8_t STORAGE_Write_FS (uint8_t lun,
                         uint8_t *buf,
                         uint32_t blk_addr,
                         uint16_t blk_len)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	607a      	str	r2, [r7, #4]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  uint32_t needErase = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61fb      	str	r3, [r7, #28]
  uint32_t eraseOperation = 1;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	61bb      	str	r3, [r7, #24]
  BSP_QSPI_Read(QSPI_ReadBuffer, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	031b      	lsls	r3, r3, #12
 8009004:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009008:	4619      	mov	r1, r3
 800900a:	483f      	ldr	r0, [pc, #252]	; (8009108 <STORAGE_Write_FS+0x124>)
 800900c:	f7f7 fbbc 	bl	8000788 <BSP_QSPI_Read>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 8009010:	2300      	movs	r3, #0
 8009012:	617b      	str	r3, [r7, #20]
 8009014:	e00b      	b.n	800902e <STORAGE_Write_FS+0x4a>
  {
    if (buf[i] != 0x00)
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	4413      	add	r3, r2
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <STORAGE_Write_FS+0x44>
    {
      eraseOperation = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	61bb      	str	r3, [r7, #24]
      break;
 8009026:	e006      	b.n	8009036 <STORAGE_Write_FS+0x52>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	3301      	adds	r3, #1
 800902c:	617b      	str	r3, [r7, #20]
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009034:	d3ef      	bcc.n	8009016 <STORAGE_Write_FS+0x32>
    }
  }
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 8009036:	2300      	movs	r3, #0
 8009038:	613b      	str	r3, [r7, #16]
 800903a:	e00b      	b.n	8009054 <STORAGE_Write_FS+0x70>
  {
    if (QSPI_ReadBuffer[i] != 0xFF)
 800903c:	4a32      	ldr	r2, [pc, #200]	; (8009108 <STORAGE_Write_FS+0x124>)
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	4413      	add	r3, r2
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	2bff      	cmp	r3, #255	; 0xff
 8009046:	d002      	beq.n	800904e <STORAGE_Write_FS+0x6a>
    {
      needErase = 1;
 8009048:	2301      	movs	r3, #1
 800904a:	61fb      	str	r3, [r7, #28]
      break;
 800904c:	e006      	b.n	800905c <STORAGE_Write_FS+0x78>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	3301      	adds	r3, #1
 8009052:	613b      	str	r3, [r7, #16]
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800905a:	d3ef      	bcc.n	800903c <STORAGE_Write_FS+0x58>
    }
  }
  if (eraseOperation == 1)
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d112      	bne.n	8009088 <STORAGE_Write_FS+0xa4>
  {
    if (needErase == 1)
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d14a      	bne.n	80090fe <STORAGE_Write_FS+0x11a>
    {
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8009068:	2201      	movs	r2, #1
 800906a:	2104      	movs	r1, #4
 800906c:	4827      	ldr	r0, [pc, #156]	; (800910c <STORAGE_Write_FS+0x128>)
 800906e:	f7f8 fa73 	bl	8001558 <HAL_GPIO_WritePin>
      BSP_QSPI_Erase_Block(blk_addr * STORAGE_BLK_SIZ_USER);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	031b      	lsls	r3, r3, #12
 8009076:	4618      	mov	r0, r3
 8009078:	f7f7 fc50 	bl	800091c <BSP_QSPI_Erase_Block>
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800907c:	2200      	movs	r2, #0
 800907e:	2104      	movs	r1, #4
 8009080:	4822      	ldr	r0, [pc, #136]	; (800910c <STORAGE_Write_FS+0x128>)
 8009082:	f7f8 fa69 	bl	8001558 <HAL_GPIO_WritePin>
 8009086:	e03a      	b.n	80090fe <STORAGE_Write_FS+0x11a>
    }
  }
  else {
    if (needErase == 1)
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d123      	bne.n	80090d6 <STORAGE_Write_FS+0xf2>
    {
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800908e:	2201      	movs	r2, #1
 8009090:	2104      	movs	r1, #4
 8009092:	481e      	ldr	r0, [pc, #120]	; (800910c <STORAGE_Write_FS+0x128>)
 8009094:	f7f8 fa60 	bl	8001558 <HAL_GPIO_WritePin>
      BSP_QSPI_Erase_Block(blk_addr * STORAGE_BLK_SIZ_USER);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	031b      	lsls	r3, r3, #12
 800909c:	4618      	mov	r0, r3
 800909e:	f7f7 fc3d 	bl	800091c <BSP_QSPI_Erase_Block>
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80090a2:	2200      	movs	r2, #0
 80090a4:	2104      	movs	r1, #4
 80090a6:	4819      	ldr	r0, [pc, #100]	; (800910c <STORAGE_Write_FS+0x128>)
 80090a8:	f7f8 fa56 	bl	8001558 <HAL_GPIO_WritePin>

      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80090ac:	2201      	movs	r2, #1
 80090ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80090b2:	4817      	ldr	r0, [pc, #92]	; (8009110 <STORAGE_Write_FS+0x12c>)
 80090b4:	f7f8 fa50 	bl	8001558 <HAL_GPIO_WritePin>
      BSP_QSPI_Write(buf, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	031b      	lsls	r3, r3, #12
 80090bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80090c0:	4619      	mov	r1, r3
 80090c2:	68b8      	ldr	r0, [r7, #8]
 80090c4:	f7f7 fba2 	bl	800080c <BSP_QSPI_Write>
      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80090c8:	2200      	movs	r2, #0
 80090ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80090ce:	4810      	ldr	r0, [pc, #64]	; (8009110 <STORAGE_Write_FS+0x12c>)
 80090d0:	f7f8 fa42 	bl	8001558 <HAL_GPIO_WritePin>
 80090d4:	e013      	b.n	80090fe <STORAGE_Write_FS+0x11a>
    }
    else {
      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80090d6:	2201      	movs	r2, #1
 80090d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80090dc:	480c      	ldr	r0, [pc, #48]	; (8009110 <STORAGE_Write_FS+0x12c>)
 80090de:	f7f8 fa3b 	bl	8001558 <HAL_GPIO_WritePin>
      BSP_QSPI_Write(buf, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	031b      	lsls	r3, r3, #12
 80090e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80090ea:	4619      	mov	r1, r3
 80090ec:	68b8      	ldr	r0, [r7, #8]
 80090ee:	f7f7 fb8d 	bl	800080c <BSP_QSPI_Write>
      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80090f2:	2200      	movs	r2, #0
 80090f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80090f8:	4805      	ldr	r0, [pc, #20]	; (8009110 <STORAGE_Write_FS+0x12c>)
 80090fa:	f7f8 fa2d 	bl	8001558 <HAL_GPIO_WritePin>
    }
  }

  return (USBD_OK);
 80090fe:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8009100:	4618      	mov	r0, r3
 8009102:	3720      	adds	r7, #32
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	2000069c 	.word	0x2000069c
 800910c:	48000400 	.word	0x48000400
 8009110:	48001000 	.word	0x48001000

08009114 <STORAGE_GetMaxLun_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetMaxLun_FS (void)
{
 8009114:	b480      	push	{r7}
 8009116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8009118:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800911a:	4618      	mov	r0, r3
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b0ac      	sub	sp, #176	; 0xb0
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800912c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009130:	2200      	movs	r2, #0
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	605a      	str	r2, [r3, #4]
 8009136:	609a      	str	r2, [r3, #8]
 8009138:	60da      	str	r2, [r3, #12]
 800913a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800913c:	f107 0314 	add.w	r3, r7, #20
 8009140:	2288      	movs	r2, #136	; 0x88
 8009142:	2100      	movs	r1, #0
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fc3d 	bl	80099c4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009152:	d173      	bne.n	800923c <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009158:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800915a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800915e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8009162:	2301      	movs	r3, #1
 8009164:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8009166:	2301      	movs	r3, #1
 8009168:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 800916a:	2330      	movs	r3, #48	; 0x30
 800916c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800916e:	2307      	movs	r3, #7
 8009170:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8009172:	2304      	movs	r3, #4
 8009174:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8009176:	2302      	movs	r3, #2
 8009178:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800917a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800917e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009180:	f107 0314 	add.w	r3, r7, #20
 8009184:	4618      	mov	r0, r3
 8009186:	f7fa fdcf 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d001      	beq.n	8009194 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8009190:	f7f7 fa72 	bl	8000678 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009194:	4b2b      	ldr	r3, [pc, #172]	; (8009244 <HAL_PCD_MspInit+0x120>)
 8009196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009198:	4a2a      	ldr	r2, [pc, #168]	; (8009244 <HAL_PCD_MspInit+0x120>)
 800919a:	f043 0301 	orr.w	r3, r3, #1
 800919e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091a0:	4b28      	ldr	r3, [pc, #160]	; (8009244 <HAL_PCD_MspInit+0x120>)
 80091a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	613b      	str	r3, [r7, #16]
 80091aa:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80091ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80091b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091b4:	2302      	movs	r3, #2
 80091b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091c0:	2303      	movs	r3, #3
 80091c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091c6:	230a      	movs	r3, #10
 80091c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80091d0:	4619      	mov	r1, r3
 80091d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80091d6:	f7f8 f815 	bl	8001204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091da:	4b1a      	ldr	r3, [pc, #104]	; (8009244 <HAL_PCD_MspInit+0x120>)
 80091dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091de:	4a19      	ldr	r2, [pc, #100]	; (8009244 <HAL_PCD_MspInit+0x120>)
 80091e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80091e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091e6:	4b17      	ldr	r3, [pc, #92]	; (8009244 <HAL_PCD_MspInit+0x120>)
 80091e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091f2:	4b14      	ldr	r3, [pc, #80]	; (8009244 <HAL_PCD_MspInit+0x120>)
 80091f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d114      	bne.n	8009228 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091fe:	4b11      	ldr	r3, [pc, #68]	; (8009244 <HAL_PCD_MspInit+0x120>)
 8009200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009202:	4a10      	ldr	r2, [pc, #64]	; (8009244 <HAL_PCD_MspInit+0x120>)
 8009204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009208:	6593      	str	r3, [r2, #88]	; 0x58
 800920a:	4b0e      	ldr	r3, [pc, #56]	; (8009244 <HAL_PCD_MspInit+0x120>)
 800920c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009212:	60bb      	str	r3, [r7, #8]
 8009214:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009216:	f7f9 faf9 	bl	800280c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800921a:	4b0a      	ldr	r3, [pc, #40]	; (8009244 <HAL_PCD_MspInit+0x120>)
 800921c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800921e:	4a09      	ldr	r2, [pc, #36]	; (8009244 <HAL_PCD_MspInit+0x120>)
 8009220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009224:	6593      	str	r3, [r2, #88]	; 0x58
 8009226:	e001      	b.n	800922c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009228:	f7f9 faf0 	bl	800280c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800922c:	2200      	movs	r2, #0
 800922e:	2100      	movs	r1, #0
 8009230:	2043      	movs	r0, #67	; 0x43
 8009232:	f7f7 ff72 	bl	800111a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009236:	2043      	movs	r0, #67	; 0x43
 8009238:	f7f7 ff8b 	bl	8001152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800923c:	bf00      	nop
 800923e:	37b0      	adds	r7, #176	; 0xb0
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	40021000 	.word	0x40021000

08009248 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800925c:	4619      	mov	r1, r3
 800925e:	4610      	mov	r0, r2
 8009260:	f7fe fc18 	bl	8007a94 <USBD_LL_SetupStage>
}
 8009264:	bf00      	nop
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800927e:	78fa      	ldrb	r2, [r7, #3]
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	4613      	mov	r3, r2
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	1a9b      	subs	r3, r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	440b      	add	r3, r1
 800928c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	78fb      	ldrb	r3, [r7, #3]
 8009294:	4619      	mov	r1, r3
 8009296:	f7fe fc52 	bl	8007b3e <USBD_LL_DataOutStage>
}
 800929a:	bf00      	nop
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b082      	sub	sp, #8
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	460b      	mov	r3, r1
 80092ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80092b4:	78fa      	ldrb	r2, [r7, #3]
 80092b6:	6879      	ldr	r1, [r7, #4]
 80092b8:	4613      	mov	r3, r2
 80092ba:	00db      	lsls	r3, r3, #3
 80092bc:	1a9b      	subs	r3, r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	440b      	add	r3, r1
 80092c2:	3348      	adds	r3, #72	; 0x48
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	78fb      	ldrb	r3, [r7, #3]
 80092c8:	4619      	mov	r1, r3
 80092ca:	f7fe fc9b 	bl	8007c04 <USBD_LL_DataInStage>
}
 80092ce:	bf00      	nop
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fe fdaf 	bl	8007e48 <USBD_LL_SOF>
}
 80092ea:	bf00      	nop
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b084      	sub	sp, #16
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092fa:	2301      	movs	r3, #1
 80092fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	2b02      	cmp	r3, #2
 8009304:	d001      	beq.n	800930a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009306:	f7f7 f9b7 	bl	8000678 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009310:	7bfa      	ldrb	r2, [r7, #15]
 8009312:	4611      	mov	r1, r2
 8009314:	4618      	mov	r0, r3
 8009316:	f7fe fd59 	bl	8007dcc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009320:	4618      	mov	r0, r3
 8009322:	f7fe fd05 	bl	8007d30 <USBD_LL_Reset>
}
 8009326:	bf00      	nop
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
	...

08009330 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	6812      	ldr	r2, [r2, #0]
 8009346:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800934a:	f043 0301 	orr.w	r3, r3, #1
 800934e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe fd48 	bl	8007dec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a1b      	ldr	r3, [r3, #32]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d005      	beq.n	8009370 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009364:	4b04      	ldr	r3, [pc, #16]	; (8009378 <HAL_PCD_SuspendCallback+0x48>)
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	4a03      	ldr	r2, [pc, #12]	; (8009378 <HAL_PCD_SuspendCallback+0x48>)
 800936a:	f043 0306 	orr.w	r3, r3, #6
 800936e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	e000ed00 	.word	0xe000ed00

0800937c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	6812      	ldr	r2, [r2, #0]
 8009392:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009396:	f023 0301 	bic.w	r3, r3, #1
 800939a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a1b      	ldr	r3, [r3, #32]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d007      	beq.n	80093b4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093a4:	4b08      	ldr	r3, [pc, #32]	; (80093c8 <HAL_PCD_ResumeCallback+0x4c>)
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	4a07      	ldr	r2, [pc, #28]	; (80093c8 <HAL_PCD_ResumeCallback+0x4c>)
 80093aa:	f023 0306 	bic.w	r3, r3, #6
 80093ae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80093b0:	f000 fade 	bl	8009970 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe fd2c 	bl	8007e18 <USBD_LL_Resume>
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	e000ed00 	.word	0xe000ed00

080093cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093de:	78fa      	ldrb	r2, [r7, #3]
 80093e0:	4611      	mov	r1, r2
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe fd78 	bl	8007ed8 <USBD_LL_IsoOUTIncomplete>
}
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009402:	78fa      	ldrb	r2, [r7, #3]
 8009404:	4611      	mov	r1, r2
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe fd40 	bl	8007e8c <USBD_LL_IsoINIncomplete>
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe fd7e 	bl	8007f24 <USBD_LL_DevConnected>
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe fd7b 	bl	8007f3a <USBD_LL_DevDisconnected>
}
 8009444:	bf00      	nop
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d13c      	bne.n	80094d6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800945c:	4a20      	ldr	r2, [pc, #128]	; (80094e0 <USBD_LL_Init+0x94>)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a1e      	ldr	r2, [pc, #120]	; (80094e0 <USBD_LL_Init+0x94>)
 8009468:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800946c:	4b1c      	ldr	r3, [pc, #112]	; (80094e0 <USBD_LL_Init+0x94>)
 800946e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009472:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009474:	4b1a      	ldr	r3, [pc, #104]	; (80094e0 <USBD_LL_Init+0x94>)
 8009476:	2206      	movs	r2, #6
 8009478:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800947a:	4b19      	ldr	r3, [pc, #100]	; (80094e0 <USBD_LL_Init+0x94>)
 800947c:	2202      	movs	r2, #2
 800947e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009480:	4b17      	ldr	r3, [pc, #92]	; (80094e0 <USBD_LL_Init+0x94>)
 8009482:	2202      	movs	r2, #2
 8009484:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009486:	4b16      	ldr	r3, [pc, #88]	; (80094e0 <USBD_LL_Init+0x94>)
 8009488:	2200      	movs	r2, #0
 800948a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800948c:	4b14      	ldr	r3, [pc, #80]	; (80094e0 <USBD_LL_Init+0x94>)
 800948e:	2200      	movs	r2, #0
 8009490:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009492:	4b13      	ldr	r3, [pc, #76]	; (80094e0 <USBD_LL_Init+0x94>)
 8009494:	2200      	movs	r2, #0
 8009496:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009498:	4b11      	ldr	r3, [pc, #68]	; (80094e0 <USBD_LL_Init+0x94>)
 800949a:	2200      	movs	r2, #0
 800949c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800949e:	4b10      	ldr	r3, [pc, #64]	; (80094e0 <USBD_LL_Init+0x94>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80094a4:	4b0e      	ldr	r3, [pc, #56]	; (80094e0 <USBD_LL_Init+0x94>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094aa:	480d      	ldr	r0, [pc, #52]	; (80094e0 <USBD_LL_Init+0x94>)
 80094ac:	f7f8 f86c 	bl	8001588 <HAL_PCD_Init>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094b6:	f7f7 f8df 	bl	8000678 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094ba:	2180      	movs	r1, #128	; 0x80
 80094bc:	4808      	ldr	r0, [pc, #32]	; (80094e0 <USBD_LL_Init+0x94>)
 80094be:	f7f9 f8f0 	bl	80026a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094c2:	2240      	movs	r2, #64	; 0x40
 80094c4:	2100      	movs	r1, #0
 80094c6:	4806      	ldr	r0, [pc, #24]	; (80094e0 <USBD_LL_Init+0x94>)
 80094c8:	f7f9 f8a4 	bl	8002614 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094cc:	2280      	movs	r2, #128	; 0x80
 80094ce:	2101      	movs	r1, #1
 80094d0:	4803      	ldr	r0, [pc, #12]	; (80094e0 <USBD_LL_Init+0x94>)
 80094d2:	f7f9 f89f 	bl	8002614 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	2000169c 	.word	0x2000169c

080094e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7f8 f968 	bl	80017d0 <HAL_PCD_Start>
 8009500:	4603      	mov	r3, r0
 8009502:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009504:	7bbb      	ldrb	r3, [r7, #14]
 8009506:	2b03      	cmp	r3, #3
 8009508:	d816      	bhi.n	8009538 <USBD_LL_Start+0x54>
 800950a:	a201      	add	r2, pc, #4	; (adr r2, 8009510 <USBD_LL_Start+0x2c>)
 800950c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009510:	08009521 	.word	0x08009521
 8009514:	08009527 	.word	0x08009527
 8009518:	0800952d 	.word	0x0800952d
 800951c:	08009533 	.word	0x08009533
    case HAL_OK :
      usb_status = USBD_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73fb      	strb	r3, [r7, #15]
    break;
 8009524:	e00b      	b.n	800953e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009526:	2303      	movs	r3, #3
 8009528:	73fb      	strb	r3, [r7, #15]
    break;
 800952a:	e008      	b.n	800953e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800952c:	2301      	movs	r3, #1
 800952e:	73fb      	strb	r3, [r7, #15]
    break;
 8009530:	e005      	b.n	800953e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009532:	2303      	movs	r3, #3
 8009534:	73fb      	strb	r3, [r7, #15]
    break;
 8009536:	e002      	b.n	800953e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009538:	2303      	movs	r3, #3
 800953a:	73fb      	strb	r3, [r7, #15]
    break;
 800953c:	bf00      	nop
  }
  return usb_status;
 800953e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	4608      	mov	r0, r1
 8009552:	4611      	mov	r1, r2
 8009554:	461a      	mov	r2, r3
 8009556:	4603      	mov	r3, r0
 8009558:	70fb      	strb	r3, [r7, #3]
 800955a:	460b      	mov	r3, r1
 800955c:	70bb      	strb	r3, [r7, #2]
 800955e:	4613      	mov	r3, r2
 8009560:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009570:	78bb      	ldrb	r3, [r7, #2]
 8009572:	883a      	ldrh	r2, [r7, #0]
 8009574:	78f9      	ldrb	r1, [r7, #3]
 8009576:	f7f8 fd18 	bl	8001faa <HAL_PCD_EP_Open>
 800957a:	4603      	mov	r3, r0
 800957c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800957e:	7bbb      	ldrb	r3, [r7, #14]
 8009580:	2b03      	cmp	r3, #3
 8009582:	d817      	bhi.n	80095b4 <USBD_LL_OpenEP+0x6c>
 8009584:	a201      	add	r2, pc, #4	; (adr r2, 800958c <USBD_LL_OpenEP+0x44>)
 8009586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958a:	bf00      	nop
 800958c:	0800959d 	.word	0x0800959d
 8009590:	080095a3 	.word	0x080095a3
 8009594:	080095a9 	.word	0x080095a9
 8009598:	080095af 	.word	0x080095af
    case HAL_OK :
      usb_status = USBD_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
    break;
 80095a0:	e00b      	b.n	80095ba <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095a2:	2303      	movs	r3, #3
 80095a4:	73fb      	strb	r3, [r7, #15]
    break;
 80095a6:	e008      	b.n	80095ba <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095a8:	2301      	movs	r3, #1
 80095aa:	73fb      	strb	r3, [r7, #15]
    break;
 80095ac:	e005      	b.n	80095ba <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095ae:	2303      	movs	r3, #3
 80095b0:	73fb      	strb	r3, [r7, #15]
    break;
 80095b2:	e002      	b.n	80095ba <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80095b4:	2303      	movs	r3, #3
 80095b6:	73fb      	strb	r3, [r7, #15]
    break;
 80095b8:	bf00      	nop
  }
  return usb_status;
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095de:	78fa      	ldrb	r2, [r7, #3]
 80095e0:	4611      	mov	r1, r2
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7f8 fd49 	bl	800207a <HAL_PCD_EP_Close>
 80095e8:	4603      	mov	r3, r0
 80095ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
 80095ee:	2b03      	cmp	r3, #3
 80095f0:	d816      	bhi.n	8009620 <USBD_LL_CloseEP+0x5c>
 80095f2:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <USBD_LL_CloseEP+0x34>)
 80095f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f8:	08009609 	.word	0x08009609
 80095fc:	0800960f 	.word	0x0800960f
 8009600:	08009615 	.word	0x08009615
 8009604:	0800961b 	.word	0x0800961b
    case HAL_OK :
      usb_status = USBD_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
    break;
 800960c:	e00b      	b.n	8009626 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800960e:	2303      	movs	r3, #3
 8009610:	73fb      	strb	r3, [r7, #15]
    break;
 8009612:	e008      	b.n	8009626 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009614:	2301      	movs	r3, #1
 8009616:	73fb      	strb	r3, [r7, #15]
    break;
 8009618:	e005      	b.n	8009626 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800961a:	2303      	movs	r3, #3
 800961c:	73fb      	strb	r3, [r7, #15]
    break;
 800961e:	e002      	b.n	8009626 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009620:	2303      	movs	r3, #3
 8009622:	73fb      	strb	r3, [r7, #15]
    break;
 8009624:	bf00      	nop
  }
  return usb_status;
 8009626:	7bfb      	ldrb	r3, [r7, #15]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800964a:	78fa      	ldrb	r2, [r7, #3]
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f7f8 fea8 	bl	80023a4 <HAL_PCD_EP_Flush>
 8009654:	4603      	mov	r3, r0
 8009656:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009658:	7bbb      	ldrb	r3, [r7, #14]
 800965a:	2b03      	cmp	r3, #3
 800965c:	d816      	bhi.n	800968c <USBD_LL_FlushEP+0x5c>
 800965e:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <USBD_LL_FlushEP+0x34>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	08009675 	.word	0x08009675
 8009668:	0800967b 	.word	0x0800967b
 800966c:	08009681 	.word	0x08009681
 8009670:	08009687 	.word	0x08009687
    case HAL_OK :
      usb_status = USBD_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	73fb      	strb	r3, [r7, #15]
    break;
 8009678:	e00b      	b.n	8009692 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800967a:	2303      	movs	r3, #3
 800967c:	73fb      	strb	r3, [r7, #15]
    break;
 800967e:	e008      	b.n	8009692 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009680:	2301      	movs	r3, #1
 8009682:	73fb      	strb	r3, [r7, #15]
    break;
 8009684:	e005      	b.n	8009692 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009686:	2303      	movs	r3, #3
 8009688:	73fb      	strb	r3, [r7, #15]
    break;
 800968a:	e002      	b.n	8009692 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800968c:	2303      	movs	r3, #3
 800968e:	73fb      	strb	r3, [r7, #15]
    break;
 8009690:	bf00      	nop
  }
  return usb_status;
 8009692:	7bfb      	ldrb	r3, [r7, #15]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096b6:	78fa      	ldrb	r2, [r7, #3]
 80096b8:	4611      	mov	r1, r2
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7f8 fdba 	bl	8002234 <HAL_PCD_EP_SetStall>
 80096c0:	4603      	mov	r3, r0
 80096c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80096c4:	7bbb      	ldrb	r3, [r7, #14]
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d816      	bhi.n	80096f8 <USBD_LL_StallEP+0x5c>
 80096ca:	a201      	add	r2, pc, #4	; (adr r2, 80096d0 <USBD_LL_StallEP+0x34>)
 80096cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d0:	080096e1 	.word	0x080096e1
 80096d4:	080096e7 	.word	0x080096e7
 80096d8:	080096ed 	.word	0x080096ed
 80096dc:	080096f3 	.word	0x080096f3
    case HAL_OK :
      usb_status = USBD_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	73fb      	strb	r3, [r7, #15]
    break;
 80096e4:	e00b      	b.n	80096fe <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096e6:	2303      	movs	r3, #3
 80096e8:	73fb      	strb	r3, [r7, #15]
    break;
 80096ea:	e008      	b.n	80096fe <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096ec:	2301      	movs	r3, #1
 80096ee:	73fb      	strb	r3, [r7, #15]
    break;
 80096f0:	e005      	b.n	80096fe <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096f2:	2303      	movs	r3, #3
 80096f4:	73fb      	strb	r3, [r7, #15]
    break;
 80096f6:	e002      	b.n	80096fe <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80096f8:	2303      	movs	r3, #3
 80096fa:	73fb      	strb	r3, [r7, #15]
    break;
 80096fc:	bf00      	nop
  }
  return usb_status;
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009722:	78fa      	ldrb	r2, [r7, #3]
 8009724:	4611      	mov	r1, r2
 8009726:	4618      	mov	r0, r3
 8009728:	f7f8 fde6 	bl	80022f8 <HAL_PCD_EP_ClrStall>
 800972c:	4603      	mov	r3, r0
 800972e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	2b03      	cmp	r3, #3
 8009734:	d816      	bhi.n	8009764 <USBD_LL_ClearStallEP+0x5c>
 8009736:	a201      	add	r2, pc, #4	; (adr r2, 800973c <USBD_LL_ClearStallEP+0x34>)
 8009738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973c:	0800974d 	.word	0x0800974d
 8009740:	08009753 	.word	0x08009753
 8009744:	08009759 	.word	0x08009759
 8009748:	0800975f 	.word	0x0800975f
    case HAL_OK :
      usb_status = USBD_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	73fb      	strb	r3, [r7, #15]
    break;
 8009750:	e00b      	b.n	800976a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009752:	2303      	movs	r3, #3
 8009754:	73fb      	strb	r3, [r7, #15]
    break;
 8009756:	e008      	b.n	800976a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009758:	2301      	movs	r3, #1
 800975a:	73fb      	strb	r3, [r7, #15]
    break;
 800975c:	e005      	b.n	800976a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800975e:	2303      	movs	r3, #3
 8009760:	73fb      	strb	r3, [r7, #15]
    break;
 8009762:	e002      	b.n	800976a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009764:	2303      	movs	r3, #3
 8009766:	73fb      	strb	r3, [r7, #15]
    break;
 8009768:	bf00      	nop
  }
  return usb_status;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	460b      	mov	r3, r1
 800977e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009786:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800978c:	2b00      	cmp	r3, #0
 800978e:	da0b      	bge.n	80097a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009790:	78fb      	ldrb	r3, [r7, #3]
 8009792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009796:	68f9      	ldr	r1, [r7, #12]
 8009798:	4613      	mov	r3, r2
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	1a9b      	subs	r3, r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	440b      	add	r3, r1
 80097a2:	333e      	adds	r3, #62	; 0x3e
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	e00b      	b.n	80097c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ae:	68f9      	ldr	r1, [r7, #12]
 80097b0:	4613      	mov	r3, r2
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	440b      	add	r3, r1
 80097ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097e6:	78fa      	ldrb	r2, [r7, #3]
 80097e8:	4611      	mov	r1, r2
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7f8 fbb8 	bl	8001f60 <HAL_PCD_SetAddress>
 80097f0:	4603      	mov	r3, r0
 80097f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d816      	bhi.n	8009828 <USBD_LL_SetUSBAddress+0x5c>
 80097fa:	a201      	add	r2, pc, #4	; (adr r2, 8009800 <USBD_LL_SetUSBAddress+0x34>)
 80097fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009800:	08009811 	.word	0x08009811
 8009804:	08009817 	.word	0x08009817
 8009808:	0800981d 	.word	0x0800981d
 800980c:	08009823 	.word	0x08009823
    case HAL_OK :
      usb_status = USBD_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	73fb      	strb	r3, [r7, #15]
    break;
 8009814:	e00b      	b.n	800982e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009816:	2303      	movs	r3, #3
 8009818:	73fb      	strb	r3, [r7, #15]
    break;
 800981a:	e008      	b.n	800982e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800981c:	2301      	movs	r3, #1
 800981e:	73fb      	strb	r3, [r7, #15]
    break;
 8009820:	e005      	b.n	800982e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009822:	2303      	movs	r3, #3
 8009824:	73fb      	strb	r3, [r7, #15]
    break;
 8009826:	e002      	b.n	800982e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009828:	2303      	movs	r3, #3
 800982a:	73fb      	strb	r3, [r7, #15]
    break;
 800982c:	bf00      	nop
  }
  return usb_status;
 800982e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	607a      	str	r2, [r7, #4]
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	460b      	mov	r3, r1
 8009846:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009856:	7af9      	ldrb	r1, [r7, #11]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	f7f8 fcad 	bl	80021ba <HAL_PCD_EP_Transmit>
 8009860:	4603      	mov	r3, r0
 8009862:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009864:	7dbb      	ldrb	r3, [r7, #22]
 8009866:	2b03      	cmp	r3, #3
 8009868:	d816      	bhi.n	8009898 <USBD_LL_Transmit+0x60>
 800986a:	a201      	add	r2, pc, #4	; (adr r2, 8009870 <USBD_LL_Transmit+0x38>)
 800986c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009870:	08009881 	.word	0x08009881
 8009874:	08009887 	.word	0x08009887
 8009878:	0800988d 	.word	0x0800988d
 800987c:	08009893 	.word	0x08009893
    case HAL_OK :
      usb_status = USBD_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	75fb      	strb	r3, [r7, #23]
    break;
 8009884:	e00b      	b.n	800989e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009886:	2303      	movs	r3, #3
 8009888:	75fb      	strb	r3, [r7, #23]
    break;
 800988a:	e008      	b.n	800989e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800988c:	2301      	movs	r3, #1
 800988e:	75fb      	strb	r3, [r7, #23]
    break;
 8009890:	e005      	b.n	800989e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009892:	2303      	movs	r3, #3
 8009894:	75fb      	strb	r3, [r7, #23]
    break;
 8009896:	e002      	b.n	800989e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009898:	2303      	movs	r3, #3
 800989a:	75fb      	strb	r3, [r7, #23]
    break;
 800989c:	bf00      	nop
  }
  return usb_status;
 800989e:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	607a      	str	r2, [r7, #4]
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	460b      	mov	r3, r1
 80098b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098c6:	7af9      	ldrb	r1, [r7, #11]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	f7f8 fc1f 	bl	800210e <HAL_PCD_EP_Receive>
 80098d0:	4603      	mov	r3, r0
 80098d2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80098d4:	7dbb      	ldrb	r3, [r7, #22]
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	d816      	bhi.n	8009908 <USBD_LL_PrepareReceive+0x60>
 80098da:	a201      	add	r2, pc, #4	; (adr r2, 80098e0 <USBD_LL_PrepareReceive+0x38>)
 80098dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e0:	080098f1 	.word	0x080098f1
 80098e4:	080098f7 	.word	0x080098f7
 80098e8:	080098fd 	.word	0x080098fd
 80098ec:	08009903 	.word	0x08009903
    case HAL_OK :
      usb_status = USBD_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	75fb      	strb	r3, [r7, #23]
    break;
 80098f4:	e00b      	b.n	800990e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098f6:	2303      	movs	r3, #3
 80098f8:	75fb      	strb	r3, [r7, #23]
    break;
 80098fa:	e008      	b.n	800990e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098fc:	2301      	movs	r3, #1
 80098fe:	75fb      	strb	r3, [r7, #23]
    break;
 8009900:	e005      	b.n	800990e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009902:	2303      	movs	r3, #3
 8009904:	75fb      	strb	r3, [r7, #23]
    break;
 8009906:	e002      	b.n	800990e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009908:	2303      	movs	r3, #3
 800990a:	75fb      	strb	r3, [r7, #23]
    break;
 800990c:	bf00      	nop
  }
  return usb_status;
 800990e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800992a:	78fa      	ldrb	r2, [r7, #3]
 800992c:	4611      	mov	r1, r2
 800992e:	4618      	mov	r0, r3
 8009930:	f7f8 fc2b 	bl	800218a <HAL_PCD_EP_GetRxCount>
 8009934:	4603      	mov	r3, r0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009948:	4b03      	ldr	r3, [pc, #12]	; (8009958 <USBD_static_malloc+0x18>)
}
 800994a:	4618      	mov	r0, r3
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	20001aa4 	.word	0x20001aa4

0800995c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]

}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009974:	f7f6 fe1e 	bl	80005b4 <SystemClock_Config>
}
 8009978:	bf00      	nop
 800997a:	bd80      	pop	{r7, pc}

0800997c <__libc_init_array>:
 800997c:	b570      	push	{r4, r5, r6, lr}
 800997e:	4d0d      	ldr	r5, [pc, #52]	; (80099b4 <__libc_init_array+0x38>)
 8009980:	4c0d      	ldr	r4, [pc, #52]	; (80099b8 <__libc_init_array+0x3c>)
 8009982:	1b64      	subs	r4, r4, r5
 8009984:	10a4      	asrs	r4, r4, #2
 8009986:	2600      	movs	r6, #0
 8009988:	42a6      	cmp	r6, r4
 800998a:	d109      	bne.n	80099a0 <__libc_init_array+0x24>
 800998c:	4d0b      	ldr	r5, [pc, #44]	; (80099bc <__libc_init_array+0x40>)
 800998e:	4c0c      	ldr	r4, [pc, #48]	; (80099c0 <__libc_init_array+0x44>)
 8009990:	f000 f820 	bl	80099d4 <_init>
 8009994:	1b64      	subs	r4, r4, r5
 8009996:	10a4      	asrs	r4, r4, #2
 8009998:	2600      	movs	r6, #0
 800999a:	42a6      	cmp	r6, r4
 800999c:	d105      	bne.n	80099aa <__libc_init_array+0x2e>
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099a4:	4798      	blx	r3
 80099a6:	3601      	adds	r6, #1
 80099a8:	e7ee      	b.n	8009988 <__libc_init_array+0xc>
 80099aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ae:	4798      	blx	r3
 80099b0:	3601      	adds	r6, #1
 80099b2:	e7f2      	b.n	800999a <__libc_init_array+0x1e>
 80099b4:	08009a94 	.word	0x08009a94
 80099b8:	08009a94 	.word	0x08009a94
 80099bc:	08009a94 	.word	0x08009a94
 80099c0:	08009a98 	.word	0x08009a98

080099c4 <memset>:
 80099c4:	4402      	add	r2, r0
 80099c6:	4603      	mov	r3, r0
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d100      	bne.n	80099ce <memset+0xa>
 80099cc:	4770      	bx	lr
 80099ce:	f803 1b01 	strb.w	r1, [r3], #1
 80099d2:	e7f9      	b.n	80099c8 <memset+0x4>

080099d4 <_init>:
 80099d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d6:	bf00      	nop
 80099d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099da:	bc08      	pop	{r3}
 80099dc:	469e      	mov	lr, r3
 80099de:	4770      	bx	lr

080099e0 <_fini>:
 80099e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e2:	bf00      	nop
 80099e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099e6:	bc08      	pop	{r3}
 80099e8:	469e      	mov	lr, r3
 80099ea:	4770      	bx	lr
