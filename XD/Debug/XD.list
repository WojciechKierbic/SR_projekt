
XD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800cff8  0800cff8  0001cff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0ac  0800d0ac  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d0ac  0800d0ac  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d0ac  0800d0ac  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0ac  0800d0ac  0001d0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0b0  0800d0b0  0001d0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800d0b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad8  200001a4  0800d258  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c7c  0800d258  00024c7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd5d  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b7e  00000000  00000000  0003cf31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  00041ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001608  00000000  00000000  000432e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c760  00000000  00000000  000448e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb38  00000000  00000000  00071048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2f3e  00000000  00000000  0008fb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00182abe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b0  00000000  00000000  00182b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001a4 	.word	0x200001a4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800cfe0 	.word	0x0800cfe0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001a8 	.word	0x200001a8
 80001c4:	0800cfe0 	.word	0x0800cfe0

080001c8 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	607b      	str	r3, [r7, #4]
 80001d0:	4603      	mov	r3, r0
 80001d2:	81fb      	strh	r3, [r7, #14]
 80001d4:	460b      	mov	r3, r1
 80001d6:	81bb      	strh	r3, [r7, #12]
 80001d8:	4613      	mov	r3, r2
 80001da:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	617b      	str	r3, [r7, #20]

  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80001e0:	f001 fcde 	bl	8001ba0 <AUDIO_IO_Init>

  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 80001e4:	89fb      	ldrh	r3, [r7, #14]
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	2201      	movs	r2, #1
 80001ea:	2102      	movs	r1, #2
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 fb01 	bl	80007f4 <CODEC_IO_Write>
 80001f2:	4603      	mov	r3, r0
 80001f4:	461a      	mov	r2, r3
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	4413      	add	r3, r2
 80001fa:	617b      	str	r3, [r7, #20]

  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80001fc:	89bb      	ldrh	r3, [r7, #12]
 80001fe:	3b01      	subs	r3, #1
 8000200:	2b03      	cmp	r3, #3
 8000202:	d81b      	bhi.n	800023c <cs43l22_Init+0x74>
 8000204:	a201      	add	r2, pc, #4	; (adr r2, 800020c <cs43l22_Init+0x44>)
 8000206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020a:	bf00      	nop
 800020c:	0800021d 	.word	0x0800021d
 8000210:	08000225 	.word	0x08000225
 8000214:	0800022d 	.word	0x0800022d
 8000218:	08000235 	.word	0x08000235
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 800021c:	4b5b      	ldr	r3, [pc, #364]	; (800038c <cs43l22_Init+0x1c4>)
 800021e:	22fa      	movs	r2, #250	; 0xfa
 8000220:	701a      	strb	r2, [r3, #0]
    break;
 8000222:	e00f      	b.n	8000244 <cs43l22_Init+0x7c>

  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000224:	4b59      	ldr	r3, [pc, #356]	; (800038c <cs43l22_Init+0x1c4>)
 8000226:	22af      	movs	r2, #175	; 0xaf
 8000228:	701a      	strb	r2, [r3, #0]
    break;
 800022a:	e00b      	b.n	8000244 <cs43l22_Init+0x7c>

  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 800022c:	4b57      	ldr	r3, [pc, #348]	; (800038c <cs43l22_Init+0x1c4>)
 800022e:	22aa      	movs	r2, #170	; 0xaa
 8000230:	701a      	strb	r2, [r3, #0]
    break;
 8000232:	e007      	b.n	8000244 <cs43l22_Init+0x7c>

  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000234:	4b55      	ldr	r3, [pc, #340]	; (800038c <cs43l22_Init+0x1c4>)
 8000236:	2205      	movs	r2, #5
 8000238:	701a      	strb	r2, [r3, #0]
    break;
 800023a:	e003      	b.n	8000244 <cs43l22_Init+0x7c>

  default:
    OutputDev = 0x05;
 800023c:	4b53      	ldr	r3, [pc, #332]	; (800038c <cs43l22_Init+0x1c4>)
 800023e:	2205      	movs	r2, #5
 8000240:	701a      	strb	r2, [r3, #0]
    break;
 8000242:	bf00      	nop
  }

  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000244:	89fb      	ldrh	r3, [r7, #14]
 8000246:	b2db      	uxtb	r3, r3
 8000248:	4a50      	ldr	r2, [pc, #320]	; (800038c <cs43l22_Init+0x1c4>)
 800024a:	7812      	ldrb	r2, [r2, #0]
 800024c:	b2d2      	uxtb	r2, r2
 800024e:	2104      	movs	r1, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 facf 	bl	80007f4 <CODEC_IO_Write>
 8000256:	4603      	mov	r3, r0
 8000258:	461a      	mov	r2, r3
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	4413      	add	r3, r2
 800025e:	617b      	str	r3, [r7, #20]

  /* Clock configuration: Auto detection */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000260:	89fb      	ldrh	r3, [r7, #14]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	2281      	movs	r2, #129	; 0x81
 8000266:	2105      	movs	r1, #5
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fac3 	bl	80007f4 <CODEC_IO_Write>
 800026e:	4603      	mov	r3, r0
 8000270:	461a      	mov	r2, r3
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	4413      	add	r3, r2
 8000276:	617b      	str	r3, [r7, #20]

  /* Set the Slave Mode and the audio Standard */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000278:	89fb      	ldrh	r3, [r7, #14]
 800027a:	b2db      	uxtb	r3, r3
 800027c:	2204      	movs	r2, #4
 800027e:	2106      	movs	r1, #6
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fab7 	bl	80007f4 <CODEC_IO_Write>
 8000286:	4603      	mov	r3, r0
 8000288:	461a      	mov	r2, r3
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	4413      	add	r3, r2
 800028e:	617b      	str	r3, [r7, #20]

  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000290:	7afa      	ldrb	r2, [r7, #11]
 8000292:	89fb      	ldrh	r3, [r7, #14]
 8000294:	4611      	mov	r1, r2
 8000296:	4618      	mov	r0, r3
 8000298:	f000 f964 	bl	8000564 <cs43l22_SetVolume>
 800029c:	4602      	mov	r2, r0
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	4413      	add	r3, r2
 80002a2:	617b      	str	r3, [r7, #20]

  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80002a4:	89bb      	ldrh	r3, [r7, #12]
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d023      	beq.n	80002f2 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80002aa:	89fb      	ldrh	r3, [r7, #14]
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	2206      	movs	r2, #6
 80002b0:	210f      	movs	r1, #15
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fa9e 	bl	80007f4 <CODEC_IO_Write>
 80002b8:	4603      	mov	r3, r0
 80002ba:	461a      	mov	r2, r3
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	4413      	add	r3, r2
 80002c0:	617b      	str	r3, [r7, #20]

    /* Set the Speaker attenuation level */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80002c2:	89fb      	ldrh	r3, [r7, #14]
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2200      	movs	r2, #0
 80002c8:	2124      	movs	r1, #36	; 0x24
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fa92 	bl	80007f4 <CODEC_IO_Write>
 80002d0:	4603      	mov	r3, r0
 80002d2:	461a      	mov	r2, r3
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	4413      	add	r3, r2
 80002d8:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80002da:	89fb      	ldrh	r3, [r7, #14]
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	2200      	movs	r2, #0
 80002e0:	2125      	movs	r1, #37	; 0x25
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fa86 	bl	80007f4 <CODEC_IO_Write>
 80002e8:	4603      	mov	r3, r0
 80002ea:	461a      	mov	r2, r3
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	4413      	add	r3, r2
 80002f0:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */

  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80002f2:	89fb      	ldrh	r3, [r7, #14]
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2200      	movs	r2, #0
 80002f8:	210a      	movs	r1, #10
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fa7a 	bl	80007f4 <CODEC_IO_Write>
 8000300:	4603      	mov	r3, r0
 8000302:	461a      	mov	r2, r3
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	4413      	add	r3, r2
 8000308:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800030a:	89fb      	ldrh	r3, [r7, #14]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2204      	movs	r2, #4
 8000310:	210e      	movs	r1, #14
 8000312:	4618      	mov	r0, r3
 8000314:	f000 fa6e 	bl	80007f4 <CODEC_IO_Write>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	4413      	add	r3, r2
 8000320:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000322:	89fb      	ldrh	r3, [r7, #14]
 8000324:	b2db      	uxtb	r3, r3
 8000326:	2200      	movs	r2, #0
 8000328:	2127      	movs	r1, #39	; 0x27
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fa62 	bl	80007f4 <CODEC_IO_Write>
 8000330:	4603      	mov	r3, r0
 8000332:	461a      	mov	r2, r3
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	4413      	add	r3, r2
 8000338:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800033a:	89fb      	ldrh	r3, [r7, #14]
 800033c:	b2db      	uxtb	r3, r3
 800033e:	220f      	movs	r2, #15
 8000340:	211f      	movs	r1, #31
 8000342:	4618      	mov	r0, r3
 8000344:	f000 fa56 	bl	80007f4 <CODEC_IO_Write>
 8000348:	4603      	mov	r3, r0
 800034a:	461a      	mov	r2, r3
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	4413      	add	r3, r2
 8000350:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000352:	89fb      	ldrh	r3, [r7, #14]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	220a      	movs	r2, #10
 8000358:	211a      	movs	r1, #26
 800035a:	4618      	mov	r0, r3
 800035c:	f000 fa4a 	bl	80007f4 <CODEC_IO_Write>
 8000360:	4603      	mov	r3, r0
 8000362:	461a      	mov	r2, r3
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	4413      	add	r3, r2
 8000368:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800036a:	89fb      	ldrh	r3, [r7, #14]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	220a      	movs	r2, #10
 8000370:	211b      	movs	r1, #27
 8000372:	4618      	mov	r0, r3
 8000374:	f000 fa3e 	bl	80007f4 <CODEC_IO_Write>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	4413      	add	r3, r2
 8000380:	617b      	str	r3, [r7, #20]

  /* Return communication control value */
  return counter;
 8000382:	697b      	ldr	r3, [r7, #20]
}
 8000384:	4618      	mov	r0, r3
 8000386:	3718      	adds	r7, #24
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	200001c0 	.word	0x200001c0

08000390 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000394:	f001 fc3a 	bl	8001c0c <AUDIO_IO_DeInit>
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}

0800039c <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The CS43L22 ID
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80003a6:	f001 fbfb 	bl	8001ba0 <AUDIO_IO_Init>

  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80003aa:	88fb      	ldrh	r3, [r7, #6]
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	2101      	movs	r1, #1
 80003b0:	4618      	mov	r0, r3
 80003b2:	f001 fc82 	bl	8001cba <AUDIO_IO_Read>
 80003b6:	4603      	mov	r3, r0
 80003b8:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	f023 0307 	bic.w	r3, r3, #7
 80003c0:	73fb      	strb	r3, [r7, #15]

  return((uint32_t) Value);
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	6039      	str	r1, [r7, #0]
 80003d6:	80fb      	strh	r3, [r7, #6]
 80003d8:	4613      	mov	r3, r2
 80003da:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]

  if(Is_cs43l22_Stop == 1)
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <cs43l22_Play+0x70>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d123      	bne.n	8000430 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80003e8:	88fb      	ldrh	r3, [r7, #6]
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	2206      	movs	r2, #6
 80003ee:	210e      	movs	r1, #14
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f9ff 	bl	80007f4 <CODEC_IO_Write>
 80003f6:	4603      	mov	r3, r0
 80003f8:	461a      	mov	r2, r3
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	4413      	add	r3, r2
 80003fe:	60fb      	str	r3, [r7, #12]

    /* Enable Output device */
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000400:	88fb      	ldrh	r3, [r7, #6]
 8000402:	2100      	movs	r1, #0
 8000404:	4618      	mov	r0, r3
 8000406:	f000 f919 	bl	800063c <cs43l22_SetMute>
 800040a:	4602      	mov	r2, r0
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	4413      	add	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]

    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 8000412:	88fb      	ldrh	r3, [r7, #6]
 8000414:	b2db      	uxtb	r3, r3
 8000416:	229e      	movs	r2, #158	; 0x9e
 8000418:	2102      	movs	r1, #2
 800041a:	4618      	mov	r0, r3
 800041c:	f000 f9ea 	bl	80007f4 <CODEC_IO_Write>
 8000420:	4603      	mov	r3, r0
 8000422:	461a      	mov	r2, r3
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	4413      	add	r3, r2
 8000428:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <cs43l22_Play+0x70>)
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
  }

  /* Return communication control value */
  return counter;
 8000430:	68fb      	ldr	r3, [r7, #12]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000030 	.word	0x20000030

08000440 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]

  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	2101      	movs	r1, #1
 8000452:	4618      	mov	r0, r3
 8000454:	f000 f8f2 	bl	800063c <cs43l22_SetMute>
 8000458:	4602      	mov	r2, r0
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	4413      	add	r3, r2
 800045e:	60fb      	str	r3, [r7, #12]

  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8000460:	88fb      	ldrh	r3, [r7, #6]
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2201      	movs	r2, #1
 8000466:	2102      	movs	r1, #2
 8000468:	4618      	mov	r0, r3
 800046a:	f000 f9c3 	bl	80007f4 <CODEC_IO_Write>
 800046e:	4603      	mov	r3, r0
 8000470:	461a      	mov	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4413      	add	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]

  return counter;
 8000478:	68fb      	ldr	r3, [r7, #12]
}
 800047a:	4618      	mov	r0, r3
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8000492:	2300      	movs	r3, #0
 8000494:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000496:	88fb      	ldrh	r3, [r7, #6]
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f8ce 	bl	800063c <cs43l22_SetMute>
 80004a0:	4602      	mov	r2, r0
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	4413      	add	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80004a8:	2300      	movs	r3, #0
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	e002      	b.n	80004b4 <cs43l22_Resume+0x30>
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	3301      	adds	r3, #1
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	2bfe      	cmp	r3, #254	; 0xfe
 80004b8:	d9f9      	bls.n	80004ae <cs43l22_Resume+0x2a>

  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80004ba:	88fb      	ldrh	r3, [r7, #6]
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <cs43l22_Resume+0x74>)
 80004c0:	7812      	ldrb	r2, [r2, #0]
 80004c2:	b2d2      	uxtb	r2, r2
 80004c4:	2104      	movs	r1, #4
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f994 	bl	80007f4 <CODEC_IO_Write>
 80004cc:	4603      	mov	r3, r0
 80004ce:	461a      	mov	r2, r3
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	4413      	add	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	229e      	movs	r2, #158	; 0x9e
 80004dc:	2102      	movs	r1, #2
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 f988 	bl	80007f4 <CODEC_IO_Write>
 80004e4:	4603      	mov	r3, r0
 80004e6:	461a      	mov	r2, r3
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4413      	add	r3, r2
 80004ec:	60fb      	str	r3, [r7, #12]

  return counter;
 80004ee:	68fb      	ldr	r3, [r7, #12]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200001c0 	.word	0x200001c0

080004fc <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]

  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800050c:	88fb      	ldrh	r3, [r7, #6]
 800050e:	2101      	movs	r1, #1
 8000510:	4618      	mov	r0, r3
 8000512:	f000 f893 	bl	800063c <cs43l22_SetMute>
 8000516:	4602      	mov	r2, r0
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4413      	add	r3, r2
 800051c:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2204      	movs	r2, #4
 8000524:	210e      	movs	r1, #14
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f964 	bl	80007f4 <CODEC_IO_Write>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4413      	add	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]

  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	229f      	movs	r2, #159	; 0x9f
 800053c:	2102      	movs	r1, #2
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f958 	bl	80007f4 <CODEC_IO_Write>
 8000544:	4603      	mov	r3, r0
 8000546:	461a      	mov	r2, r3
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4413      	add	r3, r2
 800054c:	60fb      	str	r3, [r7, #12]

  Is_cs43l22_Stop = 1;
 800054e:	4b04      	ldr	r3, [pc, #16]	; (8000560 <cs43l22_Stop+0x64>)
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
  return counter;
 8000554:	68fb      	ldr	r3, [r7, #12]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000030 	.word	0x20000030

08000564 <cs43l22_SetVolume>:
  *                description for more details).
  *
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	460a      	mov	r2, r1
 800056e:	80fb      	strh	r3, [r7, #6]
 8000570:	4613      	mov	r3, r2
 8000572:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000578:	797b      	ldrb	r3, [r7, #5]
 800057a:	2b64      	cmp	r3, #100	; 0x64
 800057c:	d80b      	bhi.n	8000596 <cs43l22_SetVolume+0x32>
 800057e:	797a      	ldrb	r2, [r7, #5]
 8000580:	4613      	mov	r3, r2
 8000582:	021b      	lsls	r3, r3, #8
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	4a25      	ldr	r2, [pc, #148]	; (800061c <cs43l22_SetVolume+0xb8>)
 8000588:	fb82 1203 	smull	r1, r2, r2, r3
 800058c:	1152      	asrs	r2, r2, #5
 800058e:	17db      	asrs	r3, r3, #31
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	b2db      	uxtb	r3, r3
 8000594:	e000      	b.n	8000598 <cs43l22_SetVolume+0x34>
 8000596:	23ff      	movs	r3, #255	; 0xff
 8000598:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 800059a:	7afb      	ldrb	r3, [r7, #11]
 800059c:	2be6      	cmp	r3, #230	; 0xe6
 800059e:	d91c      	bls.n	80005da <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7);
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	b2d8      	uxtb	r0, r3
 80005a4:	7afb      	ldrb	r3, [r7, #11]
 80005a6:	3319      	adds	r3, #25
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	461a      	mov	r2, r3
 80005ac:	2120      	movs	r1, #32
 80005ae:	f000 f921 	bl	80007f4 <CODEC_IO_Write>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	4413      	add	r3, r2
 80005ba:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);
 80005bc:	88fb      	ldrh	r3, [r7, #6]
 80005be:	b2d8      	uxtb	r0, r3
 80005c0:	7afb      	ldrb	r3, [r7, #11]
 80005c2:	3319      	adds	r3, #25
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	461a      	mov	r2, r3
 80005c8:	2121      	movs	r1, #33	; 0x21
 80005ca:	f000 f913 	bl	80007f4 <CODEC_IO_Write>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461a      	mov	r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	4413      	add	r3, r2
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e01b      	b.n	8000612 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19);
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	b2d8      	uxtb	r0, r3
 80005de:	7afb      	ldrb	r3, [r7, #11]
 80005e0:	3319      	adds	r3, #25
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	461a      	mov	r2, r3
 80005e6:	2120      	movs	r1, #32
 80005e8:	f000 f904 	bl	80007f4 <CODEC_IO_Write>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19);
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	b2d8      	uxtb	r0, r3
 80005fa:	7afb      	ldrb	r3, [r7, #11]
 80005fc:	3319      	adds	r3, #25
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	461a      	mov	r2, r3
 8000602:	2121      	movs	r1, #33	; 0x21
 8000604:	f000 f8f6 	bl	80007f4 <CODEC_IO_Write>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4413      	add	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8000612:	68fb      	ldr	r3, [r7, #12]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	51eb851f 	.word	0x51eb851f

08000620 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	80fb      	strh	r3, [r7, #6]
  return 0;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	6039      	str	r1, [r7, #0]
 8000646:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]

  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d124      	bne.n	800069c <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	22ff      	movs	r2, #255	; 0xff
 8000658:	2104      	movs	r1, #4
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f8ca 	bl	80007f4 <CODEC_IO_Write>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2201      	movs	r2, #1
 8000670:	2122      	movs	r1, #34	; 0x22
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f8be 	bl	80007f4 <CODEC_IO_Write>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4413      	add	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2201      	movs	r2, #1
 8000688:	2123      	movs	r1, #35	; 0x23
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f8b2 	bl	80007f4 <CODEC_IO_Write>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e025      	b.n	80006e8 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2200      	movs	r2, #0
 80006a2:	2122      	movs	r1, #34	; 0x22
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f8a5 	bl	80007f4 <CODEC_IO_Write>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4413      	add	r3, r2
 80006b2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2200      	movs	r2, #0
 80006ba:	2123      	movs	r1, #35	; 0x23
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f899 	bl	80007f4 <CODEC_IO_Write>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	4413      	add	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <cs43l22_SetMute+0xb8>)
 80006d2:	7812      	ldrb	r2, [r2, #0]
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	2104      	movs	r1, #4
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f88b 	bl	80007f4 <CODEC_IO_Write>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	4413      	add	r3, r2
 80006e6:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80006e8:	68fb      	ldr	r3, [r7, #12]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200001c0 	.word	0x200001c0

080006f8 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	80fb      	strh	r3, [r7, #6]
 8000704:	4613      	mov	r3, r2
 8000706:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]

  switch (Output)
 800070c:	797b      	ldrb	r3, [r7, #5]
 800070e:	3b01      	subs	r3, #1
 8000710:	2b03      	cmp	r3, #3
 8000712:	d84b      	bhi.n	80007ac <cs43l22_SetOutputMode+0xb4>
 8000714:	a201      	add	r2, pc, #4	; (adr r2, 800071c <cs43l22_SetOutputMode+0x24>)
 8000716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071a:	bf00      	nop
 800071c:	0800072d 	.word	0x0800072d
 8000720:	0800074d 	.word	0x0800074d
 8000724:	0800076d 	.word	0x0800076d
 8000728:	0800078d 	.word	0x0800078d
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	22fa      	movs	r2, #250	; 0xfa
 8000732:	2104      	movs	r1, #4
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f85d 	bl	80007f4 <CODEC_IO_Write>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	4413      	add	r3, r2
 8000742:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <cs43l22_SetOutputMode+0xe0>)
 8000746:	22fa      	movs	r2, #250	; 0xfa
 8000748:	701a      	strb	r2, [r3, #0]
      break;
 800074a:	e03f      	b.n	80007cc <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	22af      	movs	r2, #175	; 0xaf
 8000752:	2104      	movs	r1, #4
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f84d 	bl	80007f4 <CODEC_IO_Write>
 800075a:	4603      	mov	r3, r0
 800075c:	461a      	mov	r2, r3
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	4413      	add	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <cs43l22_SetOutputMode+0xe0>)
 8000766:	22af      	movs	r2, #175	; 0xaf
 8000768:	701a      	strb	r2, [r3, #0]
      break;
 800076a:	e02f      	b.n	80007cc <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	22aa      	movs	r2, #170	; 0xaa
 8000772:	2104      	movs	r1, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f83d 	bl	80007f4 <CODEC_IO_Write>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	4413      	add	r3, r2
 8000782:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <cs43l22_SetOutputMode+0xe0>)
 8000786:	22aa      	movs	r2, #170	; 0xaa
 8000788:	701a      	strb	r2, [r3, #0]
      break;
 800078a:	e01f      	b.n	80007cc <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800078c:	88fb      	ldrh	r3, [r7, #6]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2205      	movs	r2, #5
 8000792:	2104      	movs	r1, #4
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f82d 	bl	80007f4 <CODEC_IO_Write>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	4413      	add	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <cs43l22_SetOutputMode+0xe0>)
 80007a6:	2205      	movs	r2, #5
 80007a8:	701a      	strb	r2, [r3, #0]
      break;
 80007aa:	e00f      	b.n	80007cc <cs43l22_SetOutputMode+0xd4>

    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2205      	movs	r2, #5
 80007b2:	2104      	movs	r1, #4
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 f81d 	bl	80007f4 <CODEC_IO_Write>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	4413      	add	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <cs43l22_SetOutputMode+0xe0>)
 80007c6:	2205      	movs	r2, #5
 80007c8:	701a      	strb	r2, [r3, #0]
      break;
 80007ca:	bf00      	nop
  }
  return counter;
 80007cc:	68fb      	ldr	r3, [r7, #12]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001c0 	.word	0x200001c0

080007dc <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	80fb      	strh	r3, [r7, #6]
  return 0;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <CODEC_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	460b      	mov	r3, r1
 8000800:	71bb      	strb	r3, [r7, #6]
 8000802:	4613      	mov	r3, r2
 8000804:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]

  AUDIO_IO_Write(Addr, Reg, Value);
 800080a:	797a      	ldrb	r2, [r7, #5]
 800080c:	79b9      	ldrb	r1, [r7, #6]
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fa3b 	bl	8001c8c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	b2db      	uxtb	r3, r3
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_DMA_Init+0x38>)
 800082c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <MX_DMA_Init+0x38>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6493      	str	r3, [r2, #72]	; 0x48
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_DMA_Init+0x38>)
 8000838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	2038      	movs	r0, #56	; 0x38
 8000848:	f001 fc91 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800084c:	2038      	movs	r0, #56	; 0x38
 800084e:	f001 fcaa 	bl	80021a6 <HAL_NVIC_EnableIRQ>

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000

08000860 <MX_GPIO_Init>:
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
     PB9   ------> LCD_COM3
*/
void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000876:	4bb7      	ldr	r3, [pc, #732]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4ab6      	ldr	r2, [pc, #728]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 800087c:	f043 0310 	orr.w	r3, r3, #16
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4bb4      	ldr	r3, [pc, #720]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0310 	and.w	r3, r3, #16
 800088a:	61bb      	str	r3, [r7, #24]
 800088c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4bb1      	ldr	r3, [pc, #708]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4ab0      	ldr	r2, [pc, #704]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4bae      	ldr	r3, [pc, #696]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	4bab      	ldr	r3, [pc, #684]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4aaa      	ldr	r2, [pc, #680]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4ba8      	ldr	r3, [pc, #672]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4ba5      	ldr	r3, [pc, #660]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4aa4      	ldr	r2, [pc, #656]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4ba2      	ldr	r3, [pc, #648]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b9f      	ldr	r3, [pc, #636]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a9e      	ldr	r2, [pc, #632]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b9c      	ldr	r3, [pc, #624]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	4b99      	ldr	r3, [pc, #612]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a98      	ldr	r2, [pc, #608]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b96      	ldr	r3, [pc, #600]	; (8000b54 <MX_GPIO_Init+0x2f4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LED_GREEN_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f240 1109 	movw	r1, #265	; 0x109
 800090c:	4892      	ldr	r0, [pc, #584]	; (8000b58 <MX_GPIO_Init+0x2f8>)
 800090e:	f002 f9d9 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	210c      	movs	r1, #12
 8000916:	4891      	ldr	r0, [pc, #580]	; (8000b5c <MX_GPIO_Init+0x2fc>)
 8000918:	f002 f9d4 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000922:	488f      	ldr	r0, [pc, #572]	; (8000b60 <MX_GPIO_Init+0x300>)
 8000924:	f002 f9ce 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2180      	movs	r1, #128	; 0x80
 800092c:	488d      	ldr	r0, [pc, #564]	; (8000b64 <MX_GPIO_Init+0x304>)
 800092e:	f002 f9c9 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000932:	2308      	movs	r3, #8
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093e:	2302      	movs	r3, #2
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4883      	ldr	r0, [pc, #524]	; (8000b58 <MX_GPIO_Init+0x2f8>)
 800094a:	f001 ff1d 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 800094e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000954:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	487e      	ldr	r0, [pc, #504]	; (8000b60 <MX_GPIO_Init+0x300>)
 8000966:	f001 ff0f 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin|USB_VBUS_Pin;
 800096a:	f640 0307 	movw	r3, #2055	; 0x807
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4878      	ldr	r0, [pc, #480]	; (8000b60 <MX_GPIO_Init+0x300>)
 8000980:	f001 ff02 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8000984:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000988:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000996:	230b      	movs	r3, #11
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	486f      	ldr	r0, [pc, #444]	; (8000b60 <MX_GPIO_Init+0x300>)
 80009a2:	f001 fef1 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 80009a6:	232f      	movs	r3, #47	; 0x2f
 80009a8:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ae:	2302      	movs	r3, #2
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009bc:	f001 fee4 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 80009c0:	2310      	movs	r3, #16
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d8:	f001 fed6 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 80009dc:	f248 73c0 	movw	r3, #34752	; 0x87c0
 80009e0:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80009ee:	230b      	movs	r3, #11
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f001 fec4 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 8000a00:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000a04:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000a12:	230b      	movs	r3, #11
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	484f      	ldr	r0, [pc, #316]	; (8000b5c <MX_GPIO_Init+0x2fc>)
 8000a1e:	f001 feb3 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000a22:	2304      	movs	r3, #4
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4848      	ldr	r0, [pc, #288]	; (8000b5c <MX_GPIO_Init+0x2fc>)
 8000a3a:	f001 fea5 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4840      	ldr	r0, [pc, #256]	; (8000b58 <MX_GPIO_Init+0x2f8>)
 8000a58:	f001 fe96 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000a5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a62:	2312      	movs	r3, #18
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4838      	ldr	r0, [pc, #224]	; (8000b5c <MX_GPIO_Init+0x2fc>)
 8000a7a:	f001 fe85 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8000a7e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000a82:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000a90:	230b      	movs	r3, #11
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4832      	ldr	r0, [pc, #200]	; (8000b64 <MX_GPIO_Init+0x304>)
 8000a9c:	f001 fe74 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4829      	ldr	r0, [pc, #164]	; (8000b60 <MX_GPIO_Init+0x300>)
 8000aba:	f001 fe65 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000abe:	2305      	movs	r3, #5
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ac2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4824      	ldr	r0, [pc, #144]	; (8000b64 <MX_GPIO_Init+0x304>)
 8000ad4:	f001 fe58 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8000ad8:	231a      	movs	r3, #26
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ae8:	2305      	movs	r3, #5
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	481c      	ldr	r0, [pc, #112]	; (8000b64 <MX_GPIO_Init+0x304>)
 8000af4:	f001 fe48 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000af8:	2360      	movs	r3, #96	; 0x60
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4814      	ldr	r0, [pc, #80]	; (8000b64 <MX_GPIO_Init+0x304>)
 8000b14:	f001 fe38 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <MX_GPIO_Init+0x304>)
 8000b30:	f001 fe2a 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000b34:	2308      	movs	r3, #8
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_GPIO_Init+0x2fc>)
 8000b4c:	f001 fe1c 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000b50:	23c0      	movs	r3, #192	; 0xc0
 8000b52:	e009      	b.n	8000b68 <MX_GPIO_Init+0x308>
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48001000 	.word	0x48001000
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	48000800 	.word	0x48000800
 8000b64:	48000c00 	.word	0x48000c00
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6a:	2312      	movs	r3, #18
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b76:	2304      	movs	r3, #4
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4817      	ldr	r0, [pc, #92]	; (8000be0 <MX_GPIO_Init+0x380>)
 8000b82:	f001 fe01 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b8c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4810      	ldr	r0, [pc, #64]	; (8000be0 <MX_GPIO_Init+0x380>)
 8000b9e:	f001 fdf3 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480a      	ldr	r0, [pc, #40]	; (8000be4 <MX_GPIO_Init+0x384>)
 8000bba:	f001 fde5 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bc2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_GPIO_Init+0x384>)
 8000bd4:	f001 fdd8 	bl	8002788 <HAL_GPIO_Init>

}
 8000bd8:	bf00      	nop
 8000bda:	3730      	adds	r7, #48	; 0x30
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	48000400 	.word	0x48000400
 8000be4:	48001000 	.word	0x48001000

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t PlaybackPosition   = PLAY_BUFF_SIZE + PLAY_HEADER;
 8000bee:	f241 032c 	movw	r3, #4140	; 0x102c
 8000bf2:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf4:	f001 f91c 	bl	8001e30 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED5);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f000 fdd9 	bl	80017b0 <BSP_LED_Init>

   /* Check if the buffer has been loaded in flash */
   if(*((uint64_t *)AUDIO_FILE_ADDRESS) != 0x017EFE2446464952 ) Error_Handler();
 8000bfe:	4b40      	ldr	r3, [pc, #256]	; (8000d00 <main+0x118>)
 8000c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c04:	483f      	ldr	r0, [pc, #252]	; (8000d04 <main+0x11c>)
 8000c06:	4940      	ldr	r1, [pc, #256]	; (8000d08 <main+0x120>)
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	bf08      	it	eq
 8000c0c:	4282      	cmpeq	r2, r0
 8000c0e:	d001      	beq.n	8000c14 <main+0x2c>
 8000c10:	f000 f936 	bl	8000e80 <Error_Handler>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c14:	f000 f884 	bl	8000d20 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c18:	f000 f8e4 	bl	8000de4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1c:	f7ff fe20 	bl	8000860 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000c20:	f000 f936 	bl	8000e90 <MX_QUADSPI_Init>
  MX_DMA_Init();
 8000c24:	f7ff fdfe 	bl	8000824 <MX_DMA_Init>
  MX_SAI1_Init();
 8000c28:	f000 fc6e 	bl	8001508 <MX_SAI1_Init>
  MX_USB_DEVICE_Init();
 8000c2c:	f00b fb0e 	bl	800c24c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the data buffer */
    for(int i=0; i < PLAY_BUFF_SIZE; i+=2)
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	e00b      	b.n	8000c4e <main+0x66>
    {
      PlayBuff[i]=*((__IO uint16_t *)(AUDIO_FILE_ADDRESS + PLAY_HEADER + i));
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <main+0x124>)
 8000c3a:	4413      	add	r3, r2
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	b299      	uxth	r1, r3
 8000c40:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <main+0x128>)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i=0; i < PLAY_BUFF_SIZE; i+=2)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c54:	dbef      	blt.n	8000c36 <main+0x4e>
    }

    /* Start the playback */
    if(0 != audio_drv->Play(AUDIO_I2C_ADDRESS, NULL, 0))
 8000c56:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <main+0x12c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2094      	movs	r0, #148	; 0x94
 8000c62:	4798      	blx	r3
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <main+0x86>
    {
      Error_Handler();
 8000c6a:	f000 f909 	bl	8000e80 <Error_Handler>
    }
    if(HAL_OK != HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *)PlayBuff, PLAY_BUFF_SIZE))
 8000c6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c72:	4927      	ldr	r1, [pc, #156]	; (8000d10 <main+0x128>)
 8000c74:	4828      	ldr	r0, [pc, #160]	; (8000d18 <main+0x130>)
 8000c76:	f006 fec3 	bl	8007a00 <HAL_SAI_Transmit_DMA>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <main+0x9c>
    {
      Error_Handler();
 8000c80:	f000 f8fe 	bl	8000e80 <Error_Handler>
    }

    /* Start loopback */
    while(1)
    {
      BSP_LED_Toggle(LED5);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f000 fdfb 	bl	8001880 <BSP_LED_Toggle>

      /* Wait a callback event */
      while(UpdatePointer==-1);
 8000c8a:	bf00      	nop
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <main+0x134>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c96:	d0f9      	beq.n	8000c8c <main+0xa4>

      int position = UpdatePointer;
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <main+0x134>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	603b      	str	r3, [r7, #0]
      UpdatePointer = -1;
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <main+0x134>)
 8000ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca6:	801a      	strh	r2, [r3, #0]

      /* Update the first or the second part of the buffer */
      for(int i = 0; i < PLAY_BUFF_SIZE/2; i++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	e012      	b.n	8000cd4 <main+0xec>
      {
        PlayBuff[i+position] = *(uint16_t *)(AUDIO_FILE_ADDRESS + PlaybackPosition);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000cb4:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8000cb8:	4619      	mov	r1, r3
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	8809      	ldrh	r1, [r1, #0]
 8000cc2:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <main+0x128>)
 8000cc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        PlaybackPosition+=2;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3302      	adds	r3, #2
 8000ccc:	60fb      	str	r3, [r7, #12]
      for(int i = 0; i < PLAY_BUFF_SIZE/2; i++)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cda:	dbe8      	blt.n	8000cae <main+0xc6>
      }

      /* check the end of the file */
      if((PlaybackPosition+PLAY_BUFF_SIZE/2) > AUDIO_FILE_SIZE)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000ce2:	f5b3 3f34 	cmp.w	r3, #184320	; 0x2d000
 8000ce6:	d901      	bls.n	8000cec <main+0x104>
      {
        PlaybackPosition = PLAY_HEADER;
 8000ce8:	232c      	movs	r3, #44	; 0x2c
 8000cea:	60fb      	str	r3, [r7, #12]
      }

      if(UpdatePointer != -1)
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <main+0x134>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf6:	d0c5      	beq.n	8000c84 <main+0x9c>
      {
        /* Buffer update time is too long compare to the data transfer time */
        Error_Handler();
 8000cf8:	f000 f8c2 	bl	8000e80 <Error_Handler>
    {
 8000cfc:	e7c2      	b.n	8000c84 <main+0x9c>
 8000cfe:	bf00      	nop
 8000d00:	08080000 	.word	0x08080000
 8000d04:	46464952 	.word	0x46464952
 8000d08:	017efe24 	.word	0x017efe24
 8000d0c:	0808002c 	.word	0x0808002c
 8000d10:	200001c4 	.word	0x200001c4
 8000d14:	200022d4 	.word	0x200022d4
 8000d18:	20002208 	.word	0x20002208
 8000d1c:	20000032 	.word	0x20000032

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b096      	sub	sp, #88	; 0x58
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	2244      	movs	r2, #68	; 0x44
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f00c f94e 	bl	800cfd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d46:	f003 fe8f 	bl	8004a68 <HAL_PWREx_ControlVoltageScaling>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d50:	f000 f896 	bl	8000e80 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d54:	f003 fe6a 	bl	8004a2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <SystemClock_Config+0xc0>)
 8000d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d5e:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <SystemClock_Config+0xc0>)
 8000d60:	f023 0318 	bic.w	r3, r3, #24
 8000d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000d68:	2314      	movs	r3, #20
 8000d6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d70:	2301      	movs	r3, #1
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d78:	2360      	movs	r3, #96	; 0x60
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d80:	2301      	movs	r3, #1
 8000d82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d88:	2328      	movs	r3, #40	; 0x28
 8000d8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000d90:	2304      	movs	r3, #4
 8000d92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f004 fba5 	bl	80054ec <HAL_RCC_OscConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000da8:	f000 f86a 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dac:	230f      	movs	r3, #15
 8000dae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db0:	2303      	movs	r3, #3
 8000db2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f004 ff79 	bl	8005cbc <HAL_RCC_ClockConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dd0:	f000 f856 	bl	8000e80 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000dd4:	f006 f9d0 	bl	8007178 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000dd8:	bf00      	nop
 8000dda:	3758      	adds	r7, #88	; 0x58
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021000 	.word	0x40021000

08000de4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0a2      	sub	sp, #136	; 0x88
 8000de8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2288      	movs	r2, #136	; 0x88
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00c f8ed 	bl	800cfd0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB;
 8000df6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dfa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000e00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e04:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000e06:	2301      	movs	r3, #1
 8000e08:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000e0e:	2318      	movs	r3, #24
 8000e10:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e12:	2307      	movs	r3, #7
 8000e14:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e16:	2302      	movs	r3, #2
 8000e18:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8000e1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e22:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4618      	mov	r0, r3
 8000e28:	f005 f94e 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000e32:	f000 f825 	bl	8000e80 <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	3788      	adds	r7, #136	; 0x88
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_SAI_TxCpltCallback>:
  * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
  UpdatePointer = PLAY_BUFF_SIZE/2;
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <HAL_SAI_TxCpltCallback+0x1c>)
 8000e4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e4e:	801a      	strh	r2, [r3, #0]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	20000032 	.word	0x20000032

08000e60 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implenetd in the user file
   */
  UpdatePointer = 0;
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <HAL_SAI_TxHalfCpltCallback+0x1c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	801a      	strh	r2, [r3, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000032 	.word	0x20000032

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED5);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f000 fcdf 	bl	800184c <BSP_LED_On>
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <Error_Handler+0xe>

08000e90 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_QUADSPI_Init+0x44>)
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <MX_QUADSPI_Init+0x48>)
 8000e98:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_QUADSPI_Init+0x44>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_QUADSPI_Init+0x44>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_QUADSPI_Init+0x44>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 0x17;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_QUADSPI_Init+0x44>)
 8000eae:	2217      	movs	r2, #23
 8000eb0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_QUADSPI_Init+0x44>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_QUADSPI_Init+0x44>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_QUADSPI_Init+0x44>)
 8000ec0:	f003 fe58 	bl	8004b74 <HAL_QSPI_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000eca:	f7ff ffd9 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200021c4 	.word	0x200021c4
 8000ed8:	a0001000 	.word	0xa0001000

08000edc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <HAL_QSPI_MspInit+0x7c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d128      	bne.n	8000f50 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_QSPI_MspInit+0x80>)
 8000f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f02:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <HAL_QSPI_MspInit+0x80>)
 8000f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f08:	6513      	str	r3, [r2, #80]	; 0x50
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_QSPI_MspInit+0x80>)
 8000f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_QSPI_MspInit+0x80>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <HAL_QSPI_MspInit+0x80>)
 8000f1c:	f043 0310 	orr.w	r3, r3, #16
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_QSPI_MspInit+0x80>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0310 	and.w	r3, r3, #16
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|QUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f2e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f32:	617b      	str	r3, [r7, #20]
                          |QUADSPI_BK1_IO2_Pin|QUADSPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f40:	230a      	movs	r3, #10
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <HAL_QSPI_MspInit+0x84>)
 8000f4c:	f001 fc1c 	bl	8002788 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	a0001000 	.word	0xa0001000
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	48001000 	.word	0x48001000

08000f64 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&hqspi) != QSPI_OK)
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <BSP_QSPI_Init+0x2c>)
 8000f6a:	f000 f98e 	bl	800128a <QSPI_ResetMemory>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <BSP_QSPI_Init+0x14>
  {
    return QSPI_NOT_SUPPORTED;
 8000f74:	2304      	movs	r3, #4
 8000f76:	e008      	b.n	8000f8a <BSP_QSPI_Init+0x26>
  }
 
  /* Configuration of the dummy cucles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != QSPI_OK)
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <BSP_QSPI_Init+0x2c>)
 8000f7a:	f000 f9c8 	bl	800130e <QSPI_DummyCyclesCfg>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <BSP_QSPI_Init+0x24>
  {
    return QSPI_NOT_SUPPORTED;
 8000f84:	2304      	movs	r3, #4
 8000f86:	e000      	b.n	8000f8a <BSP_QSPI_Init+0x26>
  }
  
  return QSPI_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200021c4 	.word	0x200021c4

08000f94 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b092      	sub	sp, #72	; 0x48
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8000fa6:	23eb      	movs	r3, #235	; 0xeb
 8000fa8:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000faa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb4:	61fb      	str	r3, [r7, #28]
  sCommand.Address           = ReadAddr;
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8000fbe:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = Size;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480c      	ldr	r0, [pc, #48]	; (8001014 <BSP_QSPI_Read+0x80>)
 8000fe4:	f003 fe3c 	bl	8004c60 <HAL_QSPI_Command>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00b      	b.n	800100a <BSP_QSPI_Read+0x76>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff6:	68f9      	ldr	r1, [r7, #12]
 8000ff8:	4806      	ldr	r0, [pc, #24]	; (8001014 <BSP_QSPI_Read+0x80>)
 8000ffa:	f003 ff26 	bl	8004e4a <HAL_QSPI_Receive>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <BSP_QSPI_Read+0x74>
  {
    return QSPI_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <BSP_QSPI_Read+0x76>
  }

  return QSPI_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3748      	adds	r7, #72	; 0x48
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200021c4 	.word	0x200021c4

08001018 <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b096      	sub	sp, #88	; 0x58
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	653b      	str	r3, [r7, #80]	; 0x50

  while (current_addr <= WriteAddr)
 8001028:	e003      	b.n	8001032 <BSP_QSPI_Write+0x1a>
  {
    current_addr += N25Q128A_PAGE_SIZE;
 800102a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800102c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001030:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 8001032:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	429a      	cmp	r2, r3
 8001038:	d9f7      	bls.n	800102a <BSP_QSPI_Write+0x12>
  }
  current_size = current_addr - WriteAddr;
 800103a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8001042:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d901      	bls.n	800104e <BSP_QSPI_Write+0x36>
  {
    current_size = Size;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4413      	add	r3, r2
 8001058:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800105a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8001060:	2312      	movs	r3, #18
 8001062:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001064:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 800106a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800106e:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001070:	2300      	movs	r3, #0
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8001074:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001082:	2300      	movs	r3, #0
 8001084:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001086:	2300      	movs	r3, #0
 8001088:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 800108a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800108c:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 800108e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001090:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&hqspi) != QSPI_OK)
 8001092:	4824      	ldr	r0, [pc, #144]	; (8001124 <BSP_QSPI_Write+0x10c>)
 8001094:	f000 f9b6 	bl	8001404 <QSPI_WriteEnable>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <BSP_QSPI_Write+0x8a>
    {
      return QSPI_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e03b      	b.n	800111a <BSP_QSPI_Write+0x102>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010aa:	4619      	mov	r1, r3
 80010ac:	481d      	ldr	r0, [pc, #116]	; (8001124 <BSP_QSPI_Write+0x10c>)
 80010ae:	f003 fdd7 	bl	8004c60 <HAL_QSPI_Command>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <BSP_QSPI_Write+0xa4>
    {
      return QSPI_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e02e      	b.n	800111a <BSP_QSPI_Write+0x102>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80010bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c0:	68f9      	ldr	r1, [r7, #12]
 80010c2:	4818      	ldr	r0, [pc, #96]	; (8001124 <BSP_QSPI_Write+0x10c>)
 80010c4:	f003 fe2a 	bl	8004d1c <HAL_QSPI_Transmit>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e023      	b.n	800111a <BSP_QSPI_Write+0x102>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80010d2:	f241 3188 	movw	r1, #5000	; 0x1388
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <BSP_QSPI_Write+0x10c>)
 80010d8:	f000 f9dd 	bl	8001496 <QSPI_AutoPollingMemReady>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <BSP_QSPI_Write+0xce>
    {
      return QSPI_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e019      	b.n	800111a <BSP_QSPI_Write+0x102>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 80010e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80010e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ea:	4413      	add	r3, r2
 80010ec:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 80010f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80010fe:	429a      	cmp	r2, r3
 8001100:	d203      	bcs.n	800110a <BSP_QSPI_Write+0xf2>
 8001102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	e001      	b.n	800110e <BSP_QSPI_Write+0xf6>
 800110a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800110e:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8001110:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001114:	429a      	cmp	r2, r3
 8001116:	d3b8      	bcc.n	800108a <BSP_QSPI_Write+0x72>
  
  return QSPI_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3758      	adds	r7, #88	; 0x58
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200021c4 	.word	0x200021c4

08001128 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b090      	sub	sp, #64	; 0x40
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001134:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = SUBSECTOR_ERASE_CMD;
 8001136:	2320      	movs	r3, #32
 8001138:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 800113a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001144:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800115a:	2300      	movs	r3, #0
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800115e:	2300      	movs	r3, #0
 8001160:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&hqspi) != QSPI_OK)
 8001162:	4812      	ldr	r0, [pc, #72]	; (80011ac <BSP_QSPI_Erase_Block+0x84>)
 8001164:	f000 f94e 	bl	8001404 <QSPI_WriteEnable>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e017      	b.n	80011a2 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	f241 3288 	movw	r2, #5000	; 0x1388
 800117a:	4619      	mov	r1, r3
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <BSP_QSPI_Erase_Block+0x84>)
 800117e:	f003 fd6f 	bl	8004c60 <HAL_QSPI_Command>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e00a      	b.n	80011a2 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&hqspi, N25Q128A_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 800118c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001190:	4806      	ldr	r0, [pc, #24]	; (80011ac <BSP_QSPI_Erase_Block+0x84>)
 8001192:	f000 f980 	bl	8001496 <QSPI_AutoPollingMemReady>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3740      	adds	r7, #64	; 0x40
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200021c4 	.word	0x200021c4

080011b0 <BSP_QSPI_GetStatus>:
/**
  * @brief  Reads current status of the QSPI memory.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetStatus(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b090      	sub	sp, #64	; 0x40
 80011b4:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read flag status register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80011b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ba:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = READ_FLAG_STATUS_REG_CMD;
 80011bc:	2370      	movs	r3, #112	; 0x70
 80011be:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80011c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  sCommand.NbData            = 1;
 80011d2:	2301      	movs	r3, #1
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80011da:	2300      	movs	r3, #0
 80011dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80011de:	2300      	movs	r3, #0
 80011e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ea:	4619      	mov	r1, r3
 80011ec:	4816      	ldr	r0, [pc, #88]	; (8001248 <BSP_QSPI_GetStatus+0x98>)
 80011ee:	f003 fd37 	bl	8004c60 <HAL_QSPI_Command>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <BSP_QSPI_GetStatus+0x4c>
  {
    return QSPI_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e020      	b.n	800123e <BSP_QSPI_GetStatus+0x8e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011fc:	1dfb      	adds	r3, r7, #7
 80011fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001202:	4619      	mov	r1, r3
 8001204:	4810      	ldr	r0, [pc, #64]	; (8001248 <BSP_QSPI_GetStatus+0x98>)
 8001206:	f003 fe20 	bl	8004e4a <HAL_QSPI_Receive>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <BSP_QSPI_GetStatus+0x64>
  {
    return QSPI_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e014      	b.n	800123e <BSP_QSPI_GetStatus+0x8e>
  }
  
  /* Check the value of the register */
  if ((reg & (N25Q128A_FSR_PRERR | N25Q128A_FSR_VPPERR | N25Q128A_FSR_PGERR | N25Q128A_FSR_ERERR)) != 0)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <BSP_QSPI_GetStatus+0x72>
  {
    return QSPI_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00d      	b.n	800123e <BSP_QSPI_GetStatus+0x8e>
  }
  else if ((reg & (N25Q128A_FSR_PGSUS | N25Q128A_FSR_ERSUS)) != 0)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <BSP_QSPI_GetStatus+0x80>
  {
    return QSPI_SUSPENDED;
 800122c:	2308      	movs	r3, #8
 800122e:	e006      	b.n	800123e <BSP_QSPI_GetStatus+0x8e>
  }
  else if ((reg & N25Q128A_FSR_READY) != 0)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	b25b      	sxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	da01      	bge.n	800123c <BSP_QSPI_GetStatus+0x8c>
  {
    return QSPI_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	e000      	b.n	800123e <BSP_QSPI_GetStatus+0x8e>
  }
  else
  {
    return QSPI_BUSY;
 800123c:	2302      	movs	r3, #2
  }
}
 800123e:	4618      	mov	r0, r3
 8001240:	3740      	adds	r7, #64	; 0x40
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200021c4 	.word	0x200021c4

0800124c <BSP_QSPI_GetInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo: pointer on the configuration structure  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetInfo(QSPI_Info* pInfo)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize          = N25Q128A_FLASH_SIZE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800125a:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = N25Q128A_SUBSECTOR_SIZE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001262:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber = (N25Q128A_FLASH_SIZE/N25Q128A_SUBSECTOR_SIZE);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800126a:	609a      	str	r2, [r3, #8]
  pInfo->ProgPageSize       = N25Q128A_PAGE_SIZE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001272:	60da      	str	r2, [r3, #12]
  pInfo->ProgPagesNumber    = (N25Q128A_FLASH_SIZE/N25Q128A_PAGE_SIZE);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800127a:	611a      	str	r2, [r3, #16]
  
  return QSPI_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b090      	sub	sp, #64	; 0x40
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001296:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8001298:	2366      	movs	r3, #102	; 0x66
 800129a:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80012b4:	2300      	movs	r3, #0
 80012b6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c0:	4619      	mov	r1, r3
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f003 fccc 	bl	8004c60 <HAL_QSPI_Command>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e019      	b.n	8001306 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80012d2:	2399      	movs	r3, #153	; 0x99
 80012d4:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	f241 3288 	movw	r2, #5000	; 0x1388
 80012de:	4619      	mov	r1, r3
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f003 fcbd 	bl	8004c60 <HAL_QSPI_Command>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e00a      	b.n	8001306 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80012f0:	f241 3188 	movw	r1, #5000	; 0x1388
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f8ce 	bl	8001496 <QSPI_AutoPollingMemReady>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3740      	adds	r7, #64	; 0x40
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b094      	sub	sp, #80	; 0x50
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 800131c:	2385      	movs	r3, #133	; 0x85
 800131e:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001320:	2300      	movs	r3, #0
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 8001332:	2301      	movs	r3, #1
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800133a:	2300      	movs	r3, #0
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800133e:	2300      	movs	r3, #0
 8001340:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	f241 3288 	movw	r2, #5000	; 0x1388
 800134a:	4619      	mov	r1, r3
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f003 fc87 	bl	8004c60 <HAL_QSPI_Command>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e04f      	b.n	80013fc <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800135c:	f107 030b 	add.w	r3, r7, #11
 8001360:	f241 3288 	movw	r2, #5000	; 0x1388
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f003 fd6f 	bl	8004e4a <HAL_QSPI_Receive>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e042      	b.n	80013fc <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f844 	bl	8001404 <QSPI_WriteEnable>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e03a      	b.n	80013fc <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8001386:	2381      	movs	r3, #129	; 0x81
 8001388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800138a:	7afb      	ldrb	r3, [r7, #11]
 800138c:	b25b      	sxtb	r3, r3
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	b25a      	sxtb	r2, r3
 8001394:	23f0      	movs	r3, #240	; 0xf0
 8001396:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800139a:	fa93 f3a3 	rbit	r3, r3
 800139e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a2:	64fb      	str	r3, [r7, #76]	; 0x4c
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80013a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <QSPI_DummyCyclesCfg+0xa0>
  {
    return 32U;
 80013aa:	2320      	movs	r3, #32
 80013ac:	e003      	b.n	80013b6 <QSPI_DummyCyclesCfg+0xa8>
  }
  return __builtin_clz(value);
 80013ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013b0:	fab3 f383 	clz	r3, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4619      	mov	r1, r3
 80013b8:	230a      	movs	r3, #10
 80013ba:	408b      	lsls	r3, r1
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	72fb      	strb	r3, [r7, #11]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ce:	4619      	mov	r1, r3
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f003 fc45 	bl	8004c60 <HAL_QSPI_Command>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e00d      	b.n	80013fc <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013e0:	f107 030b 	add.w	r3, r7, #11
 80013e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e8:	4619      	mov	r1, r3
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f003 fc96 	bl	8004d1c <HAL_QSPI_Transmit>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <QSPI_DummyCyclesCfg+0xee>
  }
  
  return QSPI_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3750      	adds	r7, #80	; 0x50
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b096      	sub	sp, #88	; 0x58
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800140c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001412:	2306      	movs	r3, #6
 8001414:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001416:	2300      	movs	r3, #0
 8001418:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800141a:	2300      	movs	r3, #0
 800141c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 800141e:	2300      	movs	r3, #0
 8001420:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800142a:	2300      	movs	r3, #0
 800142c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800142e:	2300      	movs	r3, #0
 8001430:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001432:	f107 0320 	add.w	r3, r7, #32
 8001436:	f241 3288 	movw	r2, #5000	; 0x1388
 800143a:	4619      	mov	r1, r3
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f003 fc0f 	bl	8004c60 <HAL_QSPI_Command>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e020      	b.n	800148e <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = N25Q128A_SR_WREN;
 800144c:	2302      	movs	r3, #2
 800144e:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 8001450:	2302      	movs	r3, #2
 8001452:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 800145c:	2310      	movs	r3, #16
 800145e:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001460:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001464:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8001466:	2305      	movs	r3, #5
 8001468:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 800146a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800146e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001470:	f107 0208 	add.w	r2, r7, #8
 8001474:	f107 0120 	add.w	r1, r7, #32
 8001478:	f241 3388 	movw	r3, #5000	; 0x1388
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f003 fd86 	bl	8004f8e <HAL_QSPI_AutoPolling>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3758      	adds	r7, #88	; 0x58
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b096      	sub	sp, #88	; 0x58
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80014a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80014a6:	2305      	movs	r3, #5
 80014a8:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80014b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80014c0:	2300      	movs	r3, #0
 80014c2:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80014c4:	2300      	movs	r3, #0
 80014c6:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80014d8:	2310      	movs	r3, #16
 80014da:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80014dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014e0:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &sCommand, &sConfig, Timeout) != HAL_OK)
 80014e2:	f107 0208 	add.w	r2, r7, #8
 80014e6:	f107 0120 	add.w	r1, r7, #32
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f003 fd4e 	bl	8004f8e <HAL_QSPI_AutoPolling>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3758      	adds	r7, #88	; 0x58
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;
AUDIO_DrvTypeDef  *audio_drv;
/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001508:	b598      	push	{r3, r4, r7, lr}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 0 */
	  __HAL_SAI_RESET_HANDLE_STATE(&hsai_BlockA1);
 800150c:	4b45      	ldr	r3, [pc, #276]	; (8001624 <MX_SAI1_Init+0x11c>)
 800150e:	2200      	movs	r2, #0
 8001510:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	  hsai_BlockA1.Instance = SAI1_Block_A;
 8001514:	4b43      	ldr	r3, [pc, #268]	; (8001624 <MX_SAI1_Init+0x11c>)
 8001516:	4a44      	ldr	r2, [pc, #272]	; (8001628 <MX_SAI1_Init+0x120>)
 8001518:	601a      	str	r2, [r3, #0]
	  __HAL_SAI_DISABLE(&hsai_BlockA1);
 800151a:	4b42      	ldr	r3, [pc, #264]	; (8001624 <MX_SAI1_Init+0x11c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b40      	ldr	r3, [pc, #256]	; (8001624 <MX_SAI1_Init+0x11c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001528:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800152a:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <MX_SAI1_Init+0x11c>)
 800152c:	4a3e      	ldr	r2, [pc, #248]	; (8001628 <MX_SAI1_Init+0x120>)
 800152e:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001530:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <MX_SAI1_Init+0x11c>)
 8001532:	2200      	movs	r2, #0
 8001534:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001536:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <MX_SAI1_Init+0x11c>)
 8001538:	2200      	movs	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 800153c:	4b39      	ldr	r3, [pc, #228]	; (8001624 <MX_SAI1_Init+0x11c>)
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001542:	4b38      	ldr	r3, [pc, #224]	; (8001624 <MX_SAI1_Init+0x11c>)
 8001544:	2200      	movs	r2, #0
 8001546:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001548:	4b36      	ldr	r3, [pc, #216]	; (8001624 <MX_SAI1_Init+0x11c>)
 800154a:	2200      	movs	r2, #0
 800154c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800154e:	4b35      	ldr	r3, [pc, #212]	; (8001624 <MX_SAI1_Init+0x11c>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001554:	4b33      	ldr	r3, [pc, #204]	; (8001624 <MX_SAI1_Init+0x11c>)
 8001556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800155c:	4b31      	ldr	r3, [pc, #196]	; (8001624 <MX_SAI1_Init+0x11c>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001562:	4b30      	ldr	r3, [pc, #192]	; (8001624 <MX_SAI1_Init+0x11c>)
 8001564:	2201      	movs	r2, #1
 8001566:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_22K;
 8001568:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <MX_SAI1_Init+0x11c>)
 800156a:	f245 6222 	movw	r2, #22050	; 0x5622
 800156e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001570:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <MX_SAI1_Init+0x11c>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001576:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <MX_SAI1_Init+0x11c>)
 8001578:	2200      	movs	r2, #0
 800157a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <MX_SAI1_Init+0x11c>)
 800157e:	2200      	movs	r2, #0
 8001580:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <MX_SAI1_Init+0x11c>)
 8001584:	2200      	movs	r2, #0
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 32;
 8001588:	4b26      	ldr	r3, [pc, #152]	; (8001624 <MX_SAI1_Init+0x11c>)
 800158a:	2220      	movs	r2, #32
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 16;
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <MX_SAI1_Init+0x11c>)
 8001590:	2210      	movs	r2, #16
 8001592:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <MX_SAI1_Init+0x11c>)
 8001596:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800159a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <MX_SAI1_Init+0x11c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <MX_SAI1_Init+0x11c>)
 80015a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015a8:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <MX_SAI1_Init+0x11c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80015b0:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <MX_SAI1_Init+0x11c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 2;
 80015b6:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <MX_SAI1_Init+0x11c>)
 80015b8:	2202      	movs	r2, #2
 80015ba:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000003;
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <MX_SAI1_Init+0x11c>)
 80015be:	2203      	movs	r2, #3
 80015c0:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80015c2:	4818      	ldr	r0, [pc, #96]	; (8001624 <MX_SAI1_Init+0x11c>)
 80015c4:	f006 f8aa 	bl	800771c <HAL_SAI_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_SAI1_Init+0xca>
  {
    Error_Handler();
 80015ce:	f7ff fc57 	bl	8000e80 <Error_Handler>
  }

  /* USER CODE BEGIN SAI1_Init 2 */
  /* Enable SAI to generate clock used by audio driver */
    __HAL_SAI_ENABLE(&hsai_BlockA1);
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_SAI1_Init+0x11c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_SAI1_Init+0x11c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015e0:	601a      	str	r2, [r3, #0]

    /* Initialize audio driver */
     if(CS43L22_ID != cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS))
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_SAI1_Init+0x124>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2094      	movs	r0, #148	; 0x94
 80015e8:	4798      	blx	r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	2be0      	cmp	r3, #224	; 0xe0
 80015ee:	d001      	beq.n	80015f4 <MX_SAI1_Init+0xec>
     {
       Error_Handler();
 80015f0:	f7ff fc46 	bl	8000e80 <Error_Handler>
     }

     audio_drv = &cs43l22_drv;
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_SAI1_Init+0x128>)
 80015f6:	4a0d      	ldr	r2, [pc, #52]	; (800162c <MX_SAI1_Init+0x124>)
 80015f8:	601a      	str	r2, [r3, #0]
     audio_drv->Reset(AUDIO_I2C_ADDRESS);
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <MX_SAI1_Init+0x128>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	2094      	movs	r0, #148	; 0x94
 8001602:	4798      	blx	r3
     if(0 != audio_drv->Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 80, AUDIO_FREQUENCY_22K))
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <MX_SAI1_Init+0x128>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681c      	ldr	r4, [r3, #0]
 800160a:	f245 6322 	movw	r3, #22050	; 0x5622
 800160e:	2250      	movs	r2, #80	; 0x50
 8001610:	2102      	movs	r1, #2
 8001612:	2094      	movs	r0, #148	; 0x94
 8001614:	47a0      	blx	r4
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_SAI1_Init+0x118>
     {
       Error_Handler();
 800161c:	f7ff fc30 	bl	8000e80 <Error_Handler>
     }

  /* USER CODE END SAI1_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd98      	pop	{r3, r4, r7, pc}
 8001624:	20002208 	.word	0x20002208
 8001628:	40015404 	.word	0x40015404
 800162c:	20000000 	.word	0x20000000
 8001630:	200022d4 	.word	0x200022d4

08001634 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	; 0x38
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    __HAL_RCC_SAI1_CLK_ENABLE();
 800163c:	4b58      	ldr	r3, [pc, #352]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 800163e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001640:	4a57      	ldr	r2, [pc, #348]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 8001642:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001646:	6613      	str	r3, [r2, #96]	; 0x60
 8001648:	4b55      	ldr	r3, [pc, #340]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 800164a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001650:	623b      	str	r3, [r7, #32]
 8001652:	6a3b      	ldr	r3, [r7, #32]

    AUDIO_SAIx_MCLK_ENABLE();
 8001654:	4b52      	ldr	r3, [pc, #328]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001658:	4a51      	ldr	r2, [pc, #324]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 800165a:	f043 0310 	orr.w	r3, r3, #16
 800165e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001660:	4b4f      	ldr	r3, [pc, #316]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	69fb      	ldr	r3, [r7, #28]
    AUDIO_SAIx_SCK_ENABLE();
 800166c:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001670:	4a4b      	ldr	r2, [pc, #300]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001678:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	69bb      	ldr	r3, [r7, #24]
    AUDIO_SAIx_FS_ENABLE();
 8001684:	4b46      	ldr	r3, [pc, #280]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	4a45      	ldr	r2, [pc, #276]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001690:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	697b      	ldr	r3, [r7, #20]
    AUDIO_SAIx_SD_ENABLE();
 800169c:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a0:	4a3f      	ldr	r2, [pc, #252]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a8:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE7     ------> SAI1_SD_B
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin
 80016b4:	23f4      	movs	r3, #244	; 0xf4
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
                          |AUDIO_DIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80016c4:	230d      	movs	r3, #13
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	4835      	ldr	r0, [pc, #212]	; (80017a4 <HAL_SAI_MspInit+0x170>)
 80016d0:	f001 f85a 	bl	8002788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 80016d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80016e6:	230d      	movs	r3, #13
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	482c      	ldr	r0, [pc, #176]	; (80017a4 <HAL_SAI_MspInit+0x170>)
 80016f2:	f001 f849 	bl	8002788 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    __HAL_RCC_DMA2_CLK_ENABLE();
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 80016f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fa:	4a29      	ldr	r2, [pc, #164]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6493      	str	r3, [r2, #72]	; 0x48
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_SAI_MspInit+0x16c>)
 8001704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    hdma_sai1_a.Instance = DMA2_Channel1;
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 8001710:	4a26      	ldr	r2, [pc, #152]	; (80017ac <HAL_SAI_MspInit+0x178>)
 8001712:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 8001716:	2201      	movs	r2, #1
 8001718:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 800171c:	2210      	movs	r2, #16
 800171e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 800172e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001732:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 8001736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800173a:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 800173e:	2220      	movs	r2, #32
 8001740:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 8001744:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001748:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800174a:	4817      	ldr	r0, [pc, #92]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 800174c:	f000 fd54 	bl	80021f8 <HAL_DMA_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_SAI_MspInit+0x126>
    {
      Error_Handler();
 8001756:	f7ff fb93 	bl	8000e80 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 800175e:	671a      	str	r2, [r3, #112]	; 0x70
 8001760:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 800176a:	66da      	str	r2, [r3, #108]	; 0x6c
 800176c:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6293      	str	r3, [r2, #40]	; 0x28
    /* Deinitialize the Stream for new transfer */
        HAL_DMA_DeInit(&hdma_sai1_a);
 8001772:	480d      	ldr	r0, [pc, #52]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 8001774:	f000 fdf8 	bl	8002368 <HAL_DMA_DeInit>

        /* Configure the DMA channel */
        if (HAL_OK != HAL_DMA_Init(&hdma_sai1_a))
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <HAL_SAI_MspInit+0x174>)
 800177a:	f000 fd3d 	bl	80021f8 <HAL_DMA_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_SAI_MspInit+0x154>
        {
          Error_Handler();
 8001784:	f7ff fb7c 	bl	8000e80 <Error_Handler>
        }

      HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0x01, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2101      	movs	r1, #1
 800178c:	2038      	movs	r0, #56	; 0x38
 800178e:	f000 fcee 	bl	800216e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001792:	2038      	movs	r0, #56	; 0x38
 8001794:	f000 fd07 	bl	80021a6 <HAL_NVIC_EnableIRQ>
}
 8001798:	bf00      	nop
 800179a:	3738      	adds	r7, #56	; 0x38
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000
 80017a4:	48001000 	.word	0x48001000
 80017a8:	2000228c 	.word	0x2000228c
 80017ac:	40020408 	.word	0x40020408

080017b0 <BSP_LED_Init>:
  *     @arg LED4
  * @retval None
  */
#endif
void BSP_LED_Init(Led_TypeDef Led)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10c      	bne.n	80017da <BSP_LED_Init+0x2a>
 80017c0:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <BSP_LED_Init+0x90>)
 80017c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c4:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <BSP_LED_Init+0x90>)
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017cc:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <BSP_LED_Init+0x90>)
 80017ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	e00e      	b.n	80017f8 <BSP_LED_Init+0x48>
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d10b      	bne.n	80017f8 <BSP_LED_Init+0x48>
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <BSP_LED_Init+0x90>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	4a16      	ldr	r2, [pc, #88]	; (8001840 <BSP_LED_Init+0x90>)
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <BSP_LED_Init+0x90>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.Pin = LED_PIN[Led];
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <BSP_LED_Init+0x94>)
 80017fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <BSP_LED_Init+0x98>)
 8001812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001816:	f107 0214 	add.w	r2, r7, #20
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f000 ffb3 	bl	8002788 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], GPIO_InitStructure.Pin, GPIO_PIN_RESET);
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	4a08      	ldr	r2, [pc, #32]	; (8001848 <BSP_LED_Init+0x98>)
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	b291      	uxth	r1, r2
 800182e:	2200      	movs	r2, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f001 fa47 	bl	8002cc4 <HAL_GPIO_WritePin>
}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	0800d03c 	.word	0x0800d03c
 8001848:	20000034 	.word	0x20000034

0800184c <BSP_LED_On>:
  *     @arg LED4
  * @retval None
  */
#endif
void BSP_LED_On(Led_TypeDef Led)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <BSP_LED_On+0x2c>)
 800185a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4a06      	ldr	r2, [pc, #24]	; (800187c <BSP_LED_On+0x30>)
 8001862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001866:	2201      	movs	r2, #1
 8001868:	4619      	mov	r1, r3
 800186a:	f001 fa2b 	bl	8002cc4 <HAL_GPIO_WritePin>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000034 	.word	0x20000034
 800187c:	0800d03c 	.word	0x0800d03c

08001880 <BSP_LED_Toggle>:
  *     @arg LED4
  * @retval None
  */
#endif
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <BSP_LED_Toggle+0x2c>)
 800188e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	4906      	ldr	r1, [pc, #24]	; (80018b0 <BSP_LED_Toggle+0x30>)
 8001896:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800189a:	4619      	mov	r1, r3
 800189c:	4610      	mov	r0, r2
 800189e:	f001 fa29 	bl	8002cf4 <HAL_GPIO_TogglePin>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000034 	.word	0x20000034
 80018b0:	0800d03c 	.word	0x0800d03c

080018b4 <I2C1_Init>:
/**
  * @brief Discovery I2C1 Bus initialization
  * @retval None
  */
static void I2C1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c1Handle) == HAL_I2C_STATE_RESET)
 80018b8:	4812      	ldr	r0, [pc, #72]	; (8001904 <I2C1_Init+0x50>)
 80018ba:	f001 fd35 	bl	8003328 <HAL_I2C_GetState>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d11d      	bne.n	8001900 <I2C1_Init+0x4c>
  {
    I2c1Handle.Instance              = DISCOVERY_I2C1;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <I2C1_Init+0x50>)
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <I2C1_Init+0x54>)
 80018c8:	601a      	str	r2, [r3, #0]
    I2c1Handle.Init.Timing           = DISCOVERY_I2C1_TIMING;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <I2C1_Init+0x50>)
 80018cc:	4a0f      	ldr	r2, [pc, #60]	; (800190c <I2C1_Init+0x58>)
 80018ce:	605a      	str	r2, [r3, #4]
    I2c1Handle.Init.OwnAddress1      = 0;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <I2C1_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
    I2c1Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <I2C1_Init+0x50>)
 80018d8:	2201      	movs	r2, #1
 80018da:	60da      	str	r2, [r3, #12]
    I2c1Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <I2C1_Init+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
    I2c1Handle.Init.OwnAddress2      = 0;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <I2C1_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	615a      	str	r2, [r3, #20]
    I2c1Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <I2C1_Init+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
    I2c1Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80018ee:	4b05      	ldr	r3, [pc, #20]	; (8001904 <I2C1_Init+0x50>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit(&I2c1Handle);
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <I2C1_Init+0x50>)
 80018f6:	f000 f80b 	bl	8001910 <I2C1_MspInit>
    HAL_I2C_Init(&I2c1Handle);
 80018fa:	4802      	ldr	r0, [pc, #8]	; (8001904 <I2C1_Init+0x50>)
 80018fc:	f001 fa14 	bl	8002d28 <HAL_I2C_Init>
  }
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200022d8 	.word	0x200022d8
 8001908:	40005400 	.word	0x40005400
 800190c:	90112626 	.word	0x90112626

08001910 <I2C1_MspInit>:
  * @brief Discovery I2C1 MSP Initialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b0ae      	sub	sp, #184	; 0xb8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  /* IOSV bit MUST be set to access GPIO port G[2:15] */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <I2C1_MspInit+0xf4>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	4a39      	ldr	r2, [pc, #228]	; (8001a04 <I2C1_MspInit+0xf4>)
 800191e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001922:	6593      	str	r3, [r2, #88]	; 0x58
 8001924:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <I2C1_MspInit+0xf4>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8001930:	f003 f900 	bl	8004b34 <HAL_PWREx_EnableVddIO2>

  if (hi2c->Instance == DISCOVERY_I2C1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a33      	ldr	r2, [pc, #204]	; (8001a08 <I2C1_MspInit+0xf8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d15e      	bne.n	80019fc <I2C1_MspInit+0xec>
  {
    /*##-1- Configure the Discovery I2C clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800193e:	2340      	movs	r3, #64	; 0x40
 8001940:	61fb      	str	r3, [r7, #28]
    RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001946:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4618      	mov	r0, r3
 800194e:	f004 fbbb 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001952:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <I2C1_MspInit+0xf4>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a2b      	ldr	r2, [pc, #172]	; (8001a04 <I2C1_MspInit+0xf4>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195e:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <I2C1_MspInit+0xf4>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <I2C1_MspInit+0xf4>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a25      	ldr	r2, [pc, #148]	; (8001a04 <I2C1_MspInit+0xf4>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <I2C1_MspInit+0xf4>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN;
 8001982:	23c0      	movs	r3, #192	; 0xc0
 8001984:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001988:	2312      	movs	r3, #18
 800198a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = GPIO_PULLUP;
 800198e:	2301      	movs	r3, #1
 8001990:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C1_SCL_SDA_AF;
 800199a:	2304      	movs	r3, #4
 800199c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C1_SCL_GPIO_PORT, &GPIO_InitStructure);
 80019a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019a4:	4619      	mov	r1, r3
 80019a6:	4819      	ldr	r0, [pc, #100]	; (8001a0c <I2C1_MspInit+0xfc>)
 80019a8:	f000 feee 	bl	8002788 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C1 peripheral #######################################*/
    /* Enable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_ENABLE();
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <I2C1_MspInit+0xf4>)
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <I2C1_MspInit+0xf4>)
 80019b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019b6:	6593      	str	r3, [r2, #88]	; 0x58
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <I2C1_MspInit+0xf4>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <I2C1_MspInit+0xf4>)
 80019c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <I2C1_MspInit+0xf4>)
 80019ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ce:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <I2C1_MspInit+0xf4>)
 80019d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d4:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <I2C1_MspInit+0xf4>)
 80019d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019da:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_EV_IRQn, 0x00, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	201f      	movs	r0, #31
 80019e2:	f000 fbc4 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_EV_IRQn);
 80019e6:	201f      	movs	r0, #31
 80019e8:	f000 fbdd 	bl	80021a6 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_ER_IRQn, 0x00, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2020      	movs	r0, #32
 80019f2:	f000 fbbc 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_ER_IRQn);
 80019f6:	2020      	movs	r0, #32
 80019f8:	f000 fbd5 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  }
}
 80019fc:	bf00      	nop
 80019fe:	37b8      	adds	r7, #184	; 0xb8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40005400 	.word	0x40005400
 8001a0c:	48000400 	.word	0x48000400

08001a10 <I2C1_DeInit>:
/**
  * @brief Discovery I2C1 Bus Deitialization
  * @retval None
  */
static void I2C1_DeInit(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c1Handle) != HAL_I2C_STATE_RESET)
 8001a14:	4806      	ldr	r0, [pc, #24]	; (8001a30 <I2C1_DeInit+0x20>)
 8001a16:	f001 fc87 	bl	8003328 <HAL_I2C_GetState>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <I2C1_DeInit+0x1c>
  {
    /* Deinit the I2C */
    HAL_I2C_DeInit(&I2c1Handle);
 8001a20:	4803      	ldr	r0, [pc, #12]	; (8001a30 <I2C1_DeInit+0x20>)
 8001a22:	f001 fa10 	bl	8002e46 <HAL_I2C_DeInit>
    I2C1_MspDeInit(&I2c1Handle);
 8001a26:	4802      	ldr	r0, [pc, #8]	; (8001a30 <I2C1_DeInit+0x20>)
 8001a28:	f000 f804 	bl	8001a34 <I2C1_MspDeInit>
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200022d8 	.word	0x200022d8

08001a34 <I2C1_MspDeInit>:
  * @brief Discovery I2C1 MSP Deinitialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a24      	ldr	r2, [pc, #144]	; (8001ad4 <I2C1_MspDeInit+0xa0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d141      	bne.n	8001aca <I2C1_MspDeInit+0x96>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]

    /* Deinit Rx/Tx pins */
    HAL_GPIO_DeInit(DISCOVERY_I2C1_SCL_GPIO_PORT, (DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN));
 8001a76:	21c0      	movs	r1, #192	; 0xc0
 8001a78:	4818      	ldr	r0, [pc, #96]	; (8001adc <I2C1_MspDeInit+0xa8>)
 8001a7a:	f001 f82f 	bl	8002adc <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C1 peripheral ############################*/
    /* Force & Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a82:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a88:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001a90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a94:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_DISABLE();
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001a9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001aa0:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C1 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001aa2:	201f      	movs	r0, #31
 8001aa4:	f000 fb8d 	bl	80021c2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001aa8:	2020      	movs	r0, #32
 8001aaa:	f000 fb8a 	bl	80021c2 <HAL_NVIC_DisableIRQ>

    __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <I2C1_MspDeInit+0xa4>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_DisableVddIO2();
 8001ac6:	f003 f845 	bl	8004b54 <HAL_PWREx_DisableVddIO2>
  }
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40005400 	.word	0x40005400
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48000400 	.word	0x48000400

08001ae0 <I2C1_WriteBuffer>:
  * @param  pBuffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval None
  */
static HAL_StatusTypeDef I2C1_WriteBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af04      	add	r7, sp, #16
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	4603      	mov	r3, r0
 8001aea:	81fb      	strh	r3, [r7, #14]
 8001aec:	460b      	mov	r3, r1
 8001aee:	81bb      	strh	r3, [r7, #12]
 8001af0:	4613      	mov	r3, r2
 8001af2:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <I2C1_WriteBuffer+0x4c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	8978      	ldrh	r0, [r7, #10]
 8001afe:	89ba      	ldrh	r2, [r7, #12]
 8001b00:	89f9      	ldrh	r1, [r7, #14]
 8001b02:	9302      	str	r3, [sp, #8]
 8001b04:	8c3b      	ldrh	r3, [r7, #32]
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4808      	ldr	r0, [pc, #32]	; (8001b30 <I2C1_WriteBuffer+0x50>)
 8001b10:	f001 f9dc 	bl	8002ecc <HAL_I2C_Mem_Write>
 8001b14:	4603      	mov	r3, r0
 8001b16:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <I2C1_WriteBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001b1e:	f000 f833 	bl	8001b88 <I2C1_Error>
  }
  return status;
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2000003c 	.word	0x2000003c
 8001b30:	200022d8 	.word	0x200022d8

08001b34 <I2C1_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C1_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af04      	add	r7, sp, #16
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	81fb      	strh	r3, [r7, #14]
 8001b40:	460b      	mov	r3, r1
 8001b42:	81bb      	strh	r3, [r7, #12]
 8001b44:	4613      	mov	r3, r2
 8001b46:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <I2C1_ReadBuffer+0x4c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	8978      	ldrh	r0, [r7, #10]
 8001b52:	89ba      	ldrh	r2, [r7, #12]
 8001b54:	89f9      	ldrh	r1, [r7, #14]
 8001b56:	9302      	str	r3, [sp, #8]
 8001b58:	8c3b      	ldrh	r3, [r7, #32]
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	4603      	mov	r3, r0
 8001b62:	4808      	ldr	r0, [pc, #32]	; (8001b84 <I2C1_ReadBuffer+0x50>)
 8001b64:	f001 fac6 	bl	80030f4 <HAL_I2C_Mem_Read>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <I2C1_ReadBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001b72:	f000 f809 	bl	8001b88 <I2C1_Error>
  }
  return status;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000003c 	.word	0x2000003c
 8001b84:	200022d8 	.word	0x200022d8

08001b88 <I2C1_Error>:
/**
  * @brief Discovery I2C1 error treatment function
  * @retval None
  */
static void I2C1_Error(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c1Handle);
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <I2C1_Error+0x14>)
 8001b8e:	f001 f95a 	bl	8002e46 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C1_Init();
 8001b92:	f7ff fe8f 	bl	80018b4 <I2C1_Init>
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200022d8 	.word	0x200022d8

08001ba0 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <AUDIO_IO_Init+0x64>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	4a16      	ldr	r2, [pc, #88]	; (8001c04 <AUDIO_IO_Init+0x64>)
 8001bac:	f043 0310 	orr.w	r3, r3, #16
 8001bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <AUDIO_IO_Init+0x64>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]

  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480d      	ldr	r0, [pc, #52]	; (8001c08 <AUDIO_IO_Init+0x68>)
 8001bd4:	f000 fdd8 	bl	8002788 <HAL_GPIO_Init>

  /* I2C bus init */
  I2C1_Init();
 8001bd8:	f7ff fe6c 	bl	80018b4 <I2C1_Init>

  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2108      	movs	r1, #8
 8001be0:	4809      	ldr	r0, [pc, #36]	; (8001c08 <AUDIO_IO_Init+0x68>)
 8001be2:	f001 f86f 	bl	8002cc4 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8001be6:	2005      	movs	r0, #5
 8001be8:	f000 f99e 	bl	8001f28 <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8001bec:	2201      	movs	r2, #1
 8001bee:	2108      	movs	r1, #8
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <AUDIO_IO_Init+0x68>)
 8001bf2:	f001 f867 	bl	8002cc4 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8001bf6:	2005      	movs	r0, #5
 8001bf8:	f000 f996 	bl	8001f28 <HAL_Delay>
}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	48001000 	.word	0x48001000

08001c0c <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)                       /* TO DO */
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0

  /***********************************************************************/
  /* In case of battery-supplied powered, there is no audio codec-based
     features available. Set audio codec I/O default setting */
  /***********************************************************************/
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <AUDIO_IO_DeInit+0x78>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	4a1b      	ldr	r2, [pc, #108]	; (8001c84 <AUDIO_IO_DeInit+0x78>)
 8001c18:	f043 0310 	orr.w	r3, r3, #16
 8001c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1e:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <AUDIO_IO_DeInit+0x78>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP  ;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pin       = (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 8001c2e:	237c      	movs	r3, #124	; 0x7c
 8001c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8001c32:	2302      	movs	r3, #2
 8001c34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4812      	ldr	r0, [pc, #72]	; (8001c88 <AUDIO_IO_DeInit+0x7c>)
 8001c40:	f000 fda2 	bl	8002788 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2104      	movs	r1, #4
 8001c48:	480f      	ldr	r0, [pc, #60]	; (8001c88 <AUDIO_IO_DeInit+0x7c>)
 8001c4a:	f001 f83b 	bl	8002cc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2108      	movs	r1, #8
 8001c52:	480d      	ldr	r0, [pc, #52]	; (8001c88 <AUDIO_IO_DeInit+0x7c>)
 8001c54:	f001 f836 	bl	8002cc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	480a      	ldr	r0, [pc, #40]	; (8001c88 <AUDIO_IO_DeInit+0x7c>)
 8001c5e:	f001 f831 	bl	8002cc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2120      	movs	r1, #32
 8001c66:	4808      	ldr	r0, [pc, #32]	; (8001c88 <AUDIO_IO_DeInit+0x7c>)
 8001c68:	f001 f82c 	bl	8002cc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2140      	movs	r1, #64	; 0x40
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <AUDIO_IO_DeInit+0x7c>)
 8001c72:	f001 f827 	bl	8002cc4 <HAL_GPIO_WritePin>

  /* I2C bus Deinit */
  I2C1_DeInit();
 8001c76:	f7ff fecb 	bl	8001a10 <I2C1_DeInit>
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	48001000 	.word	0x48001000

08001c8c <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
 8001c96:	460b      	mov	r3, r1
 8001c98:	71bb      	strb	r3, [r7, #6]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	717b      	strb	r3, [r7, #5]
  I2C1_WriteBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	b298      	uxth	r0, r3
 8001ca2:	79bb      	ldrb	r3, [r7, #6]
 8001ca4:	b299      	uxth	r1, r3
 8001ca6:	1d7b      	adds	r3, r7, #5
 8001ca8:	2201      	movs	r2, #1
 8001caa:	9200      	str	r2, [sp, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f7ff ff17 	bl	8001ae0 <I2C1_WriteBuffer>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af02      	add	r7, sp, #8
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	460a      	mov	r2, r1
 8001cc4:	71fb      	strb	r3, [r7, #7]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	71bb      	strb	r3, [r7, #6]
  uint8_t Read_Value = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]

  I2C1_ReadBuffer((uint16_t) Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Read_Value, 1);
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	b298      	uxth	r0, r3
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
 8001cd4:	b299      	uxth	r1, r3
 8001cd6:	f107 030f 	add.w	r3, r7, #15
 8001cda:	2201      	movs	r2, #1
 8001cdc:	9200      	str	r2, [sp, #0]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f7ff ff28 	bl	8001b34 <I2C1_ReadBuffer>

  return Read_Value;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_MspInit+0x44>)
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfa:	4a0e      	ldr	r2, [pc, #56]	; (8001d34 <HAL_MspInit+0x44>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6613      	str	r3, [r2, #96]	; 0x60
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <HAL_MspInit+0x44>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_MspInit+0x44>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_MspInit+0x44>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_MspInit+0x44>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <NMI_Handler+0x4>

08001d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <HardFault_Handler+0x4>

08001d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <MemManage_Handler+0x4>

08001d4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <BusFault_Handler+0x4>

08001d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <UsageFault_Handler+0x4>

08001d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d84:	f000 f8b0 	bl	8001ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hsai_BlockA1.hdmatx);
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <DMA2_Channel1_IRQHandler+0x14>)
 8001d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fc17 	bl	80025c8 <HAL_DMA_IRQHandler>
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20002208 	.word	0x20002208

08001da4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <OTG_FS_IRQHandler+0x10>)
 8001daa:	f001 fec4 	bl	8003b36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200037fc 	.word	0x200037fc

08001db8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <SystemInit+0x20>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <SystemInit+0x20>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001de0:	f7ff ffea 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de4:	480c      	ldr	r0, [pc, #48]	; (8001e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001de6:	490d      	ldr	r1, [pc, #52]	; (8001e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <LoopForever+0xe>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	; (8001e28 <LoopForever+0x16>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f00b f8bd 	bl	800cf88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e0e:	f7fe feeb 	bl	8000be8 <main>

08001e12 <LoopForever>:

LoopForever:
    b LoopForever
 8001e12:	e7fe      	b.n	8001e12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e1c:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8001e20:	0800d0b4 	.word	0x0800d0b4
  ldr r2, =_sbss
 8001e24:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8001e28:	20004c7c 	.word	0x20004c7c

08001e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <ADC1_2_IRQHandler>
	...

08001e30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_Init+0x3c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <HAL_Init+0x3c>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e46:	2003      	movs	r0, #3
 8001e48:	f000 f986 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f000 f80f 	bl	8001e70 <HAL_InitTick>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	e001      	b.n	8001e62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e5e:	f7ff ff47 	bl	8001cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e62:	79fb      	ldrb	r3, [r7, #7]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40022000 	.word	0x40022000

08001e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e7c:	4b17      	ldr	r3, [pc, #92]	; (8001edc <HAL_InitTick+0x6c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d023      	beq.n	8001ecc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e84:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <HAL_InitTick+0x70>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_InitTick+0x6c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f99f 	bl	80021de <HAL_SYSTICK_Config>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10f      	bne.n	8001ec6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b0f      	cmp	r3, #15
 8001eaa:	d809      	bhi.n	8001ec0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eac:	2200      	movs	r2, #0
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	f000 f95b 	bl	800216e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <HAL_InitTick+0x74>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e007      	b.n	8001ed0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	e004      	b.n	8001ed0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	e001      	b.n	8001ed0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000048 	.word	0x20000048
 8001ee0:	20000040 	.word	0x20000040
 8001ee4:	20000044 	.word	0x20000044

08001ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x20>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_IncTick+0x24>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_IncTick+0x24>)
 8001efa:	6013      	str	r3, [r2, #0]
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000048 	.word	0x20000048
 8001f0c:	20002324 	.word	0x20002324

08001f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return uwTick;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <HAL_GetTick+0x14>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20002324 	.word	0x20002324

08001f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff ffee 	bl	8001f10 <HAL_GetTick>
 8001f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f40:	d005      	beq.n	8001f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_Delay+0x44>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f4e:	bf00      	nop
 8001f50:	f7ff ffde 	bl	8001f10 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d8f7      	bhi.n	8001f50 <HAL_Delay+0x28>
  {
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000048 	.word	0x20000048

08001f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa2:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	60d3      	str	r3, [r2, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db0b      	blt.n	8001ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	4907      	ldr	r1, [pc, #28]	; (800200c <__NVIC_EnableIRQ+0x38>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e100 	.word	0xe000e100

08002010 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	2b00      	cmp	r3, #0
 8002020:	db12      	blt.n	8002048 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	f003 021f 	and.w	r2, r3, #31
 8002028:	490a      	ldr	r1, [pc, #40]	; (8002054 <__NVIC_DisableIRQ+0x44>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	2001      	movs	r0, #1
 8002032:	fa00 f202 	lsl.w	r2, r0, r2
 8002036:	3320      	adds	r3, #32
 8002038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800203c:	f3bf 8f4f 	dsb	sy
}
 8002040:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002042:	f3bf 8f6f 	isb	sy
}
 8002046:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000e100 	.word	0xe000e100

08002058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db0a      	blt.n	8002082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	490c      	ldr	r1, [pc, #48]	; (80020a4 <__NVIC_SetPriority+0x4c>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	440b      	add	r3, r1
 800207c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002080:	e00a      	b.n	8002098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4908      	ldr	r1, [pc, #32]	; (80020a8 <__NVIC_SetPriority+0x50>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3b04      	subs	r3, #4
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	440b      	add	r3, r1
 8002096:	761a      	strb	r2, [r3, #24]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f1c3 0307 	rsb	r3, r3, #7
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf28      	it	cs
 80020ca:	2304      	movcs	r3, #4
 80020cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d902      	bls.n	80020dc <NVIC_EncodePriority+0x30>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3b03      	subs	r3, #3
 80020da:	e000      	b.n	80020de <NVIC_EncodePriority+0x32>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43d9      	mvns	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	4313      	orrs	r3, r2
         );
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	; 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002124:	d301      	bcc.n	800212a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <SysTick_Config+0x40>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f7ff ff8e 	bl	8002058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <SysTick_Config+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <SysTick_Config+0x40>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff05 	bl	8001f70 <__NVIC_SetPriorityGrouping>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002180:	f7ff ff1a 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff8e 	bl	80020ac <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5d 	bl	8002058 <__NVIC_SetPriority>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff0d 	bl	8001fd4 <__NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff1d 	bl	8002010 <__NVIC_DisableIRQ>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ff94 	bl	8002114 <SysTick_Config>
 80021ec:	4603      	mov	r3, r0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e098      	b.n	800233c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <HAL_DMA_Init+0x150>)
 8002212:	429a      	cmp	r2, r3
 8002214:	d80f      	bhi.n	8002236 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	4b4b      	ldr	r3, [pc, #300]	; (800234c <HAL_DMA_Init+0x154>)
 800221e:	4413      	add	r3, r2
 8002220:	4a4b      	ldr	r2, [pc, #300]	; (8002350 <HAL_DMA_Init+0x158>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	009a      	lsls	r2, r3, #2
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a48      	ldr	r2, [pc, #288]	; (8002354 <HAL_DMA_Init+0x15c>)
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
 8002234:	e00e      	b.n	8002254 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_DMA_Init+0x160>)
 800223e:	4413      	add	r3, r2
 8002240:	4a43      	ldr	r2, [pc, #268]	; (8002350 <HAL_DMA_Init+0x158>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	009a      	lsls	r2, r3, #2
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a42      	ldr	r2, [pc, #264]	; (800235c <HAL_DMA_Init+0x164>)
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800226a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ae:	d039      	beq.n	8002324 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	4a27      	ldr	r2, [pc, #156]	; (8002354 <HAL_DMA_Init+0x15c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d11a      	bne.n	80022f0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_DMA_Init+0x168>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f003 031c 	and.w	r3, r3, #28
 80022c6:	210f      	movs	r1, #15
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	4924      	ldr	r1, [pc, #144]	; (8002360 <HAL_DMA_Init+0x168>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022d4:	4b22      	ldr	r3, [pc, #136]	; (8002360 <HAL_DMA_Init+0x168>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	f003 031c 	and.w	r3, r3, #28
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	491d      	ldr	r1, [pc, #116]	; (8002360 <HAL_DMA_Init+0x168>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]
 80022ee:	e019      	b.n	8002324 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022f0:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <HAL_DMA_Init+0x16c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f8:	f003 031c 	and.w	r3, r3, #28
 80022fc:	210f      	movs	r1, #15
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	4917      	ldr	r1, [pc, #92]	; (8002364 <HAL_DMA_Init+0x16c>)
 8002306:	4013      	ands	r3, r2
 8002308:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_DMA_Init+0x16c>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f003 031c 	and.w	r3, r3, #28
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	4911      	ldr	r1, [pc, #68]	; (8002364 <HAL_DMA_Init+0x16c>)
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40020407 	.word	0x40020407
 800234c:	bffdfff8 	.word	0xbffdfff8
 8002350:	cccccccd 	.word	0xcccccccd
 8002354:	40020000 	.word	0x40020000
 8002358:	bffdfbf8 	.word	0xbffdfbf8
 800235c:	40020400 	.word	0x40020400
 8002360:	400200a8 	.word	0x400200a8
 8002364:	400204a8 	.word	0x400204a8

08002368 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e072      	b.n	8002460 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0201 	bic.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	4b36      	ldr	r3, [pc, #216]	; (800246c <HAL_DMA_DeInit+0x104>)
 8002392:	429a      	cmp	r2, r3
 8002394:	d80f      	bhi.n	80023b6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	4b34      	ldr	r3, [pc, #208]	; (8002470 <HAL_DMA_DeInit+0x108>)
 800239e:	4413      	add	r3, r2
 80023a0:	4a34      	ldr	r2, [pc, #208]	; (8002474 <HAL_DMA_DeInit+0x10c>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	009a      	lsls	r2, r3, #2
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a31      	ldr	r2, [pc, #196]	; (8002478 <HAL_DMA_DeInit+0x110>)
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
 80023b4:	e00e      	b.n	80023d4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b2f      	ldr	r3, [pc, #188]	; (800247c <HAL_DMA_DeInit+0x114>)
 80023be:	4413      	add	r3, r2
 80023c0:	4a2c      	ldr	r2, [pc, #176]	; (8002474 <HAL_DMA_DeInit+0x10c>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	009a      	lsls	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a2b      	ldr	r2, [pc, #172]	; (8002480 <HAL_DMA_DeInit+0x118>)
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	f003 021c 	and.w	r2, r3, #28
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	2101      	movs	r1, #1
 80023ea:	fa01 f202 	lsl.w	r2, r1, r2
 80023ee:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	4a20      	ldr	r2, [pc, #128]	; (8002478 <HAL_DMA_DeInit+0x110>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d10d      	bne.n	8002416 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023fa:	4b22      	ldr	r3, [pc, #136]	; (8002484 <HAL_DMA_DeInit+0x11c>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f003 031c 	and.w	r3, r3, #28
 8002406:	210f      	movs	r1, #15
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	491d      	ldr	r1, [pc, #116]	; (8002484 <HAL_DMA_DeInit+0x11c>)
 8002410:	4013      	ands	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
 8002414:	e00c      	b.n	8002430 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002416:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <HAL_DMA_DeInit+0x120>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	f003 031c 	and.w	r3, r3, #28
 8002422:	210f      	movs	r1, #15
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	4917      	ldr	r1, [pc, #92]	; (8002488 <HAL_DMA_DeInit+0x120>)
 800242c:	4013      	ands	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40020407 	.word	0x40020407
 8002470:	bffdfff8 	.word	0xbffdfff8
 8002474:	cccccccd 	.word	0xcccccccd
 8002478:	40020000 	.word	0x40020000
 800247c:	bffdfbf8 	.word	0xbffdfbf8
 8002480:	40020400 	.word	0x40020400
 8002484:	400200a8 	.word	0x400200a8
 8002488:	400204a8 	.word	0x400204a8

0800248c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_DMA_Start_IT+0x20>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e04b      	b.n	8002544 <HAL_DMA_Start_IT+0xb8>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d13a      	bne.n	8002536 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0201 	bic.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f91e 	bl	8002726 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 020e 	orr.w	r2, r2, #14
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e00f      	b.n	8002524 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0204 	bic.w	r2, r2, #4
 8002512:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 020a 	orr.w	r2, r2, #10
 8002522:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e005      	b.n	8002542 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800253e:	2302      	movs	r3, #2
 8002540:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002542:	7dfb      	ldrb	r3, [r7, #23]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d008      	beq.n	8002576 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2204      	movs	r2, #4
 8002568:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e022      	b.n	80025bc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 020e 	bic.w	r2, r2, #14
 8002584:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	f003 021c 	and.w	r2, r3, #28
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	2101      	movs	r1, #1
 80025a4:	fa01 f202 	lsl.w	r2, r1, r2
 80025a8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f003 031c 	and.w	r3, r3, #28
 80025e8:	2204      	movs	r2, #4
 80025ea:	409a      	lsls	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d026      	beq.n	8002642 <HAL_DMA_IRQHandler+0x7a>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d021      	beq.n	8002642 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d107      	bne.n	800261c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0204 	bic.w	r2, r2, #4
 800261a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	f003 021c 	and.w	r2, r3, #28
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	2104      	movs	r1, #4
 800262a:	fa01 f202 	lsl.w	r2, r1, r2
 800262e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	2b00      	cmp	r3, #0
 8002636:	d071      	beq.n	800271c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002640:	e06c      	b.n	800271c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f003 031c 	and.w	r3, r3, #28
 800264a:	2202      	movs	r2, #2
 800264c:	409a      	lsls	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02e      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xec>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d029      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10b      	bne.n	8002686 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 020a 	bic.w	r2, r2, #10
 800267c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f003 021c 	and.w	r2, r3, #28
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2102      	movs	r1, #2
 8002694:	fa01 f202 	lsl.w	r2, r1, r2
 8002698:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d038      	beq.n	800271c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026b2:	e033      	b.n	800271c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	f003 031c 	and.w	r3, r3, #28
 80026bc:	2208      	movs	r2, #8
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d02a      	beq.n	800271e <HAL_DMA_IRQHandler+0x156>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d025      	beq.n	800271e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 020e 	bic.w	r2, r2, #14
 80026e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f003 021c 	and.w	r2, r3, #28
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	2101      	movs	r1, #1
 80026f0:	fa01 f202 	lsl.w	r2, r1, r2
 80026f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800271c:	bf00      	nop
 800271e:	bf00      	nop
}
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	f003 021c 	and.w	r2, r3, #28
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2101      	movs	r1, #1
 8002742:	fa01 f202 	lsl.w	r2, r1, r2
 8002746:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b10      	cmp	r3, #16
 8002756:	d108      	bne.n	800276a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002768:	e007      	b.n	800277a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	60da      	str	r2, [r3, #12]
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002796:	e17f      	b.n	8002a98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2101      	movs	r1, #1
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	4013      	ands	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8171 	beq.w	8002a92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d005      	beq.n	80027c8 <HAL_GPIO_Init+0x40>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d130      	bne.n	800282a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027fe:	2201      	movs	r2, #1
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	f003 0201 	and.w	r2, r3, #1
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b03      	cmp	r3, #3
 8002834:	d118      	bne.n	8002868 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800283c:	2201      	movs	r2, #1
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	08db      	lsrs	r3, r3, #3
 8002852:	f003 0201 	and.w	r2, r3, #1
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b03      	cmp	r3, #3
 8002872:	d017      	beq.n	80028a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d123      	bne.n	80028f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	08da      	lsrs	r2, r3, #3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3208      	adds	r2, #8
 80028b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	220f      	movs	r2, #15
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	08da      	lsrs	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3208      	adds	r2, #8
 80028f2:	6939      	ldr	r1, [r7, #16]
 80028f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0203 	and.w	r2, r3, #3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80ac 	beq.w	8002a92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	4b5f      	ldr	r3, [pc, #380]	; (8002ab8 <HAL_GPIO_Init+0x330>)
 800293c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293e:	4a5e      	ldr	r2, [pc, #376]	; (8002ab8 <HAL_GPIO_Init+0x330>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6613      	str	r3, [r2, #96]	; 0x60
 8002946:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_GPIO_Init+0x330>)
 8002948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002952:	4a5a      	ldr	r2, [pc, #360]	; (8002abc <HAL_GPIO_Init+0x334>)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3302      	adds	r3, #2
 800295a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	220f      	movs	r2, #15
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800297c:	d025      	beq.n	80029ca <HAL_GPIO_Init+0x242>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4f      	ldr	r2, [pc, #316]	; (8002ac0 <HAL_GPIO_Init+0x338>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d01f      	beq.n	80029c6 <HAL_GPIO_Init+0x23e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4e      	ldr	r2, [pc, #312]	; (8002ac4 <HAL_GPIO_Init+0x33c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d019      	beq.n	80029c2 <HAL_GPIO_Init+0x23a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4d      	ldr	r2, [pc, #308]	; (8002ac8 <HAL_GPIO_Init+0x340>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <HAL_GPIO_Init+0x236>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4c      	ldr	r2, [pc, #304]	; (8002acc <HAL_GPIO_Init+0x344>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00d      	beq.n	80029ba <HAL_GPIO_Init+0x232>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4b      	ldr	r2, [pc, #300]	; (8002ad0 <HAL_GPIO_Init+0x348>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <HAL_GPIO_Init+0x22e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4a      	ldr	r2, [pc, #296]	; (8002ad4 <HAL_GPIO_Init+0x34c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d101      	bne.n	80029b2 <HAL_GPIO_Init+0x22a>
 80029ae:	2306      	movs	r3, #6
 80029b0:	e00c      	b.n	80029cc <HAL_GPIO_Init+0x244>
 80029b2:	2307      	movs	r3, #7
 80029b4:	e00a      	b.n	80029cc <HAL_GPIO_Init+0x244>
 80029b6:	2305      	movs	r3, #5
 80029b8:	e008      	b.n	80029cc <HAL_GPIO_Init+0x244>
 80029ba:	2304      	movs	r3, #4
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x244>
 80029be:	2303      	movs	r3, #3
 80029c0:	e004      	b.n	80029cc <HAL_GPIO_Init+0x244>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e002      	b.n	80029cc <HAL_GPIO_Init+0x244>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_GPIO_Init+0x244>
 80029ca:	2300      	movs	r3, #0
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	f002 0203 	and.w	r2, r2, #3
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	4093      	lsls	r3, r2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029dc:	4937      	ldr	r1, [pc, #220]	; (8002abc <HAL_GPIO_Init+0x334>)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	3302      	adds	r3, #2
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029ea:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <HAL_GPIO_Init+0x350>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a0e:	4a32      	ldr	r2, [pc, #200]	; (8002ad8 <HAL_GPIO_Init+0x350>)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a14:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_GPIO_Init+0x350>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a38:	4a27      	ldr	r2, [pc, #156]	; (8002ad8 <HAL_GPIO_Init+0x350>)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a3e:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <HAL_GPIO_Init+0x350>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a62:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <HAL_GPIO_Init+0x350>)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <HAL_GPIO_Init+0x350>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a8c:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <HAL_GPIO_Init+0x350>)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	3301      	adds	r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f47f ae78 	bne.w	8002798 <HAL_GPIO_Init+0x10>
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	48000400 	.word	0x48000400
 8002ac4:	48000800 	.word	0x48000800
 8002ac8:	48000c00 	.word	0x48000c00
 8002acc:	48001000 	.word	0x48001000
 8002ad0:	48001400 	.word	0x48001400
 8002ad4:	48001800 	.word	0x48001800
 8002ad8:	40010400 	.word	0x40010400

08002adc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002aea:	e0cd      	b.n	8002c88 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002aec:	2201      	movs	r2, #1
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80c0 	beq.w	8002c82 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002b02:	4a68      	ldr	r2, [pc, #416]	; (8002ca4 <HAL_GPIO_DeInit+0x1c8>)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	089b      	lsrs	r3, r3, #2
 8002b08:	3302      	adds	r3, #2
 8002b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	220f      	movs	r2, #15
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b2a:	d025      	beq.n	8002b78 <HAL_GPIO_DeInit+0x9c>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a5e      	ldr	r2, [pc, #376]	; (8002ca8 <HAL_GPIO_DeInit+0x1cc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d01f      	beq.n	8002b74 <HAL_GPIO_DeInit+0x98>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a5d      	ldr	r2, [pc, #372]	; (8002cac <HAL_GPIO_DeInit+0x1d0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d019      	beq.n	8002b70 <HAL_GPIO_DeInit+0x94>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a5c      	ldr	r2, [pc, #368]	; (8002cb0 <HAL_GPIO_DeInit+0x1d4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d013      	beq.n	8002b6c <HAL_GPIO_DeInit+0x90>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a5b      	ldr	r2, [pc, #364]	; (8002cb4 <HAL_GPIO_DeInit+0x1d8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00d      	beq.n	8002b68 <HAL_GPIO_DeInit+0x8c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a5a      	ldr	r2, [pc, #360]	; (8002cb8 <HAL_GPIO_DeInit+0x1dc>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d007      	beq.n	8002b64 <HAL_GPIO_DeInit+0x88>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a59      	ldr	r2, [pc, #356]	; (8002cbc <HAL_GPIO_DeInit+0x1e0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d101      	bne.n	8002b60 <HAL_GPIO_DeInit+0x84>
 8002b5c:	2306      	movs	r3, #6
 8002b5e:	e00c      	b.n	8002b7a <HAL_GPIO_DeInit+0x9e>
 8002b60:	2307      	movs	r3, #7
 8002b62:	e00a      	b.n	8002b7a <HAL_GPIO_DeInit+0x9e>
 8002b64:	2305      	movs	r3, #5
 8002b66:	e008      	b.n	8002b7a <HAL_GPIO_DeInit+0x9e>
 8002b68:	2304      	movs	r3, #4
 8002b6a:	e006      	b.n	8002b7a <HAL_GPIO_DeInit+0x9e>
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e004      	b.n	8002b7a <HAL_GPIO_DeInit+0x9e>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e002      	b.n	8002b7a <HAL_GPIO_DeInit+0x9e>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_GPIO_DeInit+0x9e>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	f002 0203 	and.w	r2, r2, #3
 8002b80:	0092      	lsls	r2, r2, #2
 8002b82:	4093      	lsls	r3, r2
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d132      	bne.n	8002bf0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002b8a:	4b4d      	ldr	r3, [pc, #308]	; (8002cc0 <HAL_GPIO_DeInit+0x1e4>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	494b      	ldr	r1, [pc, #300]	; (8002cc0 <HAL_GPIO_DeInit+0x1e4>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002b98:	4b49      	ldr	r3, [pc, #292]	; (8002cc0 <HAL_GPIO_DeInit+0x1e4>)
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	4947      	ldr	r1, [pc, #284]	; (8002cc0 <HAL_GPIO_DeInit+0x1e4>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002ba6:	4b46      	ldr	r3, [pc, #280]	; (8002cc0 <HAL_GPIO_DeInit+0x1e4>)
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	4944      	ldr	r1, [pc, #272]	; (8002cc0 <HAL_GPIO_DeInit+0x1e4>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002bb4:	4b42      	ldr	r3, [pc, #264]	; (8002cc0 <HAL_GPIO_DeInit+0x1e4>)
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	4940      	ldr	r1, [pc, #256]	; (8002cc0 <HAL_GPIO_DeInit+0x1e4>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	220f      	movs	r2, #15
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002bd2:	4a34      	ldr	r2, [pc, #208]	; (8002ca4 <HAL_GPIO_DeInit+0x1c8>)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	3302      	adds	r3, #2
 8002bda:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	43da      	mvns	r2, r3
 8002be2:	4830      	ldr	r0, [pc, #192]	; (8002ca4 <HAL_GPIO_DeInit+0x1c8>)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	089b      	lsrs	r3, r3, #2
 8002be8:	400a      	ands	r2, r1
 8002bea:	3302      	adds	r3, #2
 8002bec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2103      	movs	r1, #3
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	220f      	movs	r2, #15
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	08d2      	lsrs	r2, r2, #3
 8002c24:	4019      	ands	r1, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3208      	adds	r2, #8
 8002c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2103      	movs	r1, #3
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	401a      	ands	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2103      	movs	r1, #3
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	401a      	ands	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c72:	2101      	movs	r1, #1
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	401a      	ands	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3301      	adds	r3, #1
 8002c86:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f af2b 	bne.w	8002aec <HAL_GPIO_DeInit+0x10>
  }
}
 8002c96:	bf00      	nop
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	48000400 	.word	0x48000400
 8002cac:	48000800 	.word	0x48000800
 8002cb0:	48000c00 	.word	0x48000c00
 8002cb4:	48001000 	.word	0x48001000
 8002cb8:	48001400 	.word	0x48001400
 8002cbc:	48001800 	.word	0x48001800
 8002cc0:	40010400 	.word	0x40010400

08002cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	807b      	strh	r3, [r7, #2]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd4:	787b      	ldrb	r3, [r7, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cda:	887a      	ldrh	r2, [r7, #2]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d06:	887a      	ldrh	r2, [r7, #2]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	041a      	lsls	r2, r3, #16
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	43d9      	mvns	r1, r3
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	400b      	ands	r3, r1
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e081      	b.n	8002e3e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f8a8 	bl	8002ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2224      	movs	r2, #36	; 0x24
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d107      	bne.n	8002da2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	e006      	b.n	8002db0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002dae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d104      	bne.n	8002dc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002de4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69d9      	ldr	r1, [r3, #28]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e021      	b.n	8002e9c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2224      	movs	r2, #36	; 0x24
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f821 	bl	8002eb8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	817b      	strh	r3, [r7, #10]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	813b      	strh	r3, [r7, #8]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	f040 80f9 	bne.w	80030e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_I2C_Mem_Write+0x34>
 8002efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d105      	bne.n	8002f0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0ed      	b.n	80030e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Mem_Write+0x4e>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e0e6      	b.n	80030e8 <HAL_I2C_Mem_Write+0x21c>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f22:	f7fe fff5 	bl	8001f10 <HAL_GetTick>
 8002f26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2319      	movs	r3, #25
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fad1 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0d1      	b.n	80030e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2221      	movs	r2, #33	; 0x21
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2240      	movs	r2, #64	; 0x40
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a3a      	ldr	r2, [r7, #32]
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f6c:	88f8      	ldrh	r0, [r7, #6]
 8002f6e:	893a      	ldrh	r2, [r7, #8]
 8002f70:	8979      	ldrh	r1, [r7, #10]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f9e1 	bl	8003344 <I2C_RequestMemoryWrite>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0a9      	b.n	80030e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2bff      	cmp	r3, #255	; 0xff
 8002f9c:	d90e      	bls.n	8002fbc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	22ff      	movs	r2, #255	; 0xff
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	8979      	ldrh	r1, [r7, #10]
 8002fac:	2300      	movs	r3, #0
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fc39 	bl	800382c <I2C_TransferConfig>
 8002fba:	e00f      	b.n	8002fdc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	8979      	ldrh	r1, [r7, #10]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fc28 	bl	800382c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fabb 	bl	800355c <I2C_WaitOnTXISFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e07b      	b.n	80030e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	781a      	ldrb	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d034      	beq.n	8003094 <HAL_I2C_Mem_Write+0x1c8>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	2b00      	cmp	r3, #0
 8003030:	d130      	bne.n	8003094 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	2200      	movs	r2, #0
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fa4d 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e04d      	b.n	80030e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	2bff      	cmp	r3, #255	; 0xff
 8003054:	d90e      	bls.n	8003074 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	22ff      	movs	r2, #255	; 0xff
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	b2da      	uxtb	r2, r3
 8003062:	8979      	ldrh	r1, [r7, #10]
 8003064:	2300      	movs	r3, #0
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 fbdd 	bl	800382c <I2C_TransferConfig>
 8003072:	e00f      	b.n	8003094 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003082:	b2da      	uxtb	r2, r3
 8003084:	8979      	ldrh	r1, [r7, #10]
 8003086:	2300      	movs	r3, #0
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fbcc 	bl	800382c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d19e      	bne.n	8002fdc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 fa9a 	bl	80035dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e01a      	b.n	80030e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2220      	movs	r2, #32
 80030b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_I2C_Mem_Write+0x224>)
 80030c6:	400b      	ands	r3, r1
 80030c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e000      	b.n	80030e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80030e6:	2302      	movs	r3, #2
  }
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	fe00e800 	.word	0xfe00e800

080030f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	4608      	mov	r0, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	461a      	mov	r2, r3
 8003102:	4603      	mov	r3, r0
 8003104:	817b      	strh	r3, [r7, #10]
 8003106:	460b      	mov	r3, r1
 8003108:	813b      	strh	r3, [r7, #8]
 800310a:	4613      	mov	r3, r2
 800310c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b20      	cmp	r3, #32
 8003118:	f040 80fd 	bne.w	8003316 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_I2C_Mem_Read+0x34>
 8003122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800312e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0f1      	b.n	8003318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_I2C_Mem_Read+0x4e>
 800313e:	2302      	movs	r3, #2
 8003140:	e0ea      	b.n	8003318 <HAL_I2C_Mem_Read+0x224>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800314a:	f7fe fee1 	bl	8001f10 <HAL_GetTick>
 800314e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2319      	movs	r3, #25
 8003156:	2201      	movs	r2, #1
 8003158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f9bd 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0d5      	b.n	8003318 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2222      	movs	r2, #34	; 0x22
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2240      	movs	r2, #64	; 0x40
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a3a      	ldr	r2, [r7, #32]
 8003186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003194:	88f8      	ldrh	r0, [r7, #6]
 8003196:	893a      	ldrh	r2, [r7, #8]
 8003198:	8979      	ldrh	r1, [r7, #10]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	4603      	mov	r3, r0
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f921 	bl	80033ec <I2C_RequestMemoryRead>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0ad      	b.n	8003318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2bff      	cmp	r3, #255	; 0xff
 80031c4:	d90e      	bls.n	80031e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	22ff      	movs	r2, #255	; 0xff
 80031ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	8979      	ldrh	r1, [r7, #10]
 80031d4:	4b52      	ldr	r3, [pc, #328]	; (8003320 <HAL_I2C_Mem_Read+0x22c>)
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fb25 	bl	800382c <I2C_TransferConfig>
 80031e2:	e00f      	b.n	8003204 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	8979      	ldrh	r1, [r7, #10]
 80031f6:	4b4a      	ldr	r3, [pc, #296]	; (8003320 <HAL_I2C_Mem_Read+0x22c>)
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fb14 	bl	800382c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	2200      	movs	r2, #0
 800320c:	2104      	movs	r1, #4
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f964 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e07c      	b.n	8003318 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d034      	beq.n	80032c4 <HAL_I2C_Mem_Read+0x1d0>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	2b00      	cmp	r3, #0
 8003260:	d130      	bne.n	80032c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	2200      	movs	r2, #0
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f935 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e04d      	b.n	8003318 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	2bff      	cmp	r3, #255	; 0xff
 8003284:	d90e      	bls.n	80032a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	22ff      	movs	r2, #255	; 0xff
 800328a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	b2da      	uxtb	r2, r3
 8003292:	8979      	ldrh	r1, [r7, #10]
 8003294:	2300      	movs	r3, #0
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 fac5 	bl	800382c <I2C_TransferConfig>
 80032a2:	e00f      	b.n	80032c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	8979      	ldrh	r1, [r7, #10]
 80032b6:	2300      	movs	r3, #0
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fab4 	bl	800382c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d19a      	bne.n	8003204 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f982 	bl	80035dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e01a      	b.n	8003318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2220      	movs	r2, #32
 80032e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_I2C_Mem_Read+0x230>)
 80032f6:	400b      	ands	r3, r1
 80032f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e000      	b.n	8003318 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003316:	2302      	movs	r3, #2
  }
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	80002400 	.word	0x80002400
 8003324:	fe00e800 	.word	0xfe00e800

08003328 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003336:	b2db      	uxtb	r3, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af02      	add	r7, sp, #8
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	4608      	mov	r0, r1
 800334e:	4611      	mov	r1, r2
 8003350:	461a      	mov	r2, r3
 8003352:	4603      	mov	r3, r0
 8003354:	817b      	strh	r3, [r7, #10]
 8003356:	460b      	mov	r3, r1
 8003358:	813b      	strh	r3, [r7, #8]
 800335a:	4613      	mov	r3, r2
 800335c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	8979      	ldrh	r1, [r7, #10]
 8003364:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <I2C_RequestMemoryWrite+0xa4>)
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fa5d 	bl	800382c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	69b9      	ldr	r1, [r7, #24]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f8f0 	bl	800355c <I2C_WaitOnTXISFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e02c      	b.n	80033e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d105      	bne.n	8003398 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800338c:	893b      	ldrh	r3, [r7, #8]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	629a      	str	r2, [r3, #40]	; 0x28
 8003396:	e015      	b.n	80033c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003398:	893b      	ldrh	r3, [r7, #8]
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	b29b      	uxth	r3, r3
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	69b9      	ldr	r1, [r7, #24]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f8d6 	bl	800355c <I2C_WaitOnTXISFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e012      	b.n	80033e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033ba:	893b      	ldrh	r3, [r7, #8]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2200      	movs	r2, #0
 80033cc:	2180      	movs	r1, #128	; 0x80
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f884 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	80002000 	.word	0x80002000

080033ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	4608      	mov	r0, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	461a      	mov	r2, r3
 80033fa:	4603      	mov	r3, r0
 80033fc:	817b      	strh	r3, [r7, #10]
 80033fe:	460b      	mov	r3, r1
 8003400:	813b      	strh	r3, [r7, #8]
 8003402:	4613      	mov	r3, r2
 8003404:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	8979      	ldrh	r1, [r7, #10]
 800340c:	4b20      	ldr	r3, [pc, #128]	; (8003490 <I2C_RequestMemoryRead+0xa4>)
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	2300      	movs	r3, #0
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fa0a 	bl	800382c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	69b9      	ldr	r1, [r7, #24]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f89d 	bl	800355c <I2C_WaitOnTXISFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e02c      	b.n	8003486 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800342c:	88fb      	ldrh	r3, [r7, #6]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d105      	bne.n	800343e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003432:	893b      	ldrh	r3, [r7, #8]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
 800343c:	e015      	b.n	800346a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800343e:	893b      	ldrh	r3, [r7, #8]
 8003440:	0a1b      	lsrs	r3, r3, #8
 8003442:	b29b      	uxth	r3, r3
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	69b9      	ldr	r1, [r7, #24]
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f883 	bl	800355c <I2C_WaitOnTXISFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e012      	b.n	8003486 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003460:	893b      	ldrh	r3, [r7, #8]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2200      	movs	r2, #0
 8003472:	2140      	movs	r1, #64	; 0x40
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f831 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	80002000 	.word	0x80002000

08003494 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d103      	bne.n	80034b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d007      	beq.n	80034d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	619a      	str	r2, [r3, #24]
  }
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ec:	e022      	b.n	8003534 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d01e      	beq.n	8003534 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7fe fd0b 	bl	8001f10 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d113      	bne.n	8003534 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e00f      	b.n	8003554 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4013      	ands	r3, r2
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	429a      	cmp	r2, r3
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	429a      	cmp	r2, r3
 8003550:	d0cd      	beq.n	80034ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003568:	e02c      	b.n	80035c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f870 	bl	8003654 <I2C_IsErrorOccurred>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e02a      	b.n	80035d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d01e      	beq.n	80035c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7fe fcc3 	bl	8001f10 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d113      	bne.n	80035c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	f043 0220 	orr.w	r2, r3, #32
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e007      	b.n	80035d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d1cb      	bne.n	800356a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035e8:	e028      	b.n	800363c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f830 	bl	8003654 <I2C_IsErrorOccurred>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e026      	b.n	800364c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fe fc87 	bl	8001f10 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d113      	bne.n	800363c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	f043 0220 	orr.w	r2, r3, #32
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e007      	b.n	800364c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b20      	cmp	r3, #32
 8003648:	d1cf      	bne.n	80035ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	d075      	beq.n	800376c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2210      	movs	r2, #16
 8003686:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003688:	e056      	b.n	8003738 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d052      	beq.n	8003738 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003692:	f7fe fc3d 	bl	8001f10 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d302      	bcc.n	80036a8 <I2C_IsErrorOccurred+0x54>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d147      	bne.n	8003738 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ca:	d12e      	bne.n	800372a <I2C_IsErrorOccurred+0xd6>
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d2:	d02a      	beq.n	800372a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80036d4:	7cfb      	ldrb	r3, [r7, #19]
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d027      	beq.n	800372a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036e8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036ea:	f7fe fc11 	bl	8001f10 <HAL_GetTick>
 80036ee:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036f0:	e01b      	b.n	800372a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036f2:	f7fe fc0d 	bl	8001f10 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b19      	cmp	r3, #25
 80036fe:	d914      	bls.n	800372a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	f043 0220 	orr.w	r2, r3, #32
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b20      	cmp	r3, #32
 8003736:	d1dc      	bne.n	80036f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b20      	cmp	r3, #32
 8003744:	d003      	beq.n	800374e <I2C_IsErrorOccurred+0xfa>
 8003746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800374a:	2b00      	cmp	r3, #0
 800374c:	d09d      	beq.n	800368a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800374e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2220      	movs	r2, #32
 800375c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f043 0304 	orr.w	r3, r3, #4
 8003764:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00b      	beq.n	8003796 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800378e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00b      	beq.n	80037b8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	f043 0308 	orr.w	r3, r3, #8
 80037a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00b      	beq.n	80037da <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80037da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01c      	beq.n	800381c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff fe56 	bl	8003494 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <I2C_IsErrorOccurred+0x1d4>)
 80037f4:	400b      	ands	r3, r1
 80037f6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	431a      	orrs	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800381c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003820:	4618      	mov	r0, r3
 8003822:	3728      	adds	r7, #40	; 0x28
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	fe00e800 	.word	0xfe00e800

0800382c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	607b      	str	r3, [r7, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	817b      	strh	r3, [r7, #10]
 800383a:	4613      	mov	r3, r2
 800383c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800383e:	897b      	ldrh	r3, [r7, #10]
 8003840:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003844:	7a7b      	ldrb	r3, [r7, #9]
 8003846:	041b      	lsls	r3, r3, #16
 8003848:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800384c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	4313      	orrs	r3, r2
 8003856:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800385a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	0d5b      	lsrs	r3, r3, #21
 8003866:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <I2C_TransferConfig+0x60>)
 800386c:	430b      	orrs	r3, r1
 800386e:	43db      	mvns	r3, r3
 8003870:	ea02 0103 	and.w	r1, r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	03ff63ff 	.word	0x03ff63ff

08003890 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003892:	b08f      	sub	sp, #60	; 0x3c
 8003894:	af0a      	add	r7, sp, #40	; 0x28
 8003896:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e116      	b.n	8003ad0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d106      	bne.n	80038c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f008 ff63 	bl	800c788 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2203      	movs	r2, #3
 80038c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f004 faf8 	bl	8007ed6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	687e      	ldr	r6, [r7, #4]
 80038ee:	466d      	mov	r5, sp
 80038f0:	f106 0410 	add.w	r4, r6, #16
 80038f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003900:	e885 0003 	stmia.w	r5, {r0, r1}
 8003904:	1d33      	adds	r3, r6, #4
 8003906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003908:	6838      	ldr	r0, [r7, #0]
 800390a:	f004 fa0b 	bl	8007d24 <USB_CoreInit>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0d7      	b.n	8003ad0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2100      	movs	r1, #0
 8003926:	4618      	mov	r0, r3
 8003928:	f004 fae6 	bl	8007ef8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800392c:	2300      	movs	r3, #0
 800392e:	73fb      	strb	r3, [r7, #15]
 8003930:	e04a      	b.n	80039c8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	333d      	adds	r3, #61	; 0x3d
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003946:	7bfa      	ldrb	r2, [r7, #15]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	333c      	adds	r3, #60	; 0x3c
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800395a:	7bfa      	ldrb	r2, [r7, #15]
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	b298      	uxth	r0, r3
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3342      	adds	r3, #66	; 0x42
 800396e:	4602      	mov	r2, r0
 8003970:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003972:	7bfa      	ldrb	r2, [r7, #15]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	333f      	adds	r3, #63	; 0x3f
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003986:	7bfa      	ldrb	r2, [r7, #15]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	3344      	adds	r3, #68	; 0x44
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800399a:	7bfa      	ldrb	r2, [r7, #15]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	3348      	adds	r3, #72	; 0x48
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039ae:	7bfa      	ldrb	r2, [r7, #15]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	3350      	adds	r3, #80	; 0x50
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	3301      	adds	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
 80039c8:	7bfa      	ldrb	r2, [r7, #15]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d3af      	bcc.n	8003932 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
 80039d6:	e044      	b.n	8003a62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039d8:	7bfa      	ldrb	r2, [r7, #15]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039ee:	7bfa      	ldrb	r2, [r7, #15]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a00:	7bfa      	ldrb	r2, [r7, #15]
 8003a02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a04:	7bfa      	ldrb	r2, [r7, #15]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a16:	2200      	movs	r2, #0
 8003a18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a1a:	7bfa      	ldrb	r2, [r7, #15]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a30:	7bfa      	ldrb	r2, [r7, #15]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a46:	7bfa      	ldrb	r2, [r7, #15]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d3b5      	bcc.n	80039d8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	603b      	str	r3, [r7, #0]
 8003a72:	687e      	ldr	r6, [r7, #4]
 8003a74:	466d      	mov	r5, sp
 8003a76:	f106 0410 	add.w	r4, r6, #16
 8003a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a86:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a8a:	1d33      	adds	r3, r6, #4
 8003a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a8e:	6838      	ldr	r0, [r7, #0]
 8003a90:	f004 fa7e 	bl	8007f90 <USB_DevInit>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e014      	b.n	8003ad0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d102      	bne.n	8003ac4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 ff84 	bl	80049cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f005 fa50 	bl	8008f6e <USB_DevDisconnect>

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ad8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_PCD_Start+0x1c>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e01c      	b.n	8003b2e <HAL_PCD_Start+0x56>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d105      	bne.n	8003b10 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f004 f9cd 	bl	8007eb4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f005 fa04 	bl	8008f2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b36:	b590      	push	{r4, r7, lr}
 8003b38:	b08d      	sub	sp, #52	; 0x34
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f005 fac2 	bl	80090d6 <USB_GetMode>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f040 8384 	bne.w	8004262 <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f005 fa26 	bl	8008fb0 <USB_ReadInterrupts>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 837a 	beq.w	8004260 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f005 fa1d 	bl	8008fb0 <USB_ReadInterrupts>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d107      	bne.n	8003b90 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f002 0202 	and.w	r2, r2, #2
 8003b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f005 fa0b 	bl	8008fb0 <USB_ReadInterrupts>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b10      	cmp	r3, #16
 8003ba2:	d161      	bne.n	8003c68 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0210 	bic.w	r2, r2, #16
 8003bb2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	4413      	add	r3, r2
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	0c5b      	lsrs	r3, r3, #17
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d124      	bne.n	8003c2a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d035      	beq.n	8003c58 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6a38      	ldr	r0, [r7, #32]
 8003c00:	f005 f842 	bl	8008c88 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c10:	441a      	add	r2, r3
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c22:	441a      	add	r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	619a      	str	r2, [r3, #24]
 8003c28:	e016      	b.n	8003c58 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	0c5b      	lsrs	r3, r3, #17
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	2b06      	cmp	r3, #6
 8003c34:	d110      	bne.n	8003c58 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6a38      	ldr	r0, [r7, #32]
 8003c42:	f005 f821 	bl	8008c88 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c52:	441a      	add	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0210 	orr.w	r2, r2, #16
 8003c66:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f005 f99f 	bl	8008fb0 <USB_ReadInterrupts>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c7c:	d16e      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f005 f9a5 	bl	8008fd6 <USB_ReadDevAllOutEpInterrupt>
 8003c8c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003c8e:	e062      	b.n	8003d56 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d057      	beq.n	8003d4a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f005 f9ca 	bl	800903e <USB_ReadDevOutEPInterrupt>
 8003caa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00c      	beq.n	8003cd0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003cc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fda4 	bl	8004818 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00c      	beq.n	8003cf4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2308      	movs	r3, #8
 8003cea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fde0 	bl	80048b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d26:	461a      	mov	r2, r3
 8003d28:	2320      	movs	r3, #32
 8003d2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d42:	461a      	mov	r2, r3
 8003d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d48:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d199      	bne.n	8003c90 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f005 f925 	bl	8008fb0 <USB_ReadInterrupts>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d70:	f040 808c 	bne.w	8003e8c <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f005 f946 	bl	800900a <USB_ReadDevAllInEpInterrupt>
 8003d7e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003d84:	e07e      	b.n	8003e84 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d073      	beq.n	8003e78 <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	4611      	mov	r1, r2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f005 f96d 	bl	800907a <USB_ReadDevInEPInterrupt>
 8003da0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d020      	beq.n	8003dee <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	2201      	movs	r2, #1
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	69f9      	ldr	r1, [r7, #28]
 8003dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dcc:	4013      	ands	r3, r2
 8003dce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2301      	movs	r3, #1
 8003de0:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f008 fd60 	bl	800c8ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e04:	461a      	mov	r2, r3
 8003e06:	2308      	movs	r3, #8
 8003e08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e20:	461a      	mov	r2, r3
 8003e22:	2310      	movs	r3, #16
 8003e24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	2340      	movs	r3, #64	; 0x40
 8003e40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00c      	beq.n	8003e66 <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e4e:	6a38      	ldr	r0, [r7, #32]
 8003e50:	f004 f9ea 	bl	8008228 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e60:	461a      	mov	r2, r3
 8003e62:	2302      	movs	r3, #2
 8003e64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fc47 	bl	8004706 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f47f af7d 	bne.w	8003d86 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f005 f88d 	bl	8008fb0 <USB_ReadInterrupts>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ea0:	d122      	bne.n	8003ee8 <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d108      	bne.n	8003ed2 <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ec8:	2100      	movs	r1, #0
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fda2 	bl	8004a14 <HAL_PCDEx_LPM_Callback>
 8003ed0:	e002      	b.n	8003ed8 <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f008 fd58 	bl	800c988 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f005 f85f 	bl	8008fb0 <USB_ReadInterrupts>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efc:	d112      	bne.n	8003f24 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d102      	bne.n	8003f14 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f008 fd14 	bl	800c93c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f005 f841 	bl	8008fb0 <USB_ReadInterrupts>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f38:	d121      	bne.n	8003f7e <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003f48:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d111      	bne.n	8003f78 <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	089b      	lsrs	r3, r3, #2
 8003f64:	f003 020f 	and.w	r2, r3, #15
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f6e:	2101      	movs	r1, #1
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fd4f 	bl	8004a14 <HAL_PCDEx_LPM_Callback>
 8003f76:	e002      	b.n	8003f7e <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f008 fcdf 	bl	800c93c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f005 f814 	bl	8008fb0 <USB_ReadInterrupts>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f92:	f040 80b5 	bne.w	8004100 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2110      	movs	r1, #16
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f004 f939 	bl	8008228 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fba:	e046      	b.n	800404a <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe0:	0151      	lsls	r1, r2, #5
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	440a      	add	r2, r1
 8003fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004002:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	440a      	add	r2, r1
 800401a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004022:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004034:	0151      	lsls	r1, r2, #5
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	440a      	add	r2, r1
 800403a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800403e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004042:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004046:	3301      	adds	r3, #1
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004050:	429a      	cmp	r2, r3
 8004052:	d3b3      	bcc.n	8003fbc <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004062:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004066:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	2b00      	cmp	r3, #0
 800406e:	d016      	beq.n	800409e <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004080:	f043 030b 	orr.w	r3, r3, #11
 8004084:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004096:	f043 030b 	orr.w	r3, r3, #11
 800409a:	6453      	str	r3, [r2, #68]	; 0x44
 800409c:	e015      	b.n	80040ca <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040b0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80040b4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040c4:	f043 030b 	orr.w	r3, r3, #11
 80040c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f005 f824 	bl	8009138 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f004 ff53 	bl	8008fb0 <USB_ReadInterrupts>
 800410a:	4603      	mov	r3, r0
 800410c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004114:	d124      	bne.n	8004160 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f004 ffe9 	bl	80090f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f004 f8f8 	bl	800831a <USB_GetDevSpeed>
 800412a:	4603      	mov	r3, r0
 800412c:	461a      	mov	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681c      	ldr	r4, [r3, #0]
 8004136:	f001 ff2f 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 800413a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	4620      	mov	r0, r4
 8004146:	f003 fe19 	bl	8007d7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f008 fbd7 	bl	800c8fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800415e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f004 ff23 	bl	8008fb0 <USB_ReadInterrupts>
 800416a:	4603      	mov	r3, r0
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b08      	cmp	r3, #8
 8004172:	d10a      	bne.n	800418a <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f008 fbb4 	bl	800c8e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f002 0208 	and.w	r2, r2, #8
 8004188:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f004 ff0e 	bl	8008fb0 <USB_ReadInterrupts>
 8004194:	4603      	mov	r3, r0
 8004196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800419a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419e:	d10f      	bne.n	80041c0 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	4619      	mov	r1, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f008 fc26 	bl	800c9fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80041be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f004 fef3 	bl	8008fb0 <USB_ReadInterrupts>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041d4:	d10f      	bne.n	80041f6 <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	4619      	mov	r1, r3
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f008 fbf9 	bl	800c9d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80041f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f004 fed8 	bl	8008fb0 <USB_ReadInterrupts>
 8004200:	4603      	mov	r3, r0
 8004202:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d10a      	bne.n	8004222 <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f008 fc07 	bl	800ca20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004220:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f004 fec2 	bl	8008fb0 <USB_ReadInterrupts>
 800422c:	4603      	mov	r3, r0
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b04      	cmp	r3, #4
 8004234:	d115      	bne.n	8004262 <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f008 fbf7 	bl	800ca3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6859      	ldr	r1, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	e000      	b.n	8004262 <HAL_PCD_IRQHandler+0x72c>
      return;
 8004260:	bf00      	nop
    }
  }
}
 8004262:	3734      	adds	r7, #52	; 0x34
 8004264:	46bd      	mov	sp, r7
 8004266:	bd90      	pop	{r4, r7, pc}

08004268 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_PCD_SetAddress+0x1a>
 800427e:	2302      	movs	r3, #2
 8004280:	e013      	b.n	80042aa <HAL_PCD_SetAddress+0x42>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f004 fe20 	bl	8008ee0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	4608      	mov	r0, r1
 80042bc:	4611      	mov	r1, r2
 80042be:	461a      	mov	r2, r3
 80042c0:	4603      	mov	r3, r0
 80042c2:	70fb      	strb	r3, [r7, #3]
 80042c4:	460b      	mov	r3, r1
 80042c6:	803b      	strh	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	da0f      	bge.n	80042f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	f003 020f 	and.w	r2, r3, #15
 80042de:	4613      	mov	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	3338      	adds	r3, #56	; 0x38
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	4413      	add	r3, r2
 80042ec:	3304      	adds	r3, #4
 80042ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	705a      	strb	r2, [r3, #1]
 80042f6:	e00f      	b.n	8004318 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	f003 020f 	and.w	r2, r3, #15
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	3304      	adds	r3, #4
 8004310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004324:	883a      	ldrh	r2, [r7, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	78ba      	ldrb	r2, [r7, #2]
 800432e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	785b      	ldrb	r3, [r3, #1]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004342:	78bb      	ldrb	r3, [r7, #2]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d102      	bne.n	800434e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_PCD_EP_Open+0xaa>
 8004358:	2302      	movs	r3, #2
 800435a:	e00e      	b.n	800437a <HAL_PCD_EP_Open+0xc8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68f9      	ldr	r1, [r7, #12]
 800436a:	4618      	mov	r0, r3
 800436c:	f003 fff4 	bl	8008358 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004378:	7afb      	ldrb	r3, [r7, #11]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	460b      	mov	r3, r1
 800438c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800438e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004392:	2b00      	cmp	r3, #0
 8004394:	da0f      	bge.n	80043b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	f003 020f 	and.w	r2, r3, #15
 800439c:	4613      	mov	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	3338      	adds	r3, #56	; 0x38
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	4413      	add	r3, r2
 80043aa:	3304      	adds	r3, #4
 80043ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	705a      	strb	r2, [r3, #1]
 80043b4:	e00f      	b.n	80043d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	f003 020f 	and.w	r2, r3, #15
 80043bc:	4613      	mov	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	3304      	adds	r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_PCD_EP_Close+0x6e>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e00e      	b.n	800440e <HAL_PCD_EP_Close+0x8c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68f9      	ldr	r1, [r7, #12]
 80043fe:	4618      	mov	r0, r3
 8004400:	f004 f832 	bl	8008468 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b086      	sub	sp, #24
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
 8004422:	460b      	mov	r3, r1
 8004424:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004426:	7afb      	ldrb	r3, [r7, #11]
 8004428:	f003 020f 	and.w	r2, r3, #15
 800442c:	4613      	mov	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	1a9b      	subs	r3, r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4413      	add	r3, r2
 800443c:	3304      	adds	r3, #4
 800443e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2200      	movs	r2, #0
 8004450:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2200      	movs	r2, #0
 8004456:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004458:	7afb      	ldrb	r3, [r7, #11]
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	b2da      	uxtb	r2, r3
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004464:	7afb      	ldrb	r3, [r7, #11]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6979      	ldr	r1, [r7, #20]
 8004474:	4618      	mov	r0, r3
 8004476:	f004 faaf 	bl	80089d8 <USB_EP0StartXfer>
 800447a:	e005      	b.n	8004488 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6979      	ldr	r1, [r7, #20]
 8004482:	4618      	mov	r0, r3
 8004484:	f004 f8cc 	bl	8008620 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	460b      	mov	r3, r1
 800449c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80044b4:	681b      	ldr	r3, [r3, #0]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b086      	sub	sp, #24
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	460b      	mov	r3, r1
 80044d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044d2:	7afb      	ldrb	r3, [r7, #11]
 80044d4:	f003 020f 	and.w	r2, r3, #15
 80044d8:	4613      	mov	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	3338      	adds	r3, #56	; 0x38
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4413      	add	r3, r2
 80044e6:	3304      	adds	r3, #4
 80044e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2200      	movs	r2, #0
 80044fa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2201      	movs	r2, #1
 8004500:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004502:	7afb      	ldrb	r3, [r7, #11]
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	b2da      	uxtb	r2, r3
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800450e:	7afb      	ldrb	r3, [r7, #11]
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	2b00      	cmp	r3, #0
 8004516:	d106      	bne.n	8004526 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6979      	ldr	r1, [r7, #20]
 800451e:	4618      	mov	r0, r3
 8004520:	f004 fa5a 	bl	80089d8 <USB_EP0StartXfer>
 8004524:	e005      	b.n	8004532 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6979      	ldr	r1, [r7, #20]
 800452c:	4618      	mov	r0, r3
 800452e:	f004 f877 	bl	8008620 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	f003 020f 	and.w	r2, r3, #15
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	429a      	cmp	r2, r3
 8004554:	d901      	bls.n	800455a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e04e      	b.n	80045f8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800455a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800455e:	2b00      	cmp	r3, #0
 8004560:	da0f      	bge.n	8004582 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	f003 020f 	and.w	r2, r3, #15
 8004568:	4613      	mov	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	3338      	adds	r3, #56	; 0x38
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	4413      	add	r3, r2
 8004576:	3304      	adds	r3, #4
 8004578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	705a      	strb	r2, [r3, #1]
 8004580:	e00d      	b.n	800459e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	4413      	add	r3, r2
 8004594:	3304      	adds	r3, #4
 8004596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <HAL_PCD_EP_SetStall+0x82>
 80045ba:	2302      	movs	r3, #2
 80045bc:	e01c      	b.n	80045f8 <HAL_PCD_EP_SetStall+0xbc>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68f9      	ldr	r1, [r7, #12]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f004 fbb3 	bl	8008d38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d108      	bne.n	80045ee <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045e6:	4619      	mov	r1, r3
 80045e8:	4610      	mov	r0, r2
 80045ea:	f004 fda5 	bl	8009138 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	f003 020f 	and.w	r2, r3, #15
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	429a      	cmp	r2, r3
 8004618:	d901      	bls.n	800461e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e042      	b.n	80046a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800461e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004622:	2b00      	cmp	r3, #0
 8004624:	da0f      	bge.n	8004646 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	f003 020f 	and.w	r2, r3, #15
 800462c:	4613      	mov	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	3338      	adds	r3, #56	; 0x38
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	4413      	add	r3, r2
 800463a:	3304      	adds	r3, #4
 800463c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	705a      	strb	r2, [r3, #1]
 8004644:	e00f      	b.n	8004666 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	f003 020f 	and.w	r2, r3, #15
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	4413      	add	r3, r2
 800465c:	3304      	adds	r3, #4
 800465e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	b2da      	uxtb	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_PCD_EP_ClrStall+0x86>
 8004682:	2302      	movs	r3, #2
 8004684:	e00e      	b.n	80046a4 <HAL_PCD_EP_ClrStall+0xa4>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68f9      	ldr	r1, [r7, #12]
 8004694:	4618      	mov	r0, r3
 8004696:	f004 fbbd 	bl	8008e14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_PCD_EP_Flush+0x1a>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e01b      	b.n	80046fe <HAL_PCD_EP_Flush+0x52>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80046ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	da09      	bge.n	80046ea <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f003 fda0 	bl	8008228 <USB_FlushTxFifo>
 80046e8:	e004      	b.n	80046f4 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f003 fdcc 	bl	800828c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b088      	sub	sp, #32
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	3338      	adds	r3, #56	; 0x38
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	3304      	adds	r3, #4
 800472c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	429a      	cmp	r2, r3
 8004738:	d901      	bls.n	800473e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e067      	b.n	800480e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	429a      	cmp	r2, r3
 8004752:	d902      	bls.n	800475a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3303      	adds	r3, #3
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004762:	e026      	b.n	80047b2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	695a      	ldr	r2, [r3, #20]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	429a      	cmp	r2, r3
 8004778:	d902      	bls.n	8004780 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	3303      	adds	r3, #3
 8004784:	089b      	lsrs	r3, r3, #2
 8004786:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68d9      	ldr	r1, [r3, #12]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	b2da      	uxtb	r2, r3
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	b29b      	uxth	r3, r3
 8004794:	6978      	ldr	r0, [r7, #20]
 8004796:	f004 fa3d 	bl	8008c14 <USB_WritePacket>

    ep->xfer_buff  += len;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	441a      	add	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	441a      	add	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d809      	bhi.n	80047dc <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d203      	bcs.n	80047dc <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1c3      	bne.n	8004764 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d811      	bhi.n	800480c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	2201      	movs	r2, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	43db      	mvns	r3, r3
 8004802:	6939      	ldr	r1, [r7, #16]
 8004804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004808:	4013      	ands	r3, r2
 800480a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	333c      	adds	r3, #60	; 0x3c
 8004830:	3304      	adds	r3, #4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4a19      	ldr	r2, [pc, #100]	; (80048b0 <PCD_EP_OutXfrComplete_int+0x98>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d124      	bne.n	8004898 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004864:	461a      	mov	r2, r3
 8004866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486a:	6093      	str	r3, [r2, #8]
 800486c:	e01a      	b.n	80048a4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004884:	461a      	mov	r2, r3
 8004886:	2320      	movs	r3, #32
 8004888:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	4619      	mov	r1, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f007 fff1 	bl	800c878 <HAL_PCD_DataOutStageCallback>
 8004896:	e005      	b.n	80048a4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	4619      	mov	r1, r3
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f007 ffea 	bl	800c878 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	4f54310a 	.word	0x4f54310a

080048b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	333c      	adds	r3, #60	; 0x3c
 80048cc:	3304      	adds	r3, #4
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4a0c      	ldr	r2, [pc, #48]	; (8004918 <PCD_EP_OutSetupPacket_int+0x64>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d90e      	bls.n	8004908 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d009      	beq.n	8004908 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	461a      	mov	r2, r3
 8004902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004906:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f007 ffa3 	bl	800c854 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	4f54300a 	.word	0x4f54300a

0800491c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	70fb      	strb	r3, [r7, #3]
 8004928:	4613      	mov	r3, r2
 800492a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d107      	bne.n	800494a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800493a:	883b      	ldrh	r3, [r7, #0]
 800493c:	0419      	lsls	r1, r3, #16
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	430a      	orrs	r2, r1
 8004946:	629a      	str	r2, [r3, #40]	; 0x28
 8004948:	e028      	b.n	800499c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004950:	0c1b      	lsrs	r3, r3, #16
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	4413      	add	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004958:	2300      	movs	r3, #0
 800495a:	73fb      	strb	r3, [r7, #15]
 800495c:	e00d      	b.n	800497a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	3340      	adds	r3, #64	; 0x40
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	0c1b      	lsrs	r3, r3, #16
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	4413      	add	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	3301      	adds	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
 800497a:	7bfa      	ldrb	r2, [r7, #15]
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	3b01      	subs	r3, #1
 8004980:	429a      	cmp	r2, r3
 8004982:	d3ec      	bcc.n	800495e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004984:	883b      	ldrh	r3, [r7, #0]
 8004986:	0418      	lsls	r0, r3, #16
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6819      	ldr	r1, [r3, #0]
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	3b01      	subs	r3, #1
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	4302      	orrs	r2, r0
 8004994:	3340      	adds	r3, #64	; 0x40
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	460b      	mov	r3, r1
 80049b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	887a      	ldrh	r2, [r7, #2]
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fe:	f043 0303 	orr.w	r3, r3, #3
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a04      	ldr	r2, [pc, #16]	; (8004a48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3a:	6013      	str	r3, [r2, #0]
}
 8004a3c:	bf00      	nop
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40007000 	.word	0x40007000

08004a4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40007000 	.word	0x40007000

08004a68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a76:	d130      	bne.n	8004ada <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a78:	4b23      	ldr	r3, [pc, #140]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a84:	d038      	beq.n	8004af8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a86:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a8e:	4a1e      	ldr	r2, [pc, #120]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a96:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2232      	movs	r2, #50	; 0x32
 8004a9c:	fb02 f303 	mul.w	r3, r2, r3
 8004aa0:	4a1b      	ldr	r2, [pc, #108]	; (8004b10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	0c9b      	lsrs	r3, r3, #18
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aac:	e002      	b.n	8004ab4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ab4:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac0:	d102      	bne.n	8004ac8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f2      	bne.n	8004aae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad4:	d110      	bne.n	8004af8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e00f      	b.n	8004afa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ada:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae6:	d007      	beq.n	8004af8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ae8:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004af0:	4a05      	ldr	r2, [pc, #20]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004af6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	20000040 	.word	0x20000040
 8004b10:	431bde83 	.word	0x431bde83

08004b14 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004b18:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4a04      	ldr	r2, [pc, #16]	; (8004b30 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b22:	6053      	str	r3, [r2, #4]
}
 8004b24:	bf00      	nop
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40007000 	.word	0x40007000

08004b34 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004b38:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b42:	6053      	str	r3, [r2, #4]
}
 8004b44:	bf00      	nop
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40007000 	.word	0x40007000

08004b54 <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <HAL_PWREx_DisableVddIO2+0x1c>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	4a04      	ldr	r2, [pc, #16]	; (8004b70 <HAL_PWREx_DisableVddIO2+0x1c>)
 8004b5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b62:	6053      	str	r3, [r2, #4]
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40007000 	.word	0x40007000

08004b74 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004b7c:	f7fd f9c8 	bl	8001f10 <HAL_GetTick>
 8004b80:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e063      	b.n	8004c54 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10b      	bne.n	8004bb0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fc f99b 	bl	8000edc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004ba6:	f241 3188 	movw	r1, #5000	; 0x1388
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fad3 	bl	8005156 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	021a      	lsls	r2, r3, #8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2120      	movs	r1, #32
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 facb 	bl	8005172 <QSPI_WaitFlagStateUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004be0:	7afb      	ldrb	r3, [r7, #11]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d131      	bne.n	8004c4a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004bf0:	f023 0310 	bic.w	r3, r3, #16
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6852      	ldr	r2, [r2, #4]
 8004bf8:	0611      	lsls	r1, r2, #24
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	68d2      	ldr	r2, [r2, #12]
 8004bfe:	4311      	orrs	r1, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <HAL_QSPI_Init+0xe8>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6912      	ldr	r2, [r2, #16]
 8004c16:	0411      	lsls	r1, r2, #16
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6952      	ldr	r2, [r2, #20]
 8004c1c:	4311      	orrs	r1, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6992      	ldr	r2, [r2, #24]
 8004c22:	4311      	orrs	r1, r2
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004c52:	7afb      	ldrb	r3, [r7, #11]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	ffe0f8fe 	.word	0xffe0f8fe

08004c60 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004c6c:	f7fd f950 	bl	8001f10 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_QSPI_Command+0x22>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e048      	b.n	8004d14 <HAL_QSPI_Command+0xb4>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d137      	bne.n	8004d06 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2120      	movs	r1, #32
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 fa5f 	bl	8005172 <QSPI_WaitFlagStateUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d125      	bne.n	8004d0a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 fa8c 	bl	80051e0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d115      	bne.n	8004cfc <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	2102      	movs	r1, #2
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 fa49 	bl	8005172 <QSPI_WaitFlagStateUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10f      	bne.n	8004d0a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004cfa:	e006      	b.n	8004d0a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004d04:	e001      	b.n	8004d0a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004d06:	2302      	movs	r3, #2
 8004d08:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	; 0x28
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004d2c:	f7fd f8f0 	bl	8001f10 <HAL_GetTick>
 8004d30:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3320      	adds	r3, #32
 8004d38:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_QSPI_Transmit+0x2e>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e07b      	b.n	8004e42 <HAL_QSPI_Transmit+0x126>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d16a      	bne.n	8004e34 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d05b      	beq.n	8004e22 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2212      	movs	r2, #18
 8004d6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695a      	ldr	r2, [r3, #20]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004d9e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8004da0:	e01b      	b.n	8004dda <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2201      	movs	r2, #1
 8004daa:	2104      	movs	r1, #4
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 f9e0 	bl	8005172 <QSPI_WaitFlagStateUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004db6:	7ffb      	ldrb	r3, [r7, #31]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d113      	bne.n	8004de4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	781a      	ldrb	r2, [r3, #0]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	1e5a      	subs	r2, r3, #1
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1df      	bne.n	8004da2 <HAL_QSPI_Transmit+0x86>
 8004de2:	e000      	b.n	8004de6 <HAL_QSPI_Transmit+0xca>
          break;
 8004de4:	bf00      	nop
      }

      if (status == HAL_OK)
 8004de6:	7ffb      	ldrb	r3, [r7, #31]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d115      	bne.n	8004e18 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2201      	movs	r2, #1
 8004df4:	2102      	movs	r1, #2
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 f9bb 	bl	8005172 <QSPI_WaitFlagStateUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004e00:	7ffb      	ldrb	r3, [r7, #31]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d108      	bne.n	8004e18 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f934 	bl	800507c <HAL_QSPI_Abort>
 8004e14:	4603      	mov	r3, r0
 8004e16:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004e20:	e00a      	b.n	8004e38 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	f043 0208 	orr.w	r2, r3, #8
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	77fb      	strb	r3, [r7, #31]
 8004e32:	e001      	b.n	8004e38 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
 8004e36:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004e40:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3720      	adds	r7, #32
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b08a      	sub	sp, #40	; 0x28
 8004e4e:	af02      	add	r7, sp, #8
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004e5a:	f7fd f859 	bl	8001f10 <HAL_GetTick>
 8004e5e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3320      	adds	r3, #32
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_QSPI_Receive+0x36>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e082      	b.n	8004f86 <HAL_QSPI_Receive+0x13c>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d171      	bne.n	8004f78 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d062      	beq.n	8004f66 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2222      	movs	r2, #34	; 0x22
 8004ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004ed8:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004ee2:	e01c      	b.n	8004f1e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2201      	movs	r2, #1
 8004eec:	2106      	movs	r1, #6
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f93f 	bl	8005172 <QSPI_WaitFlagStateUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004ef8:	7ffb      	ldrb	r3, [r7, #31]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d114      	bne.n	8004f28 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	7812      	ldrb	r2, [r2, #0]
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	1e5a      	subs	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1de      	bne.n	8004ee4 <HAL_QSPI_Receive+0x9a>
 8004f26:	e000      	b.n	8004f2a <HAL_QSPI_Receive+0xe0>
          break;
 8004f28:	bf00      	nop
      }

      if (status == HAL_OK)
 8004f2a:	7ffb      	ldrb	r3, [r7, #31]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d115      	bne.n	8004f5c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2201      	movs	r2, #1
 8004f38:	2102      	movs	r1, #2
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 f919 	bl	8005172 <QSPI_WaitFlagStateUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004f44:	7ffb      	ldrb	r3, [r7, #31]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d108      	bne.n	8004f5c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 f892 	bl	800507c <HAL_QSPI_Abort>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004f64:	e00a      	b.n	8004f7c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6a:	f043 0208 	orr.w	r2, r3, #8
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e001      	b.n	8004f7c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3720      	adds	r7, #32
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b088      	sub	sp, #32
 8004f92:	af02      	add	r7, sp, #8
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f9c:	f7fc ffb8 	bl	8001f10 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_QSPI_AutoPolling+0x24>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e060      	b.n	8005074 <HAL_QSPI_AutoPolling+0xe6>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d14f      	bne.n	8005066 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2242      	movs	r2, #66	; 0x42
 8004fd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2120      	movs	r1, #32
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f8c7 	bl	8005172 <QSPI_WaitFlagStateUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d13d      	bne.n	800506a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6852      	ldr	r2, [r2, #4]
 8005000:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6892      	ldr	r2, [r2, #8]
 800500a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	431a      	orrs	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005024:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800502e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f8d3 	bl	80051e0 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2201      	movs	r2, #1
 8005042:	2108      	movs	r1, #8
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 f894 	bl	8005172 <QSPI_WaitFlagStateUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800504e:	7dfb      	ldrb	r3, [r7, #23]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10a      	bne.n	800506a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2208      	movs	r2, #8
 800505a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005064:	e001      	b.n	800506a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005066:	2302      	movs	r3, #2
 8005068:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005072:	7dfb      	ldrb	r3, [r7, #23]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af02      	add	r7, sp, #8
 8005082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005088:	f7fc ff42 	bl	8001f10 <HAL_GetTick>
 800508c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d056      	beq.n	800514c <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d017      	beq.n	80050e4 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0204 	bic.w	r2, r2, #4
 80050c2:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fd fa3f 	bl	800254c <HAL_DMA_Abort>
 80050ce:	4603      	mov	r3, r0
 80050d0:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050dc:	f043 0204 	orr.w	r2, r3, #4
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0202 	orr.w	r2, r2, #2
 80050f2:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2201      	movs	r2, #1
 80050fe:	2102      	movs	r1, #2
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f836 	bl	8005172 <QSPI_WaitFlagStateUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800510a:	7bfb      	ldrb	r3, [r7, #15]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10e      	bne.n	800512e <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2202      	movs	r2, #2
 8005116:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2200      	movs	r2, #0
 8005122:	2120      	movs	r1, #32
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f824 	bl	8005172 <QSPI_WaitFlagStateUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10b      	bne.n	800514c <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005142:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 800514c:	7bfb      	ldrb	r3, [r7, #15]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	603b      	str	r3, [r7, #0]
 800517e:	4613      	mov	r3, r2
 8005180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005182:	e01a      	b.n	80051ba <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d016      	beq.n	80051ba <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518c:	f7fc fec0 	bl	8001f10 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	429a      	cmp	r2, r3
 800519a:	d302      	bcc.n	80051a2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10b      	bne.n	80051ba <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2204      	movs	r2, #4
 80051a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ae:	f043 0201 	orr.w	r2, r3, #1
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e00e      	b.n	80051d8 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d1d6      	bne.n	8005184 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d009      	beq.n	8005208 <QSPI_Config+0x28>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80051fa:	d005      	beq.n	8005208 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3a01      	subs	r2, #1
 8005206:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80b9 	beq.w	8005384 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d05f      	beq.n	80052da <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	6892      	ldr	r2, [r2, #8]
 8005222:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d031      	beq.n	8005290 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005234:	431a      	orrs	r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	431a      	orrs	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	431a      	orrs	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	049b      	lsls	r3, r3, #18
 8005248:	431a      	orrs	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	431a      	orrs	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	431a      	orrs	r2, r3
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	431a      	orrs	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	431a      	orrs	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	431a      	orrs	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	ea42 0103 	orr.w	r1, r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	430a      	orrs	r2, r1
 8005278:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005280:	f000 812e 	beq.w	80054e0 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	6852      	ldr	r2, [r2, #4]
 800528c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800528e:	e127      	b.n	80054e0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	431a      	orrs	r2, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529e:	431a      	orrs	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	049b      	lsls	r3, r3, #18
 80052ac:	431a      	orrs	r2, r3
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	431a      	orrs	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	431a      	orrs	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	ea42 0103 	orr.w	r1, r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	615a      	str	r2, [r3, #20]
}
 80052d8:	e102      	b.n	80054e0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d02e      	beq.n	8005340 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	431a      	orrs	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	431a      	orrs	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	431a      	orrs	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	049b      	lsls	r3, r3, #18
 80052fe:	431a      	orrs	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	431a      	orrs	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	431a      	orrs	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	431a      	orrs	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	431a      	orrs	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	ea42 0103 	orr.w	r1, r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	430a      	orrs	r2, r1
 8005328:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005330:	f000 80d6 	beq.w	80054e0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	6852      	ldr	r2, [r2, #4]
 800533c:	619a      	str	r2, [r3, #24]
}
 800533e:	e0cf      	b.n	80054e0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	431a      	orrs	r2, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534e:	431a      	orrs	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	431a      	orrs	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	049b      	lsls	r3, r3, #18
 800535c:	431a      	orrs	r2, r3
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	431a      	orrs	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	431a      	orrs	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	431a      	orrs	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	ea42 0103 	orr.w	r1, r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	430a      	orrs	r2, r1
 8005380:	615a      	str	r2, [r3, #20]
}
 8005382:	e0ad      	b.n	80054e0 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d058      	beq.n	800543e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	6892      	ldr	r2, [r2, #8]
 8005394:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02d      	beq.n	80053fa <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	431a      	orrs	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ac:	431a      	orrs	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	431a      	orrs	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	049b      	lsls	r3, r3, #18
 80053ba:	431a      	orrs	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	431a      	orrs	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	ea42 0103 	orr.w	r1, r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053ec:	d078      	beq.n	80054e0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	6852      	ldr	r2, [r2, #4]
 80053f6:	619a      	str	r2, [r3, #24]
}
 80053f8:	e072      	b.n	80054e0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	431a      	orrs	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005408:	431a      	orrs	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	431a      	orrs	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	049b      	lsls	r3, r3, #18
 8005416:	431a      	orrs	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	431a      	orrs	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	431a      	orrs	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	431a      	orrs	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	ea42 0103 	orr.w	r1, r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	430a      	orrs	r2, r1
 800543a:	615a      	str	r2, [r3, #20]
}
 800543c:	e050      	b.n	80054e0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d02a      	beq.n	800549c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	431a      	orrs	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005454:	431a      	orrs	r2, r3
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	431a      	orrs	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	049b      	lsls	r3, r3, #18
 8005462:	431a      	orrs	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	431a      	orrs	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	431a      	orrs	r2, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	431a      	orrs	r2, r3
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	ea42 0103 	orr.w	r1, r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	430a      	orrs	r2, r1
 8005486:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800548e:	d027      	beq.n	80054e0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	6852      	ldr	r2, [r2, #4]
 8005498:	619a      	str	r2, [r3, #24]
}
 800549a:	e021      	b.n	80054e0 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01d      	beq.n	80054e0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	431a      	orrs	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	431a      	orrs	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	431a      	orrs	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	049b      	lsls	r3, r3, #18
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	431a      	orrs	r2, r3
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	ea42 0103 	orr.w	r1, r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	430a      	orrs	r2, r1
 80054de:	615a      	str	r2, [r3, #20]
}
 80054e0:	bf00      	nop
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e3d8      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054fe:	4b97      	ldr	r3, [pc, #604]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 030c 	and.w	r3, r3, #12
 8005506:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005508:	4b94      	ldr	r3, [pc, #592]	; (800575c <HAL_RCC_OscConfig+0x270>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0310 	and.w	r3, r3, #16
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 80e4 	beq.w	80056e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <HAL_RCC_OscConfig+0x4a>
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	2b0c      	cmp	r3, #12
 800552a:	f040 808b 	bne.w	8005644 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b01      	cmp	r3, #1
 8005532:	f040 8087 	bne.w	8005644 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005536:	4b89      	ldr	r3, [pc, #548]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <HAL_RCC_OscConfig+0x62>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e3b0      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1a      	ldr	r2, [r3, #32]
 8005552:	4b82      	ldr	r3, [pc, #520]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d004      	beq.n	8005568 <HAL_RCC_OscConfig+0x7c>
 800555e:	4b7f      	ldr	r3, [pc, #508]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005566:	e005      	b.n	8005574 <HAL_RCC_OscConfig+0x88>
 8005568:	4b7c      	ldr	r3, [pc, #496]	; (800575c <HAL_RCC_OscConfig+0x270>)
 800556a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800556e:	091b      	lsrs	r3, r3, #4
 8005570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005574:	4293      	cmp	r3, r2
 8005576:	d223      	bcs.n	80055c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fd43 	bl	8006008 <RCC_SetFlashLatencyFromMSIRange>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e391      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800558c:	4b73      	ldr	r3, [pc, #460]	; (800575c <HAL_RCC_OscConfig+0x270>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a72      	ldr	r2, [pc, #456]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005592:	f043 0308 	orr.w	r3, r3, #8
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	4b70      	ldr	r3, [pc, #448]	; (800575c <HAL_RCC_OscConfig+0x270>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	496d      	ldr	r1, [pc, #436]	; (800575c <HAL_RCC_OscConfig+0x270>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055aa:	4b6c      	ldr	r3, [pc, #432]	; (800575c <HAL_RCC_OscConfig+0x270>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	4968      	ldr	r1, [pc, #416]	; (800575c <HAL_RCC_OscConfig+0x270>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	604b      	str	r3, [r1, #4]
 80055be:	e025      	b.n	800560c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055c0:	4b66      	ldr	r3, [pc, #408]	; (800575c <HAL_RCC_OscConfig+0x270>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a65      	ldr	r2, [pc, #404]	; (800575c <HAL_RCC_OscConfig+0x270>)
 80055c6:	f043 0308 	orr.w	r3, r3, #8
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	4b63      	ldr	r3, [pc, #396]	; (800575c <HAL_RCC_OscConfig+0x270>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	4960      	ldr	r1, [pc, #384]	; (800575c <HAL_RCC_OscConfig+0x270>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055de:	4b5f      	ldr	r3, [pc, #380]	; (800575c <HAL_RCC_OscConfig+0x270>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	495b      	ldr	r1, [pc, #364]	; (800575c <HAL_RCC_OscConfig+0x270>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fd03 	bl	8006008 <RCC_SetFlashLatencyFromMSIRange>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e351      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800560c:	f000 fc38 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8005610:	4602      	mov	r2, r0
 8005612:	4b52      	ldr	r3, [pc, #328]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	091b      	lsrs	r3, r3, #4
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	4950      	ldr	r1, [pc, #320]	; (8005760 <HAL_RCC_OscConfig+0x274>)
 800561e:	5ccb      	ldrb	r3, [r1, r3]
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	fa22 f303 	lsr.w	r3, r2, r3
 8005628:	4a4e      	ldr	r2, [pc, #312]	; (8005764 <HAL_RCC_OscConfig+0x278>)
 800562a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800562c:	4b4e      	ldr	r3, [pc, #312]	; (8005768 <HAL_RCC_OscConfig+0x27c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4618      	mov	r0, r3
 8005632:	f7fc fc1d 	bl	8001e70 <HAL_InitTick>
 8005636:	4603      	mov	r3, r0
 8005638:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d052      	beq.n	80056e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	e335      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d032      	beq.n	80056b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800564c:	4b43      	ldr	r3, [pc, #268]	; (800575c <HAL_RCC_OscConfig+0x270>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a42      	ldr	r2, [pc, #264]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005658:	f7fc fc5a 	bl	8001f10 <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005660:	f7fc fc56 	bl	8001f10 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e31e      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005672:	4b3a      	ldr	r3, [pc, #232]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0f0      	beq.n	8005660 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800567e:	4b37      	ldr	r3, [pc, #220]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a36      	ldr	r2, [pc, #216]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005684:	f043 0308 	orr.w	r3, r3, #8
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	4b34      	ldr	r3, [pc, #208]	; (800575c <HAL_RCC_OscConfig+0x270>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	4931      	ldr	r1, [pc, #196]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005698:	4313      	orrs	r3, r2
 800569a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800569c:	4b2f      	ldr	r3, [pc, #188]	; (800575c <HAL_RCC_OscConfig+0x270>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	492c      	ldr	r1, [pc, #176]	; (800575c <HAL_RCC_OscConfig+0x270>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	604b      	str	r3, [r1, #4]
 80056b0:	e01a      	b.n	80056e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056b2:	4b2a      	ldr	r3, [pc, #168]	; (800575c <HAL_RCC_OscConfig+0x270>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a29      	ldr	r2, [pc, #164]	; (800575c <HAL_RCC_OscConfig+0x270>)
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056be:	f7fc fc27 	bl	8001f10 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056c6:	f7fc fc23 	bl	8001f10 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e2eb      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056d8:	4b20      	ldr	r3, [pc, #128]	; (800575c <HAL_RCC_OscConfig+0x270>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f0      	bne.n	80056c6 <HAL_RCC_OscConfig+0x1da>
 80056e4:	e000      	b.n	80056e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d074      	beq.n	80057de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d005      	beq.n	8005706 <HAL_RCC_OscConfig+0x21a>
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b0c      	cmp	r3, #12
 80056fe:	d10e      	bne.n	800571e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d10b      	bne.n	800571e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005706:	4b15      	ldr	r3, [pc, #84]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d064      	beq.n	80057dc <HAL_RCC_OscConfig+0x2f0>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d160      	bne.n	80057dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e2c8      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005726:	d106      	bne.n	8005736 <HAL_RCC_OscConfig+0x24a>
 8005728:	4b0c      	ldr	r3, [pc, #48]	; (800575c <HAL_RCC_OscConfig+0x270>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a0b      	ldr	r2, [pc, #44]	; (800575c <HAL_RCC_OscConfig+0x270>)
 800572e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	e026      	b.n	8005784 <HAL_RCC_OscConfig+0x298>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800573e:	d115      	bne.n	800576c <HAL_RCC_OscConfig+0x280>
 8005740:	4b06      	ldr	r3, [pc, #24]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a05      	ldr	r2, [pc, #20]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005746:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	4b03      	ldr	r3, [pc, #12]	; (800575c <HAL_RCC_OscConfig+0x270>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a02      	ldr	r2, [pc, #8]	; (800575c <HAL_RCC_OscConfig+0x270>)
 8005752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	e014      	b.n	8005784 <HAL_RCC_OscConfig+0x298>
 800575a:	bf00      	nop
 800575c:	40021000 	.word	0x40021000
 8005760:	0800d040 	.word	0x0800d040
 8005764:	20000040 	.word	0x20000040
 8005768:	20000044 	.word	0x20000044
 800576c:	4ba0      	ldr	r3, [pc, #640]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a9f      	ldr	r2, [pc, #636]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 8005772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	4b9d      	ldr	r3, [pc, #628]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a9c      	ldr	r2, [pc, #624]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 800577e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d013      	beq.n	80057b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578c:	f7fc fbc0 	bl	8001f10 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005794:	f7fc fbbc 	bl	8001f10 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b64      	cmp	r3, #100	; 0x64
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e284      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057a6:	4b92      	ldr	r3, [pc, #584]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f0      	beq.n	8005794 <HAL_RCC_OscConfig+0x2a8>
 80057b2:	e014      	b.n	80057de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fc fbac 	bl	8001f10 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057bc:	f7fc fba8 	bl	8001f10 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b64      	cmp	r3, #100	; 0x64
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e270      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057ce:	4b88      	ldr	r3, [pc, #544]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0x2d0>
 80057da:	e000      	b.n	80057de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d060      	beq.n	80058ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d005      	beq.n	80057fc <HAL_RCC_OscConfig+0x310>
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b0c      	cmp	r3, #12
 80057f4:	d119      	bne.n	800582a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d116      	bne.n	800582a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057fc:	4b7c      	ldr	r3, [pc, #496]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_RCC_OscConfig+0x328>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e24d      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005814:	4b76      	ldr	r3, [pc, #472]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	061b      	lsls	r3, r3, #24
 8005822:	4973      	ldr	r1, [pc, #460]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 8005824:	4313      	orrs	r3, r2
 8005826:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005828:	e040      	b.n	80058ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d023      	beq.n	800587a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005832:	4b6f      	ldr	r3, [pc, #444]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a6e      	ldr	r2, [pc, #440]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 8005838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583e:	f7fc fb67 	bl	8001f10 <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005846:	f7fc fb63 	bl	8001f10 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e22b      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005858:	4b65      	ldr	r3, [pc, #404]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0f0      	beq.n	8005846 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005864:	4b62      	ldr	r3, [pc, #392]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	061b      	lsls	r3, r3, #24
 8005872:	495f      	ldr	r1, [pc, #380]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 8005874:	4313      	orrs	r3, r2
 8005876:	604b      	str	r3, [r1, #4]
 8005878:	e018      	b.n	80058ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800587a:	4b5d      	ldr	r3, [pc, #372]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a5c      	ldr	r2, [pc, #368]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 8005880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005886:	f7fc fb43 	bl	8001f10 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800588c:	e008      	b.n	80058a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800588e:	f7fc fb3f 	bl	8001f10 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e207      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058a0:	4b53      	ldr	r3, [pc, #332]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1f0      	bne.n	800588e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d03c      	beq.n	8005932 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d01c      	beq.n	80058fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058c0:	4b4b      	ldr	r3, [pc, #300]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 80058c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c6:	4a4a      	ldr	r2, [pc, #296]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d0:	f7fc fb1e 	bl	8001f10 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058d8:	f7fc fb1a 	bl	8001f10 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e1e2      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058ea:	4b41      	ldr	r3, [pc, #260]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 80058ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0ef      	beq.n	80058d8 <HAL_RCC_OscConfig+0x3ec>
 80058f8:	e01b      	b.n	8005932 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058fa:	4b3d      	ldr	r3, [pc, #244]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 80058fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005900:	4a3b      	ldr	r2, [pc, #236]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 8005902:	f023 0301 	bic.w	r3, r3, #1
 8005906:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590a:	f7fc fb01 	bl	8001f10 <HAL_GetTick>
 800590e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005910:	e008      	b.n	8005924 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005912:	f7fc fafd 	bl	8001f10 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b02      	cmp	r3, #2
 800591e:	d901      	bls.n	8005924 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e1c5      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005924:	4b32      	ldr	r3, [pc, #200]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 8005926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1ef      	bne.n	8005912 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 80a6 	beq.w	8005a8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005940:	2300      	movs	r3, #0
 8005942:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005944:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 8005946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10d      	bne.n	800596c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005950:	4b27      	ldr	r3, [pc, #156]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 8005952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005954:	4a26      	ldr	r2, [pc, #152]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 8005956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800595a:	6593      	str	r3, [r2, #88]	; 0x58
 800595c:	4b24      	ldr	r3, [pc, #144]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 800595e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005964:	60bb      	str	r3, [r7, #8]
 8005966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005968:	2301      	movs	r3, #1
 800596a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800596c:	4b21      	ldr	r3, [pc, #132]	; (80059f4 <HAL_RCC_OscConfig+0x508>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005974:	2b00      	cmp	r3, #0
 8005976:	d118      	bne.n	80059aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005978:	4b1e      	ldr	r3, [pc, #120]	; (80059f4 <HAL_RCC_OscConfig+0x508>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1d      	ldr	r2, [pc, #116]	; (80059f4 <HAL_RCC_OscConfig+0x508>)
 800597e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005982:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005984:	f7fc fac4 	bl	8001f10 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800598c:	f7fc fac0 	bl	8001f10 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e188      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800599e:	4b15      	ldr	r3, [pc, #84]	; (80059f4 <HAL_RCC_OscConfig+0x508>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d108      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4d8>
 80059b2:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 80059b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b8:	4a0d      	ldr	r2, [pc, #52]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 80059ba:	f043 0301 	orr.w	r3, r3, #1
 80059be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059c2:	e029      	b.n	8005a18 <HAL_RCC_OscConfig+0x52c>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	2b05      	cmp	r3, #5
 80059ca:	d115      	bne.n	80059f8 <HAL_RCC_OscConfig+0x50c>
 80059cc:	4b08      	ldr	r3, [pc, #32]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d2:	4a07      	ldr	r2, [pc, #28]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 80059d4:	f043 0304 	orr.w	r3, r3, #4
 80059d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 80059de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e2:	4a03      	ldr	r2, [pc, #12]	; (80059f0 <HAL_RCC_OscConfig+0x504>)
 80059e4:	f043 0301 	orr.w	r3, r3, #1
 80059e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059ec:	e014      	b.n	8005a18 <HAL_RCC_OscConfig+0x52c>
 80059ee:	bf00      	nop
 80059f0:	40021000 	.word	0x40021000
 80059f4:	40007000 	.word	0x40007000
 80059f8:	4b91      	ldr	r3, [pc, #580]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 80059fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fe:	4a90      	ldr	r2, [pc, #576]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005a00:	f023 0301 	bic.w	r3, r3, #1
 8005a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a08:	4b8d      	ldr	r3, [pc, #564]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0e:	4a8c      	ldr	r2, [pc, #560]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005a10:	f023 0304 	bic.w	r3, r3, #4
 8005a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d016      	beq.n	8005a4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a20:	f7fc fa76 	bl	8001f10 <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a26:	e00a      	b.n	8005a3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a28:	f7fc fa72 	bl	8001f10 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e138      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a3e:	4b80      	ldr	r3, [pc, #512]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0ed      	beq.n	8005a28 <HAL_RCC_OscConfig+0x53c>
 8005a4c:	e015      	b.n	8005a7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4e:	f7fc fa5f 	bl	8001f10 <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a54:	e00a      	b.n	8005a6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a56:	f7fc fa5b 	bl	8001f10 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e121      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a6c:	4b74      	ldr	r3, [pc, #464]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1ed      	bne.n	8005a56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a7a:	7ffb      	ldrb	r3, [r7, #31]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d105      	bne.n	8005a8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a80:	4b6f      	ldr	r3, [pc, #444]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a84:	4a6e      	ldr	r2, [pc, #440]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a8a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 810c 	beq.w	8005cae <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	f040 80d4 	bne.w	8005c48 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005aa0:	4b67      	ldr	r3, [pc, #412]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f003 0203 	and.w	r2, r3, #3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d130      	bne.n	8005b16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d127      	bne.n	8005b16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d11f      	bne.n	8005b16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ae0:	2a07      	cmp	r2, #7
 8005ae2:	bf14      	ite	ne
 8005ae4:	2201      	movne	r2, #1
 8005ae6:	2200      	moveq	r2, #0
 8005ae8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d113      	bne.n	8005b16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af8:	085b      	lsrs	r3, r3, #1
 8005afa:	3b01      	subs	r3, #1
 8005afc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d109      	bne.n	8005b16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d06e      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2b0c      	cmp	r3, #12
 8005b1a:	d069      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b1c:	4b48      	ldr	r3, [pc, #288]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d105      	bne.n	8005b34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005b28:	4b45      	ldr	r3, [pc, #276]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e0bb      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b38:	4b41      	ldr	r3, [pc, #260]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a40      	ldr	r2, [pc, #256]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b44:	f7fc f9e4 	bl	8001f10 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b4c:	f7fc f9e0 	bl	8001f10 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e0a8      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b5e:	4b38      	ldr	r3, [pc, #224]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1f0      	bne.n	8005b4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b6a:	4b35      	ldr	r3, [pc, #212]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	4b35      	ldr	r3, [pc, #212]	; (8005c44 <HAL_RCC_OscConfig+0x758>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b7a:	3a01      	subs	r2, #1
 8005b7c:	0112      	lsls	r2, r2, #4
 8005b7e:	4311      	orrs	r1, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b84:	0212      	lsls	r2, r2, #8
 8005b86:	4311      	orrs	r1, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b8c:	0852      	lsrs	r2, r2, #1
 8005b8e:	3a01      	subs	r2, #1
 8005b90:	0552      	lsls	r2, r2, #21
 8005b92:	4311      	orrs	r1, r2
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b98:	0852      	lsrs	r2, r2, #1
 8005b9a:	3a01      	subs	r2, #1
 8005b9c:	0652      	lsls	r2, r2, #25
 8005b9e:	4311      	orrs	r1, r2
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ba4:	0912      	lsrs	r2, r2, #4
 8005ba6:	0452      	lsls	r2, r2, #17
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	4925      	ldr	r1, [pc, #148]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005bb0:	4b23      	ldr	r3, [pc, #140]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bbc:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	4a1f      	ldr	r2, [pc, #124]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bc8:	f7fc f9a2 	bl	8001f10 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd0:	f7fc f99e 	bl	8001f10 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e066      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005be2:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bee:	e05e      	b.n	8005cae <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e05d      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf4:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d156      	bne.n	8005cae <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c00:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a0e      	ldr	r2, [pc, #56]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c0c:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	4a0b      	ldr	r2, [pc, #44]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c18:	f7fc f97a 	bl	8001f10 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c20:	f7fc f976 	bl	8001f10 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e03e      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c32:	4b03      	ldr	r3, [pc, #12]	; (8005c40 <HAL_RCC_OscConfig+0x754>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0f0      	beq.n	8005c20 <HAL_RCC_OscConfig+0x734>
 8005c3e:	e036      	b.n	8005cae <HAL_RCC_OscConfig+0x7c2>
 8005c40:	40021000 	.word	0x40021000
 8005c44:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b0c      	cmp	r3, #12
 8005c4c:	d02d      	beq.n	8005caa <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4e:	4b1a      	ldr	r3, [pc, #104]	; (8005cb8 <HAL_RCC_OscConfig+0x7cc>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a19      	ldr	r2, [pc, #100]	; (8005cb8 <HAL_RCC_OscConfig+0x7cc>)
 8005c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c58:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005c5a:	4b17      	ldr	r3, [pc, #92]	; (8005cb8 <HAL_RCC_OscConfig+0x7cc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d105      	bne.n	8005c72 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005c66:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <HAL_RCC_OscConfig+0x7cc>)
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	4a13      	ldr	r2, [pc, #76]	; (8005cb8 <HAL_RCC_OscConfig+0x7cc>)
 8005c6c:	f023 0303 	bic.w	r3, r3, #3
 8005c70:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c72:	4b11      	ldr	r3, [pc, #68]	; (8005cb8 <HAL_RCC_OscConfig+0x7cc>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	4a10      	ldr	r2, [pc, #64]	; (8005cb8 <HAL_RCC_OscConfig+0x7cc>)
 8005c78:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c80:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c82:	f7fc f945 	bl	8001f10 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c8a:	f7fc f941 	bl	8001f10 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e009      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c9c:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <HAL_RCC_OscConfig+0x7cc>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1f0      	bne.n	8005c8a <HAL_RCC_OscConfig+0x79e>
 8005ca8:	e001      	b.n	8005cae <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e000      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3720      	adds	r7, #32
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40021000 	.word	0x40021000

08005cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0c8      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cd0:	4b66      	ldr	r3, [pc, #408]	; (8005e6c <HAL_RCC_ClockConfig+0x1b0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d910      	bls.n	8005d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cde:	4b63      	ldr	r3, [pc, #396]	; (8005e6c <HAL_RCC_ClockConfig+0x1b0>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f023 0207 	bic.w	r2, r3, #7
 8005ce6:	4961      	ldr	r1, [pc, #388]	; (8005e6c <HAL_RCC_ClockConfig+0x1b0>)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cee:	4b5f      	ldr	r3, [pc, #380]	; (8005e6c <HAL_RCC_ClockConfig+0x1b0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d001      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e0b0      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d04c      	beq.n	8005da6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d107      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d14:	4b56      	ldr	r3, [pc, #344]	; (8005e70 <HAL_RCC_ClockConfig+0x1b4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d121      	bne.n	8005d64 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e09e      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d107      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d2c:	4b50      	ldr	r3, [pc, #320]	; (8005e70 <HAL_RCC_ClockConfig+0x1b4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d115      	bne.n	8005d64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e092      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d107      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d44:	4b4a      	ldr	r3, [pc, #296]	; (8005e70 <HAL_RCC_ClockConfig+0x1b4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e086      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d54:	4b46      	ldr	r3, [pc, #280]	; (8005e70 <HAL_RCC_ClockConfig+0x1b4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e07e      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d64:	4b42      	ldr	r3, [pc, #264]	; (8005e70 <HAL_RCC_ClockConfig+0x1b4>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f023 0203 	bic.w	r2, r3, #3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	493f      	ldr	r1, [pc, #252]	; (8005e70 <HAL_RCC_ClockConfig+0x1b4>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d76:	f7fc f8cb 	bl	8001f10 <HAL_GetTick>
 8005d7a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d7c:	e00a      	b.n	8005d94 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d7e:	f7fc f8c7 	bl	8001f10 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e066      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d94:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <HAL_RCC_ClockConfig+0x1b4>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 020c 	and.w	r2, r3, #12
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d1eb      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d008      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db2:	4b2f      	ldr	r3, [pc, #188]	; (8005e70 <HAL_RCC_ClockConfig+0x1b4>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	492c      	ldr	r1, [pc, #176]	; (8005e70 <HAL_RCC_ClockConfig+0x1b4>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc4:	4b29      	ldr	r3, [pc, #164]	; (8005e6c <HAL_RCC_ClockConfig+0x1b0>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d210      	bcs.n	8005df4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd2:	4b26      	ldr	r3, [pc, #152]	; (8005e6c <HAL_RCC_ClockConfig+0x1b0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f023 0207 	bic.w	r2, r3, #7
 8005dda:	4924      	ldr	r1, [pc, #144]	; (8005e6c <HAL_RCC_ClockConfig+0x1b0>)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de2:	4b22      	ldr	r3, [pc, #136]	; (8005e6c <HAL_RCC_ClockConfig+0x1b0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d001      	beq.n	8005df4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e036      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e00:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <HAL_RCC_ClockConfig+0x1b4>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	4918      	ldr	r1, [pc, #96]	; (8005e70 <HAL_RCC_ClockConfig+0x1b4>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e1e:	4b14      	ldr	r3, [pc, #80]	; (8005e70 <HAL_RCC_ClockConfig+0x1b4>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	4910      	ldr	r1, [pc, #64]	; (8005e70 <HAL_RCC_ClockConfig+0x1b4>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e32:	f000 f825 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8005e36:	4602      	mov	r2, r0
 8005e38:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <HAL_RCC_ClockConfig+0x1b4>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	091b      	lsrs	r3, r3, #4
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	490c      	ldr	r1, [pc, #48]	; (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005e44:	5ccb      	ldrb	r3, [r1, r3]
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4e:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e52:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <HAL_RCC_ClockConfig+0x1c0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fc f80a 	bl	8001e70 <HAL_InitTick>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e60:	7afb      	ldrb	r3, [r7, #11]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40022000 	.word	0x40022000
 8005e70:	40021000 	.word	0x40021000
 8005e74:	0800d040 	.word	0x0800d040
 8005e78:	20000040 	.word	0x20000040
 8005e7c:	20000044 	.word	0x20000044

08005e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	; 0x24
 8005e84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e8e:	4b3e      	ldr	r3, [pc, #248]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
 8005e96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e98:	4b3b      	ldr	r3, [pc, #236]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b0c      	cmp	r3, #12
 8005eac:	d121      	bne.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d11e      	bne.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005eb4:	4b34      	ldr	r3, [pc, #208]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d107      	bne.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ec0:	4b31      	ldr	r3, [pc, #196]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec6:	0a1b      	lsrs	r3, r3, #8
 8005ec8:	f003 030f 	and.w	r3, r3, #15
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	e005      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	091b      	lsrs	r3, r3, #4
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005edc:	4a2b      	ldr	r2, [pc, #172]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10d      	bne.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ef0:	e00a      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d102      	bne.n	8005efe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ef8:	4b25      	ldr	r3, [pc, #148]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8005efa:	61bb      	str	r3, [r7, #24]
 8005efc:	e004      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d101      	bne.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f04:	4b23      	ldr	r3, [pc, #140]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b0c      	cmp	r3, #12
 8005f0c:	d134      	bne.n	8005f78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f0e:	4b1e      	ldr	r3, [pc, #120]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d003      	beq.n	8005f26 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d003      	beq.n	8005f2c <HAL_RCC_GetSysClockFreq+0xac>
 8005f24:	e005      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f26:	4b1a      	ldr	r3, [pc, #104]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f28:	617b      	str	r3, [r7, #20]
      break;
 8005f2a:	e005      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f2c:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f2e:	617b      	str	r3, [r7, #20]
      break;
 8005f30:	e002      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	617b      	str	r3, [r7, #20]
      break;
 8005f36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f38:	4b13      	ldr	r3, [pc, #76]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	3301      	adds	r3, #1
 8005f44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f46:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	0a1b      	lsrs	r3, r3, #8
 8005f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	fb03 f202 	mul.w	r2, r3, r2
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f5e:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	0e5b      	lsrs	r3, r3, #25
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	3301      	adds	r3, #1
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f78:	69bb      	ldr	r3, [r7, #24]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3724      	adds	r7, #36	; 0x24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	0800d058 	.word	0x0800d058
 8005f90:	00f42400 	.word	0x00f42400
 8005f94:	007a1200 	.word	0x007a1200

08005f98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f9c:	4b03      	ldr	r3, [pc, #12]	; (8005fac <HAL_RCC_GetHCLKFreq+0x14>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000040 	.word	0x20000040

08005fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fb4:	f7ff fff0 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	0a1b      	lsrs	r3, r3, #8
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	4904      	ldr	r1, [pc, #16]	; (8005fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fc6:	5ccb      	ldrb	r3, [r1, r3]
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	0800d050 	.word	0x0800d050

08005fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fe0:	f7ff ffda 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	4b06      	ldr	r3, [pc, #24]	; (8006000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	0adb      	lsrs	r3, r3, #11
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	4904      	ldr	r1, [pc, #16]	; (8006004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ff2:	5ccb      	ldrb	r3, [r1, r3]
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40021000 	.word	0x40021000
 8006004:	0800d050 	.word	0x0800d050

08006008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006010:	2300      	movs	r3, #0
 8006012:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006014:	4b2a      	ldr	r3, [pc, #168]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006020:	f7fe fd14 	bl	8004a4c <HAL_PWREx_GetVoltageRange>
 8006024:	6178      	str	r0, [r7, #20]
 8006026:	e014      	b.n	8006052 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006028:	4b25      	ldr	r3, [pc, #148]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800602a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602c:	4a24      	ldr	r2, [pc, #144]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800602e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006032:	6593      	str	r3, [r2, #88]	; 0x58
 8006034:	4b22      	ldr	r3, [pc, #136]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006040:	f7fe fd04 	bl	8004a4c <HAL_PWREx_GetVoltageRange>
 8006044:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006046:	4b1e      	ldr	r3, [pc, #120]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	4a1d      	ldr	r2, [pc, #116]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800604c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006050:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006058:	d10b      	bne.n	8006072 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b80      	cmp	r3, #128	; 0x80
 800605e:	d919      	bls.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2ba0      	cmp	r3, #160	; 0xa0
 8006064:	d902      	bls.n	800606c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006066:	2302      	movs	r3, #2
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	e013      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800606c:	2301      	movs	r3, #1
 800606e:	613b      	str	r3, [r7, #16]
 8006070:	e010      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b80      	cmp	r3, #128	; 0x80
 8006076:	d902      	bls.n	800607e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006078:	2303      	movs	r3, #3
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	e00a      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b80      	cmp	r3, #128	; 0x80
 8006082:	d102      	bne.n	800608a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006084:	2302      	movs	r3, #2
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	e004      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b70      	cmp	r3, #112	; 0x70
 800608e:	d101      	bne.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006090:	2301      	movs	r3, #1
 8006092:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006094:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f023 0207 	bic.w	r2, r3, #7
 800609c:	4909      	ldr	r1, [pc, #36]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060a4:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d001      	beq.n	80060b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000
 80060c4:	40022000 	.word	0x40022000

080060c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060d0:	2300      	movs	r3, #0
 80060d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060d4:	2300      	movs	r3, #0
 80060d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d041      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060ec:	d02a      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060f2:	d824      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060f8:	d008      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060fe:	d81e      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006108:	d010      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800610a:	e018      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800610c:	4b86      	ldr	r3, [pc, #536]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	4a85      	ldr	r2, [pc, #532]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006116:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006118:	e015      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3304      	adds	r3, #4
 800611e:	2100      	movs	r1, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f001 f839 	bl	8007198 <RCCEx_PLLSAI1_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800612a:	e00c      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3320      	adds	r3, #32
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f001 f924 	bl	8007380 <RCCEx_PLLSAI2_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800613c:	e003      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	74fb      	strb	r3, [r7, #19]
      break;
 8006142:	e000      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006146:	7cfb      	ldrb	r3, [r7, #19]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10b      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800614c:	4b76      	ldr	r3, [pc, #472]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006152:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800615a:	4973      	ldr	r1, [pc, #460]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006162:	e001      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006164:	7cfb      	ldrb	r3, [r7, #19]
 8006166:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d041      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006178:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800617c:	d02a      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800617e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006182:	d824      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006184:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006188:	d008      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800618a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800618e:	d81e      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006198:	d010      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800619a:	e018      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800619c:	4b62      	ldr	r3, [pc, #392]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4a61      	ldr	r2, [pc, #388]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061a8:	e015      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3304      	adds	r3, #4
 80061ae:	2100      	movs	r1, #0
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fff1 	bl	8007198 <RCCEx_PLLSAI1_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061ba:	e00c      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3320      	adds	r3, #32
 80061c0:	2100      	movs	r1, #0
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 f8dc 	bl	8007380 <RCCEx_PLLSAI2_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061cc:	e003      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	74fb      	strb	r3, [r7, #19]
      break;
 80061d2:	e000      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80061d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d6:	7cfb      	ldrb	r3, [r7, #19]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10b      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061dc:	4b52      	ldr	r3, [pc, #328]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ea:	494f      	ldr	r1, [pc, #316]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061f2:	e001      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f4:	7cfb      	ldrb	r3, [r7, #19]
 80061f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 80a0 	beq.w	8006346 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006206:	2300      	movs	r3, #0
 8006208:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800620a:	4b47      	ldr	r3, [pc, #284]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800620c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800621a:	2300      	movs	r3, #0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00d      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006220:	4b41      	ldr	r3, [pc, #260]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006224:	4a40      	ldr	r2, [pc, #256]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622a:	6593      	str	r3, [r2, #88]	; 0x58
 800622c:	4b3e      	ldr	r3, [pc, #248]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006238:	2301      	movs	r3, #1
 800623a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800623c:	4b3b      	ldr	r3, [pc, #236]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a3a      	ldr	r2, [pc, #232]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006246:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006248:	f7fb fe62 	bl	8001f10 <HAL_GetTick>
 800624c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800624e:	e009      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006250:	f7fb fe5e 	bl	8001f10 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d902      	bls.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	74fb      	strb	r3, [r7, #19]
        break;
 8006262:	e005      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006264:	4b31      	ldr	r3, [pc, #196]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0ef      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006270:	7cfb      	ldrb	r3, [r7, #19]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d15c      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006276:	4b2c      	ldr	r3, [pc, #176]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006280:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01f      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	429a      	cmp	r2, r3
 8006292:	d019      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006294:	4b24      	ldr	r3, [pc, #144]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062a0:	4b21      	ldr	r3, [pc, #132]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	4a20      	ldr	r2, [pc, #128]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062b0:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	4a1c      	ldr	r2, [pc, #112]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062c0:	4a19      	ldr	r2, [pc, #100]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d016      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d2:	f7fb fe1d 	bl	8001f10 <HAL_GetTick>
 80062d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062d8:	e00b      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062da:	f7fb fe19 	bl	8001f10 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d902      	bls.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	74fb      	strb	r3, [r7, #19]
            break;
 80062f0:	e006      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f2:	4b0d      	ldr	r3, [pc, #52]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0ec      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006300:	7cfb      	ldrb	r3, [r7, #19]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10c      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006306:	4b08      	ldr	r3, [pc, #32]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006316:	4904      	ldr	r1, [pc, #16]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006318:	4313      	orrs	r3, r2
 800631a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800631e:	e009      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006320:	7cfb      	ldrb	r3, [r7, #19]
 8006322:	74bb      	strb	r3, [r7, #18]
 8006324:	e006      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006326:	bf00      	nop
 8006328:	40021000 	.word	0x40021000
 800632c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	7cfb      	ldrb	r3, [r7, #19]
 8006332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006334:	7c7b      	ldrb	r3, [r7, #17]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d105      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800633a:	4b9e      	ldr	r3, [pc, #632]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800633c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633e:	4a9d      	ldr	r2, [pc, #628]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006344:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006352:	4b98      	ldr	r3, [pc, #608]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006358:	f023 0203 	bic.w	r2, r3, #3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	4994      	ldr	r1, [pc, #592]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006374:	4b8f      	ldr	r3, [pc, #572]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637a:	f023 020c 	bic.w	r2, r3, #12
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	498c      	ldr	r1, [pc, #560]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006396:	4b87      	ldr	r3, [pc, #540]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	4983      	ldr	r1, [pc, #524]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063b8:	4b7e      	ldr	r3, [pc, #504]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	497b      	ldr	r1, [pc, #492]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0310 	and.w	r3, r3, #16
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063da:	4b76      	ldr	r3, [pc, #472]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e8:	4972      	ldr	r1, [pc, #456]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063fc:	4b6d      	ldr	r3, [pc, #436]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006402:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800640a:	496a      	ldr	r1, [pc, #424]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800641e:	4b65      	ldr	r3, [pc, #404]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006424:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642c:	4961      	ldr	r1, [pc, #388]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006440:	4b5c      	ldr	r3, [pc, #368]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644e:	4959      	ldr	r1, [pc, #356]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006462:	4b54      	ldr	r3, [pc, #336]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006468:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006470:	4950      	ldr	r1, [pc, #320]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006484:	4b4b      	ldr	r3, [pc, #300]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006492:	4948      	ldr	r1, [pc, #288]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064a6:	4b43      	ldr	r3, [pc, #268]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b4:	493f      	ldr	r1, [pc, #252]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d028      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064c8:	4b3a      	ldr	r3, [pc, #232]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d6:	4937      	ldr	r1, [pc, #220]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064e6:	d106      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064e8:	4b32      	ldr	r3, [pc, #200]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4a31      	ldr	r2, [pc, #196]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064f2:	60d3      	str	r3, [r2, #12]
 80064f4:	e011      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064fe:	d10c      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3304      	adds	r3, #4
 8006504:	2101      	movs	r1, #1
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fe46 	bl	8007198 <RCCEx_PLLSAI1_Config>
 800650c:	4603      	mov	r3, r0
 800650e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006510:	7cfb      	ldrb	r3, [r7, #19]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006516:	7cfb      	ldrb	r3, [r7, #19]
 8006518:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d028      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006526:	4b23      	ldr	r3, [pc, #140]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006534:	491f      	ldr	r1, [pc, #124]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006544:	d106      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006546:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	4a1a      	ldr	r2, [pc, #104]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800654c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006550:	60d3      	str	r3, [r2, #12]
 8006552:	e011      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800655c:	d10c      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3304      	adds	r3, #4
 8006562:	2101      	movs	r1, #1
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fe17 	bl	8007198 <RCCEx_PLLSAI1_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800656e:	7cfb      	ldrb	r3, [r7, #19]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006574:	7cfb      	ldrb	r3, [r7, #19]
 8006576:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d02b      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006584:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006592:	4908      	ldr	r1, [pc, #32]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800659e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065a2:	d109      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065a4:	4b03      	ldr	r3, [pc, #12]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	4a02      	ldr	r2, [pc, #8]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065ae:	60d3      	str	r3, [r2, #12]
 80065b0:	e014      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80065b2:	bf00      	nop
 80065b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065c0:	d10c      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	2101      	movs	r1, #1
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fde5 	bl	8007198 <RCCEx_PLLSAI1_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065d2:	7cfb      	ldrb	r3, [r7, #19]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80065d8:	7cfb      	ldrb	r3, [r7, #19]
 80065da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d02f      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065e8:	4b2b      	ldr	r3, [pc, #172]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065f6:	4928      	ldr	r1, [pc, #160]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006606:	d10d      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3304      	adds	r3, #4
 800660c:	2102      	movs	r1, #2
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fdc2 	bl	8007198 <RCCEx_PLLSAI1_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006618:	7cfb      	ldrb	r3, [r7, #19]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d014      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800661e:	7cfb      	ldrb	r3, [r7, #19]
 8006620:	74bb      	strb	r3, [r7, #18]
 8006622:	e011      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800662c:	d10c      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3320      	adds	r3, #32
 8006632:	2102      	movs	r1, #2
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fea3 	bl	8007380 <RCCEx_PLLSAI2_Config>
 800663a:	4603      	mov	r3, r0
 800663c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800663e:	7cfb      	ldrb	r3, [r7, #19]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006644:	7cfb      	ldrb	r3, [r7, #19]
 8006646:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006654:	4b10      	ldr	r3, [pc, #64]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006662:	490d      	ldr	r1, [pc, #52]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006664:	4313      	orrs	r3, r2
 8006666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00b      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006676:	4b08      	ldr	r3, [pc, #32]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006686:	4904      	ldr	r1, [pc, #16]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006688:	4313      	orrs	r3, r2
 800668a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800668e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40021000 	.word	0x40021000

0800669c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066ae:	d13e      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80066b0:	4bb2      	ldr	r3, [pc, #712]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ba:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066c2:	d028      	beq.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ca:	f200 8542 	bhi.w	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d4:	d005      	beq.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066dc:	d00e      	beq.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80066de:	f000 bd38 	b.w	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80066e2:	4ba6      	ldr	r3, [pc, #664]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80066e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	f040 8532 	bne.w	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80066f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066f6:	61fb      	str	r3, [r7, #28]
      break;
 80066f8:	f000 bd2d 	b.w	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80066fc:	4b9f      	ldr	r3, [pc, #636]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80066fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b02      	cmp	r3, #2
 8006708:	f040 8527 	bne.w	800715a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 800670c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006710:	61fb      	str	r3, [r7, #28]
      break;
 8006712:	f000 bd22 	b.w	800715a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006716:	4b99      	ldr	r3, [pc, #612]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006722:	f040 851c 	bne.w	800715e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8006726:	4b96      	ldr	r3, [pc, #600]	; (8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8006728:	61fb      	str	r3, [r7, #28]
      break;
 800672a:	f000 bd18 	b.w	800715e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800672e:	4b93      	ldr	r3, [pc, #588]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2b03      	cmp	r3, #3
 800673c:	d036      	beq.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b03      	cmp	r3, #3
 8006742:	d840      	bhi.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d003      	beq.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d020      	beq.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006750:	e039      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006752:	4b8a      	ldr	r3, [pc, #552]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b02      	cmp	r3, #2
 800675c:	d116      	bne.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800675e:	4b87      	ldr	r3, [pc, #540]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0308 	and.w	r3, r3, #8
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800676a:	4b84      	ldr	r3, [pc, #528]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	091b      	lsrs	r3, r3, #4
 8006770:	f003 030f 	and.w	r3, r3, #15
 8006774:	e005      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006776:	4b81      	ldr	r3, [pc, #516]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800677c:	0a1b      	lsrs	r3, r3, #8
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	4a80      	ldr	r2, [pc, #512]	; (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006788:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800678a:	e01f      	b.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	61bb      	str	r3, [r7, #24]
      break;
 8006790:	e01c      	b.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006792:	4b7a      	ldr	r3, [pc, #488]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800679a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679e:	d102      	bne.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80067a0:	4b79      	ldr	r3, [pc, #484]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80067a2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80067a4:	e012      	b.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61bb      	str	r3, [r7, #24]
      break;
 80067aa:	e00f      	b.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067ac:	4b73      	ldr	r3, [pc, #460]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b8:	d102      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80067ba:	4b74      	ldr	r3, [pc, #464]	; (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80067bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80067be:	e005      	b.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61bb      	str	r3, [r7, #24]
      break;
 80067c4:	e002      	b.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61bb      	str	r3, [r7, #24]
      break;
 80067ca:	bf00      	nop
    }

    switch(PeriphClk)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067d2:	f000 80dd 	beq.w	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067dc:	f200 84c1 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067e6:	f000 80d3 	beq.w	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067f0:	f200 84b7 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067fa:	f000 835f 	beq.w	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006804:	f200 84ad 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800680e:	f000 847e 	beq.w	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006818:	f200 84a3 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006822:	f000 82cd 	beq.w	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800682c:	f200 8499 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006836:	f000 80ab 	beq.w	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006840:	f200 848f 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684a:	f000 8090 	beq.w	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006854:	f200 8485 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800685e:	d07f      	beq.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006866:	f200 847c 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006870:	f000 8403 	beq.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687a:	f200 8472 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006884:	f000 83af 	beq.w	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800688e:	f200 8468 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006898:	f000 8379 	beq.w	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a2:	f200 845e 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b80      	cmp	r3, #128	; 0x80
 80068aa:	f000 8344 	beq.w	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b80      	cmp	r3, #128	; 0x80
 80068b2:	f200 8456 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b20      	cmp	r3, #32
 80068ba:	d84b      	bhi.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 844f 	beq.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	2b1f      	cmp	r3, #31
 80068ca:	f200 844a 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80068ce:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	08006abd 	.word	0x08006abd
 80068d8:	08006b2b 	.word	0x08006b2b
 80068dc:	08007163 	.word	0x08007163
 80068e0:	08006bbf 	.word	0x08006bbf
 80068e4:	08007163 	.word	0x08007163
 80068e8:	08007163 	.word	0x08007163
 80068ec:	08007163 	.word	0x08007163
 80068f0:	08006c45 	.word	0x08006c45
 80068f4:	08007163 	.word	0x08007163
 80068f8:	08007163 	.word	0x08007163
 80068fc:	08007163 	.word	0x08007163
 8006900:	08007163 	.word	0x08007163
 8006904:	08007163 	.word	0x08007163
 8006908:	08007163 	.word	0x08007163
 800690c:	08007163 	.word	0x08007163
 8006910:	08006cbd 	.word	0x08006cbd
 8006914:	08007163 	.word	0x08007163
 8006918:	08007163 	.word	0x08007163
 800691c:	08007163 	.word	0x08007163
 8006920:	08007163 	.word	0x08007163
 8006924:	08007163 	.word	0x08007163
 8006928:	08007163 	.word	0x08007163
 800692c:	08007163 	.word	0x08007163
 8006930:	08007163 	.word	0x08007163
 8006934:	08007163 	.word	0x08007163
 8006938:	08007163 	.word	0x08007163
 800693c:	08007163 	.word	0x08007163
 8006940:	08007163 	.word	0x08007163
 8006944:	08007163 	.word	0x08007163
 8006948:	08007163 	.word	0x08007163
 800694c:	08007163 	.word	0x08007163
 8006950:	08006d3f 	.word	0x08006d3f
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b40      	cmp	r3, #64	; 0x40
 8006958:	f000 82c1 	beq.w	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800695c:	f000 bc01 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006960:	69b9      	ldr	r1, [r7, #24]
 8006962:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006966:	f000 fde9 	bl	800753c <RCCEx_GetSAIxPeriphCLKFreq>
 800696a:	61f8      	str	r0, [r7, #28]
      break;
 800696c:	e3fa      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800696e:	69b9      	ldr	r1, [r7, #24]
 8006970:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006974:	f000 fde2 	bl	800753c <RCCEx_GetSAIxPeriphCLKFreq>
 8006978:	61f8      	str	r0, [r7, #28]
      break;
 800697a:	e3f3      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800697c:	40021000 	.word	0x40021000
 8006980:	0003d090 	.word	0x0003d090
 8006984:	0800d058 	.word	0x0800d058
 8006988:	00f42400 	.word	0x00f42400
 800698c:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006990:	4ba9      	ldr	r3, [pc, #676]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006996:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800699a:	613b      	str	r3, [r7, #16]
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80069a2:	d00c      	beq.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80069aa:	d87f      	bhi.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069b2:	d04e      	beq.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069ba:	d01d      	beq.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80069bc:	e076      	b.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80069be:	4b9e      	ldr	r3, [pc, #632]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d172      	bne.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80069ca:	4b9b      	ldr	r3, [pc, #620]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d005      	beq.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80069d6:	4b98      	ldr	r3, [pc, #608]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	091b      	lsrs	r3, r3, #4
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	e005      	b.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80069e2:	4b95      	ldr	r3, [pc, #596]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80069e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069e8:	0a1b      	lsrs	r3, r3, #8
 80069ea:	f003 030f 	and.w	r3, r3, #15
 80069ee:	4a93      	ldr	r2, [pc, #588]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80069f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f4:	61fb      	str	r3, [r7, #28]
          break;
 80069f6:	e05b      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80069f8:	4b8f      	ldr	r3, [pc, #572]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a04:	d156      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006a06:	4b8c      	ldr	r3, [pc, #560]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a12:	d14f      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006a14:	4b88      	ldr	r3, [pc, #544]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	0a1b      	lsrs	r3, r3, #8
 8006a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	fb03 f202 	mul.w	r2, r3, r2
 8006a28:	4b83      	ldr	r3, [pc, #524]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	3301      	adds	r3, #1
 8006a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a38:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006a3a:	4b7f      	ldr	r3, [pc, #508]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	0d5b      	lsrs	r3, r3, #21
 8006a40:	f003 0303 	and.w	r3, r3, #3
 8006a44:	3301      	adds	r3, #1
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4e:	61fb      	str	r3, [r7, #28]
          break;
 8006a50:	e030      	b.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006a52:	4b79      	ldr	r3, [pc, #484]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a5e:	d12b      	bne.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006a60:	4b75      	ldr	r3, [pc, #468]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a6c:	d124      	bne.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006a6e:	4b72      	ldr	r3, [pc, #456]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	0a1b      	lsrs	r3, r3, #8
 8006a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a78:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	fb03 f202 	mul.w	r2, r3, r2
 8006a82:	4b6d      	ldr	r3, [pc, #436]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	091b      	lsrs	r3, r3, #4
 8006a88:	f003 0307 	and.w	r3, r3, #7
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a92:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006a94:	4b68      	ldr	r3, [pc, #416]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	0d5b      	lsrs	r3, r3, #21
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa8:	61fb      	str	r3, [r7, #28]
          break;
 8006aaa:	e005      	b.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8006aac:	bf00      	nop
 8006aae:	e359      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006ab0:	bf00      	nop
 8006ab2:	e357      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006ab4:	bf00      	nop
 8006ab6:	e355      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006ab8:	bf00      	nop
        break;
 8006aba:	e353      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006abc:	4b5e      	ldr	r3, [pc, #376]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	613b      	str	r3, [r7, #16]
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d827      	bhi.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8006ace:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006ae5 	.word	0x08006ae5
 8006ad8:	08006aed 	.word	0x08006aed
 8006adc:	08006af5 	.word	0x08006af5
 8006ae0:	08006b09 	.word	0x08006b09
          frequency = HAL_RCC_GetPCLK2Freq();
 8006ae4:	f7ff fa7a 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 8006ae8:	61f8      	str	r0, [r7, #28]
          break;
 8006aea:	e01d      	b.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006aec:	f7ff f9c8 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006af0:	61f8      	str	r0, [r7, #28]
          break;
 8006af2:	e019      	b.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006af4:	4b50      	ldr	r3, [pc, #320]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b00:	d10f      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8006b02:	4b4f      	ldr	r3, [pc, #316]	; (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006b04:	61fb      	str	r3, [r7, #28]
          break;
 8006b06:	e00c      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b08:	4b4b      	ldr	r3, [pc, #300]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d107      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8006b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b1a:	61fb      	str	r3, [r7, #28]
          break;
 8006b1c:	e003      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8006b1e:	bf00      	nop
 8006b20:	e320      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006b22:	bf00      	nop
 8006b24:	e31e      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006b26:	bf00      	nop
        break;
 8006b28:	e31c      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006b2a:	4b43      	ldr	r3, [pc, #268]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	f003 030c 	and.w	r3, r3, #12
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b0c      	cmp	r3, #12
 8006b3a:	d83a      	bhi.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006b3c:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8006b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b42:	bf00      	nop
 8006b44:	08006b79 	.word	0x08006b79
 8006b48:	08006bb3 	.word	0x08006bb3
 8006b4c:	08006bb3 	.word	0x08006bb3
 8006b50:	08006bb3 	.word	0x08006bb3
 8006b54:	08006b81 	.word	0x08006b81
 8006b58:	08006bb3 	.word	0x08006bb3
 8006b5c:	08006bb3 	.word	0x08006bb3
 8006b60:	08006bb3 	.word	0x08006bb3
 8006b64:	08006b89 	.word	0x08006b89
 8006b68:	08006bb3 	.word	0x08006bb3
 8006b6c:	08006bb3 	.word	0x08006bb3
 8006b70:	08006bb3 	.word	0x08006bb3
 8006b74:	08006b9d 	.word	0x08006b9d
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b78:	f7ff fa1a 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006b7c:	61f8      	str	r0, [r7, #28]
          break;
 8006b7e:	e01d      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b80:	f7ff f97e 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006b84:	61f8      	str	r0, [r7, #28]
          break;
 8006b86:	e019      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b88:	4b2b      	ldr	r3, [pc, #172]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b94:	d10f      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8006b96:	4b2a      	ldr	r3, [pc, #168]	; (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006b98:	61fb      	str	r3, [r7, #28]
          break;
 8006b9a:	e00c      	b.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b9c:	4b26      	ldr	r3, [pc, #152]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d107      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8006baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bae:	61fb      	str	r3, [r7, #28]
          break;
 8006bb0:	e003      	b.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8006bb2:	bf00      	nop
 8006bb4:	e2d6      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006bb6:	bf00      	nop
 8006bb8:	e2d4      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006bba:	bf00      	nop
        break;
 8006bbc:	e2d2      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006bbe:	4b1e      	ldr	r3, [pc, #120]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b30      	cmp	r3, #48	; 0x30
 8006bce:	d021      	beq.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2b30      	cmp	r3, #48	; 0x30
 8006bd4:	d829      	bhi.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d011      	beq.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d823      	bhi.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b10      	cmp	r3, #16
 8006bec:	d004      	beq.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8006bee:	e01c      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bf0:	f7ff f9de 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006bf4:	61f8      	str	r0, [r7, #28]
          break;
 8006bf6:	e01d      	b.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8006bf8:	f7ff f942 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006bfc:	61f8      	str	r0, [r7, #28]
          break;
 8006bfe:	e019      	b.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c00:	4b0d      	ldr	r3, [pc, #52]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c0c:	d10f      	bne.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8006c0e:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006c10:	61fb      	str	r3, [r7, #28]
          break;
 8006c12:	e00c      	b.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c14:	4b08      	ldr	r3, [pc, #32]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d107      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8006c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c26:	61fb      	str	r3, [r7, #28]
          break;
 8006c28:	e003      	b.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8006c2a:	bf00      	nop
 8006c2c:	e29a      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006c2e:	bf00      	nop
 8006c30:	e298      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006c32:	bf00      	nop
        break;
 8006c34:	e296      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006c36:	bf00      	nop
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	0800d058 	.word	0x0800d058
 8006c40:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006c44:	4b9b      	ldr	r3, [pc, #620]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	2bc0      	cmp	r3, #192	; 0xc0
 8006c54:	d021      	beq.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	2bc0      	cmp	r3, #192	; 0xc0
 8006c5a:	d829      	bhi.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b80      	cmp	r3, #128	; 0x80
 8006c60:	d011      	beq.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b80      	cmp	r3, #128	; 0x80
 8006c66:	d823      	bhi.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	2b40      	cmp	r3, #64	; 0x40
 8006c72:	d004      	beq.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8006c74:	e01c      	b.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c76:	f7ff f99b 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006c7a:	61f8      	str	r0, [r7, #28]
          break;
 8006c7c:	e01d      	b.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c7e:	f7ff f8ff 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006c82:	61f8      	str	r0, [r7, #28]
          break;
 8006c84:	e019      	b.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c86:	4b8b      	ldr	r3, [pc, #556]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c92:	d10f      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8006c94:	4b88      	ldr	r3, [pc, #544]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006c96:	61fb      	str	r3, [r7, #28]
          break;
 8006c98:	e00c      	b.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c9a:	4b86      	ldr	r3, [pc, #536]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d107      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8006ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cac:	61fb      	str	r3, [r7, #28]
          break;
 8006cae:	e003      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8006cb0:	bf00      	nop
 8006cb2:	e257      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006cb4:	bf00      	nop
 8006cb6:	e255      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006cb8:	bf00      	nop
        break;
 8006cba:	e253      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006cbc:	4b7d      	ldr	r3, [pc, #500]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cce:	d025      	beq.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cd6:	d82c      	bhi.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cde:	d013      	beq.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce6:	d824      	bhi.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d004      	beq.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf4:	d004      	beq.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8006cf6:	e01c      	b.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006cf8:	f7ff f95a 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006cfc:	61f8      	str	r0, [r7, #28]
          break;
 8006cfe:	e01d      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d00:	f7ff f8be 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006d04:	61f8      	str	r0, [r7, #28]
          break;
 8006d06:	e019      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d08:	4b6a      	ldr	r3, [pc, #424]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d14:	d10f      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8006d16:	4b68      	ldr	r3, [pc, #416]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006d18:	61fb      	str	r3, [r7, #28]
          break;
 8006d1a:	e00c      	b.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d1c:	4b65      	ldr	r3, [pc, #404]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d107      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8006d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d2e:	61fb      	str	r3, [r7, #28]
          break;
 8006d30:	e003      	b.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8006d32:	bf00      	nop
 8006d34:	e216      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006d36:	bf00      	nop
 8006d38:	e214      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006d3a:	bf00      	nop
        break;
 8006d3c:	e212      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006d3e:	4b5d      	ldr	r3, [pc, #372]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d50:	d025      	beq.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d58:	d82c      	bhi.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d60:	d013      	beq.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d68:	d824      	bhi.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d004      	beq.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d76:	d004      	beq.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8006d78:	e01c      	b.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d7a:	f7ff f919 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006d7e:	61f8      	str	r0, [r7, #28]
          break;
 8006d80:	e01d      	b.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d82:	f7ff f87d 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006d86:	61f8      	str	r0, [r7, #28]
          break;
 8006d88:	e019      	b.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d8a:	4b4a      	ldr	r3, [pc, #296]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d96:	d10f      	bne.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8006d98:	4b47      	ldr	r3, [pc, #284]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006d9a:	61fb      	str	r3, [r7, #28]
          break;
 8006d9c:	e00c      	b.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d9e:	4b45      	ldr	r3, [pc, #276]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d107      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8006dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006db0:	61fb      	str	r3, [r7, #28]
          break;
 8006db2:	e003      	b.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8006db4:	bf00      	nop
 8006db6:	e1d5      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006db8:	bf00      	nop
 8006dba:	e1d3      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006dbc:	bf00      	nop
        break;
 8006dbe:	e1d1      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006dc0:	4b3c      	ldr	r3, [pc, #240]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dca:	613b      	str	r3, [r7, #16]
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dd2:	d00c      	beq.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dda:	d864      	bhi.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006de2:	d008      	beq.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dea:	d030      	beq.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8006dec:	e05b      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006dee:	f7ff f847 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006df2:	61f8      	str	r0, [r7, #28]
          break;
 8006df4:	e05c      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006df6:	4b2f      	ldr	r3, [pc, #188]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e02:	d152      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8006e04:	4b2b      	ldr	r3, [pc, #172]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d04c      	beq.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006e10:	4b28      	ldr	r3, [pc, #160]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	0a1b      	lsrs	r3, r3, #8
 8006e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e1a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	fb03 f202 	mul.w	r2, r3, r2
 8006e24:	4b23      	ldr	r3, [pc, #140]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	091b      	lsrs	r3, r3, #4
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	3301      	adds	r3, #1
 8006e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e34:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006e36:	4b1f      	ldr	r3, [pc, #124]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	0e5b      	lsrs	r3, r3, #25
 8006e3c:	f003 0303 	and.w	r3, r3, #3
 8006e40:	3301      	adds	r3, #1
 8006e42:	005b      	lsls	r3, r3, #1
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4a:	61fb      	str	r3, [r7, #28]
          break;
 8006e4c:	e02d      	b.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8006e4e:	4b19      	ldr	r3, [pc, #100]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e5a:	d128      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8006e5c:	4b15      	ldr	r3, [pc, #84]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d022      	beq.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006e68:	4b12      	ldr	r3, [pc, #72]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	0a1b      	lsrs	r3, r3, #8
 8006e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e72:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	fb03 f202 	mul.w	r2, r3, r2
 8006e7c:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	091b      	lsrs	r3, r3, #4
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	3301      	adds	r3, #1
 8006e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	0e5b      	lsrs	r3, r3, #25
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	3301      	adds	r3, #1
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea2:	61fb      	str	r3, [r7, #28]
          break;
 8006ea4:	e003      	b.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8006ea6:	bf00      	nop
 8006ea8:	e15c      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006eaa:	bf00      	nop
 8006eac:	e15a      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006eae:	bf00      	nop
        break;
 8006eb0:	e158      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006eb2:	bf00      	nop
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006ebc:	4b9d      	ldr	r3, [pc, #628]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ec6:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d103      	bne.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006ece:	f7ff f885 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 8006ed2:	61f8      	str	r0, [r7, #28]
        break;
 8006ed4:	e146      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ed6:	f7fe ffd3 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006eda:	61f8      	str	r0, [r7, #28]
        break;
 8006edc:	e142      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006ede:	4b95      	ldr	r3, [pc, #596]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ee8:	613b      	str	r3, [r7, #16]
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef0:	d013      	beq.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef8:	d819      	bhi.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f06:	d004      	beq.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8006f08:	e011      	b.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f0a:	f7ff f851 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006f0e:	61f8      	str	r0, [r7, #28]
          break;
 8006f10:	e010      	b.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f12:	f7fe ffb5 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006f16:	61f8      	str	r0, [r7, #28]
          break;
 8006f18:	e00c      	b.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f1a:	4b86      	ldr	r3, [pc, #536]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f26:	d104      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8006f28:	4b83      	ldr	r3, [pc, #524]	; (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006f2a:	61fb      	str	r3, [r7, #28]
          break;
 8006f2c:	e001      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8006f2e:	bf00      	nop
 8006f30:	e118      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006f32:	bf00      	nop
        break;
 8006f34:	e116      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006f36:	4b7f      	ldr	r3, [pc, #508]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f48:	d013      	beq.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f50:	d819      	bhi.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d004      	beq.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f5e:	d004      	beq.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8006f60:	e011      	b.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f62:	f7ff f825 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006f66:	61f8      	str	r0, [r7, #28]
          break;
 8006f68:	e010      	b.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f6a:	f7fe ff89 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006f6e:	61f8      	str	r0, [r7, #28]
          break;
 8006f70:	e00c      	b.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f72:	4b70      	ldr	r3, [pc, #448]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f7e:	d104      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8006f80:	4b6d      	ldr	r3, [pc, #436]	; (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006f82:	61fb      	str	r3, [r7, #28]
          break;
 8006f84:	e001      	b.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8006f86:	bf00      	nop
 8006f88:	e0ec      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006f8a:	bf00      	nop
        break;
 8006f8c:	e0ea      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006f8e:	4b69      	ldr	r3, [pc, #420]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f98:	613b      	str	r3, [r7, #16]
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fa0:	d013      	beq.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fa8:	d819      	bhi.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d004      	beq.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb6:	d004      	beq.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8006fb8:	e011      	b.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fba:	f7fe fff9 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8006fbe:	61f8      	str	r0, [r7, #28]
          break;
 8006fc0:	e010      	b.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8006fc2:	f7fe ff5d 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8006fc6:	61f8      	str	r0, [r7, #28]
          break;
 8006fc8:	e00c      	b.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fca:	4b5a      	ldr	r3, [pc, #360]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd6:	d104      	bne.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8006fd8:	4b57      	ldr	r3, [pc, #348]	; (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006fda:	61fb      	str	r3, [r7, #28]
          break;
 8006fdc:	e001      	b.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8006fde:	bf00      	nop
 8006fe0:	e0c0      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006fe2:	bf00      	nop
        break;
 8006fe4:	e0be      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006fe6:	4b53      	ldr	r3, [pc, #332]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ff8:	d02c      	beq.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007000:	d833      	bhi.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007008:	d01a      	beq.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007010:	d82b      	bhi.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800701e:	d004      	beq.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8007020:	e023      	b.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007022:	f7fe ffc5 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8007026:	61f8      	str	r0, [r7, #28]
          break;
 8007028:	e026      	b.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800702a:	4b42      	ldr	r3, [pc, #264]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800702c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b02      	cmp	r3, #2
 8007036:	d11a      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8007038:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800703c:	61fb      	str	r3, [r7, #28]
          break;
 800703e:	e016      	b.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007040:	4b3c      	ldr	r3, [pc, #240]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800704c:	d111      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800704e:	4b3a      	ldr	r3, [pc, #232]	; (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8007050:	61fb      	str	r3, [r7, #28]
          break;
 8007052:	e00e      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007054:	4b37      	ldr	r3, [pc, #220]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b02      	cmp	r3, #2
 8007060:	d109      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8007062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007066:	61fb      	str	r3, [r7, #28]
          break;
 8007068:	e005      	b.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800706a:	bf00      	nop
 800706c:	e07a      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800706e:	bf00      	nop
 8007070:	e078      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007072:	bf00      	nop
 8007074:	e076      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007076:	bf00      	nop
        break;
 8007078:	e074      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800707a:	4b2e      	ldr	r3, [pc, #184]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800707c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007080:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007084:	613b      	str	r3, [r7, #16]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800708c:	d02c      	beq.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007094:	d833      	bhi.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800709c:	d01a      	beq.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070a4:	d82b      	bhi.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070b2:	d004      	beq.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80070b4:	e023      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80070b6:	f7fe ff7b 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 80070ba:	61f8      	str	r0, [r7, #28]
          break;
 80070bc:	e026      	b.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80070be:	4b1d      	ldr	r3, [pc, #116]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80070c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d11a      	bne.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80070cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80070d0:	61fb      	str	r3, [r7, #28]
          break;
 80070d2:	e016      	b.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070d4:	4b17      	ldr	r3, [pc, #92]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e0:	d111      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80070e2:	4b15      	ldr	r3, [pc, #84]	; (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80070e4:	61fb      	str	r3, [r7, #28]
          break;
 80070e6:	e00e      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80070e8:	4b12      	ldr	r3, [pc, #72]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80070ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d109      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 80070f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070fa:	61fb      	str	r3, [r7, #28]
          break;
 80070fc:	e005      	b.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 80070fe:	bf00      	nop
 8007100:	e030      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007102:	bf00      	nop
 8007104:	e02e      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007106:	bf00      	nop
 8007108:	e02c      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800710a:	bf00      	nop
        break;
 800710c:	e02a      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800710e:	4b09      	ldr	r3, [pc, #36]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007114:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007118:	613b      	str	r3, [r7, #16]
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d004      	beq.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007126:	d009      	beq.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8007128:	e012      	b.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800712a:	f7fe ff41 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 800712e:	61f8      	str	r0, [r7, #28]
          break;
 8007130:	e00e      	b.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8007132:	bf00      	nop
 8007134:	40021000 	.word	0x40021000
 8007138:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800713c:	4b0c      	ldr	r3, [pc, #48]	; (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007148:	d101      	bne.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800714a:	4b0a      	ldr	r3, [pc, #40]	; (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800714c:	61fb      	str	r3, [r7, #28]
          break;
 800714e:	bf00      	nop
        break;
 8007150:	e008      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8007152:	bf00      	nop
 8007154:	e006      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8007156:	bf00      	nop
 8007158:	e004      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800715a:	bf00      	nop
 800715c:	e002      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800715e:	bf00      	nop
 8007160:	e000      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8007162:	bf00      	nop
    }
  }

  return(frequency);
 8007164:	69fb      	ldr	r3, [r7, #28]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3720      	adds	r7, #32
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	40021000 	.word	0x40021000
 8007174:	00f42400 	.word	0x00f42400

08007178 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800717c:	4b05      	ldr	r3, [pc, #20]	; (8007194 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a04      	ldr	r2, [pc, #16]	; (8007194 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007182:	f043 0304 	orr.w	r3, r3, #4
 8007186:	6013      	str	r3, [r2, #0]
}
 8007188:	bf00      	nop
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40021000 	.word	0x40021000

08007198 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80071a6:	4b75      	ldr	r3, [pc, #468]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d018      	beq.n	80071e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80071b2:	4b72      	ldr	r3, [pc, #456]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f003 0203 	and.w	r2, r3, #3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d10d      	bne.n	80071de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
       ||
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d009      	beq.n	80071de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80071ca:	4b6c      	ldr	r3, [pc, #432]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	091b      	lsrs	r3, r3, #4
 80071d0:	f003 0307 	and.w	r3, r3, #7
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
       ||
 80071da:	429a      	cmp	r2, r3
 80071dc:	d047      	beq.n	800726e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	73fb      	strb	r3, [r7, #15]
 80071e2:	e044      	b.n	800726e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d018      	beq.n	800721e <RCCEx_PLLSAI1_Config+0x86>
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d825      	bhi.n	800723c <RCCEx_PLLSAI1_Config+0xa4>
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d002      	beq.n	80071fa <RCCEx_PLLSAI1_Config+0x62>
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d009      	beq.n	800720c <RCCEx_PLLSAI1_Config+0x74>
 80071f8:	e020      	b.n	800723c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071fa:	4b60      	ldr	r3, [pc, #384]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d11d      	bne.n	8007242 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800720a:	e01a      	b.n	8007242 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800720c:	4b5b      	ldr	r3, [pc, #364]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007214:	2b00      	cmp	r3, #0
 8007216:	d116      	bne.n	8007246 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800721c:	e013      	b.n	8007246 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800721e:	4b57      	ldr	r3, [pc, #348]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10f      	bne.n	800724a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800722a:	4b54      	ldr	r3, [pc, #336]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d109      	bne.n	800724a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800723a:	e006      	b.n	800724a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	73fb      	strb	r3, [r7, #15]
      break;
 8007240:	e004      	b.n	800724c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007242:	bf00      	nop
 8007244:	e002      	b.n	800724c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007246:	bf00      	nop
 8007248:	e000      	b.n	800724c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800724a:	bf00      	nop
    }

    if(status == HAL_OK)
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10d      	bne.n	800726e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007252:	4b4a      	ldr	r3, [pc, #296]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6819      	ldr	r1, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	3b01      	subs	r3, #1
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	430b      	orrs	r3, r1
 8007268:	4944      	ldr	r1, [pc, #272]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 800726a:	4313      	orrs	r3, r2
 800726c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d17d      	bne.n	8007370 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007274:	4b41      	ldr	r3, [pc, #260]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a40      	ldr	r2, [pc, #256]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 800727a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800727e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007280:	f7fa fe46 	bl	8001f10 <HAL_GetTick>
 8007284:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007286:	e009      	b.n	800729c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007288:	f7fa fe42 	bl	8001f10 <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b02      	cmp	r3, #2
 8007294:	d902      	bls.n	800729c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	73fb      	strb	r3, [r7, #15]
        break;
 800729a:	e005      	b.n	80072a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800729c:	4b37      	ldr	r3, [pc, #220]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1ef      	bne.n	8007288 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d160      	bne.n	8007370 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d111      	bne.n	80072d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072b4:	4b31      	ldr	r3, [pc, #196]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80072bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6892      	ldr	r2, [r2, #8]
 80072c4:	0211      	lsls	r1, r2, #8
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	68d2      	ldr	r2, [r2, #12]
 80072ca:	0912      	lsrs	r2, r2, #4
 80072cc:	0452      	lsls	r2, r2, #17
 80072ce:	430a      	orrs	r2, r1
 80072d0:	492a      	ldr	r1, [pc, #168]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	610b      	str	r3, [r1, #16]
 80072d6:	e027      	b.n	8007328 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d112      	bne.n	8007304 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072de:	4b27      	ldr	r3, [pc, #156]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80072e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6892      	ldr	r2, [r2, #8]
 80072ee:	0211      	lsls	r1, r2, #8
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	6912      	ldr	r2, [r2, #16]
 80072f4:	0852      	lsrs	r2, r2, #1
 80072f6:	3a01      	subs	r2, #1
 80072f8:	0552      	lsls	r2, r2, #21
 80072fa:	430a      	orrs	r2, r1
 80072fc:	491f      	ldr	r1, [pc, #124]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	610b      	str	r3, [r1, #16]
 8007302:	e011      	b.n	8007328 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007304:	4b1d      	ldr	r3, [pc, #116]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800730c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6892      	ldr	r2, [r2, #8]
 8007314:	0211      	lsls	r1, r2, #8
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6952      	ldr	r2, [r2, #20]
 800731a:	0852      	lsrs	r2, r2, #1
 800731c:	3a01      	subs	r2, #1
 800731e:	0652      	lsls	r2, r2, #25
 8007320:	430a      	orrs	r2, r1
 8007322:	4916      	ldr	r1, [pc, #88]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007324:	4313      	orrs	r3, r2
 8007326:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007328:	4b14      	ldr	r3, [pc, #80]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a13      	ldr	r2, [pc, #76]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 800732e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007332:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007334:	f7fa fdec 	bl	8001f10 <HAL_GetTick>
 8007338:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800733a:	e009      	b.n	8007350 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800733c:	f7fa fde8 	bl	8001f10 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d902      	bls.n	8007350 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	73fb      	strb	r3, [r7, #15]
          break;
 800734e:	e005      	b.n	800735c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007350:	4b0a      	ldr	r3, [pc, #40]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0ef      	beq.n	800733c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800735c:	7bfb      	ldrb	r3, [r7, #15]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007362:	4b06      	ldr	r3, [pc, #24]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007364:	691a      	ldr	r2, [r3, #16]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	4904      	ldr	r1, [pc, #16]	; (800737c <RCCEx_PLLSAI1_Config+0x1e4>)
 800736c:	4313      	orrs	r3, r2
 800736e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	40021000 	.word	0x40021000

08007380 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800738e:	4b6a      	ldr	r3, [pc, #424]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d018      	beq.n	80073cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800739a:	4b67      	ldr	r3, [pc, #412]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f003 0203 	and.w	r2, r3, #3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d10d      	bne.n	80073c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
       ||
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d009      	beq.n	80073c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80073b2:	4b61      	ldr	r3, [pc, #388]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	091b      	lsrs	r3, r3, #4
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
       ||
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d047      	beq.n	8007456 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	73fb      	strb	r3, [r7, #15]
 80073ca:	e044      	b.n	8007456 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d018      	beq.n	8007406 <RCCEx_PLLSAI2_Config+0x86>
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d825      	bhi.n	8007424 <RCCEx_PLLSAI2_Config+0xa4>
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d002      	beq.n	80073e2 <RCCEx_PLLSAI2_Config+0x62>
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d009      	beq.n	80073f4 <RCCEx_PLLSAI2_Config+0x74>
 80073e0:	e020      	b.n	8007424 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073e2:	4b55      	ldr	r3, [pc, #340]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d11d      	bne.n	800742a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073f2:	e01a      	b.n	800742a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073f4:	4b50      	ldr	r3, [pc, #320]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d116      	bne.n	800742e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007404:	e013      	b.n	800742e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007406:	4b4c      	ldr	r3, [pc, #304]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10f      	bne.n	8007432 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007412:	4b49      	ldr	r3, [pc, #292]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007422:	e006      	b.n	8007432 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	73fb      	strb	r3, [r7, #15]
      break;
 8007428:	e004      	b.n	8007434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800742a:	bf00      	nop
 800742c:	e002      	b.n	8007434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800742e:	bf00      	nop
 8007430:	e000      	b.n	8007434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007432:	bf00      	nop
    }

    if(status == HAL_OK)
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10d      	bne.n	8007456 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800743a:	4b3f      	ldr	r3, [pc, #252]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6819      	ldr	r1, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	3b01      	subs	r3, #1
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	430b      	orrs	r3, r1
 8007450:	4939      	ldr	r1, [pc, #228]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007452:	4313      	orrs	r3, r2
 8007454:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d167      	bne.n	800752c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800745c:	4b36      	ldr	r3, [pc, #216]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a35      	ldr	r2, [pc, #212]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007468:	f7fa fd52 	bl	8001f10 <HAL_GetTick>
 800746c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800746e:	e009      	b.n	8007484 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007470:	f7fa fd4e 	bl	8001f10 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	2b02      	cmp	r3, #2
 800747c:	d902      	bls.n	8007484 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	73fb      	strb	r3, [r7, #15]
        break;
 8007482:	e005      	b.n	8007490 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007484:	4b2c      	ldr	r3, [pc, #176]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1ef      	bne.n	8007470 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d14a      	bne.n	800752c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d111      	bne.n	80074c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800749c:	4b26      	ldr	r3, [pc, #152]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80074a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6892      	ldr	r2, [r2, #8]
 80074ac:	0211      	lsls	r1, r2, #8
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68d2      	ldr	r2, [r2, #12]
 80074b2:	0912      	lsrs	r2, r2, #4
 80074b4:	0452      	lsls	r2, r2, #17
 80074b6:	430a      	orrs	r2, r1
 80074b8:	491f      	ldr	r1, [pc, #124]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	614b      	str	r3, [r1, #20]
 80074be:	e011      	b.n	80074e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80074c0:	4b1d      	ldr	r3, [pc, #116]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80074c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6892      	ldr	r2, [r2, #8]
 80074d0:	0211      	lsls	r1, r2, #8
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6912      	ldr	r2, [r2, #16]
 80074d6:	0852      	lsrs	r2, r2, #1
 80074d8:	3a01      	subs	r2, #1
 80074da:	0652      	lsls	r2, r2, #25
 80074dc:	430a      	orrs	r2, r1
 80074de:	4916      	ldr	r1, [pc, #88]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80074e4:	4b14      	ldr	r3, [pc, #80]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a13      	ldr	r2, [pc, #76]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f0:	f7fa fd0e 	bl	8001f10 <HAL_GetTick>
 80074f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074f6:	e009      	b.n	800750c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80074f8:	f7fa fd0a 	bl	8001f10 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d902      	bls.n	800750c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	73fb      	strb	r3, [r7, #15]
          break;
 800750a:	e005      	b.n	8007518 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0ef      	beq.n	80074f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d106      	bne.n	800752c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800751e:	4b06      	ldr	r3, [pc, #24]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007520:	695a      	ldr	r2, [r3, #20]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	4904      	ldr	r1, [pc, #16]	; (8007538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007528:	4313      	orrs	r3, r2
 800752a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	40021000 	.word	0x40021000

0800753c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800753c:	b480      	push	{r7}
 800753e:	b089      	sub	sp, #36	; 0x24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007558:	d10c      	bne.n	8007574 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800755a:	4b6e      	ldr	r3, [pc, #440]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007560:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007564:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800756c:	d112      	bne.n	8007594 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800756e:	4b6a      	ldr	r3, [pc, #424]	; (8007718 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8007570:	61fb      	str	r3, [r7, #28]
 8007572:	e00f      	b.n	8007594 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800757a:	d10b      	bne.n	8007594 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800757c:	4b65      	ldr	r3, [pc, #404]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800757e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007582:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007586:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800758e:	d101      	bne.n	8007594 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007590:	4b61      	ldr	r3, [pc, #388]	; (8007718 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8007592:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	2b00      	cmp	r3, #0
 8007598:	f040 80b4 	bne.w	8007704 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075a6:	d003      	beq.n	80075b0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075ae:	d135      	bne.n	800761c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80075b0:	4b58      	ldr	r3, [pc, #352]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075bc:	f040 80a1 	bne.w	8007702 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80075c0:	4b54      	ldr	r3, [pc, #336]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 809a 	beq.w	8007702 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80075ce:	4b51      	ldr	r3, [pc, #324]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	091b      	lsrs	r3, r3, #4
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	3301      	adds	r3, #1
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80075e2:	4b4c      	ldr	r3, [pc, #304]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	0a1b      	lsrs	r3, r3, #8
 80075e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ec:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80075f4:	4b47      	ldr	r3, [pc, #284]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8007600:	2311      	movs	r3, #17
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	e001      	b.n	800760a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8007606:	2307      	movs	r3, #7
 8007608:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	fb03 f202 	mul.w	r2, r3, r2
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	fbb2 f3f3 	udiv	r3, r2, r3
 8007618:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800761a:	e072      	b.n	8007702 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d133      	bne.n	800768a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8007622:	4b3c      	ldr	r3, [pc, #240]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800762a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800762e:	d169      	bne.n	8007704 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8007630:	4b38      	ldr	r3, [pc, #224]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d063      	beq.n	8007704 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800763c:	4b35      	ldr	r3, [pc, #212]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	091b      	lsrs	r3, r3, #4
 8007642:	f003 0307 	and.w	r3, r3, #7
 8007646:	3301      	adds	r3, #1
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	fbb2 f3f3 	udiv	r3, r2, r3
 800764e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007650:	4b30      	ldr	r3, [pc, #192]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	0a1b      	lsrs	r3, r3, #8
 8007656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10a      	bne.n	8007678 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007662:	4b2c      	ldr	r3, [pc, #176]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800766e:	2311      	movs	r3, #17
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	e001      	b.n	8007678 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8007674:	2307      	movs	r3, #7
 8007676:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	fb03 f202 	mul.w	r2, r3, r2
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	fbb2 f3f3 	udiv	r3, r2, r3
 8007686:	61fb      	str	r3, [r7, #28]
 8007688:	e03c      	b.n	8007704 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007690:	d003      	beq.n	800769a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007698:	d134      	bne.n	8007704 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800769a:	4b1e      	ldr	r3, [pc, #120]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076a6:	d12d      	bne.n	8007704 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80076a8:	4b1a      	ldr	r3, [pc, #104]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d027      	beq.n	8007704 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80076b4:	4b17      	ldr	r3, [pc, #92]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	091b      	lsrs	r3, r3, #4
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	3301      	adds	r3, #1
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80076c8:	4b12      	ldr	r3, [pc, #72]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	0a1b      	lsrs	r3, r3, #8
 80076ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10a      	bne.n	80076f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80076da:	4b0e      	ldr	r3, [pc, #56]	; (8007714 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d002      	beq.n	80076ec <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80076e6:	2311      	movs	r3, #17
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	e001      	b.n	80076f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80076ec:	2307      	movs	r3, #7
 80076ee:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	fb03 f202 	mul.w	r2, r3, r2
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80076fe:	61fb      	str	r3, [r7, #28]
 8007700:	e000      	b.n	8007704 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007702:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007704:	69fb      	ldr	r3, [r7, #28]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3724      	adds	r7, #36	; 0x24
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	40021000 	.word	0x40021000
 8007718:	001fff68 	.word	0x001fff68

0800771c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e155      	b.n	80079da <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d106      	bne.n	8007748 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7f9 ff76 	bl	8001634 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fa4b 	bl	8007be4 <SAI_Disable>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e140      	b.n	80079da <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	2b02      	cmp	r3, #2
 8007766:	d00c      	beq.n	8007782 <HAL_SAI_Init+0x66>
 8007768:	2b02      	cmp	r3, #2
 800776a:	d80d      	bhi.n	8007788 <HAL_SAI_Init+0x6c>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <HAL_SAI_Init+0x5a>
 8007770:	2b01      	cmp	r3, #1
 8007772:	d003      	beq.n	800777c <HAL_SAI_Init+0x60>
 8007774:	e008      	b.n	8007788 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	61fb      	str	r3, [r7, #28]
      break;
 800777a:	e008      	b.n	800778e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800777c:	2310      	movs	r3, #16
 800777e:	61fb      	str	r3, [r7, #28]
      break;
 8007780:	e005      	b.n	800778e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007782:	2320      	movs	r3, #32
 8007784:	61fb      	str	r3, [r7, #28]
      break;
 8007786:	e002      	b.n	800778e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8007788:	2300      	movs	r3, #0
 800778a:	61fb      	str	r3, [r7, #28]
      break;
 800778c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	2b03      	cmp	r3, #3
 8007794:	d81d      	bhi.n	80077d2 <HAL_SAI_Init+0xb6>
 8007796:	a201      	add	r2, pc, #4	; (adr r2, 800779c <HAL_SAI_Init+0x80>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	080077ad 	.word	0x080077ad
 80077a0:	080077b3 	.word	0x080077b3
 80077a4:	080077bb 	.word	0x080077bb
 80077a8:	080077c3 	.word	0x080077c3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	617b      	str	r3, [r7, #20]
      break;
 80077b0:	e012      	b.n	80077d8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80077b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077b6:	617b      	str	r3, [r7, #20]
      break;
 80077b8:	e00e      	b.n	80077d8 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80077ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077be:	617b      	str	r3, [r7, #20]
      break;
 80077c0:	e00a      	b.n	80077d8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80077c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077c6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	f043 0301 	orr.w	r3, r3, #1
 80077ce:	61fb      	str	r3, [r7, #28]
      break;
 80077d0:	e002      	b.n	80077d8 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]
      break;
 80077d6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a81      	ldr	r2, [pc, #516]	; (80079e4 <HAL_SAI_Init+0x2c8>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d004      	beq.n	80077ec <HAL_SAI_Init+0xd0>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a80      	ldr	r2, [pc, #512]	; (80079e8 <HAL_SAI_Init+0x2cc>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d103      	bne.n	80077f4 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 80077ec:	4a7f      	ldr	r2, [pc, #508]	; (80079ec <HAL_SAI_Init+0x2d0>)
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	e002      	b.n	80077fa <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80077f4:	4a7e      	ldr	r2, [pc, #504]	; (80079f0 <HAL_SAI_Init+0x2d4>)
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d041      	beq.n	8007886 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a77      	ldr	r2, [pc, #476]	; (80079e4 <HAL_SAI_Init+0x2c8>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d004      	beq.n	8007816 <HAL_SAI_Init+0xfa>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a75      	ldr	r2, [pc, #468]	; (80079e8 <HAL_SAI_Init+0x2cc>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d105      	bne.n	8007822 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007816:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800781a:	f7fe ff3f 	bl	800669c <HAL_RCCEx_GetPeriphCLKFreq>
 800781e:	6138      	str	r0, [r7, #16]
 8007820:	e004      	b.n	800782c <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007822:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007826:	f7fe ff39 	bl	800669c <HAL_RCCEx_GetPeriphCLKFreq>
 800782a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	4613      	mov	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	461a      	mov	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	025b      	lsls	r3, r3, #9
 800783e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007842:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4a6b      	ldr	r2, [pc, #428]	; (80079f4 <HAL_SAI_Init+0x2d8>)
 8007848:	fba2 2303 	umull	r2, r3, r2, r3
 800784c:	08da      	lsrs	r2, r3, #3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007852:	68f9      	ldr	r1, [r7, #12]
 8007854:	4b67      	ldr	r3, [pc, #412]	; (80079f4 <HAL_SAI_Init+0x2d8>)
 8007856:	fba3 2301 	umull	r2, r3, r3, r1
 800785a:	08da      	lsrs	r2, r3, #3
 800785c:	4613      	mov	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	1aca      	subs	r2, r1, r3
 8007866:	2a08      	cmp	r2, #8
 8007868:	d904      	bls.n	8007874 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	2b04      	cmp	r3, #4
 800787a:	d104      	bne.n	8007886 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	085a      	lsrs	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_SAI_Init+0x17a>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	2b02      	cmp	r3, #2
 8007894:	d109      	bne.n	80078aa <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_SAI_Init+0x186>
 800789e:	2300      	movs	r3, #0
 80078a0:	e001      	b.n	80078a6 <HAL_SAI_Init+0x18a>
 80078a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	e008      	b.n	80078bc <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d102      	bne.n	80078b8 <HAL_SAI_Init+0x19c>
 80078b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078b6:	e000      	b.n	80078ba <HAL_SAI_Init+0x19e>
 80078b8:	2300      	movs	r3, #0
 80078ba:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6819      	ldr	r1, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	4b4c      	ldr	r3, [pc, #304]	; (80079f8 <HAL_SAI_Init+0x2dc>)
 80078c8:	400b      	ands	r3, r1
 80078ca:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6819      	ldr	r1, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078da:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80078e0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	431a      	orrs	r2, r3
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 80078f4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007900:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	051b      	lsls	r3, r3, #20
 8007908:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	6812      	ldr	r2, [r2, #0]
 800791c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007920:	f023 030f 	bic.w	r3, r3, #15
 8007924:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6859      	ldr	r1, [r3, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	699a      	ldr	r2, [r3, #24]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007934:	431a      	orrs	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793a:	431a      	orrs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6899      	ldr	r1, [r3, #8]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	4b2b      	ldr	r3, [pc, #172]	; (80079fc <HAL_SAI_Init+0x2e0>)
 8007950:	400b      	ands	r3, r1
 8007952:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6899      	ldr	r1, [r3, #8]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007964:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800796a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8007970:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007976:	3b01      	subs	r3, #1
 8007978:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800797a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68d9      	ldr	r1, [r3, #12]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007992:	400b      	ands	r3, r1
 8007994:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68d9      	ldr	r1, [r3, #12]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079aa:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80079ac:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b2:	3b01      	subs	r3, #1
 80079b4:	021b      	lsls	r3, r3, #8
 80079b6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3720      	adds	r7, #32
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	40015404 	.word	0x40015404
 80079e8:	40015424 	.word	0x40015424
 80079ec:	40015400 	.word	0x40015400
 80079f0:	40015800 	.word	0x40015800
 80079f4:	cccccccd 	.word	0xcccccccd
 80079f8:	ff05c010 	.word	0xff05c010
 80079fc:	fff88000 	.word	0xfff88000

08007a00 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007a0e:	f7fa fa7f 	bl	8001f10 <HAL_GetTick>
 8007a12:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <HAL_SAI_Transmit_DMA+0x20>
 8007a1a:	88fb      	ldrh	r3, [r7, #6]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e093      	b.n	8007b4c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	f040 808c 	bne.w	8007b4a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d101      	bne.n	8007a40 <HAL_SAI_Transmit_DMA+0x40>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	e085      	b.n	8007b4c <HAL_SAI_Transmit_DMA+0x14c>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	88fa      	ldrh	r2, [r7, #6]
 8007a52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	88fa      	ldrh	r2, [r7, #6]
 8007a5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2212      	movs	r2, #18
 8007a6a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a72:	4a38      	ldr	r2, [pc, #224]	; (8007b54 <HAL_SAI_Transmit_DMA+0x154>)
 8007a74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a7a:	4a37      	ldr	r2, [pc, #220]	; (8007b58 <HAL_SAI_Transmit_DMA+0x158>)
 8007a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a82:	4a36      	ldr	r2, [pc, #216]	; (8007b5c <HAL_SAI_Transmit_DMA+0x15c>)
 8007a84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a96:	4619      	mov	r1, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	331c      	adds	r3, #28
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007aa6:	f7fa fcf1 	bl	800248c <HAL_DMA_Start_IT>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e047      	b.n	8007b4c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007abc:	2100      	movs	r1, #0
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f858 	bl	8007b74 <SAI_InterruptFlag>
 8007ac4:	4601      	mov	r1, r0
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007ae2:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007ae4:	e015      	b.n	8007b12 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007ae6:	f7fa fa13 	bl	8001f10 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007af4:	d90d      	bls.n	8007b12 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007afc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e01c      	b.n	8007b4c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0e2      	beq.n	8007ae6 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d107      	bne.n	8007b3e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007b3c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	e000      	b.n	8007b4c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8007b4a:	2302      	movs	r3, #2
  }
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	08007cb7 	.word	0x08007cb7
 8007b58:	08007c59 	.word	0x08007c59
 8007b5c:	08007cd3 	.word	0x08007cd3

08007b60 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d103      	bne.n	8007b92 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f043 0308 	orr.w	r3, r3, #8
 8007b90:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	2b08      	cmp	r3, #8
 8007b98:	d10b      	bne.n	8007bb2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d003      	beq.n	8007baa <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d103      	bne.n	8007bb2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f043 0310 	orr.w	r3, r3, #16
 8007bb0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d003      	beq.n	8007bc2 <SAI_InterruptFlag+0x4e>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d104      	bne.n	8007bcc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	e003      	b.n	8007bd4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f043 0304 	orr.w	r3, r3, #4
 8007bd2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
	...

08007be4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007bec:	4b18      	ldr	r3, [pc, #96]	; (8007c50 <SAI_Disable+0x6c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a18      	ldr	r2, [pc, #96]	; (8007c54 <SAI_Disable+0x70>)
 8007bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf6:	0b1b      	lsrs	r3, r3, #12
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c0e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10a      	bne.n	8007c2c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	72fb      	strb	r3, [r7, #11]
      break;
 8007c2a:	e009      	b.n	8007c40 <SAI_Disable+0x5c>
    }
    count--;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e7      	bne.n	8007c10 <SAI_Disable+0x2c>

  return status;
 8007c40:	7afb      	ldrb	r3, [r7, #11]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	20000040 	.word	0x20000040
 8007c54:	95cbec1b 	.word	0x95cbec1b

08007c58 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c64:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d01c      	beq.n	8007ca8 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007c84:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007c86:	2100      	movs	r1, #0
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f7ff ff73 	bl	8007b74 <SAI_InterruptFlag>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	43d9      	mvns	r1, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	691a      	ldr	r2, [r3, #16]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	400a      	ands	r2, r1
 8007c9e:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f7f9 f8c9 	bl	8000e40 <HAL_SAI_TxCpltCallback>
#endif
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f7f9 f8cb 	bl	8000e60 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ce6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007cfe:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f7ff ff6f 	bl	8007be4 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff ff22 	bl	8007b60 <HAL_SAI_ErrorCallback>
#endif
}
 8007d1c:	bf00      	nop
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d24:	b084      	sub	sp, #16
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	f107 001c 	add.w	r0, r7, #28
 8007d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 fa40 	bl	80091c8 <USB_CoreReset>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d106      	bne.n	8007d60 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	639a      	str	r2, [r3, #56]	; 0x38
 8007d5e:	e005      	b.n	8007d6c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d78:	b004      	add	sp, #16
 8007d7a:	4770      	bx	lr

08007d7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	4613      	mov	r3, r2
 8007d88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007d8a:	79fb      	ldrb	r3, [r7, #7]
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d165      	bne.n	8007e5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	4a3e      	ldr	r2, [pc, #248]	; (8007e8c <USB_SetTurnaroundTime+0x110>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d906      	bls.n	8007da6 <USB_SetTurnaroundTime+0x2a>
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	4a3d      	ldr	r2, [pc, #244]	; (8007e90 <USB_SetTurnaroundTime+0x114>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d202      	bcs.n	8007da6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007da0:	230f      	movs	r3, #15
 8007da2:	617b      	str	r3, [r7, #20]
 8007da4:	e05c      	b.n	8007e60 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	4a39      	ldr	r2, [pc, #228]	; (8007e90 <USB_SetTurnaroundTime+0x114>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d306      	bcc.n	8007dbc <USB_SetTurnaroundTime+0x40>
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	4a38      	ldr	r2, [pc, #224]	; (8007e94 <USB_SetTurnaroundTime+0x118>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d202      	bcs.n	8007dbc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007db6:	230e      	movs	r3, #14
 8007db8:	617b      	str	r3, [r7, #20]
 8007dba:	e051      	b.n	8007e60 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	4a35      	ldr	r2, [pc, #212]	; (8007e94 <USB_SetTurnaroundTime+0x118>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d306      	bcc.n	8007dd2 <USB_SetTurnaroundTime+0x56>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	4a34      	ldr	r2, [pc, #208]	; (8007e98 <USB_SetTurnaroundTime+0x11c>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d202      	bcs.n	8007dd2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007dcc:	230d      	movs	r3, #13
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	e046      	b.n	8007e60 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	4a30      	ldr	r2, [pc, #192]	; (8007e98 <USB_SetTurnaroundTime+0x11c>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d306      	bcc.n	8007de8 <USB_SetTurnaroundTime+0x6c>
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	4a2f      	ldr	r2, [pc, #188]	; (8007e9c <USB_SetTurnaroundTime+0x120>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d802      	bhi.n	8007de8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007de2:	230c      	movs	r3, #12
 8007de4:	617b      	str	r3, [r7, #20]
 8007de6:	e03b      	b.n	8007e60 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	4a2c      	ldr	r2, [pc, #176]	; (8007e9c <USB_SetTurnaroundTime+0x120>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d906      	bls.n	8007dfe <USB_SetTurnaroundTime+0x82>
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4a2b      	ldr	r2, [pc, #172]	; (8007ea0 <USB_SetTurnaroundTime+0x124>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d802      	bhi.n	8007dfe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007df8:	230b      	movs	r3, #11
 8007dfa:	617b      	str	r3, [r7, #20]
 8007dfc:	e030      	b.n	8007e60 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	4a27      	ldr	r2, [pc, #156]	; (8007ea0 <USB_SetTurnaroundTime+0x124>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d906      	bls.n	8007e14 <USB_SetTurnaroundTime+0x98>
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	4a26      	ldr	r2, [pc, #152]	; (8007ea4 <USB_SetTurnaroundTime+0x128>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d802      	bhi.n	8007e14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007e0e:	230a      	movs	r3, #10
 8007e10:	617b      	str	r3, [r7, #20]
 8007e12:	e025      	b.n	8007e60 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4a23      	ldr	r2, [pc, #140]	; (8007ea4 <USB_SetTurnaroundTime+0x128>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d906      	bls.n	8007e2a <USB_SetTurnaroundTime+0xae>
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	4a22      	ldr	r2, [pc, #136]	; (8007ea8 <USB_SetTurnaroundTime+0x12c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d202      	bcs.n	8007e2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007e24:	2309      	movs	r3, #9
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	e01a      	b.n	8007e60 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	4a1e      	ldr	r2, [pc, #120]	; (8007ea8 <USB_SetTurnaroundTime+0x12c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d306      	bcc.n	8007e40 <USB_SetTurnaroundTime+0xc4>
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	4a1d      	ldr	r2, [pc, #116]	; (8007eac <USB_SetTurnaroundTime+0x130>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d802      	bhi.n	8007e40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007e3a:	2308      	movs	r3, #8
 8007e3c:	617b      	str	r3, [r7, #20]
 8007e3e:	e00f      	b.n	8007e60 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4a1a      	ldr	r2, [pc, #104]	; (8007eac <USB_SetTurnaroundTime+0x130>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d906      	bls.n	8007e56 <USB_SetTurnaroundTime+0xda>
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	4a19      	ldr	r2, [pc, #100]	; (8007eb0 <USB_SetTurnaroundTime+0x134>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d202      	bcs.n	8007e56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007e50:	2307      	movs	r3, #7
 8007e52:	617b      	str	r3, [r7, #20]
 8007e54:	e004      	b.n	8007e60 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007e56:	2306      	movs	r3, #6
 8007e58:	617b      	str	r3, [r7, #20]
 8007e5a:	e001      	b.n	8007e60 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007e5c:	2309      	movs	r3, #9
 8007e5e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	68da      	ldr	r2, [r3, #12]
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	029b      	lsls	r3, r3, #10
 8007e74:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007e78:	431a      	orrs	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	371c      	adds	r7, #28
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	00d8acbf 	.word	0x00d8acbf
 8007e90:	00e4e1c0 	.word	0x00e4e1c0
 8007e94:	00f42400 	.word	0x00f42400
 8007e98:	01067380 	.word	0x01067380
 8007e9c:	011a499f 	.word	0x011a499f
 8007ea0:	01312cff 	.word	0x01312cff
 8007ea4:	014ca43f 	.word	0x014ca43f
 8007ea8:	016e3600 	.word	0x016e3600
 8007eac:	01a6ab1f 	.word	0x01a6ab1f
 8007eb0:	01e84800 	.word	0x01e84800

08007eb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f043 0201 	orr.w	r2, r3, #1
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f023 0201 	bic.w	r2, r3, #1
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d115      	bne.n	8007f46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f26:	2001      	movs	r0, #1
 8007f28:	f7f9 fffe 	bl	8001f28 <HAL_Delay>
      ms++;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 f8cf 	bl	80090d6 <USB_GetMode>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d01e      	beq.n	8007f7c <USB_SetCurrentMode+0x84>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b31      	cmp	r3, #49	; 0x31
 8007f42:	d9f0      	bls.n	8007f26 <USB_SetCurrentMode+0x2e>
 8007f44:	e01a      	b.n	8007f7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f46:	78fb      	ldrb	r3, [r7, #3]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d115      	bne.n	8007f78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f58:	2001      	movs	r0, #1
 8007f5a:	f7f9 ffe5 	bl	8001f28 <HAL_Delay>
      ms++;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3301      	adds	r3, #1
 8007f62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 f8b6 	bl	80090d6 <USB_GetMode>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d005      	beq.n	8007f7c <USB_SetCurrentMode+0x84>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b31      	cmp	r3, #49	; 0x31
 8007f74:	d9f0      	bls.n	8007f58 <USB_SetCurrentMode+0x60>
 8007f76:	e001      	b.n	8007f7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e005      	b.n	8007f88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b32      	cmp	r3, #50	; 0x32
 8007f80:	d101      	bne.n	8007f86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e000      	b.n	8007f88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f90:	b084      	sub	sp, #16
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b086      	sub	sp, #24
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007faa:	2300      	movs	r3, #0
 8007fac:	613b      	str	r3, [r7, #16]
 8007fae:	e009      	b.n	8007fc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	3340      	adds	r3, #64	; 0x40
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	2200      	movs	r2, #0
 8007fbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	2b0e      	cmp	r3, #14
 8007fc8:	d9f2      	bls.n	8007fb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d11c      	bne.n	800800a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fde:	f043 0302 	orr.w	r3, r3, #2
 8007fe2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	e005      	b.n	8008016 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800801c:	461a      	mov	r2, r3
 800801e:	2300      	movs	r3, #0
 8008020:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008028:	4619      	mov	r1, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008030:	461a      	mov	r2, r3
 8008032:	680b      	ldr	r3, [r1, #0]
 8008034:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008036:	2103      	movs	r1, #3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f955 	bl	80082e8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800803e:	2110      	movs	r1, #16
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f8f1 	bl	8008228 <USB_FlushTxFifo>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f91b 	bl	800828c <USB_FlushRxFifo>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008066:	461a      	mov	r2, r3
 8008068:	2300      	movs	r3, #0
 800806a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008072:	461a      	mov	r2, r3
 8008074:	2300      	movs	r3, #0
 8008076:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800807e:	461a      	mov	r2, r3
 8008080:	2300      	movs	r3, #0
 8008082:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008084:	2300      	movs	r3, #0
 8008086:	613b      	str	r3, [r7, #16]
 8008088:	e043      	b.n	8008112 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	4413      	add	r3, r2
 8008092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800809c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080a0:	d118      	bne.n	80080d4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10a      	bne.n	80080be <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b4:	461a      	mov	r2, r3
 80080b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080ba:	6013      	str	r3, [r2, #0]
 80080bc:	e013      	b.n	80080e6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ca:	461a      	mov	r2, r3
 80080cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	e008      	b.n	80080e6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e0:	461a      	mov	r2, r3
 80080e2:	2300      	movs	r3, #0
 80080e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f2:	461a      	mov	r2, r3
 80080f4:	2300      	movs	r3, #0
 80080f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008104:	461a      	mov	r2, r3
 8008106:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800810a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	3301      	adds	r3, #1
 8008110:	613b      	str	r3, [r7, #16]
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	429a      	cmp	r2, r3
 8008118:	d3b7      	bcc.n	800808a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800811a:	2300      	movs	r3, #0
 800811c:	613b      	str	r3, [r7, #16]
 800811e:	e043      	b.n	80081a8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008136:	d118      	bne.n	800816a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10a      	bne.n	8008154 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814a:	461a      	mov	r2, r3
 800814c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008150:	6013      	str	r3, [r2, #0]
 8008152:	e013      	b.n	800817c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	015a      	lsls	r2, r3, #5
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4413      	add	r3, r2
 800815c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008160:	461a      	mov	r2, r3
 8008162:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008166:	6013      	str	r3, [r2, #0]
 8008168:	e008      	b.n	800817c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	4413      	add	r3, r2
 8008172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008176:	461a      	mov	r2, r3
 8008178:	2300      	movs	r3, #0
 800817a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008188:	461a      	mov	r2, r3
 800818a:	2300      	movs	r3, #0
 800818c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4413      	add	r3, r2
 8008196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819a:	461a      	mov	r2, r3
 800819c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	3301      	adds	r3, #1
 80081a6:	613b      	str	r3, [r7, #16]
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d3b7      	bcc.n	8008120 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80081d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	f043 0210 	orr.w	r2, r3, #16
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	699a      	ldr	r2, [r3, #24]
 80081e2:	4b10      	ldr	r3, [pc, #64]	; (8008224 <USB_DevInit+0x294>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80081ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f043 0208 	orr.w	r2, r3, #8
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d107      	bne.n	8008212 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800820a:	f043 0304 	orr.w	r3, r3, #4
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008212:	7dfb      	ldrb	r3, [r7, #23]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800821e:	b004      	add	sp, #16
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	803c3800 	.word	0x803c3800

08008228 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3301      	adds	r3, #1
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	4a12      	ldr	r2, [pc, #72]	; (8008288 <USB_FlushTxFifo+0x60>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d901      	bls.n	8008246 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e01a      	b.n	800827c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	daf3      	bge.n	8008236 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	019b      	lsls	r3, r3, #6
 8008256:	f043 0220 	orr.w	r2, r3, #32
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3301      	adds	r3, #1
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	4a08      	ldr	r2, [pc, #32]	; (8008288 <USB_FlushTxFifo+0x60>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d901      	bls.n	800826e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e006      	b.n	800827c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	f003 0320 	and.w	r3, r3, #32
 8008276:	2b20      	cmp	r3, #32
 8008278:	d0f1      	beq.n	800825e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	00030d40 	.word	0x00030d40

0800828c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3301      	adds	r3, #1
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	4a11      	ldr	r2, [pc, #68]	; (80082e4 <USB_FlushRxFifo+0x58>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d901      	bls.n	80082a8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e017      	b.n	80082d8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	daf3      	bge.n	8008298 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2210      	movs	r2, #16
 80082b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3301      	adds	r3, #1
 80082be:	60fb      	str	r3, [r7, #12]
 80082c0:	4a08      	ldr	r2, [pc, #32]	; (80082e4 <USB_FlushRxFifo+0x58>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d901      	bls.n	80082ca <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e006      	b.n	80082d8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	f003 0310 	and.w	r3, r3, #16
 80082d2:	2b10      	cmp	r3, #16
 80082d4:	d0f1      	beq.n	80082ba <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	00030d40 	.word	0x00030d40

080082e8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	68f9      	ldr	r1, [r7, #12]
 8008304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008308:	4313      	orrs	r3, r2
 800830a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800831a:	b480      	push	{r7}
 800831c:	b087      	sub	sp, #28
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 0306 	and.w	r3, r3, #6
 8008332:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b02      	cmp	r3, #2
 8008338:	d002      	beq.n	8008340 <USB_GetDevSpeed+0x26>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2b06      	cmp	r3, #6
 800833e:	d102      	bne.n	8008346 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008340:	2302      	movs	r3, #2
 8008342:	75fb      	strb	r3, [r7, #23]
 8008344:	e001      	b.n	800834a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008346:	230f      	movs	r3, #15
 8008348:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800834a:	7dfb      	ldrb	r3, [r7, #23]
}
 800834c:	4618      	mov	r0, r3
 800834e:	371c      	adds	r7, #28
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	785b      	ldrb	r3, [r3, #1]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d13a      	bne.n	80083ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837a:	69da      	ldr	r2, [r3, #28]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	f003 030f 	and.w	r3, r3, #15
 8008384:	2101      	movs	r1, #1
 8008386:	fa01 f303 	lsl.w	r3, r1, r3
 800838a:	b29b      	uxth	r3, r3
 800838c:	68f9      	ldr	r1, [r7, #12]
 800838e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008392:	4313      	orrs	r3, r2
 8008394:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4413      	add	r3, r2
 800839e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d155      	bne.n	8008458 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	78db      	ldrb	r3, [r3, #3]
 80083c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	059b      	lsls	r3, r3, #22
 80083ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083d0:	4313      	orrs	r3, r2
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	0151      	lsls	r1, r2, #5
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	440a      	add	r2, r1
 80083da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	e036      	b.n	8008458 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f0:	69da      	ldr	r2, [r3, #28]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	f003 030f 	and.w	r3, r3, #15
 80083fa:	2101      	movs	r1, #1
 80083fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008400:	041b      	lsls	r3, r3, #16
 8008402:	68f9      	ldr	r1, [r7, #12]
 8008404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008408:	4313      	orrs	r3, r2
 800840a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4413      	add	r3, r2
 8008414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d11a      	bne.n	8008458 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4413      	add	r3, r2
 800842a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	78db      	ldrb	r3, [r3, #3]
 800843c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800843e:	430b      	orrs	r3, r1
 8008440:	4313      	orrs	r3, r2
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	0151      	lsls	r1, r2, #5
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	440a      	add	r2, r1
 800844a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800844e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008456:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
	...

08008468 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	785b      	ldrb	r3, [r3, #1]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d161      	bne.n	8008548 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800849a:	d11f      	bne.n	80084dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	0151      	lsls	r1, r2, #5
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	440a      	add	r2, r1
 80084b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	0151      	lsls	r1, r2, #5
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	440a      	add	r2, r1
 80084d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	f003 030f 	and.w	r3, r3, #15
 80084ec:	2101      	movs	r1, #1
 80084ee:	fa01 f303 	lsl.w	r3, r1, r3
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	43db      	mvns	r3, r3
 80084f6:	68f9      	ldr	r1, [r7, #12]
 80084f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084fc:	4013      	ands	r3, r2
 80084fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008506:	69da      	ldr	r2, [r3, #28]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	f003 030f 	and.w	r3, r3, #15
 8008510:	2101      	movs	r1, #1
 8008512:	fa01 f303 	lsl.w	r3, r1, r3
 8008516:	b29b      	uxth	r3, r3
 8008518:	43db      	mvns	r3, r3
 800851a:	68f9      	ldr	r1, [r7, #12]
 800851c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008520:	4013      	ands	r3, r2
 8008522:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	0159      	lsls	r1, r3, #5
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	440b      	add	r3, r1
 800853a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853e:	4619      	mov	r1, r3
 8008540:	4b35      	ldr	r3, [pc, #212]	; (8008618 <USB_DeactivateEndpoint+0x1b0>)
 8008542:	4013      	ands	r3, r2
 8008544:	600b      	str	r3, [r1, #0]
 8008546:	e060      	b.n	800860a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800855a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800855e:	d11f      	bne.n	80085a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	0151      	lsls	r1, r2, #5
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	440a      	add	r2, r1
 8008576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800857a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800857e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	440a      	add	r2, r1
 8008596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800859a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800859e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	f003 030f 	and.w	r3, r3, #15
 80085b0:	2101      	movs	r1, #1
 80085b2:	fa01 f303 	lsl.w	r3, r1, r3
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	43db      	mvns	r3, r3
 80085ba:	68f9      	ldr	r1, [r7, #12]
 80085bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085c0:	4013      	ands	r3, r2
 80085c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ca:	69da      	ldr	r2, [r3, #28]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	2101      	movs	r1, #1
 80085d6:	fa01 f303 	lsl.w	r3, r1, r3
 80085da:	041b      	lsls	r3, r3, #16
 80085dc:	43db      	mvns	r3, r3
 80085de:	68f9      	ldr	r1, [r7, #12]
 80085e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085e4:	4013      	ands	r3, r2
 80085e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	0159      	lsls	r1, r3, #5
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	440b      	add	r3, r1
 80085fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008602:	4619      	mov	r1, r3
 8008604:	4b05      	ldr	r3, [pc, #20]	; (800861c <USB_DeactivateEndpoint+0x1b4>)
 8008606:	4013      	ands	r3, r2
 8008608:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	ec337800 	.word	0xec337800
 800861c:	eff37800 	.word	0xeff37800

08008620 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	785b      	ldrb	r3, [r3, #1]
 8008638:	2b01      	cmp	r3, #1
 800863a:	f040 810a 	bne.w	8008852 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d132      	bne.n	80086ac <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	4413      	add	r3, r2
 800864e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	0151      	lsls	r1, r2, #5
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	440a      	add	r2, r1
 800865c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008660:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008664:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008668:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	015a      	lsls	r2, r3, #5
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	4413      	add	r3, r2
 8008672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	0151      	lsls	r1, r2, #5
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	440a      	add	r2, r1
 8008680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008688:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	4413      	add	r3, r2
 8008692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	0151      	lsls	r1, r2, #5
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	440a      	add	r2, r1
 80086a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086a4:	0cdb      	lsrs	r3, r3, #19
 80086a6:	04db      	lsls	r3, r3, #19
 80086a8:	6113      	str	r3, [r2, #16]
 80086aa:	e074      	b.n	8008796 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	0151      	lsls	r1, r2, #5
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	440a      	add	r2, r1
 80086c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086c6:	0cdb      	lsrs	r3, r3, #19
 80086c8:	04db      	lsls	r3, r3, #19
 80086ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	015a      	lsls	r2, r3, #5
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	0151      	lsls	r1, r2, #5
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	440a      	add	r2, r1
 80086e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	6959      	ldr	r1, [r3, #20]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	440b      	add	r3, r1
 8008708:	1e59      	subs	r1, r3, #1
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008712:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008714:	4baf      	ldr	r3, [pc, #700]	; (80089d4 <USB_EPStartXfer+0x3b4>)
 8008716:	400b      	ands	r3, r1
 8008718:	6939      	ldr	r1, [r7, #16]
 800871a:	0148      	lsls	r0, r1, #5
 800871c:	6979      	ldr	r1, [r7, #20]
 800871e:	4401      	add	r1, r0
 8008720:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008724:	4313      	orrs	r3, r2
 8008726:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008734:	691a      	ldr	r2, [r3, #16]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800873e:	6939      	ldr	r1, [r7, #16]
 8008740:	0148      	lsls	r0, r1, #5
 8008742:	6979      	ldr	r1, [r7, #20]
 8008744:	4401      	add	r1, r0
 8008746:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800874a:	4313      	orrs	r3, r2
 800874c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	78db      	ldrb	r3, [r3, #3]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d11f      	bne.n	8008796 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	015a      	lsls	r2, r3, #5
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	4413      	add	r3, r2
 800875e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	0151      	lsls	r1, r2, #5
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	440a      	add	r2, r1
 800876c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008770:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008774:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	0151      	lsls	r1, r2, #5
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	440a      	add	r2, r1
 800878c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008794:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	4413      	add	r3, r2
 800879e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	0151      	lsls	r1, r2, #5
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	440a      	add	r2, r1
 80087ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087b4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	78db      	ldrb	r3, [r3, #3]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d015      	beq.n	80087ea <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 8100 	beq.w	80089c8 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	f003 030f 	and.w	r3, r3, #15
 80087d8:	2101      	movs	r1, #1
 80087da:	fa01 f303 	lsl.w	r3, r1, r3
 80087de:	6979      	ldr	r1, [r7, #20]
 80087e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087e4:	4313      	orrs	r3, r2
 80087e6:	634b      	str	r3, [r1, #52]	; 0x34
 80087e8:	e0ee      	b.n	80089c8 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d110      	bne.n	800881c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	0151      	lsls	r1, r2, #5
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	440a      	add	r2, r1
 8008810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008814:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	e00f      	b.n	800883c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	4413      	add	r3, r2
 8008824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	0151      	lsls	r1, r2, #5
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	440a      	add	r2, r1
 8008832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800883a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	68d9      	ldr	r1, [r3, #12]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781a      	ldrb	r2, [r3, #0]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	b29b      	uxth	r3, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f9e2 	bl	8008c14 <USB_WritePacket>
 8008850:	e0ba      	b.n	80089c8 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	0151      	lsls	r1, r2, #5
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	440a      	add	r2, r1
 8008868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800886c:	0cdb      	lsrs	r3, r3, #19
 800886e:	04db      	lsls	r3, r3, #19
 8008870:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	015a      	lsls	r2, r3, #5
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	4413      	add	r3, r2
 800887a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	0151      	lsls	r1, r2, #5
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	440a      	add	r2, r1
 8008888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800888c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008890:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008894:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d123      	bne.n	80088e6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088aa:	691a      	ldr	r2, [r3, #16]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088b4:	6939      	ldr	r1, [r7, #16]
 80088b6:	0148      	lsls	r0, r1, #5
 80088b8:	6979      	ldr	r1, [r7, #20]
 80088ba:	4401      	add	r1, r0
 80088bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088c0:	4313      	orrs	r3, r2
 80088c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	0151      	lsls	r1, r2, #5
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	440a      	add	r2, r1
 80088da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088e2:	6113      	str	r3, [r2, #16]
 80088e4:	e033      	b.n	800894e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	695a      	ldr	r2, [r3, #20]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	4413      	add	r3, r2
 80088f0:	1e5a      	subs	r2, r3, #1
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088fa:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008908:	691a      	ldr	r2, [r3, #16]
 800890a:	89fb      	ldrh	r3, [r7, #14]
 800890c:	04d9      	lsls	r1, r3, #19
 800890e:	4b31      	ldr	r3, [pc, #196]	; (80089d4 <USB_EPStartXfer+0x3b4>)
 8008910:	400b      	ands	r3, r1
 8008912:	6939      	ldr	r1, [r7, #16]
 8008914:	0148      	lsls	r0, r1, #5
 8008916:	6979      	ldr	r1, [r7, #20]
 8008918:	4401      	add	r1, r0
 800891a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800891e:	4313      	orrs	r3, r2
 8008920:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	4413      	add	r3, r2
 800892a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892e:	691a      	ldr	r2, [r3, #16]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	89f9      	ldrh	r1, [r7, #14]
 8008936:	fb01 f303 	mul.w	r3, r1, r3
 800893a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800893e:	6939      	ldr	r1, [r7, #16]
 8008940:	0148      	lsls	r0, r1, #5
 8008942:	6979      	ldr	r1, [r7, #20]
 8008944:	4401      	add	r1, r0
 8008946:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800894a:	4313      	orrs	r3, r2
 800894c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	78db      	ldrb	r3, [r3, #3]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d128      	bne.n	80089a8 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008962:	2b00      	cmp	r3, #0
 8008964:	d110      	bne.n	8008988 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	4413      	add	r3, r2
 800896e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	0151      	lsls	r1, r2, #5
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	440a      	add	r2, r1
 800897c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008980:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008984:	6013      	str	r3, [r2, #0]
 8008986:	e00f      	b.n	80089a8 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	4413      	add	r3, r2
 8008990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	0151      	lsls	r1, r2, #5
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	440a      	add	r2, r1
 800899e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	0151      	lsls	r1, r2, #5
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	440a      	add	r2, r1
 80089be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	1ff80000 	.word	0x1ff80000

080089d8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	785b      	ldrb	r3, [r3, #1]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	f040 80ab 	bne.w	8008b4c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d132      	bne.n	8008a64 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	015a      	lsls	r2, r3, #5
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	4413      	add	r3, r2
 8008a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	0151      	lsls	r1, r2, #5
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	440a      	add	r2, r1
 8008a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	0151      	lsls	r1, r2, #5
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	440a      	add	r2, r1
 8008a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	0151      	lsls	r1, r2, #5
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	440a      	add	r2, r1
 8008a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a5c:	0cdb      	lsrs	r3, r3, #19
 8008a5e:	04db      	lsls	r3, r3, #19
 8008a60:	6113      	str	r3, [r2, #16]
 8008a62:	e04e      	b.n	8008b02 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	0151      	lsls	r1, r2, #5
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	440a      	add	r2, r1
 8008a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a7e:	0cdb      	lsrs	r3, r3, #19
 8008a80:	04db      	lsls	r3, r3, #19
 8008a82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	0151      	lsls	r1, r2, #5
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	440a      	add	r2, r1
 8008a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008aa2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008aa6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	695a      	ldr	r2, [r3, #20]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d903      	bls.n	8008abc <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	0151      	lsls	r1, r2, #5
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	440a      	add	r2, r1
 8008ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ada:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae8:	691a      	ldr	r2, [r3, #16]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008af2:	68b9      	ldr	r1, [r7, #8]
 8008af4:	0148      	lsls	r0, r1, #5
 8008af6:	68f9      	ldr	r1, [r7, #12]
 8008af8:	4401      	add	r1, r0
 8008afa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008afe:	4313      	orrs	r3, r2
 8008b00:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	015a      	lsls	r2, r3, #5
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	4413      	add	r3, r2
 8008b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	0151      	lsls	r1, r2, #5
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	440a      	add	r2, r1
 8008b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b20:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d06d      	beq.n	8008c06 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b40:	68f9      	ldr	r1, [r7, #12]
 8008b42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b46:	4313      	orrs	r3, r2
 8008b48:	634b      	str	r3, [r1, #52]	; 0x34
 8008b4a:	e05c      	b.n	8008c06 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	0151      	lsls	r1, r2, #5
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	440a      	add	r2, r1
 8008b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b66:	0cdb      	lsrs	r3, r3, #19
 8008b68:	04db      	lsls	r3, r3, #19
 8008b6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	0151      	lsls	r1, r2, #5
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	440a      	add	r2, r1
 8008b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b8e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	0151      	lsls	r1, r2, #5
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	440a      	add	r2, r1
 8008bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bcc:	691a      	ldr	r2, [r3, #16]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bd6:	68b9      	ldr	r1, [r7, #8]
 8008bd8:	0148      	lsls	r0, r1, #5
 8008bda:	68f9      	ldr	r1, [r7, #12]
 8008bdc:	4401      	add	r1, r0
 8008bde:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008be2:	4313      	orrs	r3, r2
 8008be4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	0151      	lsls	r1, r2, #5
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	440a      	add	r2, r1
 8008bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b089      	sub	sp, #36	; 0x24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	4611      	mov	r1, r2
 8008c20:	461a      	mov	r2, r3
 8008c22:	460b      	mov	r3, r1
 8008c24:	71fb      	strb	r3, [r7, #7]
 8008c26:	4613      	mov	r3, r2
 8008c28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008c32:	88bb      	ldrh	r3, [r7, #4]
 8008c34:	3303      	adds	r3, #3
 8008c36:	089b      	lsrs	r3, r3, #2
 8008c38:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	61bb      	str	r3, [r7, #24]
 8008c3e:	e018      	b.n	8008c72 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	031a      	lsls	r2, r3, #12
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	3301      	adds	r3, #1
 8008c58:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	3301      	adds	r3, #1
 8008c64:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	61bb      	str	r3, [r7, #24]
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d3e2      	bcc.n	8008c40 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3724      	adds	r7, #36	; 0x24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b08b      	sub	sp, #44	; 0x2c
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	4613      	mov	r3, r2
 8008c94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008c9e:	88fb      	ldrh	r3, [r7, #6]
 8008ca0:	089b      	lsrs	r3, r3, #2
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008ca6:	88fb      	ldrh	r3, [r7, #6]
 8008ca8:	f003 0303 	and.w	r3, r3, #3
 8008cac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008cae:	2300      	movs	r3, #0
 8008cb0:	623b      	str	r3, [r7, #32]
 8008cb2:	e014      	b.n	8008cde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	3301      	adds	r3, #1
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	3301      	adds	r3, #1
 8008cd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	623b      	str	r3, [r7, #32]
 8008cde:	6a3a      	ldr	r2, [r7, #32]
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d3e6      	bcc.n	8008cb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008ce6:	8bfb      	ldrh	r3, [r7, #30]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01e      	beq.n	8008d2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f107 0310 	add.w	r3, r7, #16
 8008cfc:	6812      	ldr	r2, [r2, #0]
 8008cfe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	00db      	lsls	r3, r3, #3
 8008d08:	fa22 f303 	lsr.w	r3, r2, r3
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	701a      	strb	r2, [r3, #0]
      i++;
 8008d12:	6a3b      	ldr	r3, [r7, #32]
 8008d14:	3301      	adds	r3, #1
 8008d16:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008d1e:	8bfb      	ldrh	r3, [r7, #30]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d24:	8bfb      	ldrh	r3, [r7, #30]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1ea      	bne.n	8008d00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	372c      	adds	r7, #44	; 0x2c
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d12c      	bne.n	8008dae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	db12      	blt.n	8008d8c <USB_EPSetStall+0x54>
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00f      	beq.n	8008d8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	0151      	lsls	r1, r2, #5
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	440a      	add	r2, r1
 8008d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	0151      	lsls	r1, r2, #5
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	440a      	add	r2, r1
 8008da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008da6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008daa:	6013      	str	r3, [r2, #0]
 8008dac:	e02b      	b.n	8008e06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	db12      	blt.n	8008de6 <USB_EPSetStall+0xae>
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00f      	beq.n	8008de6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	0151      	lsls	r1, r2, #5
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	440a      	add	r2, r1
 8008ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008de0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008de4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	0151      	lsls	r1, r2, #5
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	440a      	add	r2, r1
 8008dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	785b      	ldrb	r3, [r3, #1]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d128      	bne.n	8008e82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	015a      	lsls	r2, r3, #5
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	0151      	lsls	r1, r2, #5
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	440a      	add	r2, r1
 8008e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	78db      	ldrb	r3, [r3, #3]
 8008e54:	2b03      	cmp	r3, #3
 8008e56:	d003      	beq.n	8008e60 <USB_EPClearStall+0x4c>
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	78db      	ldrb	r3, [r3, #3]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d138      	bne.n	8008ed2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	0151      	lsls	r1, r2, #5
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	440a      	add	r2, r1
 8008e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	e027      	b.n	8008ed2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	0151      	lsls	r1, r2, #5
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	440a      	add	r2, r1
 8008e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ea0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	78db      	ldrb	r3, [r3, #3]
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d003      	beq.n	8008eb2 <USB_EPClearStall+0x9e>
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	78db      	ldrb	r3, [r3, #3]
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d10f      	bne.n	8008ed2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	0151      	lsls	r1, r2, #5
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	440a      	add	r2, r1
 8008ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ed0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008efe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	78fb      	ldrb	r3, [r7, #3]
 8008f0e:	011b      	lsls	r3, r3, #4
 8008f10:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008f14:	68f9      	ldr	r1, [r7, #12]
 8008f16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f46:	f023 0303 	bic.w	r3, r3, #3
 8008f4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f5a:	f023 0302 	bic.w	r3, r3, #2
 8008f5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b085      	sub	sp, #20
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f88:	f023 0303 	bic.w	r3, r3, #3
 8008f8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f9c:	f043 0302 	orr.w	r3, r3, #2
 8008fa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b085      	sub	sp, #20
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	0c1b      	lsrs	r3, r3, #16
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3714      	adds	r7, #20
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr

0800900a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800900a:	b480      	push	{r7}
 800900c:	b085      	sub	sp, #20
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	4013      	ands	r3, r2
 800902c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	b29b      	uxth	r3, r3
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800903e:	b480      	push	{r7}
 8009040:	b085      	sub	sp, #20
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	460b      	mov	r3, r1
 8009048:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800904e:	78fb      	ldrb	r3, [r7, #3]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	4013      	ands	r3, r2
 800906a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800906c:	68bb      	ldr	r3, [r7, #8]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800907a:	b480      	push	{r7}
 800907c:	b087      	sub	sp, #28
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	460b      	mov	r3, r1
 8009084:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800909e:	78fb      	ldrb	r3, [r7, #3]
 80090a0:	f003 030f 	and.w	r3, r3, #15
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	fa22 f303 	lsr.w	r3, r2, r3
 80090aa:	01db      	lsls	r3, r3, #7
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80090b4:	78fb      	ldrb	r3, [r7, #3]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	4013      	ands	r3, r2
 80090c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090c8:	68bb      	ldr	r3, [r7, #8]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	371c      	adds	r7, #28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b083      	sub	sp, #12
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	f003 0301 	and.w	r3, r3, #1
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b085      	sub	sp, #20
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800910c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009110:	f023 0307 	bic.w	r3, r3, #7
 8009114:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009128:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	333c      	adds	r3, #60	; 0x3c
 800914a:	3304      	adds	r3, #4
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	4a1c      	ldr	r2, [pc, #112]	; (80091c4 <USB_EP0_OutStart+0x8c>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d90a      	bls.n	800916e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009168:	d101      	bne.n	800916e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	e024      	b.n	80091b8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009174:	461a      	mov	r2, r3
 8009176:	2300      	movs	r3, #0
 8009178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800918c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800919c:	f043 0318 	orr.w	r3, r3, #24
 80091a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80091b4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	4f54300a 	.word	0x4f54300a

080091c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	3301      	adds	r3, #1
 80091d8:	60fb      	str	r3, [r7, #12]
 80091da:	4a13      	ldr	r2, [pc, #76]	; (8009228 <USB_CoreReset+0x60>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d901      	bls.n	80091e4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e01a      	b.n	800921a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	daf3      	bge.n	80091d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80091ec:	2300      	movs	r3, #0
 80091ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	f043 0201 	orr.w	r2, r3, #1
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	3301      	adds	r3, #1
 8009200:	60fb      	str	r3, [r7, #12]
 8009202:	4a09      	ldr	r2, [pc, #36]	; (8009228 <USB_CoreReset+0x60>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d901      	bls.n	800920c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	e006      	b.n	800921a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	2b01      	cmp	r3, #1
 8009216:	d0f1      	beq.n	80091fc <USB_CoreReset+0x34>

  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	00030d40 	.word	0x00030d40

0800922c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8009238:	f241 0074 	movw	r0, #4212	; 0x1074
 800923c:	f003 fe86 	bl	800cf4c <USBD_static_malloc>
 8009240:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d105      	bne.n	8009254 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009250:	2302      	movs	r3, #2
 8009252:	e034      	b.n	80092be <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	7c1b      	ldrb	r3, [r3, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d115      	bne.n	8009290 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009268:	2202      	movs	r2, #2
 800926a:	2101      	movs	r1, #1
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f003 fc71 	bl	800cb54 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800927a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800927e:	2202      	movs	r2, #2
 8009280:	2181      	movs	r1, #129	; 0x81
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f003 fc66 	bl	800cb54 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	871a      	strh	r2, [r3, #56]	; 0x38
 800928e:	e012      	b.n	80092b6 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009290:	2340      	movs	r3, #64	; 0x40
 8009292:	2202      	movs	r2, #2
 8009294:	2101      	movs	r1, #1
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f003 fc5c 	bl	800cb54 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80092a4:	2340      	movs	r3, #64	; 0x40
 80092a6:	2202      	movs	r2, #2
 80092a8:	2181      	movs	r1, #129	; 0x81
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f003 fc52 	bl	800cb54 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f999 	bl	80095ee <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	460b      	mov	r3, r1
 80092d0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80092d2:	2101      	movs	r1, #1
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f003 fc7b 	bl	800cbd0 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80092e2:	2181      	movs	r1, #129	; 0x81
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f003 fc73 	bl	800cbd0 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00c      	beq.n	8009314 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f9dd 	bl	80096ba <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009306:	4618      	mov	r0, r3
 8009308:	f003 fe2e 	bl	800cf68 <USBD_static_free>
    pdev->pClassData = NULL;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
	...

08009320 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009330:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8009336:	2300      	movs	r3, #0
 8009338:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009340:	2303      	movs	r3, #3
 8009342:	e0db      	b.n	80094fc <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800934c:	2b00      	cmp	r3, #0
 800934e:	d04e      	beq.n	80093ee <USBD_MSC_Setup+0xce>
 8009350:	2b20      	cmp	r3, #32
 8009352:	f040 80cb 	bne.w	80094ec <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	785b      	ldrb	r3, [r3, #1]
 800935a:	2bfe      	cmp	r3, #254	; 0xfe
 800935c:	d002      	beq.n	8009364 <USBD_MSC_Setup+0x44>
 800935e:	2bff      	cmp	r3, #255	; 0xff
 8009360:	d025      	beq.n	80093ae <USBD_MSC_Setup+0x8e>
 8009362:	e03c      	b.n	80093de <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	885b      	ldrh	r3, [r3, #2]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d119      	bne.n	80093a0 <USBD_MSC_Setup+0x80>
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	88db      	ldrh	r3, [r3, #6]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d115      	bne.n	80093a0 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800937a:	2b00      	cmp	r3, #0
 800937c:	da10      	bge.n	80093a0 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	4798      	blx	r3
 8009388:	4603      	mov	r3, r0
 800938a:	461a      	mov	r2, r3
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	2201      	movs	r2, #1
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f002 fef5 	bl	800c186 <USBD_CtlSendData>
 800939c:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800939e:	e025      	b.n	80093ec <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f002 fe7e 	bl	800c0a4 <USBD_CtlError>
            ret = USBD_FAIL;
 80093a8:	2303      	movs	r3, #3
 80093aa:	75fb      	strb	r3, [r7, #23]
          break;
 80093ac:	e01e      	b.n	80093ec <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	885b      	ldrh	r3, [r3, #2]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10c      	bne.n	80093d0 <USBD_MSC_Setup+0xb0>
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	88db      	ldrh	r3, [r3, #6]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d108      	bne.n	80093d0 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	db03      	blt.n	80093d0 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f94f 	bl	800966c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093ce:	e00d      	b.n	80093ec <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f002 fe66 	bl	800c0a4 <USBD_CtlError>
            ret = USBD_FAIL;
 80093d8:	2303      	movs	r3, #3
 80093da:	75fb      	strb	r3, [r7, #23]
          break;
 80093dc:	e006      	b.n	80093ec <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f002 fe5f 	bl	800c0a4 <USBD_CtlError>
          ret = USBD_FAIL;
 80093e6:	2303      	movs	r3, #3
 80093e8:	75fb      	strb	r3, [r7, #23]
          break;
 80093ea:	bf00      	nop
      }
      break;
 80093ec:	e085      	b.n	80094fa <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	785b      	ldrb	r3, [r3, #1]
 80093f2:	2b0b      	cmp	r3, #11
 80093f4:	d871      	bhi.n	80094da <USBD_MSC_Setup+0x1ba>
 80093f6:	a201      	add	r2, pc, #4	; (adr r2, 80093fc <USBD_MSC_Setup+0xdc>)
 80093f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fc:	0800942d 	.word	0x0800942d
 8009400:	080094a9 	.word	0x080094a9
 8009404:	080094db 	.word	0x080094db
 8009408:	080094db 	.word	0x080094db
 800940c:	080094db 	.word	0x080094db
 8009410:	080094db 	.word	0x080094db
 8009414:	080094db 	.word	0x080094db
 8009418:	080094db 	.word	0x080094db
 800941c:	080094db 	.word	0x080094db
 8009420:	080094db 	.word	0x080094db
 8009424:	08009457 	.word	0x08009457
 8009428:	08009481 	.word	0x08009481
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b03      	cmp	r3, #3
 8009436:	d107      	bne.n	8009448 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009438:	f107 030e 	add.w	r3, r7, #14
 800943c:	2202      	movs	r2, #2
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f002 fea0 	bl	800c186 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009446:	e050      	b.n	80094ea <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f002 fe2a 	bl	800c0a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009450:	2303      	movs	r3, #3
 8009452:	75fb      	strb	r3, [r7, #23]
          break;
 8009454:	e049      	b.n	80094ea <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b03      	cmp	r3, #3
 8009460:	d107      	bne.n	8009472 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	3304      	adds	r3, #4
 8009466:	2201      	movs	r2, #1
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f002 fe8b 	bl	800c186 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009470:	e03b      	b.n	80094ea <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f002 fe15 	bl	800c0a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800947a:	2303      	movs	r3, #3
 800947c:	75fb      	strb	r3, [r7, #23]
          break;
 800947e:	e034      	b.n	80094ea <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b03      	cmp	r3, #3
 800948a:	d106      	bne.n	800949a <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	885b      	ldrh	r3, [r3, #2]
 8009490:	b2db      	uxtb	r3, r3
 8009492:	461a      	mov	r2, r3
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009498:	e027      	b.n	80094ea <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f002 fe01 	bl	800c0a4 <USBD_CtlError>
            ret = USBD_FAIL;
 80094a2:	2303      	movs	r3, #3
 80094a4:	75fb      	strb	r3, [r7, #23]
          break;
 80094a6:	e020      	b.n	80094ea <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d119      	bne.n	80094e8 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	885b      	ldrh	r3, [r3, #2]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d115      	bne.n	80094e8 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	889b      	ldrh	r3, [r3, #4]
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f003 fbb9 	bl	800cc3c <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	889b      	ldrh	r3, [r3, #4]
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 faa6 	bl	8009a24 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80094d8:	e006      	b.n	80094e8 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f002 fde1 	bl	800c0a4 <USBD_CtlError>
          ret = USBD_FAIL;
 80094e2:	2303      	movs	r3, #3
 80094e4:	75fb      	strb	r3, [r7, #23]
          break;
 80094e6:	e000      	b.n	80094ea <USBD_MSC_Setup+0x1ca>
          break;
 80094e8:	bf00      	nop
      }
      break;
 80094ea:	e006      	b.n	80094fa <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f002 fdd8 	bl	800c0a4 <USBD_CtlError>
      ret = USBD_FAIL;
 80094f4:	2303      	movs	r3, #3
 80094f6:	75fb      	strb	r3, [r7, #23]
      break;
 80094f8:	bf00      	nop
  }

  return (uint8_t)ret;
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	4619      	mov	r1, r3
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f8e4 	bl	80096e2 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	460b      	mov	r3, r1
 800952e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8009530:	78fb      	ldrb	r3, [r7, #3]
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f90c 	bl	8009752 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2220      	movs	r2, #32
 8009550:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8009552:	4b03      	ldr	r3, [pc, #12]	; (8009560 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	20000084 	.word	0x20000084

08009564 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2220      	movs	r2, #32
 8009570:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8009572:	4b03      	ldr	r3, [pc, #12]	; (8009580 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8009574:	4618      	mov	r0, r3
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	200000a4 	.word	0x200000a4

08009584 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2220      	movs	r2, #32
 8009590:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8009592:	4b03      	ldr	r3, [pc, #12]	; (80095a0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009594:	4618      	mov	r0, r3
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	200000c4 	.word	0x200000c4

080095a4 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	220a      	movs	r2, #10
 80095b0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80095b2:	4b03      	ldr	r3, [pc, #12]	; (80095c0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	200000e4 	.word	0x200000e4

080095c4 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e004      	b.n	80095e2 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	370c      	adds	r7, #12
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095fc:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d02f      	beq.n	8009664 <MSC_BOT_Init+0x76>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009616:	2200      	movs	r2, #0
 8009618:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009622:	2200      	movs	r2, #0
 8009624:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800962e:	2200      	movs	r2, #0
 8009630:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2000      	movs	r0, #0
 800963e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8009640:	2101      	movs	r1, #1
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f003 fafa 	bl	800cc3c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8009648:	2181      	movs	r1, #129	; 0x81
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f003 faf6 	bl	800cc3c <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009656:	3210      	adds	r2, #16
 8009658:	231f      	movs	r3, #31
 800965a:	2101      	movs	r1, #1
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f003 fc29 	bl	800ceb4 <USBD_LL_PrepareReceive>
 8009662:	e000      	b.n	8009666 <MSC_BOT_Init+0x78>
    return;
 8009664:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800967a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d017      	beq.n	80096b2 <MSC_BOT_Reset+0x46>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2201      	movs	r2, #1
 800968c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800968e:	2181      	movs	r1, #129	; 0x81
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f003 fb3f 	bl	800cd14 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8009696:	2101      	movs	r1, #1
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f003 fb3b 	bl	800cd14 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80096a4:	3210      	adds	r2, #16
 80096a6:	231f      	movs	r3, #31
 80096a8:	2101      	movs	r1, #1
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f003 fc02 	bl	800ceb4 <USBD_LL_PrepareReceive>
 80096b0:	e000      	b.n	80096b4 <MSC_BOT_Reset+0x48>
    return;
 80096b2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b085      	sub	sp, #20
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096c8:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	721a      	strb	r2, [r3, #8]
  }
}
 80096d6:	bf00      	nop
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b084      	sub	sp, #16
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	460b      	mov	r3, r1
 80096ec:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096f4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d022      	beq.n	8009742 <MSC_BOT_DataIn+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	7a1b      	ldrb	r3, [r3, #8]
 8009700:	2b02      	cmp	r3, #2
 8009702:	d005      	beq.n	8009710 <MSC_BOT_DataIn+0x2e>
 8009704:	2b02      	cmp	r3, #2
 8009706:	db1e      	blt.n	8009746 <MSC_BOT_DataIn+0x64>
 8009708:	3b03      	subs	r3, #3
 800970a:	2b01      	cmp	r3, #1
 800970c:	d81b      	bhi.n	8009746 <MSC_BOT_DataIn+0x64>
 800970e:	e013      	b.n	8009738 <MSC_BOT_DataIn+0x56>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009716:	7f59      	ldrb	r1, [r3, #29]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800971e:	331f      	adds	r3, #31
 8009720:	461a      	mov	r2, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f9ac 	bl	8009a80 <SCSI_ProcessCmd>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	da0d      	bge.n	800974a <MSC_BOT_DataIn+0x68>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800972e:	2101      	movs	r1, #1
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f90d 	bl	8009950 <MSC_BOT_SendCSW>
      }
      break;
 8009736:	e008      	b.n	800974a <MSC_BOT_DataIn+0x68>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009738:	2100      	movs	r1, #0
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f908 	bl	8009950 <MSC_BOT_SendCSW>
      break;
 8009740:	e004      	b.n	800974c <MSC_BOT_DataIn+0x6a>
    return;
 8009742:	bf00      	nop
 8009744:	e002      	b.n	800974c <MSC_BOT_DataIn+0x6a>

    default:
      break;
 8009746:	bf00      	nop
 8009748:	e000      	b.n	800974c <MSC_BOT_DataIn+0x6a>
      break;
 800974a:	bf00      	nop
  }
}
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	460b      	mov	r3, r1
 800975c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009764:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d01e      	beq.n	80097aa <MSC_BOT_DataOut+0x58>
  {
    return;
  }

  switch (hmsc->bot_state)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	7a1b      	ldrb	r3, [r3, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <MSC_BOT_DataOut+0x28>
 8009774:	2b01      	cmp	r3, #1
 8009776:	d004      	beq.n	8009782 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8009778:	e01a      	b.n	80097b0 <MSC_BOT_DataOut+0x5e>
      MSC_BOT_CBW_Decode(pdev);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f81c 	bl	80097b8 <MSC_BOT_CBW_Decode>
      break;
 8009780:	e016      	b.n	80097b0 <MSC_BOT_DataOut+0x5e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009788:	7f59      	ldrb	r1, [r3, #29]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009790:	331f      	adds	r3, #31
 8009792:	461a      	mov	r2, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f973 	bl	8009a80 <SCSI_ProcessCmd>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	da06      	bge.n	80097ae <MSC_BOT_DataOut+0x5c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80097a0:	2101      	movs	r1, #1
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f8d4 	bl	8009950 <MSC_BOT_SendCSW>
      break;
 80097a8:	e001      	b.n	80097ae <MSC_BOT_DataOut+0x5c>
    return;
 80097aa:	bf00      	nop
 80097ac:	e000      	b.n	80097b0 <MSC_BOT_DataOut+0x5e>
      break;
 80097ae:	bf00      	nop
  }
}
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097c6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 8083 	beq.w	80098d6 <MSC_BOT_CBW_Decode+0x11e>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80097de:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80097ee:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80097f0:	2101      	movs	r1, #1
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f003 fb96 	bl	800cf24 <USBD_LL_GetRxDataSize>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b1f      	cmp	r3, #31
 80097fc:	d118      	bne.n	8009830 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009804:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8009806:	4a37      	ldr	r2, [pc, #220]	; (80098e4 <MSC_BOT_CBW_Decode+0x12c>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d111      	bne.n	8009830 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009812:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009814:	2b01      	cmp	r3, #1
 8009816:	d80b      	bhi.n	8009830 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800981e:	7f9b      	ldrb	r3, [r3, #30]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d005      	beq.n	8009830 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bCBLength > 16U))
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800982a:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800982c:	2b10      	cmp	r3, #16
 800982e:	d90f      	bls.n	8009850 <MSC_BOT_CBW_Decode+0x98>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009836:	7f59      	ldrb	r1, [r3, #29]
 8009838:	2320      	movs	r3, #32
 800983a:	2205      	movs	r2, #5
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fe0d 	bl	800a45c <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2202      	movs	r2, #2
 8009846:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f8b7 	bl	80099bc <MSC_BOT_Abort>
 800984e:	e045      	b.n	80098dc <MSC_BOT_CBW_Decode+0x124>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009856:	7f59      	ldrb	r1, [r3, #29]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800985e:	331f      	adds	r3, #31
 8009860:	461a      	mov	r2, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f90c 	bl	8009a80 <SCSI_ProcessCmd>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	da0c      	bge.n	8009888 <MSC_BOT_CBW_Decode+0xd0>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	7a1b      	ldrb	r3, [r3, #8]
 8009872:	2b05      	cmp	r3, #5
 8009874:	d104      	bne.n	8009880 <MSC_BOT_CBW_Decode+0xc8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009876:	2101      	movs	r1, #1
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f869 	bl	8009950 <MSC_BOT_SendCSW>
 800987e:	e02d      	b.n	80098dc <MSC_BOT_CBW_Decode+0x124>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f89b 	bl	80099bc <MSC_BOT_Abort>
 8009886:	e029      	b.n	80098dc <MSC_BOT_CBW_Decode+0x124>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	7a1b      	ldrb	r3, [r3, #8]
 800988c:	2b02      	cmp	r3, #2
 800988e:	d024      	beq.n	80098da <MSC_BOT_CBW_Decode+0x122>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009894:	2b01      	cmp	r3, #1
 8009896:	d020      	beq.n	80098da <MSC_BOT_CBW_Decode+0x122>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800989c:	2b03      	cmp	r3, #3
 800989e:	d01c      	beq.n	80098da <MSC_BOT_CBW_Decode+0x122>
    {
      if (hmsc->bot_data_length > 0U)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d009      	beq.n	80098bc <MSC_BOT_CBW_Decode+0x104>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f103 0110 	add.w	r1, r3, #16
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	461a      	mov	r2, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f817 	bl	80098e8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80098ba:	e00f      	b.n	80098dc <MSC_BOT_CBW_Decode+0x124>
      }
      else if (hmsc->bot_data_length == 0U)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d104      	bne.n	80098ce <MSC_BOT_CBW_Decode+0x116>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80098c4:	2100      	movs	r1, #0
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f842 	bl	8009950 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80098cc:	e006      	b.n	80098dc <MSC_BOT_CBW_Decode+0x124>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f874 	bl	80099bc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80098d4:	e002      	b.n	80098dc <MSC_BOT_CBW_Decode+0x124>
    return;
 80098d6:	bf00      	nop
 80098d8:	e000      	b.n	80098dc <MSC_BOT_CBW_Decode+0x124>
      }
    }
    else
    {
      return;
 80098da:	bf00      	nop
    }
  }
}
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	43425355 	.word	0x43425355

080098e8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098fa:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	4293      	cmp	r3, r2
 8009908:	bf28      	it	cs
 800990a:	4613      	movcs	r3, r2
 800990c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d019      	beq.n	8009948 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800991a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009926:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800992e:	2200      	movs	r2, #0
 8009930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2204      	movs	r2, #4
 8009938:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	2181      	movs	r1, #129	; 0x81
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f003 fa7f 	bl	800ce44 <USBD_LL_Transmit>
 8009946:	e000      	b.n	800994a <MSC_BOT_SendData+0x62>
    return;
 8009948:	bf00      	nop
}
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009962:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d022      	beq.n	80099b0 <MSC_BOT_SendCSW+0x60>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009970:	461a      	mov	r2, r3
 8009972:	4b11      	ldr	r3, [pc, #68]	; (80099b8 <MSC_BOT_SendCSW+0x68>)
 8009974:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800997c:	461a      	mov	r2, r3
 800997e:	78fb      	ldrb	r3, [r7, #3]
 8009980:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8009990:	3210      	adds	r2, #16
 8009992:	230d      	movs	r3, #13
 8009994:	2181      	movs	r1, #129	; 0x81
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f003 fa54 	bl	800ce44 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80099a2:	3210      	adds	r2, #16
 80099a4:	231f      	movs	r3, #31
 80099a6:	2101      	movs	r1, #1
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f003 fa83 	bl	800ceb4 <USBD_LL_PrepareReceive>
 80099ae:	e000      	b.n	80099b2 <MSC_BOT_SendCSW+0x62>
    return;
 80099b0:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	53425355 	.word	0x53425355

080099bc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099ca:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d024      	beq.n	8009a1c <MSC_BOT_Abort+0x60>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d8:	7f1b      	ldrb	r3, [r3, #28]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10d      	bne.n	80099fa <MSC_BOT_Abort+0x3e>
      (hmsc->cbw.dDataLength != 0U) &&
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099e4:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d007      	beq.n	80099fa <MSC_BOT_Abort+0x3e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d103      	bne.n	80099fa <MSC_BOT_Abort+0x3e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80099f2:	2101      	movs	r1, #1
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f003 f957 	bl	800cca8 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80099fa:	2181      	movs	r1, #129	; 0x81
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f003 f953 	bl	800cca8 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	7a5b      	ldrb	r3, [r3, #9]
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d109      	bne.n	8009a1e <MSC_BOT_Abort+0x62>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8009a0a:	2181      	movs	r1, #129	; 0x81
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f003 f94b 	bl	800cca8 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8009a12:	2101      	movs	r1, #1
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f003 f947 	bl	800cca8 <USBD_LL_StallEP>
 8009a1a:	e000      	b.n	8009a1e <MSC_BOT_Abort+0x62>
    return;
 8009a1c:	bf00      	nop
  }
}
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a36:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d019      	beq.n	8009a72 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	7a5b      	ldrb	r3, [r3, #9]
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d108      	bne.n	8009a58 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8009a46:	2181      	movs	r1, #129	; 0x81
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f003 f92d 	bl	800cca8 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8009a4e:	2101      	movs	r1, #1
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f003 f929 	bl	800cca8 <USBD_LL_StallEP>
 8009a56:	e00f      	b.n	8009a78 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	da0a      	bge.n	8009a76 <MSC_BOT_CplClrFeature+0x52>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	7a5b      	ldrb	r3, [r3, #9]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d006      	beq.n	8009a76 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009a68:	2101      	movs	r1, #1
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7ff ff70 	bl	8009950 <MSC_BOT_SendCSW>
 8009a70:	e002      	b.n	8009a78 <MSC_BOT_CplClrFeature+0x54>
    return;
 8009a72:	bf00      	nop
 8009a74:	e000      	b.n	8009a78 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8009a76:	bf00      	nop
  }
}
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a94:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d102      	bne.n	8009aa2 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8009a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa0:	e168      	b.n	8009d74 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	2baa      	cmp	r3, #170	; 0xaa
 8009aa8:	f000 8144 	beq.w	8009d34 <SCSI_ProcessCmd+0x2b4>
 8009aac:	2baa      	cmp	r3, #170	; 0xaa
 8009aae:	f300 8153 	bgt.w	8009d58 <SCSI_ProcessCmd+0x2d8>
 8009ab2:	2ba8      	cmp	r3, #168	; 0xa8
 8009ab4:	f000 812c 	beq.w	8009d10 <SCSI_ProcessCmd+0x290>
 8009ab8:	2ba8      	cmp	r3, #168	; 0xa8
 8009aba:	f300 814d 	bgt.w	8009d58 <SCSI_ProcessCmd+0x2d8>
 8009abe:	2b5a      	cmp	r3, #90	; 0x5a
 8009ac0:	f300 80c0 	bgt.w	8009c44 <SCSI_ProcessCmd+0x1c4>
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f2c0 8147 	blt.w	8009d58 <SCSI_ProcessCmd+0x2d8>
 8009aca:	2b5a      	cmp	r3, #90	; 0x5a
 8009acc:	f200 8144 	bhi.w	8009d58 <SCSI_ProcessCmd+0x2d8>
 8009ad0:	a201      	add	r2, pc, #4	; (adr r2, 8009ad8 <SCSI_ProcessCmd+0x58>)
 8009ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad6:	bf00      	nop
 8009ad8:	08009c4b 	.word	0x08009c4b
 8009adc:	08009d59 	.word	0x08009d59
 8009ae0:	08009d59 	.word	0x08009d59
 8009ae4:	08009c5d 	.word	0x08009c5d
 8009ae8:	08009d59 	.word	0x08009d59
 8009aec:	08009d59 	.word	0x08009d59
 8009af0:	08009d59 	.word	0x08009d59
 8009af4:	08009d59 	.word	0x08009d59
 8009af8:	08009d59 	.word	0x08009d59
 8009afc:	08009d59 	.word	0x08009d59
 8009b00:	08009d59 	.word	0x08009d59
 8009b04:	08009d59 	.word	0x08009d59
 8009b08:	08009d59 	.word	0x08009d59
 8009b0c:	08009d59 	.word	0x08009d59
 8009b10:	08009d59 	.word	0x08009d59
 8009b14:	08009d59 	.word	0x08009d59
 8009b18:	08009d59 	.word	0x08009d59
 8009b1c:	08009d59 	.word	0x08009d59
 8009b20:	08009c6f 	.word	0x08009c6f
 8009b24:	08009d59 	.word	0x08009d59
 8009b28:	08009d59 	.word	0x08009d59
 8009b2c:	08009d59 	.word	0x08009d59
 8009b30:	08009d59 	.word	0x08009d59
 8009b34:	08009d59 	.word	0x08009d59
 8009b38:	08009d59 	.word	0x08009d59
 8009b3c:	08009d59 	.word	0x08009d59
 8009b40:	08009ca5 	.word	0x08009ca5
 8009b44:	08009c81 	.word	0x08009c81
 8009b48:	08009d59 	.word	0x08009d59
 8009b4c:	08009d59 	.word	0x08009d59
 8009b50:	08009c93 	.word	0x08009c93
 8009b54:	08009d59 	.word	0x08009d59
 8009b58:	08009d59 	.word	0x08009d59
 8009b5c:	08009d59 	.word	0x08009d59
 8009b60:	08009d59 	.word	0x08009d59
 8009b64:	08009cc9 	.word	0x08009cc9
 8009b68:	08009d59 	.word	0x08009d59
 8009b6c:	08009cdb 	.word	0x08009cdb
 8009b70:	08009d59 	.word	0x08009d59
 8009b74:	08009d59 	.word	0x08009d59
 8009b78:	08009cff 	.word	0x08009cff
 8009b7c:	08009d59 	.word	0x08009d59
 8009b80:	08009d23 	.word	0x08009d23
 8009b84:	08009d59 	.word	0x08009d59
 8009b88:	08009d59 	.word	0x08009d59
 8009b8c:	08009d59 	.word	0x08009d59
 8009b90:	08009d59 	.word	0x08009d59
 8009b94:	08009d47 	.word	0x08009d47
 8009b98:	08009d59 	.word	0x08009d59
 8009b9c:	08009d59 	.word	0x08009d59
 8009ba0:	08009d59 	.word	0x08009d59
 8009ba4:	08009d59 	.word	0x08009d59
 8009ba8:	08009d59 	.word	0x08009d59
 8009bac:	08009d59 	.word	0x08009d59
 8009bb0:	08009d59 	.word	0x08009d59
 8009bb4:	08009d59 	.word	0x08009d59
 8009bb8:	08009d59 	.word	0x08009d59
 8009bbc:	08009d59 	.word	0x08009d59
 8009bc0:	08009d59 	.word	0x08009d59
 8009bc4:	08009d59 	.word	0x08009d59
 8009bc8:	08009d59 	.word	0x08009d59
 8009bcc:	08009d59 	.word	0x08009d59
 8009bd0:	08009d59 	.word	0x08009d59
 8009bd4:	08009d59 	.word	0x08009d59
 8009bd8:	08009d59 	.word	0x08009d59
 8009bdc:	08009d59 	.word	0x08009d59
 8009be0:	08009d59 	.word	0x08009d59
 8009be4:	08009d59 	.word	0x08009d59
 8009be8:	08009d59 	.word	0x08009d59
 8009bec:	08009d59 	.word	0x08009d59
 8009bf0:	08009d59 	.word	0x08009d59
 8009bf4:	08009d59 	.word	0x08009d59
 8009bf8:	08009d59 	.word	0x08009d59
 8009bfc:	08009d59 	.word	0x08009d59
 8009c00:	08009d59 	.word	0x08009d59
 8009c04:	08009d59 	.word	0x08009d59
 8009c08:	08009d59 	.word	0x08009d59
 8009c0c:	08009d59 	.word	0x08009d59
 8009c10:	08009d59 	.word	0x08009d59
 8009c14:	08009d59 	.word	0x08009d59
 8009c18:	08009d59 	.word	0x08009d59
 8009c1c:	08009d59 	.word	0x08009d59
 8009c20:	08009d59 	.word	0x08009d59
 8009c24:	08009d59 	.word	0x08009d59
 8009c28:	08009d59 	.word	0x08009d59
 8009c2c:	08009d59 	.word	0x08009d59
 8009c30:	08009d59 	.word	0x08009d59
 8009c34:	08009d59 	.word	0x08009d59
 8009c38:	08009d59 	.word	0x08009d59
 8009c3c:	08009d59 	.word	0x08009d59
 8009c40:	08009cb7 	.word	0x08009cb7
 8009c44:	2b9e      	cmp	r3, #158	; 0x9e
 8009c46:	d051      	beq.n	8009cec <SCSI_ProcessCmd+0x26c>
 8009c48:	e086      	b.n	8009d58 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8009c4a:	7afb      	ldrb	r3, [r7, #11]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f000 f893 	bl	8009d7c <SCSI_TestUnitReady>
 8009c56:	4603      	mov	r3, r0
 8009c58:	75fb      	strb	r3, [r7, #23]
      break;
 8009c5a:	e089      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009c5c:	7afb      	ldrb	r3, [r7, #11]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	4619      	mov	r1, r3
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 fb64 	bl	800a330 <SCSI_RequestSense>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c6c:	e080      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8009c6e:	7afb      	ldrb	r3, [r7, #11]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	4619      	mov	r1, r3
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 f8d5 	bl	8009e24 <SCSI_Inquiry>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c7e:	e077      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009c80:	7afb      	ldrb	r3, [r7, #11]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	4619      	mov	r1, r3
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 fc40 	bl	800a50c <SCSI_StartStopUnit>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c90:	e06e      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009c92:	7afb      	ldrb	r3, [r7, #11]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	4619      	mov	r1, r3
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 fc90 	bl	800a5be <SCSI_AllowPreventRemovable>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ca2:	e065      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009ca4:	7afb      	ldrb	r3, [r7, #11]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	4619      	mov	r1, r3
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f000 fae8 	bl	800a280 <SCSI_ModeSense6>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8009cb4:	e05c      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009cb6:	7afb      	ldrb	r3, [r7, #11]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	4619      	mov	r1, r3
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f000 fb0b 	bl	800a2d8 <SCSI_ModeSense10>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8009cc6:	e053      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009cc8:	7afb      	ldrb	r3, [r7, #11]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 fa61 	bl	800a196 <SCSI_ReadFormatCapacity>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8009cd8:	e04a      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009cda:	7afb      	ldrb	r3, [r7, #11]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f917 	bl	8009f14 <SCSI_ReadCapacity10>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8009cea:	e041      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009cec:	7afb      	ldrb	r3, [r7, #11]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f000 f994 	bl	800a020 <SCSI_ReadCapacity16>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8009cfc:	e038      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009cfe:	7afb      	ldrb	r3, [r7, #11]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	4619      	mov	r1, r3
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 fc87 	bl	800a618 <SCSI_Read10>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d0e:	e02f      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009d10:	7afb      	ldrb	r3, [r7, #11]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	4619      	mov	r1, r3
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 fd2c 	bl	800a774 <SCSI_Read12>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d20:	e026      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8009d22:	7afb      	ldrb	r3, [r7, #11]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	4619      	mov	r1, r3
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 fddb 	bl	800a8e4 <SCSI_Write10>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	75fb      	strb	r3, [r7, #23]
      break;
 8009d32:	e01d      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009d34:	7afb      	ldrb	r3, [r7, #11]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 fea4 	bl	800aa88 <SCSI_Write12>
 8009d40:	4603      	mov	r3, r0
 8009d42:	75fb      	strb	r3, [r7, #23]
      break;
 8009d44:	e014      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009d46:	7afb      	ldrb	r3, [r7, #11]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 ff7d 	bl	800ac4c <SCSI_Verify10>
 8009d52:	4603      	mov	r3, r0
 8009d54:	75fb      	strb	r3, [r7, #23]
      break;
 8009d56:	e00b      	b.n	8009d70 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009d58:	7af9      	ldrb	r1, [r7, #11]
 8009d5a:	2320      	movs	r3, #32
 8009d5c:	2205      	movs	r2, #5
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f000 fb7c 	bl	800a45c <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	2202      	movs	r2, #2
 8009d68:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009d6a:	23ff      	movs	r3, #255	; 0xff
 8009d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d6e:	bf00      	nop
  }

  return ret;
 8009d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	460b      	mov	r3, r1
 8009d86:	607a      	str	r2, [r7, #4]
 8009d88:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d90:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d102      	bne.n	8009d9e <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8009d98:	f04f 33ff 	mov.w	r3, #4294967295
 8009d9c:	e03e      	b.n	8009e1c <SCSI_TestUnitReady+0xa0>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00b      	beq.n	8009dc2 <SCSI_TestUnitReady+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009db0:	7f59      	ldrb	r1, [r3, #29]
 8009db2:	2320      	movs	r3, #32
 8009db4:	2205      	movs	r2, #5
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 fb50 	bl	800a45c <SCSI_SenseCode>

    return -1;
 8009dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc0:	e02c      	b.n	8009e1c <SCSI_TestUnitReady+0xa0>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dc8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d10b      	bne.n	8009de8 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009dd0:	7af9      	ldrb	r1, [r7, #11]
 8009dd2:	233a      	movs	r3, #58	; 0x3a
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f000 fb40 	bl	800a45c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	2205      	movs	r2, #5
 8009de0:	721a      	strb	r2, [r3, #8]
    return -1;
 8009de2:	f04f 33ff 	mov.w	r3, #4294967295
 8009de6:	e019      	b.n	8009e1c <SCSI_TestUnitReady+0xa0>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	7afa      	ldrb	r2, [r7, #11]
 8009df2:	4610      	mov	r0, r2
 8009df4:	4798      	blx	r3
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00b      	beq.n	8009e14 <SCSI_TestUnitReady+0x98>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009dfc:	7af9      	ldrb	r1, [r7, #11]
 8009dfe:	233a      	movs	r3, #58	; 0x3a
 8009e00:	2202      	movs	r2, #2
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 fb2a 	bl	800a45c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2205      	movs	r2, #5
 8009e0c:	721a      	strb	r2, [r3, #8]

    return -1;
 8009e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e12:	e003      	b.n	8009e1c <SCSI_TestUnitReady+0xa0>
  }
  hmsc->bot_data_length = 0U;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	2200      	movs	r2, #0
 8009e18:	60da      	str	r2, [r3, #12]

  return 0;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3718      	adds	r7, #24
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b088      	sub	sp, #32
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e38:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d102      	bne.n	8009e46 <SCSI_Inquiry+0x22>
  {
    return -1;
 8009e40:	f04f 33ff 	mov.w	r3, #4294967295
 8009e44:	e05d      	b.n	8009f02 <SCSI_Inquiry+0xde>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10b      	bne.n	8009e6a <SCSI_Inquiry+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e58:	7f59      	ldrb	r1, [r3, #29]
 8009e5a:	2320      	movs	r3, #32
 8009e5c:	2205      	movs	r2, #5
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f000 fafc 	bl	800a45c <SCSI_SenseCode>
    return -1;
 8009e64:	f04f 33ff 	mov.w	r3, #4294967295
 8009e68:	e04b      	b.n	8009f02 <SCSI_Inquiry+0xde>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d021      	beq.n	8009ebc <SCSI_Inquiry+0x98>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	3302      	adds	r3, #2
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d105      	bne.n	8009e8e <SCSI_Inquiry+0x6a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009e82:	2206      	movs	r2, #6
 8009e84:	4921      	ldr	r1, [pc, #132]	; (8009f0c <SCSI_Inquiry+0xe8>)
 8009e86:	69b8      	ldr	r0, [r7, #24]
 8009e88:	f001 f86b 	bl	800af62 <SCSI_UpdateBotData>
 8009e8c:	e038      	b.n	8009f00 <SCSI_Inquiry+0xdc>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	3302      	adds	r3, #2
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b80      	cmp	r3, #128	; 0x80
 8009e96:	d105      	bne.n	8009ea4 <SCSI_Inquiry+0x80>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009e98:	2208      	movs	r2, #8
 8009e9a:	491d      	ldr	r1, [pc, #116]	; (8009f10 <SCSI_Inquiry+0xec>)
 8009e9c:	69b8      	ldr	r0, [r7, #24]
 8009e9e:	f001 f860 	bl	800af62 <SCSI_UpdateBotData>
 8009ea2:	e02d      	b.n	8009f00 <SCSI_Inquiry+0xdc>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eaa:	7f59      	ldrb	r1, [r3, #29]
 8009eac:	2324      	movs	r3, #36	; 0x24
 8009eae:	2205      	movs	r2, #5
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 fad3 	bl	800a45c <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eba:	e022      	b.n	8009f02 <SCSI_Inquiry+0xde>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ec2:	69d9      	ldr	r1, [r3, #28]
 8009ec4:	7afa      	ldrb	r2, [r7, #11]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	4413      	add	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	440b      	add	r3, r1
 8009ed0:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	3305      	adds	r3, #5
 8009edc:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	8bfa      	ldrh	r2, [r7, #30]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d303      	bcc.n	8009ef4 <SCSI_Inquiry+0xd0>
    {
      len = params[4];
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3304      	adds	r3, #4
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009ef4:	8bfb      	ldrh	r3, [r7, #30]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	6979      	ldr	r1, [r7, #20]
 8009efa:	69b8      	ldr	r0, [r7, #24]
 8009efc:	f001 f831 	bl	800af62 <SCSI_UpdateBotData>
  }

  return 0;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3720      	adds	r7, #32
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	200000f0 	.word	0x200000f0
 8009f10:	200000f8 	.word	0x200000f8

08009f14 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f14:	b590      	push	{r4, r7, lr}
 8009f16:	b087      	sub	sp, #28
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	607a      	str	r2, [r7, #4]
 8009f20:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f28:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d102      	bne.n	8009f36 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8009f30:	f04f 33ff 	mov.w	r3, #4294967295
 8009f34:	e070      	b.n	800a018 <SCSI_ReadCapacity10+0x104>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f3c:	685c      	ldr	r4, [r3, #4]
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009f44:	3308      	adds	r3, #8
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009f4c:	3204      	adds	r2, #4
 8009f4e:	7af8      	ldrb	r0, [r7, #11]
 8009f50:	4619      	mov	r1, r3
 8009f52:	47a0      	blx	r4
 8009f54:	4603      	mov	r3, r0
 8009f56:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009f58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d106      	bne.n	8009f6e <SCSI_ReadCapacity10+0x5a>
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f66:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d108      	bne.n	8009f80 <SCSI_ReadCapacity10+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009f6e:	7af9      	ldrb	r1, [r7, #11]
 8009f70:	233a      	movs	r3, #58	; 0x3a
 8009f72:	2202      	movs	r2, #2
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 fa71 	bl	800a45c <SCSI_SenseCode>
    return -1;
 8009f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7e:	e04b      	b.n	800a018 <SCSI_ReadCapacity10+0x104>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	0e1b      	lsrs	r3, r3, #24
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	0c1b      	lsrs	r3, r3, #16
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fac:	3b01      	subs	r3, #1
 8009fae:	0a1b      	lsrs	r3, r3, #8
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009fd2:	161b      	asrs	r3, r3, #24
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fe0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009fe4:	141b      	asrs	r3, r3, #16
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ff2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ff6:	0a1b      	lsrs	r3, r3, #8
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a006:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	2208      	movs	r2, #8
 800a014:	60da      	str	r2, [r3, #12]

  return 0;
 800a016:	2300      	movs	r3, #0

}
 800a018:	4618      	mov	r0, r3
 800a01a:	371c      	adds	r7, #28
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd90      	pop	{r4, r7, pc}

0800a020 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a020:	b590      	push	{r4, r7, lr}
 800a022:	b089      	sub	sp, #36	; 0x24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	460b      	mov	r3, r1
 800a02a:	607a      	str	r2, [r7, #4]
 800a02c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a034:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d102      	bne.n	800a042 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 800a03c:	f04f 33ff 	mov.w	r3, #4294967295
 800a040:	e0a5      	b.n	800a18e <SCSI_ReadCapacity16+0x16e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a048:	685c      	ldr	r4, [r3, #4]
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a050:	3308      	adds	r3, #8
 800a052:	69ba      	ldr	r2, [r7, #24]
 800a054:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 800a058:	3204      	adds	r2, #4
 800a05a:	7af8      	ldrb	r0, [r7, #11]
 800a05c:	4619      	mov	r1, r3
 800a05e:	47a0      	blx	r4
 800a060:	4603      	mov	r3, r0
 800a062:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a064:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d106      	bne.n	800a07a <SCSI_ReadCapacity16+0x5a>
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a072:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a076:	2b02      	cmp	r3, #2
 800a078:	d108      	bne.n	800a08c <SCSI_ReadCapacity16+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a07a:	7af9      	ldrb	r1, [r7, #11]
 800a07c:	233a      	movs	r3, #58	; 0x3a
 800a07e:	2202      	movs	r2, #2
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f000 f9eb 	bl	800a45c <SCSI_SenseCode>
    return -1;
 800a086:	f04f 33ff 	mov.w	r3, #4294967295
 800a08a:	e080      	b.n	800a18e <SCSI_ReadCapacity16+0x16e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	330a      	adds	r3, #10
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	330b      	adds	r3, #11
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a09c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	330c      	adds	r3, #12
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a0a6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	320d      	adds	r2, #13
 800a0ac:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a0ae:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	77fb      	strb	r3, [r7, #31]
 800a0b8:	e007      	b.n	800a0ca <SCSI_ReadCapacity16+0xaa>
  {
    hmsc->bot_data[idx] = 0U;
 800a0ba:	7ffb      	ldrb	r3, [r7, #31]
 800a0bc:	69ba      	ldr	r2, [r7, #24]
 800a0be:	4413      	add	r3, r2
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a0c4:	7ffb      	ldrb	r3, [r7, #31]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	77fb      	strb	r3, [r7, #31]
 800a0ca:	7ffa      	ldrb	r2, [r7, #31]
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d3f2      	bcc.n	800a0ba <SCSI_ReadCapacity16+0x9a>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	0e1b      	lsrs	r3, r3, #24
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	0c1b      	lsrs	r3, r3, #16
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a100:	3b01      	subs	r3, #1
 800a102:	0a1b      	lsrs	r3, r3, #8
 800a104:	b2da      	uxtb	r2, r3
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a112:	b2db      	uxtb	r3, r3
 800a114:	3b01      	subs	r3, #1
 800a116:	b2da      	uxtb	r2, r3
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a122:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a126:	161b      	asrs	r3, r3, #24
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a134:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a138:	141b      	asrs	r3, r3, #16
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a146:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a14a:	0a1b      	lsrs	r3, r3, #8
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a15a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	330a      	adds	r3, #10
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	330b      	adds	r3, #11
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a174:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	330c      	adds	r3, #12
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a17e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	320d      	adds	r2, #13
 800a184:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a186:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	60da      	str	r2, [r3, #12]

  return 0;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3724      	adds	r7, #36	; 0x24
 800a192:	46bd      	mov	sp, r7
 800a194:	bd90      	pop	{r4, r7, pc}

0800a196 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b088      	sub	sp, #32
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	60f8      	str	r0, [r7, #12]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	607a      	str	r2, [r7, #4]
 800a1a2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1aa:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d102      	bne.n	800a1b8 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 800a1b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1b6:	e05e      	b.n	800a276 <SCSI_ReadFormatCapacity+0xe0>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	f107 0214 	add.w	r2, r7, #20
 800a1c4:	f107 0110 	add.w	r1, r7, #16
 800a1c8:	7af8      	ldrb	r0, [r7, #11]
 800a1ca:	4798      	blx	r3
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a1d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d106      	bne.n	800a1e6 <SCSI_ReadFormatCapacity+0x50>
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1de:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d108      	bne.n	800a1f8 <SCSI_ReadFormatCapacity+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a1e6:	7af9      	ldrb	r1, [r7, #11]
 800a1e8:	233a      	movs	r3, #58	; 0x3a
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f000 f935 	bl	800a45c <SCSI_SenseCode>
    return -1;
 800a1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f6:	e03e      	b.n	800a276 <SCSI_ReadFormatCapacity+0xe0>
  }

  for (i = 0U; i < 12U ; i++)
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	83fb      	strh	r3, [r7, #30]
 800a1fc:	e007      	b.n	800a20e <SCSI_ReadFormatCapacity+0x78>
  {
    hmsc->bot_data[i] = 0U;
 800a1fe:	8bfb      	ldrh	r3, [r7, #30]
 800a200:	69ba      	ldr	r2, [r7, #24]
 800a202:	4413      	add	r3, r2
 800a204:	2200      	movs	r2, #0
 800a206:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800a208:	8bfb      	ldrh	r3, [r7, #30]
 800a20a:	3301      	adds	r3, #1
 800a20c:	83fb      	strh	r3, [r7, #30]
 800a20e:	8bfb      	ldrh	r3, [r7, #30]
 800a210:	2b0b      	cmp	r3, #11
 800a212:	d9f4      	bls.n	800a1fe <SCSI_ReadFormatCapacity+0x68>
  }

  hmsc->bot_data[3] = 0x08U;
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	2208      	movs	r2, #8
 800a218:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	3b01      	subs	r3, #1
 800a21e:	0e1b      	lsrs	r3, r3, #24
 800a220:	b2da      	uxtb	r2, r3
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	3b01      	subs	r3, #1
 800a22a:	0c1b      	lsrs	r3, r3, #16
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	3b01      	subs	r3, #1
 800a236:	0a1b      	lsrs	r3, r3, #8
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	b2db      	uxtb	r3, r3
 800a242:	3b01      	subs	r3, #1
 800a244:	b2da      	uxtb	r2, r3
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	2202      	movs	r2, #2
 800a24e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800a250:	8abb      	ldrh	r3, [r7, #20]
 800a252:	141b      	asrs	r3, r3, #16
 800a254:	b2da      	uxtb	r2, r3
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a25a:	8abb      	ldrh	r3, [r7, #20]
 800a25c:	0a1b      	lsrs	r3, r3, #8
 800a25e:	b29b      	uxth	r3, r3
 800a260:	b2da      	uxtb	r2, r3
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a266:	8abb      	ldrh	r3, [r7, #20]
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	220c      	movs	r2, #12
 800a272:	60da      	str	r2, [r3, #12]

  return 0;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3720      	adds	r7, #32
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	460b      	mov	r3, r1
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a294:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a296:	2317      	movs	r3, #23
 800a298:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d102      	bne.n	800a2a6 <SCSI_ModeSense6+0x26>
  {
    return -1;
 800a2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a4:	e011      	b.n	800a2ca <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	8afa      	ldrh	r2, [r7, #22]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d303      	bcc.n	800a2bc <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a2bc:	8afb      	ldrh	r3, [r7, #22]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	4904      	ldr	r1, [pc, #16]	; (800a2d4 <SCSI_ModeSense6+0x54>)
 800a2c2:	6938      	ldr	r0, [r7, #16]
 800a2c4:	f000 fe4d 	bl	800af62 <SCSI_UpdateBotData>

  return 0;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20000100 	.word	0x20000100

0800a2d8 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2ec:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a2ee:	231b      	movs	r3, #27
 800a2f0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d102      	bne.n	800a2fe <SCSI_ModeSense10+0x26>
  {
    return -1;
 800a2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fc:	e011      	b.n	800a322 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3308      	adds	r3, #8
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	b29b      	uxth	r3, r3
 800a306:	8afa      	ldrh	r2, [r7, #22]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d303      	bcc.n	800a314 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	3308      	adds	r3, #8
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a314:	8afb      	ldrh	r3, [r7, #22]
 800a316:	461a      	mov	r2, r3
 800a318:	4904      	ldr	r1, [pc, #16]	; (800a32c <SCSI_ModeSense10+0x54>)
 800a31a:	6938      	ldr	r0, [r7, #16]
 800a31c:	f000 fe21 	bl	800af62 <SCSI_UpdateBotData>

  return 0;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	20000118 	.word	0x20000118

0800a330 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	460b      	mov	r3, r1
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a344:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d102      	bne.n	800a352 <SCSI_RequestSense+0x22>
  {
    return -1;
 800a34c:	f04f 33ff 	mov.w	r3, #4294967295
 800a350:	e080      	b.n	800a454 <SCSI_RequestSense+0x124>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10b      	bne.n	800a376 <SCSI_RequestSense+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a364:	7f59      	ldrb	r1, [r3, #29]
 800a366:	2320      	movs	r3, #32
 800a368:	2205      	movs	r2, #5
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 f876 	bl	800a45c <SCSI_SenseCode>
    return -1;
 800a370:	f04f 33ff 	mov.w	r3, #4294967295
 800a374:	e06e      	b.n	800a454 <SCSI_RequestSense+0x124>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a376:	2300      	movs	r3, #0
 800a378:	75fb      	strb	r3, [r7, #23]
 800a37a:	e007      	b.n	800a38c <SCSI_RequestSense+0x5c>
  {
    hmsc->bot_data[i] = 0U;
 800a37c:	7dfb      	ldrb	r3, [r7, #23]
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	4413      	add	r3, r2
 800a382:	2200      	movs	r2, #0
 800a384:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a386:	7dfb      	ldrb	r3, [r7, #23]
 800a388:	3301      	adds	r3, #1
 800a38a:	75fb      	strb	r3, [r7, #23]
 800a38c:	7dfb      	ldrb	r3, [r7, #23]
 800a38e:	2b11      	cmp	r3, #17
 800a390:	d9f4      	bls.n	800a37c <SCSI_RequestSense+0x4c>
  }

  hmsc->bot_data[0] = 0x70U;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	2270      	movs	r2, #112	; 0x70
 800a396:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	220c      	movs	r2, #12
 800a39c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ae:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d03f      	beq.n	800a436 <SCSI_RequestSense+0x106>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3bc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a3c8:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a3e0:	00db      	lsls	r3, r3, #3
 800a3e2:	4413      	add	r3, r2
 800a3e4:	791a      	ldrb	r2, [r3, #4]
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a3fa:	00db      	lsls	r3, r3, #3
 800a3fc:	4413      	add	r3, r2
 800a3fe:	795a      	ldrb	r2, [r3, #5]
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a40a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a40e:	3301      	adds	r3, #1
 800a410:	b2da      	uxtb	r2, r3
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a418:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a422:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a426:	2b04      	cmp	r3, #4
 800a428:	d105      	bne.n	800a436 <SCSI_RequestSense+0x106>
    {
      hmsc->scsi_sense_head = 0U;
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a430:	2200      	movs	r2, #0
 800a432:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	2212      	movs	r2, #18
 800a43a:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	3304      	adds	r3, #4
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	2b12      	cmp	r3, #18
 800a444:	d805      	bhi.n	800a452 <SCSI_RequestSense+0x122>
  {
    hmsc->bot_data_length = params[4];
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	3304      	adds	r3, #4
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	461a      	mov	r2, r3
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	4608      	mov	r0, r1
 800a466:	4611      	mov	r1, r2
 800a468:	461a      	mov	r2, r3
 800a46a:	4603      	mov	r3, r0
 800a46c:	70fb      	strb	r3, [r7, #3]
 800a46e:	460b      	mov	r3, r1
 800a470:	70bb      	strb	r3, [r7, #2]
 800a472:	4613      	mov	r3, r2
 800a474:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a47c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d03d      	beq.n	800a500 <SCSI_SenseCode+0xa4>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a48a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a48e:	461a      	mov	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a496:	78b9      	ldrb	r1, [r7, #2]
 800a498:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4a2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a4ac:	00db      	lsls	r3, r3, #3
 800a4ae:	4413      	add	r3, r2
 800a4b0:	787a      	ldrb	r2, [r7, #1]
 800a4b2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ba:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	4413      	add	r3, r2
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4d2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ea:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d107      	bne.n	800a502 <SCSI_SenseCode+0xa6>
  {
    hmsc->scsi_sense_tail = 0U;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a4fe:	e000      	b.n	800a502 <SCSI_SenseCode+0xa6>
    return;
 800a500:	bf00      	nop
  }
}
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	460b      	mov	r3, r1
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a520:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d102      	bne.n	800a52e <SCSI_StartStopUnit+0x22>
  {
    return -1;
 800a528:	f04f 33ff 	mov.w	r3, #4294967295
 800a52c:	e043      	b.n	800a5b6 <SCSI_StartStopUnit+0xaa>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a534:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d10f      	bne.n	800a55c <SCSI_StartStopUnit+0x50>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	3304      	adds	r3, #4
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	f003 0303 	and.w	r3, r3, #3
 800a546:	2b02      	cmp	r3, #2
 800a548:	d108      	bne.n	800a55c <SCSI_StartStopUnit+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a54a:	7af9      	ldrb	r1, [r7, #11]
 800a54c:	2324      	movs	r3, #36	; 0x24
 800a54e:	2205      	movs	r2, #5
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f7ff ff83 	bl	800a45c <SCSI_SenseCode>

    return -1;
 800a556:	f04f 33ff 	mov.w	r3, #4294967295
 800a55a:	e02c      	b.n	800a5b6 <SCSI_StartStopUnit+0xaa>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3304      	adds	r3, #4
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	f003 0303 	and.w	r3, r3, #3
 800a566:	2b01      	cmp	r3, #1
 800a568:	d106      	bne.n	800a578 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a570:	2200      	movs	r2, #0
 800a572:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a576:	e01a      	b.n	800a5ae <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	3304      	adds	r3, #4
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	f003 0303 	and.w	r3, r3, #3
 800a582:	2b02      	cmp	r3, #2
 800a584:	d106      	bne.n	800a594 <SCSI_StartStopUnit+0x88>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a58c:	2202      	movs	r2, #2
 800a58e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a592:	e00c      	b.n	800a5ae <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	3304      	adds	r3, #4
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	f003 0303 	and.w	r3, r3, #3
 800a59e:	2b03      	cmp	r3, #3
 800a5a0:	d105      	bne.n	800a5ae <SCSI_StartStopUnit+0xa2>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	60da      	str	r2, [r3, #12]

  return 0;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3718      	adds	r7, #24
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b087      	sub	sp, #28
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	60f8      	str	r0, [r7, #12]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	607a      	str	r2, [r7, #4]
 800a5ca:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5d2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d102      	bne.n	800a5e0 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 800a5da:	f04f 33ff 	mov.w	r3, #4294967295
 800a5de:	e015      	b.n	800a60c <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d106      	bne.n	800a5f8 <SCSI_AllowPreventRemovable+0x3a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a5f6:	e005      	b.n	800a604 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2200      	movs	r2, #0
 800a608:	60da      	str	r2, [r3, #12]

  return 0;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	371c      	adds	r7, #28
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	460b      	mov	r3, r1
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a62c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d102      	bne.n	800a63a <SCSI_Read10+0x22>
  {
    return -1;
 800a634:	f04f 33ff 	mov.w	r3, #4294967295
 800a638:	e098      	b.n	800a76c <SCSI_Read10+0x154>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	7a1b      	ldrb	r3, [r3, #8]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f040 808a 	bne.w	800a758 <SCSI_Read10+0x140>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a64a:	7f1b      	ldrb	r3, [r3, #28]
 800a64c:	b25b      	sxtb	r3, r3
 800a64e:	2b00      	cmp	r3, #0
 800a650:	db0b      	blt.n	800a66a <SCSI_Read10+0x52>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a658:	7f59      	ldrb	r1, [r3, #29]
 800a65a:	2320      	movs	r3, #32
 800a65c:	2205      	movs	r2, #5
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f7ff fefc 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800a664:	f04f 33ff 	mov.w	r3, #4294967295
 800a668:	e080      	b.n	800a76c <SCSI_Read10+0x154>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a670:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a674:	2b02      	cmp	r3, #2
 800a676:	d108      	bne.n	800a68a <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a678:	7af9      	ldrb	r1, [r7, #11]
 800a67a:	233a      	movs	r3, #58	; 0x3a
 800a67c:	2202      	movs	r2, #2
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f7ff feec 	bl	800a45c <SCSI_SenseCode>

      return -1;
 800a684:	f04f 33ff 	mov.w	r3, #4294967295
 800a688:	e070      	b.n	800a76c <SCSI_Read10+0x154>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	7afa      	ldrb	r2, [r7, #11]
 800a694:	4610      	mov	r0, r2
 800a696:	4798      	blx	r3
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d008      	beq.n	800a6b0 <SCSI_Read10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a69e:	7af9      	ldrb	r1, [r7, #11]
 800a6a0:	233a      	movs	r3, #58	; 0x3a
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f7ff fed9 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800a6aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ae:	e05d      	b.n	800a76c <SCSI_Read10+0x154>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	3302      	adds	r3, #2
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	3303      	adds	r3, #3
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a6c0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a6ca:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	3205      	adds	r2, #5
 800a6d0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a6d2:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a6da:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	3307      	adds	r3, #7
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	021b      	lsls	r3, r3, #8
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	3208      	adds	r2, #8
 800a6e8:	7812      	ldrb	r2, [r2, #0]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	697a      	ldr	r2, [r7, #20]
 800a6ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a6f2:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a704:	7af9      	ldrb	r1, [r7, #11]
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f000 fadb 	bl	800acc2 <SCSI_CheckAddressRange>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	da02      	bge.n	800a718 <SCSI_Read10+0x100>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a712:	f04f 33ff 	mov.w	r3, #4294967295
 800a716:	e029      	b.n	800a76c <SCSI_Read10+0x154>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a71e:	699a      	ldr	r2, [r3, #24]
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a728:	6979      	ldr	r1, [r7, #20]
 800a72a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a72e:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a732:	fb01 f303 	mul.w	r3, r1, r3
 800a736:	429a      	cmp	r2, r3
 800a738:	d00b      	beq.n	800a752 <SCSI_Read10+0x13a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a740:	7f59      	ldrb	r1, [r3, #29]
 800a742:	2320      	movs	r3, #32
 800a744:	2205      	movs	r2, #5
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f7ff fe88 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800a74c:	f04f 33ff 	mov.w	r3, #4294967295
 800a750:	e00c      	b.n	800a76c <SCSI_Read10+0x154>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2202      	movs	r2, #2
 800a756:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a75e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a760:	7afb      	ldrb	r3, [r7, #11]
 800a762:	4619      	mov	r1, r3
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f000 fad5 	bl	800ad14 <SCSI_ProcessRead>
 800a76a:	4603      	mov	r3, r0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	460b      	mov	r3, r1
 800a77e:	607a      	str	r2, [r7, #4]
 800a780:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a788:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d102      	bne.n	800a796 <SCSI_Read12+0x22>
  {
    return -1;
 800a790:	f04f 33ff 	mov.w	r3, #4294967295
 800a794:	e0a2      	b.n	800a8dc <SCSI_Read12+0x168>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	7a1b      	ldrb	r3, [r3, #8]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	f040 8094 	bne.w	800a8c8 <SCSI_Read12+0x154>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a6:	7f1b      	ldrb	r3, [r3, #28]
 800a7a8:	b25b      	sxtb	r3, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	db0b      	blt.n	800a7c6 <SCSI_Read12+0x52>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7b4:	7f59      	ldrb	r1, [r3, #29]
 800a7b6:	2320      	movs	r3, #32
 800a7b8:	2205      	movs	r2, #5
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f7ff fe4e 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800a7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c4:	e08a      	b.n	800a8dc <SCSI_Read12+0x168>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7cc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d108      	bne.n	800a7e6 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a7d4:	7af9      	ldrb	r1, [r7, #11]
 800a7d6:	233a      	movs	r3, #58	; 0x3a
 800a7d8:	2202      	movs	r2, #2
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f7ff fe3e 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800a7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e4:	e07a      	b.n	800a8dc <SCSI_Read12+0x168>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	7afa      	ldrb	r2, [r7, #11]
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	4798      	blx	r3
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d008      	beq.n	800a80c <SCSI_Read12+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a7fa:	7af9      	ldrb	r1, [r7, #11]
 800a7fc:	233a      	movs	r3, #58	; 0x3a
 800a7fe:	2202      	movs	r2, #2
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f7ff fe2b 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800a806:	f04f 33ff 	mov.w	r3, #4294967295
 800a80a:	e067      	b.n	800a8dc <SCSI_Read12+0x168>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	3302      	adds	r3, #2
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	3303      	adds	r3, #3
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a81c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	3304      	adds	r3, #4
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a826:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	3205      	adds	r2, #5
 800a82c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a82e:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a830:	697a      	ldr	r2, [r7, #20]
 800a832:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a836:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3306      	adds	r3, #6
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3307      	adds	r3, #7
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a848:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	3308      	adds	r3, #8
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a852:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	3209      	adds	r2, #9
 800a858:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a85a:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a862:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a86a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a874:	7af9      	ldrb	r1, [r7, #11]
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f000 fa23 	bl	800acc2 <SCSI_CheckAddressRange>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	da02      	bge.n	800a888 <SCSI_Read12+0x114>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a882:	f04f 33ff 	mov.w	r3, #4294967295
 800a886:	e029      	b.n	800a8dc <SCSI_Read12+0x168>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a88e:	699a      	ldr	r2, [r3, #24]
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a898:	6979      	ldr	r1, [r7, #20]
 800a89a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a89e:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a8a2:	fb01 f303 	mul.w	r3, r1, r3
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d00b      	beq.n	800a8c2 <SCSI_Read12+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8b0:	7f59      	ldrb	r1, [r3, #29]
 800a8b2:	2320      	movs	r3, #32
 800a8b4:	2205      	movs	r2, #5
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7ff fdd0 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800a8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c0:	e00c      	b.n	800a8dc <SCSI_Read12+0x168>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	2202      	movs	r2, #2
 800a8c6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a8ce:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a8d0:	7afb      	ldrb	r3, [r7, #11]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f000 fa1d 	bl	800ad14 <SCSI_ProcessRead>
 800a8da:	4603      	mov	r3, r0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	607a      	str	r2, [r7, #4]
 800a8f0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8f8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d102      	bne.n	800a906 <SCSI_Write10+0x22>
  {
    return -1;
 800a900:	f04f 33ff 	mov.w	r3, #4294967295
 800a904:	e0bc      	b.n	800aa80 <SCSI_Write10+0x19c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	7a1b      	ldrb	r3, [r3, #8]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f040 80b2 	bne.w	800aa74 <SCSI_Write10+0x190>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a916:	699b      	ldr	r3, [r3, #24]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10b      	bne.n	800a934 <SCSI_Write10+0x50>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a922:	7f59      	ldrb	r1, [r3, #29]
 800a924:	2320      	movs	r3, #32
 800a926:	2205      	movs	r2, #5
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f7ff fd97 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800a92e:	f04f 33ff 	mov.w	r3, #4294967295
 800a932:	e0a5      	b.n	800aa80 <SCSI_Write10+0x19c>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a93a:	7f1b      	ldrb	r3, [r3, #28]
 800a93c:	b25b      	sxtb	r3, r3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	da0b      	bge.n	800a95a <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a948:	7f59      	ldrb	r1, [r3, #29]
 800a94a:	2320      	movs	r3, #32
 800a94c:	2205      	movs	r2, #5
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f7ff fd84 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800a954:	f04f 33ff 	mov.w	r3, #4294967295
 800a958:	e092      	b.n	800aa80 <SCSI_Write10+0x19c>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	7afa      	ldrb	r2, [r7, #11]
 800a964:	4610      	mov	r0, r2
 800a966:	4798      	blx	r3
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d008      	beq.n	800a980 <SCSI_Write10+0x9c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a96e:	7af9      	ldrb	r1, [r7, #11]
 800a970:	233a      	movs	r3, #58	; 0x3a
 800a972:	2202      	movs	r2, #2
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f7ff fd71 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800a97a:	f04f 33ff 	mov.w	r3, #4294967295
 800a97e:	e07f      	b.n	800aa80 <SCSI_Write10+0x19c>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	7afa      	ldrb	r2, [r7, #11]
 800a98a:	4610      	mov	r0, r2
 800a98c:	4798      	blx	r3
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d008      	beq.n	800a9a6 <SCSI_Write10+0xc2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a994:	7af9      	ldrb	r1, [r7, #11]
 800a996:	2327      	movs	r3, #39	; 0x27
 800a998:	2202      	movs	r2, #2
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f7ff fd5e 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800a9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a4:	e06c      	b.n	800aa80 <SCSI_Write10+0x19c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	3302      	adds	r3, #2
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	3303      	adds	r3, #3
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9b6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	3304      	adds	r3, #4
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a9c0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	3205      	adds	r2, #5
 800a9c6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a9c8:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9d0:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	3307      	adds	r3, #7
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	3208      	adds	r2, #8
 800a9de:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9e8:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fa:	7af9      	ldrb	r1, [r7, #11]
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f000 f960 	bl	800acc2 <SCSI_CheckAddressRange>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	da02      	bge.n	800aa0e <SCSI_Write10+0x12a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800aa08:	f04f 33ff 	mov.w	r3, #4294967295
 800aa0c:	e038      	b.n	800aa80 <SCSI_Write10+0x19c>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa1c:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aa20:	fb02 f303 	mul.w	r3, r2, r3
 800aa24:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d00b      	beq.n	800aa4c <SCSI_Write10+0x168>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa3a:	7f59      	ldrb	r1, [r3, #29]
 800aa3c:	2320      	movs	r3, #32
 800aa3e:	2205      	movs	r2, #5
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f7ff fd0b 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800aa46:	f04f 33ff 	mov.w	r3, #4294967295
 800aa4a:	e019      	b.n	800aa80 <SCSI_Write10+0x19c>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa52:	bf28      	it	cs
 800aa54:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aa58:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	f103 0210 	add.w	r2, r3, #16
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	2101      	movs	r1, #1
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f002 fa22 	bl	800ceb4 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800aa70:	2300      	movs	r3, #0
 800aa72:	e005      	b.n	800aa80 <SCSI_Write10+0x19c>
    return SCSI_ProcessWrite(pdev, lun);
 800aa74:	7afb      	ldrb	r3, [r7, #11]
 800aa76:	4619      	mov	r1, r3
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 f9d5 	bl	800ae28 <SCSI_ProcessWrite>
 800aa7e:	4603      	mov	r3, r0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	460b      	mov	r3, r1
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa9c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d102      	bne.n	800aaaa <SCSI_Write12+0x22>
  {
    return -1;
 800aaa4:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa8:	e0cc      	b.n	800ac44 <SCSI_Write12+0x1bc>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	7a1b      	ldrb	r3, [r3, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f040 80c2 	bne.w	800ac38 <SCSI_Write12+0x1b0>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10b      	bne.n	800aad8 <SCSI_Write12+0x50>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aac6:	7f59      	ldrb	r1, [r3, #29]
 800aac8:	2320      	movs	r3, #32
 800aaca:	2205      	movs	r2, #5
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f7ff fcc5 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800aad2:	f04f 33ff 	mov.w	r3, #4294967295
 800aad6:	e0b5      	b.n	800ac44 <SCSI_Write12+0x1bc>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aade:	7f1b      	ldrb	r3, [r3, #28]
 800aae0:	b25b      	sxtb	r3, r3
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	da0b      	bge.n	800aafe <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaec:	7f59      	ldrb	r1, [r3, #29]
 800aaee:	2320      	movs	r3, #32
 800aaf0:	2205      	movs	r2, #5
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f7ff fcb2 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800aaf8:	f04f 33ff 	mov.w	r3, #4294967295
 800aafc:	e0a2      	b.n	800ac44 <SCSI_Write12+0x1bc>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	7afa      	ldrb	r2, [r7, #11]
 800ab08:	4610      	mov	r0, r2
 800ab0a:	4798      	blx	r3
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00b      	beq.n	800ab2a <SCSI_Write12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ab12:	7af9      	ldrb	r1, [r7, #11]
 800ab14:	233a      	movs	r3, #58	; 0x3a
 800ab16:	2202      	movs	r2, #2
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f7ff fc9f 	bl	800a45c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	2205      	movs	r2, #5
 800ab22:	721a      	strb	r2, [r3, #8]
      return -1;
 800ab24:	f04f 33ff 	mov.w	r3, #4294967295
 800ab28:	e08c      	b.n	800ac44 <SCSI_Write12+0x1bc>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	7afa      	ldrb	r2, [r7, #11]
 800ab34:	4610      	mov	r0, r2
 800ab36:	4798      	blx	r3
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00b      	beq.n	800ab56 <SCSI_Write12+0xce>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ab3e:	7af9      	ldrb	r1, [r7, #11]
 800ab40:	2327      	movs	r3, #39	; 0x27
 800ab42:	2202      	movs	r2, #2
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	f7ff fc89 	bl	800a45c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2205      	movs	r2, #5
 800ab4e:	721a      	strb	r2, [r3, #8]
      return -1;
 800ab50:	f04f 33ff 	mov.w	r3, #4294967295
 800ab54:	e076      	b.n	800ac44 <SCSI_Write12+0x1bc>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	3302      	adds	r3, #2
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	3303      	adds	r3, #3
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab66:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	3304      	adds	r3, #4
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ab70:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	3205      	adds	r2, #5
 800ab76:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ab78:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab7a:	697a      	ldr	r2, [r7, #20]
 800ab7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab80:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	3306      	adds	r3, #6
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	3307      	adds	r3, #7
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ab92:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	3308      	adds	r3, #8
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ab9c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	3209      	adds	r2, #9
 800aba2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800aba4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abac:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abbe:	7af9      	ldrb	r1, [r7, #11]
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f000 f87e 	bl	800acc2 <SCSI_CheckAddressRange>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	da02      	bge.n	800abd2 <SCSI_Write12+0x14a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800abcc:	f04f 33ff 	mov.w	r3, #4294967295
 800abd0:	e038      	b.n	800ac44 <SCSI_Write12+0x1bc>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abe0:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800abe4:	fb02 f303 	mul.w	r3, r2, r3
 800abe8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf0:	699b      	ldr	r3, [r3, #24]
 800abf2:	693a      	ldr	r2, [r7, #16]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d00b      	beq.n	800ac10 <SCSI_Write12+0x188>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abfe:	7f59      	ldrb	r1, [r3, #29]
 800ac00:	2320      	movs	r3, #32
 800ac02:	2205      	movs	r2, #5
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f7ff fc29 	bl	800a45c <SCSI_SenseCode>
      return -1;
 800ac0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0e:	e019      	b.n	800ac44 <SCSI_Write12+0x1bc>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac16:	bf28      	it	cs
 800ac18:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ac1c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2201      	movs	r2, #1
 800ac22:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	f103 0210 	add.w	r2, r3, #16
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	2101      	movs	r1, #1
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f002 f940 	bl	800ceb4 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	e005      	b.n	800ac44 <SCSI_Write12+0x1bc>
    return SCSI_ProcessWrite(pdev, lun);
 800ac38:	7afb      	ldrb	r3, [r7, #11]
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f000 f8f3 	bl	800ae28 <SCSI_ProcessWrite>
 800ac42:	4603      	mov	r3, r0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3718      	adds	r7, #24
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	460b      	mov	r3, r1
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac60:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <SCSI_Verify10+0x22>
  {
    return -1;
 800ac68:	f04f 33ff 	mov.w	r3, #4294967295
 800ac6c:	e025      	b.n	800acba <SCSI_Verify10+0x6e>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	3301      	adds	r3, #1
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	f003 0302 	and.w	r3, r3, #2
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d008      	beq.n	800ac8e <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ac7c:	7af9      	ldrb	r1, [r7, #11]
 800ac7e:	2324      	movs	r3, #36	; 0x24
 800ac80:	2205      	movs	r2, #5
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f7ff fbea 	bl	800a45c <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800ac88:	f04f 33ff 	mov.w	r3, #4294967295
 800ac8c:	e015      	b.n	800acba <SCSI_Verify10+0x6e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac9e:	7af9      	ldrb	r1, [r7, #11]
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f000 f80e 	bl	800acc2 <SCSI_CheckAddressRange>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	da02      	bge.n	800acb2 <SCSI_Verify10+0x66>
  {
    return -1; /* error */
 800acac:	f04f 33ff 	mov.w	r3, #4294967295
 800acb0:	e003      	b.n	800acba <SCSI_Verify10+0x6e>
  }

  hmsc->bot_data_length = 0U;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	2200      	movs	r2, #0
 800acb6:	60da      	str	r2, [r3, #12]

  return 0;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3718      	adds	r7, #24
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b086      	sub	sp, #24
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	60f8      	str	r0, [r7, #12]
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	603b      	str	r3, [r7, #0]
 800acce:	460b      	mov	r3, r1
 800acd0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acd8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d102      	bne.n	800ace6 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800ace0:	f04f 33ff 	mov.w	r3, #4294967295
 800ace4:	e012      	b.n	800ad0c <SCSI_CheckAddressRange+0x4a>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	441a      	add	r2, r3
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d908      	bls.n	800ad0a <SCSI_CheckAddressRange+0x48>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800acf8:	7af9      	ldrb	r1, [r7, #11]
 800acfa:	2321      	movs	r3, #33	; 0x21
 800acfc:	2205      	movs	r2, #5
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f7ff fbac 	bl	800a45c <SCSI_SenseCode>
    return -1;
 800ad04:	f04f 33ff 	mov.w	r3, #4294967295
 800ad08:	e000      	b.n	800ad0c <SCSI_CheckAddressRange+0x4a>
  }

  return 0;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3718      	adds	r7, #24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ad14:	b590      	push	{r4, r7, lr}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad26:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad36:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ad3a:	fb02 f303 	mul.w	r3, r2, r3
 800ad3e:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d102      	bne.n	800ad4c <SCSI_ProcessRead+0x38>
  {
    return -1;
 800ad46:	f04f 33ff 	mov.w	r3, #4294967295
 800ad4a:	e069      	b.n	800ae20 <SCSI_ProcessRead+0x10c>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad52:	bf28      	it	cs
 800ad54:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ad58:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad60:	691c      	ldr	r4, [r3, #16]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f103 0110 	add.w	r1, r3, #16
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	78f8      	ldrb	r0, [r7, #3]
 800ad86:	47a0      	blx	r4
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	da08      	bge.n	800ada0 <SCSI_ProcessRead+0x8c>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800ad8e:	78f9      	ldrb	r1, [r7, #3]
 800ad90:	2311      	movs	r3, #17
 800ad92:	2204      	movs	r2, #4
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f7ff fb61 	bl	800a45c <SCSI_SenseCode>
    return -1;
 800ad9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad9e:	e03f      	b.n	800ae20 <SCSI_ProcessRead+0x10c>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f103 0210 	add.w	r2, r3, #16
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	2181      	movs	r1, #129	; 0x81
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f002 f84a 	bl	800ce44 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adb6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adbe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800adc2:	4619      	mov	r1, r3
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	fbb3 f3f1 	udiv	r3, r3, r1
 800adca:	4413      	add	r3, r2
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800add2:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ade6:	4619      	mov	r1, r3
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	fbb3 f3f1 	udiv	r3, r3, r1
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800adf6:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae0a:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d102      	bne.n	800ae1e <SCSI_ProcessRead+0x10a>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2203      	movs	r2, #3
 800ae1c:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd90      	pop	{r4, r7, pc}

0800ae28 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ae28:	b590      	push	{r4, r7, lr}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	460b      	mov	r3, r1
 800ae32:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae3a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae4a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ae4e:	fb02 f303 	mul.w	r3, r2, r3
 800ae52:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d102      	bne.n	800ae60 <SCSI_ProcessWrite+0x38>
  {
    return -1;
 800ae5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae5e:	e07c      	b.n	800af5a <SCSI_ProcessWrite+0x132>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae66:	bf28      	it	cs
 800ae68:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ae6c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae74:	695c      	ldr	r4, [r3, #20]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f103 0110 	add.w	r1, r3, #16
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae8e:	4618      	mov	r0, r3
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	78f8      	ldrb	r0, [r7, #3]
 800ae9a:	47a0      	blx	r4
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	da08      	bge.n	800aeb4 <SCSI_ProcessWrite+0x8c>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800aea2:	78f9      	ldrb	r1, [r7, #3]
 800aea4:	2303      	movs	r3, #3
 800aea6:	2204      	movs	r2, #4
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7ff fad7 	bl	800a45c <SCSI_SenseCode>
    return -1;
 800aeae:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb2:	e052      	b.n	800af5a <SCSI_ProcessWrite+0x132>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aec2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aec6:	4619      	mov	r1, r3
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	fbb3 f3f1 	udiv	r3, r3, r1
 800aece:	4413      	add	r3, r2
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aed6:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aede:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aeea:	4619      	mov	r1, r3
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	fbb3 f3f1 	udiv	r3, r3, r1
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aefa:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af0e:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d104      	bne.n	800af26 <SCSI_ProcessWrite+0xfe>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800af1c:	2100      	movs	r1, #0
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7fe fd16 	bl	8009950 <MSC_BOT_SendCSW>
 800af24:	e018      	b.n	800af58 <SCSI_ProcessWrite+0x130>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af34:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800af38:	fb02 f303 	mul.w	r3, r2, r3
 800af3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af40:	bf28      	it	cs
 800af42:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800af46:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f103 0210 	add.w	r2, r3, #16
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	2101      	movs	r1, #1
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f001 ffae 	bl	800ceb4 <USBD_LL_PrepareReceive>
  }

  return 0;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd90      	pop	{r4, r7, pc}

0800af62 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800af62:	b480      	push	{r7}
 800af64:	b087      	sub	sp, #28
 800af66:	af00      	add	r7, sp, #0
 800af68:	60f8      	str	r0, [r7, #12]
 800af6a:	60b9      	str	r1, [r7, #8]
 800af6c:	4613      	mov	r3, r2
 800af6e:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800af70:	88fb      	ldrh	r3, [r7, #6]
 800af72:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d102      	bne.n	800af80 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800af7a:	f04f 33ff 	mov.w	r3, #4294967295
 800af7e:	e013      	b.n	800afa8 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800af80:	8afa      	ldrh	r2, [r7, #22]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800af86:	e00b      	b.n	800afa0 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800af88:	8afb      	ldrh	r3, [r7, #22]
 800af8a:	3b01      	subs	r3, #1
 800af8c:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800af8e:	8afb      	ldrh	r3, [r7, #22]
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	441a      	add	r2, r3
 800af94:	8afb      	ldrh	r3, [r7, #22]
 800af96:	7811      	ldrb	r1, [r2, #0]
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	4413      	add	r3, r2
 800af9c:	460a      	mov	r2, r1
 800af9e:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800afa0:	8afb      	ldrh	r3, [r7, #22]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1f0      	bne.n	800af88 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800afa6:	2300      	movs	r3, #0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	371c      	adds	r7, #28
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	4613      	mov	r3, r2
 800afc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800afc8:	2303      	movs	r3, #3
 800afca:	e01f      	b.n	800b00c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2200      	movs	r2, #0
 800afe0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d003      	beq.n	800aff2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2201      	movs	r2, #1
 800aff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	79fa      	ldrb	r2, [r7, #7]
 800affe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f001 fd29 	bl	800ca58 <USBD_LL_Init>
 800b006:	4603      	mov	r3, r0
 800b008:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b01e:	2300      	movs	r3, #0
 800b020:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b028:	2303      	movs	r3, #3
 800b02a:	e016      	b.n	800b05a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00b      	beq.n	800b058 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b048:	f107 020e 	add.w	r2, r7, #14
 800b04c:	4610      	mov	r0, r2
 800b04e:	4798      	blx	r3
 800b050:	4602      	mov	r2, r0
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b082      	sub	sp, #8
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f001 fd40 	bl	800caf0 <USBD_LL_Start>
 800b070:	4603      	mov	r3, r0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b07a:	b480      	push	{r7}
 800b07c:	b083      	sub	sp, #12
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	460b      	mov	r3, r1
 800b09a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b09c:	2303      	movs	r3, #3
 800b09e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d009      	beq.n	800b0be <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	78fa      	ldrb	r2, [r7, #3]
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	4798      	blx	r3
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d007      	beq.n	800b0ee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	78fa      	ldrb	r2, [r7, #3]
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	4798      	blx	r3
  }

  return USBD_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 ff90 	bl	800c030 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b11e:	461a      	mov	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b12c:	f003 031f 	and.w	r3, r3, #31
 800b130:	2b02      	cmp	r3, #2
 800b132:	d01a      	beq.n	800b16a <USBD_LL_SetupStage+0x72>
 800b134:	2b02      	cmp	r3, #2
 800b136:	d822      	bhi.n	800b17e <USBD_LL_SetupStage+0x86>
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <USBD_LL_SetupStage+0x4a>
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d00a      	beq.n	800b156 <USBD_LL_SetupStage+0x5e>
 800b140:	e01d      	b.n	800b17e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b148:	4619      	mov	r1, r3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fa62 	bl	800b614 <USBD_StdDevReq>
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]
      break;
 800b154:	e020      	b.n	800b198 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b15c:	4619      	mov	r1, r3
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fac6 	bl	800b6f0 <USBD_StdItfReq>
 800b164:	4603      	mov	r3, r0
 800b166:	73fb      	strb	r3, [r7, #15]
      break;
 800b168:	e016      	b.n	800b198 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b170:	4619      	mov	r1, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fb05 	bl	800b782 <USBD_StdEPReq>
 800b178:	4603      	mov	r3, r0
 800b17a:	73fb      	strb	r3, [r7, #15]
      break;
 800b17c:	e00c      	b.n	800b198 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b184:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	4619      	mov	r1, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f001 fd8b 	bl	800cca8 <USBD_LL_StallEP>
 800b192:	4603      	mov	r3, r0
 800b194:	73fb      	strb	r3, [r7, #15]
      break;
 800b196:	bf00      	nop
  }

  return ret;
 800b198:	7bfb      	ldrb	r3, [r7, #15]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b086      	sub	sp, #24
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	60f8      	str	r0, [r7, #12]
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	607a      	str	r2, [r7, #4]
 800b1ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b1b0:	7afb      	ldrb	r3, [r7, #11]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d138      	bne.n	800b228 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b1bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1c4:	2b03      	cmp	r3, #3
 800b1c6:	d14a      	bne.n	800b25e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	689a      	ldr	r2, [r3, #8]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d913      	bls.n	800b1fc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	689a      	ldr	r2, [r3, #8]
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	1ad2      	subs	r2, r2, r3
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	68da      	ldr	r2, [r3, #12]
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	bf28      	it	cs
 800b1ee:	4613      	movcs	r3, r2
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	6879      	ldr	r1, [r7, #4]
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f000 fff2 	bl	800c1de <USBD_CtlContinueRx>
 800b1fa:	e030      	b.n	800b25e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b202:	b2db      	uxtb	r3, r3
 800b204:	2b03      	cmp	r3, #3
 800b206:	d10b      	bne.n	800b220 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d005      	beq.n	800b220 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f000 ffed 	bl	800c200 <USBD_CtlSendStatus>
 800b226:	e01a      	b.n	800b25e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	2b03      	cmp	r3, #3
 800b232:	d114      	bne.n	800b25e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00e      	beq.n	800b25e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b246:	699b      	ldr	r3, [r3, #24]
 800b248:	7afa      	ldrb	r2, [r7, #11]
 800b24a:	4611      	mov	r1, r2
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	4798      	blx	r3
 800b250:	4603      	mov	r3, r0
 800b252:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b254:	7dfb      	ldrb	r3, [r7, #23]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d001      	beq.n	800b25e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b25a:	7dfb      	ldrb	r3, [r7, #23]
 800b25c:	e000      	b.n	800b260 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b086      	sub	sp, #24
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	460b      	mov	r3, r1
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b276:	7afb      	ldrb	r3, [r7, #11]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d16b      	bne.n	800b354 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	3314      	adds	r3, #20
 800b280:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d156      	bne.n	800b33a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	689a      	ldr	r2, [r3, #8]
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	429a      	cmp	r2, r3
 800b296:	d914      	bls.n	800b2c2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	689a      	ldr	r2, [r3, #8]
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	1ad2      	subs	r2, r2, r3
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	6879      	ldr	r1, [r7, #4]
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f000 ff84 	bl	800c1bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f001 fdfa 	bl	800ceb4 <USBD_LL_PrepareReceive>
 800b2c0:	e03b      	b.n	800b33a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	68da      	ldr	r2, [r3, #12]
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d11c      	bne.n	800b308 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d316      	bcc.n	800b308 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	685a      	ldr	r2, [r3, #4]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d20f      	bcs.n	800b308 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f000 ff65 	bl	800c1bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	2100      	movs	r1, #0
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f001 fdd7 	bl	800ceb4 <USBD_LL_PrepareReceive>
 800b306:	e018      	b.n	800b33a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	2b03      	cmp	r3, #3
 800b312:	d10b      	bne.n	800b32c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d005      	beq.n	800b32c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b32c:	2180      	movs	r1, #128	; 0x80
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	f001 fcba 	bl	800cca8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f000 ff76 	bl	800c226 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b340:	2b01      	cmp	r3, #1
 800b342:	d122      	bne.n	800b38a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f7ff fe98 	bl	800b07a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b352:	e01a      	b.n	800b38a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	2b03      	cmp	r3, #3
 800b35e:	d114      	bne.n	800b38a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b366:	695b      	ldr	r3, [r3, #20]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00e      	beq.n	800b38a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	7afa      	ldrb	r2, [r7, #11]
 800b376:	4611      	mov	r1, r2
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	4798      	blx	r3
 800b37c:	4603      	mov	r3, r0
 800b37e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b380:	7dfb      	ldrb	r3, [r7, #23]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d001      	beq.n	800b38a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	e000      	b.n	800b38c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d101      	bne.n	800b3c8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	e02f      	b.n	800b428 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00f      	beq.n	800b3f2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d009      	beq.n	800b3f2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	6852      	ldr	r2, [r2, #4]
 800b3ea:	b2d2      	uxtb	r2, r2
 800b3ec:	4611      	mov	r1, r2
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3f2:	2340      	movs	r3, #64	; 0x40
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f001 fbab 	bl	800cb54 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2240      	movs	r2, #64	; 0x40
 800b40a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b40e:	2340      	movs	r3, #64	; 0x40
 800b410:	2200      	movs	r2, #0
 800b412:	2180      	movs	r1, #128	; 0x80
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f001 fb9d 	bl	800cb54 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2201      	movs	r2, #1
 800b41e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2240      	movs	r2, #64	; 0x40
 800b424:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	78fa      	ldrb	r2, [r7, #3]
 800b440:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b45e:	b2da      	uxtb	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2204      	movs	r2, #4
 800b46a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	2b04      	cmp	r3, #4
 800b48e:	d106      	bne.n	800b49e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b496:	b2da      	uxtb	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e012      	b.n	800b4e8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b03      	cmp	r3, #3
 800b4cc:	d10b      	bne.n	800b4e6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d4:	69db      	ldr	r3, [r3, #28]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d005      	beq.n	800b4e6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4e0:	69db      	ldr	r3, [r3, #28]
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b4e6:	2300      	movs	r3, #0
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b502:	2b00      	cmp	r3, #0
 800b504:	d101      	bne.n	800b50a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b506:	2303      	movs	r3, #3
 800b508:	e014      	b.n	800b534 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b510:	b2db      	uxtb	r3, r3
 800b512:	2b03      	cmp	r3, #3
 800b514:	d10d      	bne.n	800b532 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d007      	beq.n	800b532 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b528:	6a1b      	ldr	r3, [r3, #32]
 800b52a:	78fa      	ldrb	r2, [r7, #3]
 800b52c:	4611      	mov	r1, r2
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	460b      	mov	r3, r1
 800b546:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d101      	bne.n	800b556 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b552:	2303      	movs	r3, #3
 800b554:	e014      	b.n	800b580 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b03      	cmp	r3, #3
 800b560:	d10d      	bne.n	800b57e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d007      	beq.n	800b57e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b576:	78fa      	ldrb	r2, [r7, #3]
 800b578:	4611      	mov	r1, r2
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3708      	adds	r7, #8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	370c      	adds	r7, #12
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr

0800b59e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b082      	sub	sp, #8
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d009      	beq.n	800b5cc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	6852      	ldr	r2, [r2, #4]
 800b5c4:	b2d2      	uxtb	r2, r2
 800b5c6:	4611      	mov	r1, r2
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	4798      	blx	r3
  }

  return USBD_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b5d6:	b480      	push	{r7}
 800b5d8:	b087      	sub	sp, #28
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b5f4:	8a3b      	ldrh	r3, [r7, #16]
 800b5f6:	021b      	lsls	r3, r3, #8
 800b5f8:	b21a      	sxth	r2, r3
 800b5fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b5fe:	4313      	orrs	r3, r2
 800b600:	b21b      	sxth	r3, r3
 800b602:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b604:	89fb      	ldrh	r3, [r7, #14]
}
 800b606:	4618      	mov	r0, r3
 800b608:	371c      	adds	r7, #28
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
	...

0800b614 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b61e:	2300      	movs	r3, #0
 800b620:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b62a:	2b40      	cmp	r3, #64	; 0x40
 800b62c:	d005      	beq.n	800b63a <USBD_StdDevReq+0x26>
 800b62e:	2b40      	cmp	r3, #64	; 0x40
 800b630:	d853      	bhi.n	800b6da <USBD_StdDevReq+0xc6>
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00b      	beq.n	800b64e <USBD_StdDevReq+0x3a>
 800b636:	2b20      	cmp	r3, #32
 800b638:	d14f      	bne.n	800b6da <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	4798      	blx	r3
 800b648:	4603      	mov	r3, r0
 800b64a:	73fb      	strb	r3, [r7, #15]
      break;
 800b64c:	e04a      	b.n	800b6e4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	785b      	ldrb	r3, [r3, #1]
 800b652:	2b09      	cmp	r3, #9
 800b654:	d83b      	bhi.n	800b6ce <USBD_StdDevReq+0xba>
 800b656:	a201      	add	r2, pc, #4	; (adr r2, 800b65c <USBD_StdDevReq+0x48>)
 800b658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b65c:	0800b6b1 	.word	0x0800b6b1
 800b660:	0800b6c5 	.word	0x0800b6c5
 800b664:	0800b6cf 	.word	0x0800b6cf
 800b668:	0800b6bb 	.word	0x0800b6bb
 800b66c:	0800b6cf 	.word	0x0800b6cf
 800b670:	0800b68f 	.word	0x0800b68f
 800b674:	0800b685 	.word	0x0800b685
 800b678:	0800b6cf 	.word	0x0800b6cf
 800b67c:	0800b6a7 	.word	0x0800b6a7
 800b680:	0800b699 	.word	0x0800b699
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b684:	6839      	ldr	r1, [r7, #0]
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f9de 	bl	800ba48 <USBD_GetDescriptor>
          break;
 800b68c:	e024      	b.n	800b6d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fb43 	bl	800bd1c <USBD_SetAddress>
          break;
 800b696:	e01f      	b.n	800b6d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b698:	6839      	ldr	r1, [r7, #0]
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fb82 	bl	800bda4 <USBD_SetConfig>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	73fb      	strb	r3, [r7, #15]
          break;
 800b6a4:	e018      	b.n	800b6d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b6a6:	6839      	ldr	r1, [r7, #0]
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 fc21 	bl	800bef0 <USBD_GetConfig>
          break;
 800b6ae:	e013      	b.n	800b6d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fc52 	bl	800bf5c <USBD_GetStatus>
          break;
 800b6b8:	e00e      	b.n	800b6d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fc81 	bl	800bfc4 <USBD_SetFeature>
          break;
 800b6c2:	e009      	b.n	800b6d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6c4:	6839      	ldr	r1, [r7, #0]
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 fc90 	bl	800bfec <USBD_ClrFeature>
          break;
 800b6cc:	e004      	b.n	800b6d8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b6ce:	6839      	ldr	r1, [r7, #0]
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 fce7 	bl	800c0a4 <USBD_CtlError>
          break;
 800b6d6:	bf00      	nop
      }
      break;
 800b6d8:	e004      	b.n	800b6e4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fce1 	bl	800c0a4 <USBD_CtlError>
      break;
 800b6e2:	bf00      	nop
  }

  return ret;
 800b6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop

0800b6f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b706:	2b40      	cmp	r3, #64	; 0x40
 800b708:	d005      	beq.n	800b716 <USBD_StdItfReq+0x26>
 800b70a:	2b40      	cmp	r3, #64	; 0x40
 800b70c:	d82f      	bhi.n	800b76e <USBD_StdItfReq+0x7e>
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d001      	beq.n	800b716 <USBD_StdItfReq+0x26>
 800b712:	2b20      	cmp	r3, #32
 800b714:	d12b      	bne.n	800b76e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	3b01      	subs	r3, #1
 800b720:	2b02      	cmp	r3, #2
 800b722:	d81d      	bhi.n	800b760 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	889b      	ldrh	r3, [r3, #4]
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d813      	bhi.n	800b756 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	4798      	blx	r3
 800b73c:	4603      	mov	r3, r0
 800b73e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	88db      	ldrh	r3, [r3, #6]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d110      	bne.n	800b76a <USBD_StdItfReq+0x7a>
 800b748:	7bfb      	ldrb	r3, [r7, #15]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10d      	bne.n	800b76a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fd56 	bl	800c200 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b754:	e009      	b.n	800b76a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 fca3 	bl	800c0a4 <USBD_CtlError>
          break;
 800b75e:	e004      	b.n	800b76a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fc9e 	bl	800c0a4 <USBD_CtlError>
          break;
 800b768:	e000      	b.n	800b76c <USBD_StdItfReq+0x7c>
          break;
 800b76a:	bf00      	nop
      }
      break;
 800b76c:	e004      	b.n	800b778 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b76e:	6839      	ldr	r1, [r7, #0]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 fc97 	bl	800c0a4 <USBD_CtlError>
      break;
 800b776:	bf00      	nop
  }

  return ret;
 800b778:	7bfb      	ldrb	r3, [r7, #15]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b084      	sub	sp, #16
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b78c:	2300      	movs	r3, #0
 800b78e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	889b      	ldrh	r3, [r3, #4]
 800b794:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b79e:	2b40      	cmp	r3, #64	; 0x40
 800b7a0:	d007      	beq.n	800b7b2 <USBD_StdEPReq+0x30>
 800b7a2:	2b40      	cmp	r3, #64	; 0x40
 800b7a4:	f200 8145 	bhi.w	800ba32 <USBD_StdEPReq+0x2b0>
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00c      	beq.n	800b7c6 <USBD_StdEPReq+0x44>
 800b7ac:	2b20      	cmp	r3, #32
 800b7ae:	f040 8140 	bne.w	800ba32 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	4798      	blx	r3
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b7c4:	e13a      	b.n	800ba3c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	785b      	ldrb	r3, [r3, #1]
 800b7ca:	2b03      	cmp	r3, #3
 800b7cc:	d007      	beq.n	800b7de <USBD_StdEPReq+0x5c>
 800b7ce:	2b03      	cmp	r3, #3
 800b7d0:	f300 8129 	bgt.w	800ba26 <USBD_StdEPReq+0x2a4>
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d07f      	beq.n	800b8d8 <USBD_StdEPReq+0x156>
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d03c      	beq.n	800b856 <USBD_StdEPReq+0xd4>
 800b7dc:	e123      	b.n	800ba26 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d002      	beq.n	800b7f0 <USBD_StdEPReq+0x6e>
 800b7ea:	2b03      	cmp	r3, #3
 800b7ec:	d016      	beq.n	800b81c <USBD_StdEPReq+0x9a>
 800b7ee:	e02c      	b.n	800b84a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7f0:	7bbb      	ldrb	r3, [r7, #14]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00d      	beq.n	800b812 <USBD_StdEPReq+0x90>
 800b7f6:	7bbb      	ldrb	r3, [r7, #14]
 800b7f8:	2b80      	cmp	r3, #128	; 0x80
 800b7fa:	d00a      	beq.n	800b812 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f001 fa51 	bl	800cca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b806:	2180      	movs	r1, #128	; 0x80
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f001 fa4d 	bl	800cca8 <USBD_LL_StallEP>
 800b80e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b810:	e020      	b.n	800b854 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 fc45 	bl	800c0a4 <USBD_CtlError>
              break;
 800b81a:	e01b      	b.n	800b854 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	885b      	ldrh	r3, [r3, #2]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10e      	bne.n	800b842 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b824:	7bbb      	ldrb	r3, [r7, #14]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00b      	beq.n	800b842 <USBD_StdEPReq+0xc0>
 800b82a:	7bbb      	ldrb	r3, [r7, #14]
 800b82c:	2b80      	cmp	r3, #128	; 0x80
 800b82e:	d008      	beq.n	800b842 <USBD_StdEPReq+0xc0>
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	88db      	ldrh	r3, [r3, #6]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d104      	bne.n	800b842 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b838:	7bbb      	ldrb	r3, [r7, #14]
 800b83a:	4619      	mov	r1, r3
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f001 fa33 	bl	800cca8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fcdc 	bl	800c200 <USBD_CtlSendStatus>

              break;
 800b848:	e004      	b.n	800b854 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 fc29 	bl	800c0a4 <USBD_CtlError>
              break;
 800b852:	bf00      	nop
          }
          break;
 800b854:	e0ec      	b.n	800ba30 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d002      	beq.n	800b868 <USBD_StdEPReq+0xe6>
 800b862:	2b03      	cmp	r3, #3
 800b864:	d016      	beq.n	800b894 <USBD_StdEPReq+0x112>
 800b866:	e030      	b.n	800b8ca <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b868:	7bbb      	ldrb	r3, [r7, #14]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00d      	beq.n	800b88a <USBD_StdEPReq+0x108>
 800b86e:	7bbb      	ldrb	r3, [r7, #14]
 800b870:	2b80      	cmp	r3, #128	; 0x80
 800b872:	d00a      	beq.n	800b88a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b874:	7bbb      	ldrb	r3, [r7, #14]
 800b876:	4619      	mov	r1, r3
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f001 fa15 	bl	800cca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b87e:	2180      	movs	r1, #128	; 0x80
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f001 fa11 	bl	800cca8 <USBD_LL_StallEP>
 800b886:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b888:	e025      	b.n	800b8d6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fc09 	bl	800c0a4 <USBD_CtlError>
              break;
 800b892:	e020      	b.n	800b8d6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	885b      	ldrh	r3, [r3, #2]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d11b      	bne.n	800b8d4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b89c:	7bbb      	ldrb	r3, [r7, #14]
 800b89e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d004      	beq.n	800b8b0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b8a6:	7bbb      	ldrb	r3, [r7, #14]
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f001 fa32 	bl	800cd14 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 fca5 	bl	800c200 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	4798      	blx	r3
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b8c8:	e004      	b.n	800b8d4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fbe9 	bl	800c0a4 <USBD_CtlError>
              break;
 800b8d2:	e000      	b.n	800b8d6 <USBD_StdEPReq+0x154>
              break;
 800b8d4:	bf00      	nop
          }
          break;
 800b8d6:	e0ab      	b.n	800ba30 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	d002      	beq.n	800b8ea <USBD_StdEPReq+0x168>
 800b8e4:	2b03      	cmp	r3, #3
 800b8e6:	d032      	beq.n	800b94e <USBD_StdEPReq+0x1cc>
 800b8e8:	e097      	b.n	800ba1a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8ea:	7bbb      	ldrb	r3, [r7, #14]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d007      	beq.n	800b900 <USBD_StdEPReq+0x17e>
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
 800b8f2:	2b80      	cmp	r3, #128	; 0x80
 800b8f4:	d004      	beq.n	800b900 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fbd3 	bl	800c0a4 <USBD_CtlError>
                break;
 800b8fe:	e091      	b.n	800ba24 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b900:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b904:	2b00      	cmp	r3, #0
 800b906:	da0b      	bge.n	800b920 <USBD_StdEPReq+0x19e>
 800b908:	7bbb      	ldrb	r3, [r7, #14]
 800b90a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b90e:	4613      	mov	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	4413      	add	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	3310      	adds	r3, #16
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	4413      	add	r3, r2
 800b91c:	3304      	adds	r3, #4
 800b91e:	e00b      	b.n	800b938 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b920:	7bbb      	ldrb	r3, [r7, #14]
 800b922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b926:	4613      	mov	r3, r2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	4413      	add	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	4413      	add	r3, r2
 800b936:	3304      	adds	r3, #4
 800b938:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	2200      	movs	r2, #0
 800b93e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	2202      	movs	r2, #2
 800b944:	4619      	mov	r1, r3
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fc1d 	bl	800c186 <USBD_CtlSendData>
              break;
 800b94c:	e06a      	b.n	800ba24 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b94e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b952:	2b00      	cmp	r3, #0
 800b954:	da11      	bge.n	800b97a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b956:	7bbb      	ldrb	r3, [r7, #14]
 800b958:	f003 020f 	and.w	r2, r3, #15
 800b95c:	6879      	ldr	r1, [r7, #4]
 800b95e:	4613      	mov	r3, r2
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4413      	add	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	440b      	add	r3, r1
 800b968:	3324      	adds	r3, #36	; 0x24
 800b96a:	881b      	ldrh	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d117      	bne.n	800b9a0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b970:	6839      	ldr	r1, [r7, #0]
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 fb96 	bl	800c0a4 <USBD_CtlError>
                  break;
 800b978:	e054      	b.n	800ba24 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b97a:	7bbb      	ldrb	r3, [r7, #14]
 800b97c:	f003 020f 	and.w	r2, r3, #15
 800b980:	6879      	ldr	r1, [r7, #4]
 800b982:	4613      	mov	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4413      	add	r3, r2
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	440b      	add	r3, r1
 800b98c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b990:	881b      	ldrh	r3, [r3, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d104      	bne.n	800b9a0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b996:	6839      	ldr	r1, [r7, #0]
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fb83 	bl	800c0a4 <USBD_CtlError>
                  break;
 800b99e:	e041      	b.n	800ba24 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	da0b      	bge.n	800b9c0 <USBD_StdEPReq+0x23e>
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4413      	add	r3, r2
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	3310      	adds	r3, #16
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	3304      	adds	r3, #4
 800b9be:	e00b      	b.n	800b9d8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9c0:	7bbb      	ldrb	r3, [r7, #14]
 800b9c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4413      	add	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b9da:	7bbb      	ldrb	r3, [r7, #14]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d002      	beq.n	800b9e6 <USBD_StdEPReq+0x264>
 800b9e0:	7bbb      	ldrb	r3, [r7, #14]
 800b9e2:	2b80      	cmp	r3, #128	; 0x80
 800b9e4:	d103      	bne.n	800b9ee <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	601a      	str	r2, [r3, #0]
 800b9ec:	e00e      	b.n	800ba0c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b9ee:	7bbb      	ldrb	r3, [r7, #14]
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f001 f9c4 	bl	800cd80 <USBD_LL_IsStallEP>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d003      	beq.n	800ba06 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2201      	movs	r2, #1
 800ba02:	601a      	str	r2, [r3, #0]
 800ba04:	e002      	b.n	800ba0c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2202      	movs	r2, #2
 800ba10:	4619      	mov	r1, r3
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 fbb7 	bl	800c186 <USBD_CtlSendData>
              break;
 800ba18:	e004      	b.n	800ba24 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 fb41 	bl	800c0a4 <USBD_CtlError>
              break;
 800ba22:	bf00      	nop
          }
          break;
 800ba24:	e004      	b.n	800ba30 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 fb3b 	bl	800c0a4 <USBD_CtlError>
          break;
 800ba2e:	bf00      	nop
      }
      break;
 800ba30:	e004      	b.n	800ba3c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ba32:	6839      	ldr	r1, [r7, #0]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 fb35 	bl	800c0a4 <USBD_CtlError>
      break;
 800ba3a:	bf00      	nop
  }

  return ret;
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
	...

0800ba48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba52:	2300      	movs	r3, #0
 800ba54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ba56:	2300      	movs	r3, #0
 800ba58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	885b      	ldrh	r3, [r3, #2]
 800ba62:	0a1b      	lsrs	r3, r3, #8
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	3b01      	subs	r3, #1
 800ba68:	2b06      	cmp	r3, #6
 800ba6a:	f200 8128 	bhi.w	800bcbe <USBD_GetDescriptor+0x276>
 800ba6e:	a201      	add	r2, pc, #4	; (adr r2, 800ba74 <USBD_GetDescriptor+0x2c>)
 800ba70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba74:	0800ba91 	.word	0x0800ba91
 800ba78:	0800baa9 	.word	0x0800baa9
 800ba7c:	0800bae9 	.word	0x0800bae9
 800ba80:	0800bcbf 	.word	0x0800bcbf
 800ba84:	0800bcbf 	.word	0x0800bcbf
 800ba88:	0800bc5f 	.word	0x0800bc5f
 800ba8c:	0800bc8b 	.word	0x0800bc8b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	7c12      	ldrb	r2, [r2, #16]
 800ba9c:	f107 0108 	add.w	r1, r7, #8
 800baa0:	4610      	mov	r0, r2
 800baa2:	4798      	blx	r3
 800baa4:	60f8      	str	r0, [r7, #12]
      break;
 800baa6:	e112      	b.n	800bcce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	7c1b      	ldrb	r3, [r3, #16]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d10d      	bne.n	800bacc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab8:	f107 0208 	add.w	r2, r7, #8
 800babc:	4610      	mov	r0, r2
 800babe:	4798      	blx	r3
 800bac0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3301      	adds	r3, #1
 800bac6:	2202      	movs	r2, #2
 800bac8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800baca:	e100      	b.n	800bcce <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad4:	f107 0208 	add.w	r2, r7, #8
 800bad8:	4610      	mov	r0, r2
 800bada:	4798      	blx	r3
 800badc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	3301      	adds	r3, #1
 800bae2:	2202      	movs	r2, #2
 800bae4:	701a      	strb	r2, [r3, #0]
      break;
 800bae6:	e0f2      	b.n	800bcce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	885b      	ldrh	r3, [r3, #2]
 800baec:	b2db      	uxtb	r3, r3
 800baee:	2b05      	cmp	r3, #5
 800baf0:	f200 80ac 	bhi.w	800bc4c <USBD_GetDescriptor+0x204>
 800baf4:	a201      	add	r2, pc, #4	; (adr r2, 800bafc <USBD_GetDescriptor+0xb4>)
 800baf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafa:	bf00      	nop
 800bafc:	0800bb15 	.word	0x0800bb15
 800bb00:	0800bb49 	.word	0x0800bb49
 800bb04:	0800bb7d 	.word	0x0800bb7d
 800bb08:	0800bbb1 	.word	0x0800bbb1
 800bb0c:	0800bbe5 	.word	0x0800bbe5
 800bb10:	0800bc19 	.word	0x0800bc19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00b      	beq.n	800bb38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	7c12      	ldrb	r2, [r2, #16]
 800bb2c:	f107 0108 	add.w	r1, r7, #8
 800bb30:	4610      	mov	r0, r2
 800bb32:	4798      	blx	r3
 800bb34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb36:	e091      	b.n	800bc5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb38:	6839      	ldr	r1, [r7, #0]
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 fab2 	bl	800c0a4 <USBD_CtlError>
            err++;
 800bb40:	7afb      	ldrb	r3, [r7, #11]
 800bb42:	3301      	adds	r3, #1
 800bb44:	72fb      	strb	r3, [r7, #11]
          break;
 800bb46:	e089      	b.n	800bc5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00b      	beq.n	800bb6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	7c12      	ldrb	r2, [r2, #16]
 800bb60:	f107 0108 	add.w	r1, r7, #8
 800bb64:	4610      	mov	r0, r2
 800bb66:	4798      	blx	r3
 800bb68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb6a:	e077      	b.n	800bc5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb6c:	6839      	ldr	r1, [r7, #0]
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fa98 	bl	800c0a4 <USBD_CtlError>
            err++;
 800bb74:	7afb      	ldrb	r3, [r7, #11]
 800bb76:	3301      	adds	r3, #1
 800bb78:	72fb      	strb	r3, [r7, #11]
          break;
 800bb7a:	e06f      	b.n	800bc5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00b      	beq.n	800bba0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	7c12      	ldrb	r2, [r2, #16]
 800bb94:	f107 0108 	add.w	r1, r7, #8
 800bb98:	4610      	mov	r0, r2
 800bb9a:	4798      	blx	r3
 800bb9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb9e:	e05d      	b.n	800bc5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bba0:	6839      	ldr	r1, [r7, #0]
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 fa7e 	bl	800c0a4 <USBD_CtlError>
            err++;
 800bba8:	7afb      	ldrb	r3, [r7, #11]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	72fb      	strb	r3, [r7, #11]
          break;
 800bbae:	e055      	b.n	800bc5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00b      	beq.n	800bbd4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	7c12      	ldrb	r2, [r2, #16]
 800bbc8:	f107 0108 	add.w	r1, r7, #8
 800bbcc:	4610      	mov	r0, r2
 800bbce:	4798      	blx	r3
 800bbd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbd2:	e043      	b.n	800bc5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbd4:	6839      	ldr	r1, [r7, #0]
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 fa64 	bl	800c0a4 <USBD_CtlError>
            err++;
 800bbdc:	7afb      	ldrb	r3, [r7, #11]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	72fb      	strb	r3, [r7, #11]
          break;
 800bbe2:	e03b      	b.n	800bc5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbea:	695b      	ldr	r3, [r3, #20]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d00b      	beq.n	800bc08 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbf6:	695b      	ldr	r3, [r3, #20]
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	7c12      	ldrb	r2, [r2, #16]
 800bbfc:	f107 0108 	add.w	r1, r7, #8
 800bc00:	4610      	mov	r0, r2
 800bc02:	4798      	blx	r3
 800bc04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc06:	e029      	b.n	800bc5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc08:	6839      	ldr	r1, [r7, #0]
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fa4a 	bl	800c0a4 <USBD_CtlError>
            err++;
 800bc10:	7afb      	ldrb	r3, [r7, #11]
 800bc12:	3301      	adds	r3, #1
 800bc14:	72fb      	strb	r3, [r7, #11]
          break;
 800bc16:	e021      	b.n	800bc5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00b      	beq.n	800bc3c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc2a:	699b      	ldr	r3, [r3, #24]
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	7c12      	ldrb	r2, [r2, #16]
 800bc30:	f107 0108 	add.w	r1, r7, #8
 800bc34:	4610      	mov	r0, r2
 800bc36:	4798      	blx	r3
 800bc38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc3a:	e00f      	b.n	800bc5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 fa30 	bl	800c0a4 <USBD_CtlError>
            err++;
 800bc44:	7afb      	ldrb	r3, [r7, #11]
 800bc46:	3301      	adds	r3, #1
 800bc48:	72fb      	strb	r3, [r7, #11]
          break;
 800bc4a:	e007      	b.n	800bc5c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bc4c:	6839      	ldr	r1, [r7, #0]
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 fa28 	bl	800c0a4 <USBD_CtlError>
          err++;
 800bc54:	7afb      	ldrb	r3, [r7, #11]
 800bc56:	3301      	adds	r3, #1
 800bc58:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bc5a:	bf00      	nop
      }
      break;
 800bc5c:	e037      	b.n	800bcce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	7c1b      	ldrb	r3, [r3, #16]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d109      	bne.n	800bc7a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc6e:	f107 0208 	add.w	r2, r7, #8
 800bc72:	4610      	mov	r0, r2
 800bc74:	4798      	blx	r3
 800bc76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc78:	e029      	b.n	800bcce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fa11 	bl	800c0a4 <USBD_CtlError>
        err++;
 800bc82:	7afb      	ldrb	r3, [r7, #11]
 800bc84:	3301      	adds	r3, #1
 800bc86:	72fb      	strb	r3, [r7, #11]
      break;
 800bc88:	e021      	b.n	800bcce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	7c1b      	ldrb	r3, [r3, #16]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10d      	bne.n	800bcae <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9a:	f107 0208 	add.w	r2, r7, #8
 800bc9e:	4610      	mov	r0, r2
 800bca0:	4798      	blx	r3
 800bca2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	3301      	adds	r3, #1
 800bca8:	2207      	movs	r2, #7
 800bcaa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcac:	e00f      	b.n	800bcce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bcae:	6839      	ldr	r1, [r7, #0]
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 f9f7 	bl	800c0a4 <USBD_CtlError>
        err++;
 800bcb6:	7afb      	ldrb	r3, [r7, #11]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	72fb      	strb	r3, [r7, #11]
      break;
 800bcbc:	e007      	b.n	800bcce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bcbe:	6839      	ldr	r1, [r7, #0]
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 f9ef 	bl	800c0a4 <USBD_CtlError>
      err++;
 800bcc6:	7afb      	ldrb	r3, [r7, #11]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	72fb      	strb	r3, [r7, #11]
      break;
 800bccc:	bf00      	nop
  }

  if (err != 0U)
 800bcce:	7afb      	ldrb	r3, [r7, #11]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d11e      	bne.n	800bd12 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	88db      	ldrh	r3, [r3, #6]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d016      	beq.n	800bd0a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bcdc:	893b      	ldrh	r3, [r7, #8]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00e      	beq.n	800bd00 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	88da      	ldrh	r2, [r3, #6]
 800bce6:	893b      	ldrh	r3, [r7, #8]
 800bce8:	4293      	cmp	r3, r2
 800bcea:	bf28      	it	cs
 800bcec:	4613      	movcs	r3, r2
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bcf2:	893b      	ldrh	r3, [r7, #8]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	68f9      	ldr	r1, [r7, #12]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fa44 	bl	800c186 <USBD_CtlSendData>
 800bcfe:	e009      	b.n	800bd14 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 f9ce 	bl	800c0a4 <USBD_CtlError>
 800bd08:	e004      	b.n	800bd14 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 fa78 	bl	800c200 <USBD_CtlSendStatus>
 800bd10:	e000      	b.n	800bd14 <USBD_GetDescriptor+0x2cc>
    return;
 800bd12:	bf00      	nop
  }
}
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop

0800bd1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	889b      	ldrh	r3, [r3, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d131      	bne.n	800bd92 <USBD_SetAddress+0x76>
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	88db      	ldrh	r3, [r3, #6]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d12d      	bne.n	800bd92 <USBD_SetAddress+0x76>
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	885b      	ldrh	r3, [r3, #2]
 800bd3a:	2b7f      	cmp	r3, #127	; 0x7f
 800bd3c:	d829      	bhi.n	800bd92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	885b      	ldrh	r3, [r3, #2]
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	2b03      	cmp	r3, #3
 800bd54:	d104      	bne.n	800bd60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bd56:	6839      	ldr	r1, [r7, #0]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 f9a3 	bl	800c0a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd5e:	e01d      	b.n	800bd9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	7bfa      	ldrb	r2, [r7, #15]
 800bd64:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f001 f833 	bl	800cdd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fa44 	bl	800c200 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d004      	beq.n	800bd88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2202      	movs	r2, #2
 800bd82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd86:	e009      	b.n	800bd9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd90:	e004      	b.n	800bd9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 f985 	bl	800c0a4 <USBD_CtlError>
  }
}
 800bd9a:	bf00      	nop
 800bd9c:	bf00      	nop
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	885b      	ldrh	r3, [r3, #2]
 800bdb6:	b2da      	uxtb	r2, r3
 800bdb8:	4b4c      	ldr	r3, [pc, #304]	; (800beec <USBD_SetConfig+0x148>)
 800bdba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bdbc:	4b4b      	ldr	r3, [pc, #300]	; (800beec <USBD_SetConfig+0x148>)
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d905      	bls.n	800bdd0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 f96c 	bl	800c0a4 <USBD_CtlError>
    return USBD_FAIL;
 800bdcc:	2303      	movs	r3, #3
 800bdce:	e088      	b.n	800bee2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	2b02      	cmp	r3, #2
 800bdda:	d002      	beq.n	800bde2 <USBD_SetConfig+0x3e>
 800bddc:	2b03      	cmp	r3, #3
 800bdde:	d025      	beq.n	800be2c <USBD_SetConfig+0x88>
 800bde0:	e071      	b.n	800bec6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bde2:	4b42      	ldr	r3, [pc, #264]	; (800beec <USBD_SetConfig+0x148>)
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d01c      	beq.n	800be24 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800bdea:	4b40      	ldr	r3, [pc, #256]	; (800beec <USBD_SetConfig+0x148>)
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bdf4:	4b3d      	ldr	r3, [pc, #244]	; (800beec <USBD_SetConfig+0x148>)
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff f948 	bl	800b090 <USBD_SetClassConfig>
 800be00:	4603      	mov	r3, r0
 800be02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800be04:	7bfb      	ldrb	r3, [r7, #15]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d004      	beq.n	800be14 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800be0a:	6839      	ldr	r1, [r7, #0]
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 f949 	bl	800c0a4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800be12:	e065      	b.n	800bee0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 f9f3 	bl	800c200 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2203      	movs	r2, #3
 800be1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800be22:	e05d      	b.n	800bee0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 f9eb 	bl	800c200 <USBD_CtlSendStatus>
      break;
 800be2a:	e059      	b.n	800bee0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800be2c:	4b2f      	ldr	r3, [pc, #188]	; (800beec <USBD_SetConfig+0x148>)
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d112      	bne.n	800be5a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2202      	movs	r2, #2
 800be38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800be3c:	4b2b      	ldr	r3, [pc, #172]	; (800beec <USBD_SetConfig+0x148>)
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	461a      	mov	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be46:	4b29      	ldr	r3, [pc, #164]	; (800beec <USBD_SetConfig+0x148>)
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	4619      	mov	r1, r3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7ff f93b 	bl	800b0c8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f9d4 	bl	800c200 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800be58:	e042      	b.n	800bee0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800be5a:	4b24      	ldr	r3, [pc, #144]	; (800beec <USBD_SetConfig+0x148>)
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	461a      	mov	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	429a      	cmp	r2, r3
 800be66:	d02a      	beq.n	800bebe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	4619      	mov	r1, r3
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f7ff f929 	bl	800b0c8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800be76:	4b1d      	ldr	r3, [pc, #116]	; (800beec <USBD_SetConfig+0x148>)
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	461a      	mov	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be80:	4b1a      	ldr	r3, [pc, #104]	; (800beec <USBD_SetConfig+0x148>)
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	4619      	mov	r1, r3
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7ff f902 	bl	800b090 <USBD_SetClassConfig>
 800be8c:	4603      	mov	r3, r0
 800be8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800be90:	7bfb      	ldrb	r3, [r7, #15]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00f      	beq.n	800beb6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 f903 	bl	800c0a4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	4619      	mov	r1, r3
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f7ff f90e 	bl	800b0c8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2202      	movs	r2, #2
 800beb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800beb4:	e014      	b.n	800bee0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f9a2 	bl	800c200 <USBD_CtlSendStatus>
      break;
 800bebc:	e010      	b.n	800bee0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f99e 	bl	800c200 <USBD_CtlSendStatus>
      break;
 800bec4:	e00c      	b.n	800bee0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 f8eb 	bl	800c0a4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bece:	4b07      	ldr	r3, [pc, #28]	; (800beec <USBD_SetConfig+0x148>)
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	4619      	mov	r1, r3
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff f8f7 	bl	800b0c8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800beda:	2303      	movs	r3, #3
 800bedc:	73fb      	strb	r3, [r7, #15]
      break;
 800bede:	bf00      	nop
  }

  return ret;
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	20002328 	.word	0x20002328

0800bef0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	88db      	ldrh	r3, [r3, #6]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d004      	beq.n	800bf0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bf02:	6839      	ldr	r1, [r7, #0]
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 f8cd 	bl	800c0a4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bf0a:	e023      	b.n	800bf54 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	dc02      	bgt.n	800bf1e <USBD_GetConfig+0x2e>
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	dc03      	bgt.n	800bf24 <USBD_GetConfig+0x34>
 800bf1c:	e015      	b.n	800bf4a <USBD_GetConfig+0x5a>
 800bf1e:	2b03      	cmp	r3, #3
 800bf20:	d00b      	beq.n	800bf3a <USBD_GetConfig+0x4a>
 800bf22:	e012      	b.n	800bf4a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	2201      	movs	r2, #1
 800bf30:	4619      	mov	r1, r3
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 f927 	bl	800c186 <USBD_CtlSendData>
        break;
 800bf38:	e00c      	b.n	800bf54 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	3304      	adds	r3, #4
 800bf3e:	2201      	movs	r2, #1
 800bf40:	4619      	mov	r1, r3
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 f91f 	bl	800c186 <USBD_CtlSendData>
        break;
 800bf48:	e004      	b.n	800bf54 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 f8a9 	bl	800c0a4 <USBD_CtlError>
        break;
 800bf52:	bf00      	nop
}
 800bf54:	bf00      	nop
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	3b01      	subs	r3, #1
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	d81e      	bhi.n	800bfb2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	88db      	ldrh	r3, [r3, #6]
 800bf78:	2b02      	cmp	r3, #2
 800bf7a:	d004      	beq.n	800bf86 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f890 	bl	800c0a4 <USBD_CtlError>
        break;
 800bf84:	e01a      	b.n	800bfbc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d005      	beq.n	800bfa2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	f043 0202 	orr.w	r2, r3, #2
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	330c      	adds	r3, #12
 800bfa6:	2202      	movs	r2, #2
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f8eb 	bl	800c186 <USBD_CtlSendData>
      break;
 800bfb0:	e004      	b.n	800bfbc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 f875 	bl	800c0a4 <USBD_CtlError>
      break;
 800bfba:	bf00      	nop
  }
}
 800bfbc:	bf00      	nop
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	885b      	ldrh	r3, [r3, #2]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d106      	bne.n	800bfe4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f90e 	bl	800c200 <USBD_CtlSendStatus>
  }
}
 800bfe4:	bf00      	nop
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	3b01      	subs	r3, #1
 800c000:	2b02      	cmp	r3, #2
 800c002:	d80b      	bhi.n	800c01c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	885b      	ldrh	r3, [r3, #2]
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d10c      	bne.n	800c026 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f8f3 	bl	800c200 <USBD_CtlSendStatus>
      }
      break;
 800c01a:	e004      	b.n	800c026 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f840 	bl	800c0a4 <USBD_CtlError>
      break;
 800c024:	e000      	b.n	800c028 <USBD_ClrFeature+0x3c>
      break;
 800c026:	bf00      	nop
  }
}
 800c028:	bf00      	nop
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	781a      	ldrb	r2, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	3301      	adds	r3, #1
 800c04a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	781a      	ldrb	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	3301      	adds	r3, #1
 800c058:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f7ff fabb 	bl	800b5d6 <SWAPBYTE>
 800c060:	4603      	mov	r3, r0
 800c062:	461a      	mov	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	3301      	adds	r3, #1
 800c06c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	3301      	adds	r3, #1
 800c072:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f7ff faae 	bl	800b5d6 <SWAPBYTE>
 800c07a:	4603      	mov	r3, r0
 800c07c:	461a      	mov	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	3301      	adds	r3, #1
 800c086:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	3301      	adds	r3, #1
 800c08c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c08e:	68f8      	ldr	r0, [r7, #12]
 800c090:	f7ff faa1 	bl	800b5d6 <SWAPBYTE>
 800c094:	4603      	mov	r3, r0
 800c096:	461a      	mov	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	80da      	strh	r2, [r3, #6]
}
 800c09c:	bf00      	nop
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0ae:	2180      	movs	r1, #128	; 0x80
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fdf9 	bl	800cca8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 fdf5 	bl	800cca8 <USBD_LL_StallEP>
}
 800c0be:	bf00      	nop
 800c0c0:	3708      	adds	r7, #8
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b086      	sub	sp, #24
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	60f8      	str	r0, [r7, #12]
 800c0ce:	60b9      	str	r1, [r7, #8]
 800c0d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d036      	beq.n	800c14a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c0e0:	6938      	ldr	r0, [r7, #16]
 800c0e2:	f000 f836 	bl	800c152 <USBD_GetLen>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	005b      	lsls	r3, r3, #1
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c0f4:	7dfb      	ldrb	r3, [r7, #23]
 800c0f6:	68ba      	ldr	r2, [r7, #8]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	7812      	ldrb	r2, [r2, #0]
 800c0fe:	701a      	strb	r2, [r3, #0]
  idx++;
 800c100:	7dfb      	ldrb	r3, [r7, #23]
 800c102:	3301      	adds	r3, #1
 800c104:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c106:	7dfb      	ldrb	r3, [r7, #23]
 800c108:	68ba      	ldr	r2, [r7, #8]
 800c10a:	4413      	add	r3, r2
 800c10c:	2203      	movs	r2, #3
 800c10e:	701a      	strb	r2, [r3, #0]
  idx++;
 800c110:	7dfb      	ldrb	r3, [r7, #23]
 800c112:	3301      	adds	r3, #1
 800c114:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c116:	e013      	b.n	800c140 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c118:	7dfb      	ldrb	r3, [r7, #23]
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	4413      	add	r3, r2
 800c11e:	693a      	ldr	r2, [r7, #16]
 800c120:	7812      	ldrb	r2, [r2, #0]
 800c122:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	3301      	adds	r3, #1
 800c128:	613b      	str	r3, [r7, #16]
    idx++;
 800c12a:	7dfb      	ldrb	r3, [r7, #23]
 800c12c:	3301      	adds	r3, #1
 800c12e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c130:	7dfb      	ldrb	r3, [r7, #23]
 800c132:	68ba      	ldr	r2, [r7, #8]
 800c134:	4413      	add	r3, r2
 800c136:	2200      	movs	r2, #0
 800c138:	701a      	strb	r2, [r3, #0]
    idx++;
 800c13a:	7dfb      	ldrb	r3, [r7, #23]
 800c13c:	3301      	adds	r3, #1
 800c13e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d1e7      	bne.n	800c118 <USBD_GetString+0x52>
 800c148:	e000      	b.n	800c14c <USBD_GetString+0x86>
    return;
 800c14a:	bf00      	nop
  }
}
 800c14c:	3718      	adds	r7, #24
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c152:	b480      	push	{r7}
 800c154:	b085      	sub	sp, #20
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c15a:	2300      	movs	r3, #0
 800c15c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c162:	e005      	b.n	800c170 <USBD_GetLen+0x1e>
  {
    len++;
 800c164:	7bfb      	ldrb	r3, [r7, #15]
 800c166:	3301      	adds	r3, #1
 800c168:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	3301      	adds	r3, #1
 800c16e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1f5      	bne.n	800c164 <USBD_GetLen+0x12>
  }

  return len;
 800c178:	7bfb      	ldrb	r3, [r7, #15]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3714      	adds	r7, #20
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b084      	sub	sp, #16
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	60f8      	str	r0, [r7, #12]
 800c18e:	60b9      	str	r1, [r7, #8]
 800c190:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2202      	movs	r2, #2
 800c196:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	2100      	movs	r1, #0
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f000 fe49 	bl	800ce44 <USBD_LL_Transmit>

  return USBD_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	68ba      	ldr	r2, [r7, #8]
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	68f8      	ldr	r0, [r7, #12]
 800c1d0:	f000 fe38 	bl	800ce44 <USBD_LL_Transmit>

  return USBD_OK;
 800c1d4:	2300      	movs	r3, #0
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b084      	sub	sp, #16
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	60f8      	str	r0, [r7, #12]
 800c1e6:	60b9      	str	r1, [r7, #8]
 800c1e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	68f8      	ldr	r0, [r7, #12]
 800c1f2:	f000 fe5f 	bl	800ceb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2204      	movs	r2, #4
 800c20c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c210:	2300      	movs	r3, #0
 800c212:	2200      	movs	r2, #0
 800c214:	2100      	movs	r1, #0
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 fe14 	bl	800ce44 <USBD_LL_Transmit>

  return USBD_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b082      	sub	sp, #8
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2205      	movs	r2, #5
 800c232:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c236:	2300      	movs	r3, #0
 800c238:	2200      	movs	r2, #0
 800c23a:	2100      	movs	r1, #0
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fe39 	bl	800ceb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c250:	2200      	movs	r2, #0
 800c252:	4912      	ldr	r1, [pc, #72]	; (800c29c <MX_USB_DEVICE_Init+0x50>)
 800c254:	4812      	ldr	r0, [pc, #72]	; (800c2a0 <MX_USB_DEVICE_Init+0x54>)
 800c256:	f7fe fead 	bl	800afb4 <USBD_Init>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d001      	beq.n	800c264 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c260:	f7f4 fe0e 	bl	8000e80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800c264:	490f      	ldr	r1, [pc, #60]	; (800c2a4 <MX_USB_DEVICE_Init+0x58>)
 800c266:	480e      	ldr	r0, [pc, #56]	; (800c2a0 <MX_USB_DEVICE_Init+0x54>)
 800c268:	f7fe fed4 	bl	800b014 <USBD_RegisterClass>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d001      	beq.n	800c276 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c272:	f7f4 fe05 	bl	8000e80 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c276:	490c      	ldr	r1, [pc, #48]	; (800c2a8 <MX_USB_DEVICE_Init+0x5c>)
 800c278:	4809      	ldr	r0, [pc, #36]	; (800c2a0 <MX_USB_DEVICE_Init+0x54>)
 800c27a:	f7fd f9a3 	bl	80095c4 <USBD_MSC_RegisterStorage>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b00      	cmp	r3, #0
 800c282:	d001      	beq.n	800c288 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c284:	f7f4 fdfc 	bl	8000e80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c288:	4805      	ldr	r0, [pc, #20]	; (800c2a0 <MX_USB_DEVICE_Init+0x54>)
 800c28a:	f7fe feea 	bl	800b062 <USBD_Start>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c294:	f7f4 fdf4 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c298:	bf00      	nop
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	20000134 	.word	0x20000134
 800c2a0:	2000232c 	.word	0x2000232c
 800c2a4:	2000004c 	.word	0x2000004c
 800c2a8:	20000184 	.word	0x20000184

0800c2ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	6039      	str	r1, [r7, #0]
 800c2b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2212      	movs	r2, #18
 800c2bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c2be:	4b03      	ldr	r3, [pc, #12]	; (800c2cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	20000150 	.word	0x20000150

0800c2d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	6039      	str	r1, [r7, #0]
 800c2da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	2204      	movs	r2, #4
 800c2e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c2e2:	4b03      	ldr	r3, [pc, #12]	; (800c2f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr
 800c2f0:	20000164 	.word	0x20000164

0800c2f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	6039      	str	r1, [r7, #0]
 800c2fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c300:	79fb      	ldrb	r3, [r7, #7]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d105      	bne.n	800c312 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	4907      	ldr	r1, [pc, #28]	; (800c328 <USBD_FS_ProductStrDescriptor+0x34>)
 800c30a:	4808      	ldr	r0, [pc, #32]	; (800c32c <USBD_FS_ProductStrDescriptor+0x38>)
 800c30c:	f7ff fedb 	bl	800c0c6 <USBD_GetString>
 800c310:	e004      	b.n	800c31c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c312:	683a      	ldr	r2, [r7, #0]
 800c314:	4904      	ldr	r1, [pc, #16]	; (800c328 <USBD_FS_ProductStrDescriptor+0x34>)
 800c316:	4805      	ldr	r0, [pc, #20]	; (800c32c <USBD_FS_ProductStrDescriptor+0x38>)
 800c318:	f7ff fed5 	bl	800c0c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c31c:	4b02      	ldr	r3, [pc, #8]	; (800c328 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	200025fc 	.word	0x200025fc
 800c32c:	0800cff8 	.word	0x0800cff8

0800c330 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	4603      	mov	r3, r0
 800c338:	6039      	str	r1, [r7, #0]
 800c33a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c33c:	683a      	ldr	r2, [r7, #0]
 800c33e:	4904      	ldr	r1, [pc, #16]	; (800c350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c340:	4804      	ldr	r0, [pc, #16]	; (800c354 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c342:	f7ff fec0 	bl	800c0c6 <USBD_GetString>
  return USBD_StrDesc;
 800c346:	4b02      	ldr	r3, [pc, #8]	; (800c350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3708      	adds	r7, #8
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	200025fc 	.word	0x200025fc
 800c354:	0800d00c 	.word	0x0800d00c

0800c358 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	4603      	mov	r3, r0
 800c360:	6039      	str	r1, [r7, #0]
 800c362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	221a      	movs	r2, #26
 800c368:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c36a:	f000 f843 	bl	800c3f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c36e:	4b02      	ldr	r3, [pc, #8]	; (800c378 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c370:	4618      	mov	r0, r3
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	20000168 	.word	0x20000168

0800c37c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
 800c382:	4603      	mov	r3, r0
 800c384:	6039      	str	r1, [r7, #0]
 800c386:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c388:	79fb      	ldrb	r3, [r7, #7]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d105      	bne.n	800c39a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c38e:	683a      	ldr	r2, [r7, #0]
 800c390:	4907      	ldr	r1, [pc, #28]	; (800c3b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c392:	4808      	ldr	r0, [pc, #32]	; (800c3b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c394:	f7ff fe97 	bl	800c0c6 <USBD_GetString>
 800c398:	e004      	b.n	800c3a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c39a:	683a      	ldr	r2, [r7, #0]
 800c39c:	4904      	ldr	r1, [pc, #16]	; (800c3b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c39e:	4805      	ldr	r0, [pc, #20]	; (800c3b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c3a0:	f7ff fe91 	bl	800c0c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3a4:	4b02      	ldr	r3, [pc, #8]	; (800c3b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3708      	adds	r7, #8
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	200025fc 	.word	0x200025fc
 800c3b4:	0800d020 	.word	0x0800d020

0800c3b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	4603      	mov	r3, r0
 800c3c0:	6039      	str	r1, [r7, #0]
 800c3c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c3c4:	79fb      	ldrb	r3, [r7, #7]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d105      	bne.n	800c3d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	4907      	ldr	r1, [pc, #28]	; (800c3ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c3ce:	4808      	ldr	r0, [pc, #32]	; (800c3f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c3d0:	f7ff fe79 	bl	800c0c6 <USBD_GetString>
 800c3d4:	e004      	b.n	800c3e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c3d6:	683a      	ldr	r2, [r7, #0]
 800c3d8:	4904      	ldr	r1, [pc, #16]	; (800c3ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c3da:	4805      	ldr	r0, [pc, #20]	; (800c3f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c3dc:	f7ff fe73 	bl	800c0c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3e0:	4b02      	ldr	r3, [pc, #8]	; (800c3ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	200025fc 	.word	0x200025fc
 800c3f0:	0800d02c 	.word	0x0800d02c

0800c3f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c3fa:	4b0f      	ldr	r3, [pc, #60]	; (800c438 <Get_SerialNum+0x44>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c400:	4b0e      	ldr	r3, [pc, #56]	; (800c43c <Get_SerialNum+0x48>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c406:	4b0e      	ldr	r3, [pc, #56]	; (800c440 <Get_SerialNum+0x4c>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	4413      	add	r3, r2
 800c412:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d009      	beq.n	800c42e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c41a:	2208      	movs	r2, #8
 800c41c:	4909      	ldr	r1, [pc, #36]	; (800c444 <Get_SerialNum+0x50>)
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	f000 f814 	bl	800c44c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c424:	2204      	movs	r2, #4
 800c426:	4908      	ldr	r1, [pc, #32]	; (800c448 <Get_SerialNum+0x54>)
 800c428:	68b8      	ldr	r0, [r7, #8]
 800c42a:	f000 f80f 	bl	800c44c <IntToUnicode>
  }
}
 800c42e:	bf00      	nop
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	1fff7590 	.word	0x1fff7590
 800c43c:	1fff7594 	.word	0x1fff7594
 800c440:	1fff7598 	.word	0x1fff7598
 800c444:	2000016a 	.word	0x2000016a
 800c448:	2000017a 	.word	0x2000017a

0800c44c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b087      	sub	sp, #28
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	4613      	mov	r3, r2
 800c458:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c45e:	2300      	movs	r3, #0
 800c460:	75fb      	strb	r3, [r7, #23]
 800c462:	e027      	b.n	800c4b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	0f1b      	lsrs	r3, r3, #28
 800c468:	2b09      	cmp	r3, #9
 800c46a:	d80b      	bhi.n	800c484 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	0f1b      	lsrs	r3, r3, #28
 800c470:	b2da      	uxtb	r2, r3
 800c472:	7dfb      	ldrb	r3, [r7, #23]
 800c474:	005b      	lsls	r3, r3, #1
 800c476:	4619      	mov	r1, r3
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	440b      	add	r3, r1
 800c47c:	3230      	adds	r2, #48	; 0x30
 800c47e:	b2d2      	uxtb	r2, r2
 800c480:	701a      	strb	r2, [r3, #0]
 800c482:	e00a      	b.n	800c49a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	0f1b      	lsrs	r3, r3, #28
 800c488:	b2da      	uxtb	r2, r3
 800c48a:	7dfb      	ldrb	r3, [r7, #23]
 800c48c:	005b      	lsls	r3, r3, #1
 800c48e:	4619      	mov	r1, r3
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	440b      	add	r3, r1
 800c494:	3237      	adds	r2, #55	; 0x37
 800c496:	b2d2      	uxtb	r2, r2
 800c498:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	011b      	lsls	r3, r3, #4
 800c49e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c4a0:	7dfb      	ldrb	r3, [r7, #23]
 800c4a2:	005b      	lsls	r3, r3, #1
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c4ae:	7dfb      	ldrb	r3, [r7, #23]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	75fb      	strb	r3, [r7, #23]
 800c4b4:	7dfa      	ldrb	r2, [r7, #23]
 800c4b6:	79fb      	ldrb	r3, [r7, #7]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d3d3      	bcc.n	800c464 <IntToUnicode+0x18>
  }
}
 800c4bc:	bf00      	nop
 800c4be:	bf00      	nop
 800c4c0:	371c      	adds	r7, #28
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
	...

0800c4cc <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */

  if (BSP_QSPI_GetStatus() != QSPI_OK)
 800c4d6:	f7f4 fe6b 	bl	80011b0 <BSP_QSPI_GetStatus>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d009      	beq.n	800c4f4 <STORAGE_Init_FS+0x28>
  {
    HAL_QSPI_Init(&hqspi);
 800c4e0:	4807      	ldr	r0, [pc, #28]	; (800c500 <STORAGE_Init_FS+0x34>)
 800c4e2:	f7f8 fb47 	bl	8004b74 <HAL_QSPI_Init>

    if (BSP_QSPI_Init() != QSPI_OK)
 800c4e6:	f7f4 fd3d 	bl	8000f64 <BSP_QSPI_Init>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d001      	beq.n	800c4f4 <STORAGE_Init_FS+0x28>
    {
      return (USBD_FAIL);
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	e000      	b.n	800c4f6 <STORAGE_Init_FS+0x2a>
    }
  }

  return (USBD_OK);
 800c4f4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3708      	adds	r7, #8
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	200021c4 	.word	0x200021c4

0800c504 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b08a      	sub	sp, #40	; 0x28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	4603      	mov	r3, r0
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]
 800c510:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  QSPI_Info info;

  BSP_QSPI_GetInfo(&info);
 800c512:	f107 0314 	add.w	r3, r7, #20
 800c516:	4618      	mov	r0, r3
 800c518:	f7f4 fe98 	bl	800124c <BSP_QSPI_GetInfo>
  *block_num = (info.FlashSize)/STORAGE_BLK_SIZ_USER;
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	0b1a      	lsrs	r2, r3, #12
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ_USER;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c52a:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 800c52c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3728      	adds	r7, #40	; 0x28
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b084      	sub	sp, #16
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	4603      	mov	r3, r0
 800c53e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */

  uint8_t status = QSPI_ERROR;
 800c540:	2301      	movs	r3, #1
 800c542:	73bb      	strb	r3, [r7, #14]
  int8_t ret = USBD_FAIL;
 800c544:	2303      	movs	r3, #3
 800c546:	73fb      	strb	r3, [r7, #15]

  status = BSP_QSPI_GetStatus();
 800c548:	f7f4 fe32 	bl	80011b0 <BSP_QSPI_GetStatus>
 800c54c:	4603      	mov	r3, r0
 800c54e:	73bb      	strb	r3, [r7, #14]

  switch(status)
 800c550:	7bbb      	ldrb	r3, [r7, #14]
 800c552:	2b02      	cmp	r3, #2
 800c554:	d009      	beq.n	800c56a <STORAGE_IsReady_FS+0x34>
 800c556:	2b02      	cmp	r3, #2
 800c558:	dc0d      	bgt.n	800c576 <STORAGE_IsReady_FS+0x40>
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d002      	beq.n	800c564 <STORAGE_IsReady_FS+0x2e>
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d006      	beq.n	800c570 <STORAGE_IsReady_FS+0x3a>
 800c562:	e008      	b.n	800c576 <STORAGE_IsReady_FS+0x40>
  {
  case QSPI_OK:
    ret = USBD_OK;
 800c564:	2300      	movs	r3, #0
 800c566:	73fb      	strb	r3, [r7, #15]
    break;
 800c568:	e008      	b.n	800c57c <STORAGE_IsReady_FS+0x46>
  case QSPI_BUSY:
    ret = USBD_BUSY;
 800c56a:	2301      	movs	r3, #1
 800c56c:	73fb      	strb	r3, [r7, #15]
    break;
 800c56e:	e005      	b.n	800c57c <STORAGE_IsReady_FS+0x46>
  case QSPI_ERROR:
    ret = USBD_FAIL;
 800c570:	2303      	movs	r3, #3
 800c572:	73fb      	strb	r3, [r7, #15]
    break;
 800c574:	e002      	b.n	800c57c <STORAGE_IsReady_FS+0x46>
  default:
    ret = USBD_FAIL;
 800c576:	2303      	movs	r3, #3
 800c578:	73fb      	strb	r3, [r7, #15]
    break;
 800c57a:	bf00      	nop
  }

  return ret;
 800c57c:	f997 300f 	ldrsb.w	r3, [r7, #15]

  /* USER CODE END 4 */
}
 800c580:	4618      	mov	r0, r3
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	4603      	mov	r3, r0
 800c590:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c592:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c594:	4618      	mov	r0, r3
 800c596:	370c      	adds	r7, #12
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr

0800c5a0 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b088      	sub	sp, #32
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60b9      	str	r1, [r7, #8]
 800c5a8:	607a      	str	r2, [r7, #4]
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	73fb      	strb	r3, [r7, #15]
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  uint32_t erasedSector = 1;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	61fb      	str	r3, [r7, #28]
  BSP_QSPI_Read(QSPI_ReadBuffer, blk_addr * STORAGE_BLK_SIZ_USER, blk_len * STORAGE_BLK_SIZ_USER);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	0319      	lsls	r1, r3, #12
 800c5bc:	89bb      	ldrh	r3, [r7, #12]
 800c5be:	031b      	lsls	r3, r3, #12
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	4820      	ldr	r0, [pc, #128]	; (800c644 <STORAGE_Read_FS+0xa4>)
 800c5c4:	f7f4 fce6 	bl	8000f94 <BSP_QSPI_Read>

  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	61bb      	str	r3, [r7, #24]
 800c5cc:	e00b      	b.n	800c5e6 <STORAGE_Read_FS+0x46>
  {
    if (QSPI_ReadBuffer[i] != 0xFF)
 800c5ce:	4a1d      	ldr	r2, [pc, #116]	; (800c644 <STORAGE_Read_FS+0xa4>)
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	2bff      	cmp	r3, #255	; 0xff
 800c5d8:	d002      	beq.n	800c5e0 <STORAGE_Read_FS+0x40>
    {
      erasedSector = 0;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	61fb      	str	r3, [r7, #28]
      break;
 800c5de:	e006      	b.n	800c5ee <STORAGE_Read_FS+0x4e>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	61bb      	str	r3, [r7, #24]
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5ec:	d3ef      	bcc.n	800c5ce <STORAGE_Read_FS+0x2e>
    }
  }
  if (erasedSector == 1)
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d10f      	bne.n	800c614 <STORAGE_Read_FS+0x74>
  {
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	617b      	str	r3, [r7, #20]
 800c5f8:	e007      	b.n	800c60a <STORAGE_Read_FS+0x6a>
    {
      buf[i] = 0x00;
 800c5fa:	68ba      	ldr	r2, [r7, #8]
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	4413      	add	r3, r2
 800c600:	2200      	movs	r2, #0
 800c602:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	3301      	adds	r3, #1
 800c608:	617b      	str	r3, [r7, #20]
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c610:	d3f3      	bcc.n	800c5fa <STORAGE_Read_FS+0x5a>
 800c612:	e011      	b.n	800c638 <STORAGE_Read_FS+0x98>
    }
  }
  else {
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c614:	2300      	movs	r3, #0
 800c616:	613b      	str	r3, [r7, #16]
 800c618:	e00a      	b.n	800c630 <STORAGE_Read_FS+0x90>
    {
      buf[i] = QSPI_ReadBuffer[i];
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	4413      	add	r3, r2
 800c620:	4908      	ldr	r1, [pc, #32]	; (800c644 <STORAGE_Read_FS+0xa4>)
 800c622:	693a      	ldr	r2, [r7, #16]
 800c624:	440a      	add	r2, r1
 800c626:	7812      	ldrb	r2, [r2, #0]
 800c628:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	3301      	adds	r3, #1
 800c62e:	613b      	str	r3, [r7, #16]
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c636:	d3f0      	bcc.n	800c61a <STORAGE_Read_FS+0x7a>
    }
  }
  return (USBD_OK);
 800c638:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3720      	adds	r7, #32
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	200027fc 	.word	0x200027fc

0800c648 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b088      	sub	sp, #32
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60b9      	str	r1, [r7, #8]
 800c650:	607a      	str	r2, [r7, #4]
 800c652:	461a      	mov	r2, r3
 800c654:	4603      	mov	r3, r0
 800c656:	73fb      	strb	r3, [r7, #15]
 800c658:	4613      	mov	r3, r2
 800c65a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  uint32_t needErase = 0;
 800c65c:	2300      	movs	r3, #0
 800c65e:	61fb      	str	r3, [r7, #28]
  uint32_t eraseOperation = 1;
 800c660:	2301      	movs	r3, #1
 800c662:	61bb      	str	r3, [r7, #24]
  BSP_QSPI_Read(QSPI_ReadBuffer, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	031b      	lsls	r3, r3, #12
 800c668:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c66c:	4619      	mov	r1, r3
 800c66e:	483f      	ldr	r0, [pc, #252]	; (800c76c <STORAGE_Write_FS+0x124>)
 800c670:	f7f4 fc90 	bl	8000f94 <BSP_QSPI_Read>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c674:	2300      	movs	r3, #0
 800c676:	617b      	str	r3, [r7, #20]
 800c678:	e00b      	b.n	800c692 <STORAGE_Write_FS+0x4a>
  {
    if (buf[i] != 0x00)
 800c67a:	68ba      	ldr	r2, [r7, #8]
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	4413      	add	r3, r2
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d002      	beq.n	800c68c <STORAGE_Write_FS+0x44>
    {
      eraseOperation = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	61bb      	str	r3, [r7, #24]
      break;
 800c68a:	e006      	b.n	800c69a <STORAGE_Write_FS+0x52>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	3301      	adds	r3, #1
 800c690:	617b      	str	r3, [r7, #20]
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c698:	d3ef      	bcc.n	800c67a <STORAGE_Write_FS+0x32>
    }
  }
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c69a:	2300      	movs	r3, #0
 800c69c:	613b      	str	r3, [r7, #16]
 800c69e:	e00b      	b.n	800c6b8 <STORAGE_Write_FS+0x70>
  {
    if (QSPI_ReadBuffer[i] != 0xFF)
 800c6a0:	4a32      	ldr	r2, [pc, #200]	; (800c76c <STORAGE_Write_FS+0x124>)
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2bff      	cmp	r3, #255	; 0xff
 800c6aa:	d002      	beq.n	800c6b2 <STORAGE_Write_FS+0x6a>
    {
      needErase = 1;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	61fb      	str	r3, [r7, #28]
      break;
 800c6b0:	e006      	b.n	800c6c0 <STORAGE_Write_FS+0x78>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	613b      	str	r3, [r7, #16]
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6be:	d3ef      	bcc.n	800c6a0 <STORAGE_Write_FS+0x58>
    }
  }
  if (eraseOperation == 1)
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d112      	bne.n	800c6ec <STORAGE_Write_FS+0xa4>
  {
    if (needErase == 1)
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d14a      	bne.n	800c762 <STORAGE_Write_FS+0x11a>
    {
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	2104      	movs	r1, #4
 800c6d0:	4827      	ldr	r0, [pc, #156]	; (800c770 <STORAGE_Write_FS+0x128>)
 800c6d2:	f7f6 faf7 	bl	8002cc4 <HAL_GPIO_WritePin>
      BSP_QSPI_Erase_Block(blk_addr * STORAGE_BLK_SIZ_USER);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	031b      	lsls	r3, r3, #12
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7f4 fd24 	bl	8001128 <BSP_QSPI_Erase_Block>
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	2104      	movs	r1, #4
 800c6e4:	4822      	ldr	r0, [pc, #136]	; (800c770 <STORAGE_Write_FS+0x128>)
 800c6e6:	f7f6 faed 	bl	8002cc4 <HAL_GPIO_WritePin>
 800c6ea:	e03a      	b.n	800c762 <STORAGE_Write_FS+0x11a>
    }
  }
  else {
    if (needErase == 1)
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d123      	bne.n	800c73a <STORAGE_Write_FS+0xf2>
    {
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	2104      	movs	r1, #4
 800c6f6:	481e      	ldr	r0, [pc, #120]	; (800c770 <STORAGE_Write_FS+0x128>)
 800c6f8:	f7f6 fae4 	bl	8002cc4 <HAL_GPIO_WritePin>
      BSP_QSPI_Erase_Block(blk_addr * STORAGE_BLK_SIZ_USER);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	031b      	lsls	r3, r3, #12
 800c700:	4618      	mov	r0, r3
 800c702:	f7f4 fd11 	bl	8001128 <BSP_QSPI_Erase_Block>
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800c706:	2200      	movs	r2, #0
 800c708:	2104      	movs	r1, #4
 800c70a:	4819      	ldr	r0, [pc, #100]	; (800c770 <STORAGE_Write_FS+0x128>)
 800c70c:	f7f6 fada 	bl	8002cc4 <HAL_GPIO_WritePin>

      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800c710:	2201      	movs	r2, #1
 800c712:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c716:	4817      	ldr	r0, [pc, #92]	; (800c774 <STORAGE_Write_FS+0x12c>)
 800c718:	f7f6 fad4 	bl	8002cc4 <HAL_GPIO_WritePin>
      BSP_QSPI_Write(buf, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	031b      	lsls	r3, r3, #12
 800c720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c724:	4619      	mov	r1, r3
 800c726:	68b8      	ldr	r0, [r7, #8]
 800c728:	f7f4 fc76 	bl	8001018 <BSP_QSPI_Write>
      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800c72c:	2200      	movs	r2, #0
 800c72e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c732:	4810      	ldr	r0, [pc, #64]	; (800c774 <STORAGE_Write_FS+0x12c>)
 800c734:	f7f6 fac6 	bl	8002cc4 <HAL_GPIO_WritePin>
 800c738:	e013      	b.n	800c762 <STORAGE_Write_FS+0x11a>
    }
    else {
      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800c73a:	2201      	movs	r2, #1
 800c73c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c740:	480c      	ldr	r0, [pc, #48]	; (800c774 <STORAGE_Write_FS+0x12c>)
 800c742:	f7f6 fabf 	bl	8002cc4 <HAL_GPIO_WritePin>
      BSP_QSPI_Write(buf, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	031b      	lsls	r3, r3, #12
 800c74a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c74e:	4619      	mov	r1, r3
 800c750:	68b8      	ldr	r0, [r7, #8]
 800c752:	f7f4 fc61 	bl	8001018 <BSP_QSPI_Write>
      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800c756:	2200      	movs	r2, #0
 800c758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c75c:	4805      	ldr	r0, [pc, #20]	; (800c774 <STORAGE_Write_FS+0x12c>)
 800c75e:	f7f6 fab1 	bl	8002cc4 <HAL_GPIO_WritePin>
    }
  }

  return (USBD_OK);
 800c762:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800c764:	4618      	mov	r0, r3
 800c766:	3720      	adds	r7, #32
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	200027fc 	.word	0x200027fc
 800c770:	48000400 	.word	0x48000400
 800c774:	48001000 	.word	0x48001000

0800c778 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c778:	b480      	push	{r7}
 800c77a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c77c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c77e:	4618      	mov	r0, r3
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b08a      	sub	sp, #40	; 0x28
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c790:	f107 0314 	add.w	r3, r7, #20
 800c794:	2200      	movs	r2, #0
 800c796:	601a      	str	r2, [r3, #0]
 800c798:	605a      	str	r2, [r3, #4]
 800c79a:	609a      	str	r2, [r3, #8]
 800c79c:	60da      	str	r2, [r3, #12]
 800c79e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7a8:	d14e      	bne.n	800c848 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c7aa:	4b29      	ldr	r3, [pc, #164]	; (800c850 <HAL_PCD_MspInit+0xc8>)
 800c7ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7ae:	4a28      	ldr	r2, [pc, #160]	; (800c850 <HAL_PCD_MspInit+0xc8>)
 800c7b0:	f043 0301 	orr.w	r3, r3, #1
 800c7b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c7b6:	4b26      	ldr	r3, [pc, #152]	; (800c850 <HAL_PCD_MspInit+0xc8>)
 800c7b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7ba:	f003 0301 	and.w	r3, r3, #1
 800c7be:	613b      	str	r3, [r7, #16]
 800c7c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800c7c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c7c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7c8:	2302      	movs	r3, #2
 800c7ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7d0:	2303      	movs	r3, #3
 800c7d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c7d4:	230a      	movs	r3, #10
 800c7d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7d8:	f107 0314 	add.w	r3, r7, #20
 800c7dc:	4619      	mov	r1, r3
 800c7de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c7e2:	f7f5 ffd1 	bl	8002788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c7e6:	4b1a      	ldr	r3, [pc, #104]	; (800c850 <HAL_PCD_MspInit+0xc8>)
 800c7e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7ea:	4a19      	ldr	r2, [pc, #100]	; (800c850 <HAL_PCD_MspInit+0xc8>)
 800c7ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c7f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c7f2:	4b17      	ldr	r3, [pc, #92]	; (800c850 <HAL_PCD_MspInit+0xc8>)
 800c7f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c7fa:	60fb      	str	r3, [r7, #12]
 800c7fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c7fe:	4b14      	ldr	r3, [pc, #80]	; (800c850 <HAL_PCD_MspInit+0xc8>)
 800c800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c806:	2b00      	cmp	r3, #0
 800c808:	d114      	bne.n	800c834 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c80a:	4b11      	ldr	r3, [pc, #68]	; (800c850 <HAL_PCD_MspInit+0xc8>)
 800c80c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c80e:	4a10      	ldr	r2, [pc, #64]	; (800c850 <HAL_PCD_MspInit+0xc8>)
 800c810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c814:	6593      	str	r3, [r2, #88]	; 0x58
 800c816:	4b0e      	ldr	r3, [pc, #56]	; (800c850 <HAL_PCD_MspInit+0xc8>)
 800c818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c81a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c81e:	60bb      	str	r3, [r7, #8]
 800c820:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800c822:	f7f8 f977 	bl	8004b14 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c826:	4b0a      	ldr	r3, [pc, #40]	; (800c850 <HAL_PCD_MspInit+0xc8>)
 800c828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c82a:	4a09      	ldr	r2, [pc, #36]	; (800c850 <HAL_PCD_MspInit+0xc8>)
 800c82c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c830:	6593      	str	r3, [r2, #88]	; 0x58
 800c832:	e001      	b.n	800c838 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800c834:	f7f8 f96e 	bl	8004b14 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c838:	2200      	movs	r2, #0
 800c83a:	2100      	movs	r1, #0
 800c83c:	2043      	movs	r0, #67	; 0x43
 800c83e:	f7f5 fc96 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c842:	2043      	movs	r0, #67	; 0x43
 800c844:	f7f5 fcaf 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c848:	bf00      	nop
 800c84a:	3728      	adds	r7, #40	; 0x28
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	40021000 	.word	0x40021000

0800c854 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c868:	4619      	mov	r1, r3
 800c86a:	4610      	mov	r0, r2
 800c86c:	f7fe fc44 	bl	800b0f8 <USBD_LL_SetupStage>
}
 800c870:	bf00      	nop
 800c872:	3708      	adds	r7, #8
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	460b      	mov	r3, r1
 800c882:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c88a:	78fa      	ldrb	r2, [r7, #3]
 800c88c:	6879      	ldr	r1, [r7, #4]
 800c88e:	4613      	mov	r3, r2
 800c890:	00db      	lsls	r3, r3, #3
 800c892:	1a9b      	subs	r3, r3, r2
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	440b      	add	r3, r1
 800c898:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	78fb      	ldrb	r3, [r7, #3]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	f7fe fc7e 	bl	800b1a2 <USBD_LL_DataOutStage>
}
 800c8a6:	bf00      	nop
 800c8a8:	3708      	adds	r7, #8
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b082      	sub	sp, #8
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c8c0:	78fa      	ldrb	r2, [r7, #3]
 800c8c2:	6879      	ldr	r1, [r7, #4]
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	1a9b      	subs	r3, r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	440b      	add	r3, r1
 800c8ce:	3348      	adds	r3, #72	; 0x48
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	78fb      	ldrb	r3, [r7, #3]
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	f7fe fcc7 	bl	800b268 <USBD_LL_DataInStage>
}
 800c8da:	bf00      	nop
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b082      	sub	sp, #8
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7fe fddb 	bl	800b4ac <USBD_LL_SOF>
}
 800c8f6:	bf00      	nop
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b084      	sub	sp, #16
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c906:	2301      	movs	r3, #1
 800c908:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d001      	beq.n	800c916 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c912:	f7f4 fab5 	bl	8000e80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c91c:	7bfa      	ldrb	r2, [r7, #15]
 800c91e:	4611      	mov	r1, r2
 800c920:	4618      	mov	r0, r3
 800c922:	f7fe fd85 	bl	800b430 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7fe fd31 	bl	800b394 <USBD_LL_Reset>
}
 800c932:	bf00      	nop
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
	...

0800c93c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	6812      	ldr	r2, [r2, #0]
 800c952:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c956:	f043 0301 	orr.w	r3, r3, #1
 800c95a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c962:	4618      	mov	r0, r3
 800c964:	f7fe fd74 	bl	800b450 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a1b      	ldr	r3, [r3, #32]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d005      	beq.n	800c97c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c970:	4b04      	ldr	r3, [pc, #16]	; (800c984 <HAL_PCD_SuspendCallback+0x48>)
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	4a03      	ldr	r2, [pc, #12]	; (800c984 <HAL_PCD_SuspendCallback+0x48>)
 800c976:	f043 0306 	orr.w	r3, r3, #6
 800c97a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c97c:	bf00      	nop
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	e000ed00 	.word	0xe000ed00

0800c988 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	6812      	ldr	r2, [r2, #0]
 800c99e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9a2:	f023 0301 	bic.w	r3, r3, #1
 800c9a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6a1b      	ldr	r3, [r3, #32]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d007      	beq.n	800c9c0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9b0:	4b08      	ldr	r3, [pc, #32]	; (800c9d4 <HAL_PCD_ResumeCallback+0x4c>)
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	4a07      	ldr	r2, [pc, #28]	; (800c9d4 <HAL_PCD_ResumeCallback+0x4c>)
 800c9b6:	f023 0306 	bic.w	r3, r3, #6
 800c9ba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c9bc:	f000 fade 	bl	800cf7c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fe fd58 	bl	800b47c <USBD_LL_Resume>
}
 800c9cc:	bf00      	nop
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	e000ed00 	.word	0xe000ed00

0800c9d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9ea:	78fa      	ldrb	r2, [r7, #3]
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe fda4 	bl	800b53c <USBD_LL_IsoOUTIncomplete>
}
 800c9f4:	bf00      	nop
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	460b      	mov	r3, r1
 800ca06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca0e:	78fa      	ldrb	r2, [r7, #3]
 800ca10:	4611      	mov	r1, r2
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7fe fd6c 	bl	800b4f0 <USBD_LL_IsoINIncomplete>
}
 800ca18:	bf00      	nop
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fe fdaa 	bl	800b588 <USBD_LL_DevConnected>
}
 800ca34:	bf00      	nop
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fe fda7 	bl	800b59e <USBD_LL_DevDisconnected>
}
 800ca50:	bf00      	nop
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d13c      	bne.n	800cae2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ca68:	4a20      	ldr	r2, [pc, #128]	; (800caec <USBD_LL_Init+0x94>)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a1e      	ldr	r2, [pc, #120]	; (800caec <USBD_LL_Init+0x94>)
 800ca74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ca78:	4b1c      	ldr	r3, [pc, #112]	; (800caec <USBD_LL_Init+0x94>)
 800ca7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ca7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ca80:	4b1a      	ldr	r3, [pc, #104]	; (800caec <USBD_LL_Init+0x94>)
 800ca82:	2206      	movs	r2, #6
 800ca84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ca86:	4b19      	ldr	r3, [pc, #100]	; (800caec <USBD_LL_Init+0x94>)
 800ca88:	2202      	movs	r2, #2
 800ca8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca8c:	4b17      	ldr	r3, [pc, #92]	; (800caec <USBD_LL_Init+0x94>)
 800ca8e:	2202      	movs	r2, #2
 800ca90:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ca92:	4b16      	ldr	r3, [pc, #88]	; (800caec <USBD_LL_Init+0x94>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ca98:	4b14      	ldr	r3, [pc, #80]	; (800caec <USBD_LL_Init+0x94>)
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ca9e:	4b13      	ldr	r3, [pc, #76]	; (800caec <USBD_LL_Init+0x94>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800caa4:	4b11      	ldr	r3, [pc, #68]	; (800caec <USBD_LL_Init+0x94>)
 800caa6:	2200      	movs	r2, #0
 800caa8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800caaa:	4b10      	ldr	r3, [pc, #64]	; (800caec <USBD_LL_Init+0x94>)
 800caac:	2200      	movs	r2, #0
 800caae:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cab0:	4b0e      	ldr	r3, [pc, #56]	; (800caec <USBD_LL_Init+0x94>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cab6:	480d      	ldr	r0, [pc, #52]	; (800caec <USBD_LL_Init+0x94>)
 800cab8:	f7f6 feea 	bl	8003890 <HAL_PCD_Init>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d001      	beq.n	800cac6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cac2:	f7f4 f9dd 	bl	8000e80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cac6:	2180      	movs	r1, #128	; 0x80
 800cac8:	4808      	ldr	r0, [pc, #32]	; (800caec <USBD_LL_Init+0x94>)
 800caca:	f7f7 ff6e 	bl	80049aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cace:	2240      	movs	r2, #64	; 0x40
 800cad0:	2100      	movs	r1, #0
 800cad2:	4806      	ldr	r0, [pc, #24]	; (800caec <USBD_LL_Init+0x94>)
 800cad4:	f7f7 ff22 	bl	800491c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cad8:	2280      	movs	r2, #128	; 0x80
 800cada:	2101      	movs	r1, #1
 800cadc:	4803      	ldr	r0, [pc, #12]	; (800caec <USBD_LL_Init+0x94>)
 800cade:	f7f7 ff1d 	bl	800491c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	200037fc 	.word	0x200037fc

0800caf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caf8:	2300      	movs	r3, #0
 800cafa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cafc:	2300      	movs	r3, #0
 800cafe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7f6 ffe6 	bl	8003ad8 <HAL_PCD_Start>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb10:	7bbb      	ldrb	r3, [r7, #14]
 800cb12:	2b03      	cmp	r3, #3
 800cb14:	d816      	bhi.n	800cb44 <USBD_LL_Start+0x54>
 800cb16:	a201      	add	r2, pc, #4	; (adr r2, 800cb1c <USBD_LL_Start+0x2c>)
 800cb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1c:	0800cb2d 	.word	0x0800cb2d
 800cb20:	0800cb33 	.word	0x0800cb33
 800cb24:	0800cb39 	.word	0x0800cb39
 800cb28:	0800cb3f 	.word	0x0800cb3f
    case HAL_OK :
      usb_status = USBD_OK;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb30:	e00b      	b.n	800cb4a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb32:	2303      	movs	r3, #3
 800cb34:	73fb      	strb	r3, [r7, #15]
    break;
 800cb36:	e008      	b.n	800cb4a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb3c:	e005      	b.n	800cb4a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb3e:	2303      	movs	r3, #3
 800cb40:	73fb      	strb	r3, [r7, #15]
    break;
 800cb42:	e002      	b.n	800cb4a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800cb44:	2303      	movs	r3, #3
 800cb46:	73fb      	strb	r3, [r7, #15]
    break;
 800cb48:	bf00      	nop
  }
  return usb_status;
 800cb4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3710      	adds	r7, #16
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	4608      	mov	r0, r1
 800cb5e:	4611      	mov	r1, r2
 800cb60:	461a      	mov	r2, r3
 800cb62:	4603      	mov	r3, r0
 800cb64:	70fb      	strb	r3, [r7, #3]
 800cb66:	460b      	mov	r3, r1
 800cb68:	70bb      	strb	r3, [r7, #2]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cb7c:	78bb      	ldrb	r3, [r7, #2]
 800cb7e:	883a      	ldrh	r2, [r7, #0]
 800cb80:	78f9      	ldrb	r1, [r7, #3]
 800cb82:	f7f7 fb96 	bl	80042b2 <HAL_PCD_EP_Open>
 800cb86:	4603      	mov	r3, r0
 800cb88:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb8a:	7bbb      	ldrb	r3, [r7, #14]
 800cb8c:	2b03      	cmp	r3, #3
 800cb8e:	d817      	bhi.n	800cbc0 <USBD_LL_OpenEP+0x6c>
 800cb90:	a201      	add	r2, pc, #4	; (adr r2, 800cb98 <USBD_LL_OpenEP+0x44>)
 800cb92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb96:	bf00      	nop
 800cb98:	0800cba9 	.word	0x0800cba9
 800cb9c:	0800cbaf 	.word	0x0800cbaf
 800cba0:	0800cbb5 	.word	0x0800cbb5
 800cba4:	0800cbbb 	.word	0x0800cbbb
    case HAL_OK :
      usb_status = USBD_OK;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	73fb      	strb	r3, [r7, #15]
    break;
 800cbac:	e00b      	b.n	800cbc6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb2:	e008      	b.n	800cbc6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb8:	e005      	b.n	800cbc6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbba:	2303      	movs	r3, #3
 800cbbc:	73fb      	strb	r3, [r7, #15]
    break;
 800cbbe:	e002      	b.n	800cbc6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cbc0:	2303      	movs	r3, #3
 800cbc2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbc4:	bf00      	nop
  }
  return usb_status;
 800cbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3710      	adds	r7, #16
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	460b      	mov	r3, r1
 800cbda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbea:	78fa      	ldrb	r2, [r7, #3]
 800cbec:	4611      	mov	r1, r2
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7f7 fbc7 	bl	8004382 <HAL_PCD_EP_Close>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cbf8:	7bbb      	ldrb	r3, [r7, #14]
 800cbfa:	2b03      	cmp	r3, #3
 800cbfc:	d816      	bhi.n	800cc2c <USBD_LL_CloseEP+0x5c>
 800cbfe:	a201      	add	r2, pc, #4	; (adr r2, 800cc04 <USBD_LL_CloseEP+0x34>)
 800cc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc04:	0800cc15 	.word	0x0800cc15
 800cc08:	0800cc1b 	.word	0x0800cc1b
 800cc0c:	0800cc21 	.word	0x0800cc21
 800cc10:	0800cc27 	.word	0x0800cc27
    case HAL_OK :
      usb_status = USBD_OK;
 800cc14:	2300      	movs	r3, #0
 800cc16:	73fb      	strb	r3, [r7, #15]
    break;
 800cc18:	e00b      	b.n	800cc32 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	73fb      	strb	r3, [r7, #15]
    break;
 800cc1e:	e008      	b.n	800cc32 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc20:	2301      	movs	r3, #1
 800cc22:	73fb      	strb	r3, [r7, #15]
    break;
 800cc24:	e005      	b.n	800cc32 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc26:	2303      	movs	r3, #3
 800cc28:	73fb      	strb	r3, [r7, #15]
    break;
 800cc2a:	e002      	b.n	800cc32 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc2c:	2303      	movs	r3, #3
 800cc2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc30:	bf00      	nop
  }
  return usb_status;
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3710      	adds	r7, #16
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	460b      	mov	r3, r1
 800cc46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc56:	78fa      	ldrb	r2, [r7, #3]
 800cc58:	4611      	mov	r1, r2
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7f7 fd26 	bl	80046ac <HAL_PCD_EP_Flush>
 800cc60:	4603      	mov	r3, r0
 800cc62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc64:	7bbb      	ldrb	r3, [r7, #14]
 800cc66:	2b03      	cmp	r3, #3
 800cc68:	d816      	bhi.n	800cc98 <USBD_LL_FlushEP+0x5c>
 800cc6a:	a201      	add	r2, pc, #4	; (adr r2, 800cc70 <USBD_LL_FlushEP+0x34>)
 800cc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc70:	0800cc81 	.word	0x0800cc81
 800cc74:	0800cc87 	.word	0x0800cc87
 800cc78:	0800cc8d 	.word	0x0800cc8d
 800cc7c:	0800cc93 	.word	0x0800cc93
    case HAL_OK :
      usb_status = USBD_OK;
 800cc80:	2300      	movs	r3, #0
 800cc82:	73fb      	strb	r3, [r7, #15]
    break;
 800cc84:	e00b      	b.n	800cc9e <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc86:	2303      	movs	r3, #3
 800cc88:	73fb      	strb	r3, [r7, #15]
    break;
 800cc8a:	e008      	b.n	800cc9e <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc90:	e005      	b.n	800cc9e <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc92:	2303      	movs	r3, #3
 800cc94:	73fb      	strb	r3, [r7, #15]
    break;
 800cc96:	e002      	b.n	800cc9e <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc98:	2303      	movs	r3, #3
 800cc9a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc9c:	bf00      	nop
  }
  return usb_status;
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccc2:	78fa      	ldrb	r2, [r7, #3]
 800ccc4:	4611      	mov	r1, r2
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7f7 fc38 	bl	800453c <HAL_PCD_EP_SetStall>
 800cccc:	4603      	mov	r3, r0
 800ccce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ccd0:	7bbb      	ldrb	r3, [r7, #14]
 800ccd2:	2b03      	cmp	r3, #3
 800ccd4:	d816      	bhi.n	800cd04 <USBD_LL_StallEP+0x5c>
 800ccd6:	a201      	add	r2, pc, #4	; (adr r2, 800ccdc <USBD_LL_StallEP+0x34>)
 800ccd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccdc:	0800cced 	.word	0x0800cced
 800cce0:	0800ccf3 	.word	0x0800ccf3
 800cce4:	0800ccf9 	.word	0x0800ccf9
 800cce8:	0800ccff 	.word	0x0800ccff
    case HAL_OK :
      usb_status = USBD_OK;
 800ccec:	2300      	movs	r3, #0
 800ccee:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf0:	e00b      	b.n	800cd0a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf6:	e008      	b.n	800cd0a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	73fb      	strb	r3, [r7, #15]
    break;
 800ccfc:	e005      	b.n	800cd0a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccfe:	2303      	movs	r3, #3
 800cd00:	73fb      	strb	r3, [r7, #15]
    break;
 800cd02:	e002      	b.n	800cd0a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cd04:	2303      	movs	r3, #3
 800cd06:	73fb      	strb	r3, [r7, #15]
    break;
 800cd08:	bf00      	nop
  }
  return usb_status;
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd20:	2300      	movs	r3, #0
 800cd22:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd24:	2300      	movs	r3, #0
 800cd26:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd2e:	78fa      	ldrb	r2, [r7, #3]
 800cd30:	4611      	mov	r1, r2
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7f7 fc64 	bl	8004600 <HAL_PCD_EP_ClrStall>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd3c:	7bbb      	ldrb	r3, [r7, #14]
 800cd3e:	2b03      	cmp	r3, #3
 800cd40:	d816      	bhi.n	800cd70 <USBD_LL_ClearStallEP+0x5c>
 800cd42:	a201      	add	r2, pc, #4	; (adr r2, 800cd48 <USBD_LL_ClearStallEP+0x34>)
 800cd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd48:	0800cd59 	.word	0x0800cd59
 800cd4c:	0800cd5f 	.word	0x0800cd5f
 800cd50:	0800cd65 	.word	0x0800cd65
 800cd54:	0800cd6b 	.word	0x0800cd6b
    case HAL_OK :
      usb_status = USBD_OK;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd5c:	e00b      	b.n	800cd76 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd5e:	2303      	movs	r3, #3
 800cd60:	73fb      	strb	r3, [r7, #15]
    break;
 800cd62:	e008      	b.n	800cd76 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd64:	2301      	movs	r3, #1
 800cd66:	73fb      	strb	r3, [r7, #15]
    break;
 800cd68:	e005      	b.n	800cd76 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd6a:	2303      	movs	r3, #3
 800cd6c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd6e:	e002      	b.n	800cd76 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cd70:	2303      	movs	r3, #3
 800cd72:	73fb      	strb	r3, [r7, #15]
    break;
 800cd74:	bf00      	nop
  }
  return usb_status;
 800cd76:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b085      	sub	sp, #20
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	da0b      	bge.n	800cdb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd9c:	78fb      	ldrb	r3, [r7, #3]
 800cd9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cda2:	68f9      	ldr	r1, [r7, #12]
 800cda4:	4613      	mov	r3, r2
 800cda6:	00db      	lsls	r3, r3, #3
 800cda8:	1a9b      	subs	r3, r3, r2
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	440b      	add	r3, r1
 800cdae:	333e      	adds	r3, #62	; 0x3e
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	e00b      	b.n	800cdcc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cdb4:	78fb      	ldrb	r3, [r7, #3]
 800cdb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cdba:	68f9      	ldr	r1, [r7, #12]
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	00db      	lsls	r3, r3, #3
 800cdc0:	1a9b      	subs	r3, r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	440b      	add	r3, r1
 800cdc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cdca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3714      	adds	r7, #20
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	460b      	mov	r3, r1
 800cde2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cdf2:	78fa      	ldrb	r2, [r7, #3]
 800cdf4:	4611      	mov	r1, r2
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7f7 fa36 	bl	8004268 <HAL_PCD_SetAddress>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ce00:	7bbb      	ldrb	r3, [r7, #14]
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	d816      	bhi.n	800ce34 <USBD_LL_SetUSBAddress+0x5c>
 800ce06:	a201      	add	r2, pc, #4	; (adr r2, 800ce0c <USBD_LL_SetUSBAddress+0x34>)
 800ce08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce0c:	0800ce1d 	.word	0x0800ce1d
 800ce10:	0800ce23 	.word	0x0800ce23
 800ce14:	0800ce29 	.word	0x0800ce29
 800ce18:	0800ce2f 	.word	0x0800ce2f
    case HAL_OK :
      usb_status = USBD_OK;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce20:	e00b      	b.n	800ce3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce22:	2303      	movs	r3, #3
 800ce24:	73fb      	strb	r3, [r7, #15]
    break;
 800ce26:	e008      	b.n	800ce3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce2c:	e005      	b.n	800ce3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce2e:	2303      	movs	r3, #3
 800ce30:	73fb      	strb	r3, [r7, #15]
    break;
 800ce32:	e002      	b.n	800ce3a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ce34:	2303      	movs	r3, #3
 800ce36:	73fb      	strb	r3, [r7, #15]
    break;
 800ce38:	bf00      	nop
  }
  return usb_status;
 800ce3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3710      	adds	r7, #16
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b086      	sub	sp, #24
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	607a      	str	r2, [r7, #4]
 800ce4e:	603b      	str	r3, [r7, #0]
 800ce50:	460b      	mov	r3, r1
 800ce52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ce62:	7af9      	ldrb	r1, [r7, #11]
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	f7f7 fb2b 	bl	80044c2 <HAL_PCD_EP_Transmit>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ce70:	7dbb      	ldrb	r3, [r7, #22]
 800ce72:	2b03      	cmp	r3, #3
 800ce74:	d816      	bhi.n	800cea4 <USBD_LL_Transmit+0x60>
 800ce76:	a201      	add	r2, pc, #4	; (adr r2, 800ce7c <USBD_LL_Transmit+0x38>)
 800ce78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce7c:	0800ce8d 	.word	0x0800ce8d
 800ce80:	0800ce93 	.word	0x0800ce93
 800ce84:	0800ce99 	.word	0x0800ce99
 800ce88:	0800ce9f 	.word	0x0800ce9f
    case HAL_OK :
      usb_status = USBD_OK;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	75fb      	strb	r3, [r7, #23]
    break;
 800ce90:	e00b      	b.n	800ceaa <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce92:	2303      	movs	r3, #3
 800ce94:	75fb      	strb	r3, [r7, #23]
    break;
 800ce96:	e008      	b.n	800ceaa <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	75fb      	strb	r3, [r7, #23]
    break;
 800ce9c:	e005      	b.n	800ceaa <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce9e:	2303      	movs	r3, #3
 800cea0:	75fb      	strb	r3, [r7, #23]
    break;
 800cea2:	e002      	b.n	800ceaa <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800cea4:	2303      	movs	r3, #3
 800cea6:	75fb      	strb	r3, [r7, #23]
    break;
 800cea8:	bf00      	nop
  }
  return usb_status;
 800ceaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3718      	adds	r7, #24
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	607a      	str	r2, [r7, #4]
 800cebe:	603b      	str	r3, [r7, #0]
 800cec0:	460b      	mov	r3, r1
 800cec2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cec4:	2300      	movs	r3, #0
 800cec6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cec8:	2300      	movs	r3, #0
 800ceca:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ced2:	7af9      	ldrb	r1, [r7, #11]
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	f7f7 fa9d 	bl	8004416 <HAL_PCD_EP_Receive>
 800cedc:	4603      	mov	r3, r0
 800cede:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cee0:	7dbb      	ldrb	r3, [r7, #22]
 800cee2:	2b03      	cmp	r3, #3
 800cee4:	d816      	bhi.n	800cf14 <USBD_LL_PrepareReceive+0x60>
 800cee6:	a201      	add	r2, pc, #4	; (adr r2, 800ceec <USBD_LL_PrepareReceive+0x38>)
 800cee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceec:	0800cefd 	.word	0x0800cefd
 800cef0:	0800cf03 	.word	0x0800cf03
 800cef4:	0800cf09 	.word	0x0800cf09
 800cef8:	0800cf0f 	.word	0x0800cf0f
    case HAL_OK :
      usb_status = USBD_OK;
 800cefc:	2300      	movs	r3, #0
 800cefe:	75fb      	strb	r3, [r7, #23]
    break;
 800cf00:	e00b      	b.n	800cf1a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf02:	2303      	movs	r3, #3
 800cf04:	75fb      	strb	r3, [r7, #23]
    break;
 800cf06:	e008      	b.n	800cf1a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	75fb      	strb	r3, [r7, #23]
    break;
 800cf0c:	e005      	b.n	800cf1a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf0e:	2303      	movs	r3, #3
 800cf10:	75fb      	strb	r3, [r7, #23]
    break;
 800cf12:	e002      	b.n	800cf1a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800cf14:	2303      	movs	r3, #3
 800cf16:	75fb      	strb	r3, [r7, #23]
    break;
 800cf18:	bf00      	nop
  }
  return usb_status;
 800cf1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3718      	adds	r7, #24
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cf36:	78fa      	ldrb	r2, [r7, #3]
 800cf38:	4611      	mov	r1, r2
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7f7 faa9 	bl	8004492 <HAL_PCD_EP_GetRxCount>
 800cf40:	4603      	mov	r3, r0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
	...

0800cf4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cf54:	4b03      	ldr	r3, [pc, #12]	; (800cf64 <USBD_static_malloc+0x18>)
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	370c      	adds	r7, #12
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	20003c04 	.word	0x20003c04

0800cf68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]

}
 800cf70:	bf00      	nop
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cf80:	f7f3 fece 	bl	8000d20 <SystemClock_Config>
}
 800cf84:	bf00      	nop
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <__libc_init_array>:
 800cf88:	b570      	push	{r4, r5, r6, lr}
 800cf8a:	4d0d      	ldr	r5, [pc, #52]	; (800cfc0 <__libc_init_array+0x38>)
 800cf8c:	4c0d      	ldr	r4, [pc, #52]	; (800cfc4 <__libc_init_array+0x3c>)
 800cf8e:	1b64      	subs	r4, r4, r5
 800cf90:	10a4      	asrs	r4, r4, #2
 800cf92:	2600      	movs	r6, #0
 800cf94:	42a6      	cmp	r6, r4
 800cf96:	d109      	bne.n	800cfac <__libc_init_array+0x24>
 800cf98:	4d0b      	ldr	r5, [pc, #44]	; (800cfc8 <__libc_init_array+0x40>)
 800cf9a:	4c0c      	ldr	r4, [pc, #48]	; (800cfcc <__libc_init_array+0x44>)
 800cf9c:	f000 f820 	bl	800cfe0 <_init>
 800cfa0:	1b64      	subs	r4, r4, r5
 800cfa2:	10a4      	asrs	r4, r4, #2
 800cfa4:	2600      	movs	r6, #0
 800cfa6:	42a6      	cmp	r6, r4
 800cfa8:	d105      	bne.n	800cfb6 <__libc_init_array+0x2e>
 800cfaa:	bd70      	pop	{r4, r5, r6, pc}
 800cfac:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfb0:	4798      	blx	r3
 800cfb2:	3601      	adds	r6, #1
 800cfb4:	e7ee      	b.n	800cf94 <__libc_init_array+0xc>
 800cfb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfba:	4798      	blx	r3
 800cfbc:	3601      	adds	r6, #1
 800cfbe:	e7f2      	b.n	800cfa6 <__libc_init_array+0x1e>
 800cfc0:	0800d0ac 	.word	0x0800d0ac
 800cfc4:	0800d0ac 	.word	0x0800d0ac
 800cfc8:	0800d0ac 	.word	0x0800d0ac
 800cfcc:	0800d0b0 	.word	0x0800d0b0

0800cfd0 <memset>:
 800cfd0:	4402      	add	r2, r0
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d100      	bne.n	800cfda <memset+0xa>
 800cfd8:	4770      	bx	lr
 800cfda:	f803 1b01 	strb.w	r1, [r3], #1
 800cfde:	e7f9      	b.n	800cfd4 <memset+0x4>

0800cfe0 <_init>:
 800cfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfe2:	bf00      	nop
 800cfe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfe6:	bc08      	pop	{r3}
 800cfe8:	469e      	mov	lr, r3
 800cfea:	4770      	bx	lr

0800cfec <_fini>:
 800cfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfee:	bf00      	nop
 800cff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cff2:	bc08      	pop	{r3}
 800cff4:	469e      	mov	lr, r3
 800cff6:	4770      	bx	lr
