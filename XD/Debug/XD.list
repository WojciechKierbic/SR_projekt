
XD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f59c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800f72c  0800f72c  0001f72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f90c  0800f90c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800f90c  0800f90c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f90c  0800f90c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f90c  0800f90c  0001f90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f910  0800f910  0001f910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800f914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000be4c  2000017c  0800fa90  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000bfc8  0800fa90  0002bfc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000207a7  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bb6  00000000  00000000  00040953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b20  00000000  00000000  00046510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001870  00000000  00000000  00048030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e767  00000000  00000000  000498a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024484  00000000  00000000  00078007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f775d  00000000  00000000  0009c48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193be8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c6c  00000000  00000000  00193c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000017c 	.word	0x2000017c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f714 	.word	0x0800f714

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000180 	.word	0x20000180
 80001cc:	0800f714 	.word	0x0800f714

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20001208 	.word	0x20001208
 8000200:	2000125c 	.word	0x2000125c

08000204 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b090      	sub	sp, #64	; 0x40
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of qspiMutex */
  osMutexDef(qspiMutex);
 800020a:	2300      	movs	r3, #0
 800020c:	63bb      	str	r3, [r7, #56]	; 0x38
 800020e:	2300      	movs	r3, #0
 8000210:	63fb      	str	r3, [r7, #60]	; 0x3c
  qspiMutexHandle = osMutexCreate(osMutex(qspiMutex));
 8000212:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000216:	4618      	mov	r0, r3
 8000218:	f00b feb8 	bl	800bf8c <osMutexCreate>
 800021c:	4603      	mov	r3, r0
 800021e:	4a15      	ldr	r2, [pc, #84]	; (8000274 <MX_FREERTOS_Init+0x70>)
 8000220:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of apptask */
  osThreadDef(apptask, appTaskBody, osPriorityNormal, 0, 4096);
 8000222:	4b15      	ldr	r3, [pc, #84]	; (8000278 <MX_FREERTOS_Init+0x74>)
 8000224:	f107 041c 	add.w	r4, r7, #28
 8000228:	461d      	mov	r5, r3
 800022a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000232:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  apptaskHandle = osThreadCreate(osThread(apptask), NULL);
 8000236:	f107 031c 	add.w	r3, r7, #28
 800023a:	2100      	movs	r1, #0
 800023c:	4618      	mov	r0, r3
 800023e:	f00b fe45 	bl	800becc <osThreadCreate>
 8000242:	4603      	mov	r3, r0
 8000244:	4a0d      	ldr	r2, [pc, #52]	; (800027c <MX_FREERTOS_Init+0x78>)
 8000246:	6013      	str	r3, [r2, #0]

  /* definition and creation of usbTask */
  osThreadDef(usbTask, usbTaskBody, osPriorityHigh, 0, 256);
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <MX_FREERTOS_Init+0x7c>)
 800024a:	463c      	mov	r4, r7
 800024c:	461d      	mov	r5, r3
 800024e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000252:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usbTaskHandle = osThreadCreate(osThread(usbTask), NULL);
 800025a:	463b      	mov	r3, r7
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f00b fe34 	bl	800becc <osThreadCreate>
 8000264:	4603      	mov	r3, r0
 8000266:	4a07      	ldr	r2, [pc, #28]	; (8000284 <MX_FREERTOS_Init+0x80>)
 8000268:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800026a:	bf00      	nop
 800026c:	3740      	adds	r7, #64	; 0x40
 800026e:	46bd      	mov	sp, r7
 8000270:	bdb0      	pop	{r4, r5, r7, pc}
 8000272:	bf00      	nop
 8000274:	20001204 	.word	0x20001204
 8000278:	0800f73c 	.word	0x0800f73c
 800027c:	200011fc 	.word	0x200011fc
 8000280:	0800f758 	.word	0x0800f758
 8000284:	20001200 	.word	0x20001200

08000288 <appTaskBody>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_appTaskBody */
void appTaskBody(void const * argument)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000290:	f00e facc 	bl	800e82c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN appTaskBody */

  /* Wait for the qspiMutex */
  osMutexWait(qspiMutexHandle, osWaitForever);
 8000294:	4b1d      	ldr	r3, [pc, #116]	; (800030c <appTaskBody+0x84>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f04f 31ff 	mov.w	r1, #4294967295
 800029c:	4618      	mov	r0, r3
 800029e:	f00b fe8d 	bl	800bfbc <osMutexWait>

  /* Register the file system object to the FatFs module */
  if(f_mount(&FatFs, (TCHAR const*)USERPath, 1) != FR_OK)
 80002a2:	2201      	movs	r2, #1
 80002a4:	491a      	ldr	r1, [pc, #104]	; (8000310 <appTaskBody+0x88>)
 80002a6:	481b      	ldr	r0, [pc, #108]	; (8000314 <appTaskBody+0x8c>)
 80002a8:	f00a fe5e 	bl	800af68 <f_mount>
//      }
//    }
  }

  /* FatFS file write test */
  if(f_open(&File, "FATFSOK", FA_CREATE_NEW | FA_WRITE) == FR_OK)
 80002ac:	2206      	movs	r2, #6
 80002ae:	491a      	ldr	r1, [pc, #104]	; (8000318 <appTaskBody+0x90>)
 80002b0:	481a      	ldr	r0, [pc, #104]	; (800031c <appTaskBody+0x94>)
 80002b2:	f00a febd 	bl	800b030 <f_open>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d106      	bne.n	80002ca <appTaskBody+0x42>
  {
    f_printf(&File, "FatFS is working properly.\n");
 80002bc:	4918      	ldr	r1, [pc, #96]	; (8000320 <appTaskBody+0x98>)
 80002be:	4817      	ldr	r0, [pc, #92]	; (800031c <appTaskBody+0x94>)
 80002c0:	f00b fb0e 	bl	800b8e0 <f_printf>
    f_close(&File);
 80002c4:	4815      	ldr	r0, [pc, #84]	; (800031c <appTaskBody+0x94>)
 80002c6:	f00b fa65 	bl	800b794 <f_close>
  }

  /* Release the qspiMutex */
  osMutexRelease(qspiMutexHandle);
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <appTaskBody+0x84>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4618      	mov	r0, r3
 80002d0:	f00b fec2 	bl	800c058 <osMutexRelease>
  for(;;)
  {
    //osDelay(100);

    /* GREEN LED ON */
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002da:	4812      	ldr	r0, [pc, #72]	; (8000324 <appTaskBody+0x9c>)
 80002dc:	f001 fb8a 	bl	80019f4 <HAL_GPIO_WritePin>

    /* Wait for the qspiMutex */
    osMutexWait(qspiMutexHandle, osWaitForever);
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <appTaskBody+0x84>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f04f 31ff 	mov.w	r1, #4294967295
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00b fe67 	bl	800bfbc <osMutexWait>

    /* You can access qspi again here */

    osDelay(1);
 80002ee:	2001      	movs	r0, #1
 80002f0:	f00b fe38 	bl	800bf64 <osDelay>

    /* Release the qspiMutex */
    osMutexRelease(qspiMutexHandle);
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <appTaskBody+0x84>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4618      	mov	r0, r3
 80002fa:	f00b fead 	bl	800c058 <osMutexRelease>

    /* GREEN LED OFF */
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000304:	4807      	ldr	r0, [pc, #28]	; (8000324 <appTaskBody+0x9c>)
 8000306:	f001 fb75 	bl	80019f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800030a:	e7e3      	b.n	80002d4 <appTaskBody+0x4c>
 800030c:	20001204 	.word	0x20001204
 8000310:	200014a8 	.word	0x200014a8
 8000314:	200001c8 	.word	0x200001c8
 8000318:	0800f774 	.word	0x0800f774
 800031c:	20000198 	.word	0x20000198
 8000320:	0800f77c 	.word	0x0800f77c
 8000324:	48001000 	.word	0x48001000

08000328 <usbTaskBody>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usbTaskBody */
void usbTaskBody(void const * argument)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN usbTaskBody */
  uint32_t USB_VBUS_counter = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
    USB_VBUS_counter = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
    /* USB_VBUS availability check */
    while (USB_VBUS_counter < 5)
 8000338:	e00d      	b.n	8000356 <usbTaskBody+0x2e>
    {
      osDelay(10);
 800033a:	200a      	movs	r0, #10
 800033c:	f00b fe12 	bl	800bf64 <osDelay>
      if (HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin) != GPIO_PIN_RESET)
 8000340:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000344:	4822      	ldr	r0, [pc, #136]	; (80003d0 <usbTaskBody+0xa8>)
 8000346:	f001 fb3d 	bl	80019c4 <HAL_GPIO_ReadPin>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d006      	beq.n	800035e <usbTaskBody+0x36>
      {
        USB_VBUS_counter++;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	3301      	adds	r3, #1
 8000354:	60fb      	str	r3, [r7, #12]
    while (USB_VBUS_counter < 5)
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2b04      	cmp	r3, #4
 800035a:	d9ee      	bls.n	800033a <usbTaskBody+0x12>
 800035c:	e000      	b.n	8000360 <usbTaskBody+0x38>
      }
      else {
        break;
 800035e:	bf00      	nop
      }
    }
    if(USB_VBUS_counter >= 5)
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	2b04      	cmp	r3, #4
 8000364:	d92f      	bls.n	80003c6 <usbTaskBody+0x9e>
    {
      /* Wait for the qspiMutex */
      osMutexWait(qspiMutexHandle, osWaitForever);
 8000366:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <usbTaskBody+0xac>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f04f 31ff 	mov.w	r1, #4294967295
 800036e:	4618      	mov	r0, r3
 8000370:	f00b fe24 	bl	800bfbc <osMutexWait>

      /* Initialize USB peripheral */
      MX_USB_DEVICE_Init();
 8000374:	f00e fa5a 	bl	800e82c <MX_USB_DEVICE_Init>

      /* RED LED ON */
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	2104      	movs	r1, #4
 800037c:	4816      	ldr	r0, [pc, #88]	; (80003d8 <usbTaskBody+0xb0>)
 800037e:	f001 fb39 	bl	80019f4 <HAL_GPIO_WritePin>

      /* USB_VBUS availability check */
      while (USB_VBUS_counter)
 8000382:	e010      	b.n	80003a6 <usbTaskBody+0x7e>
      {
        /* Wait 100ms, then check the USB_VBUS availability */
        osDelay(100);
 8000384:	2064      	movs	r0, #100	; 0x64
 8000386:	f00b fded 	bl	800bf64 <osDelay>

        if (HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin) == GPIO_PIN_RESET)
 800038a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800038e:	4810      	ldr	r0, [pc, #64]	; (80003d0 <usbTaskBody+0xa8>)
 8000390:	f001 fb18 	bl	80019c4 <HAL_GPIO_ReadPin>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d103      	bne.n	80003a2 <usbTaskBody+0x7a>
        {
          USB_VBUS_counter--;
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	3b01      	subs	r3, #1
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	e001      	b.n	80003a6 <usbTaskBody+0x7e>
        }
        else {
          USB_VBUS_counter = 5;
 80003a2:	2305      	movs	r3, #5
 80003a4:	60fb      	str	r3, [r7, #12]
      while (USB_VBUS_counter)
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d1eb      	bne.n	8000384 <usbTaskBody+0x5c>
        }
      }

      /* Deinitialize USB peripheral */
      USBD_DeInit(&hUsbDeviceFS);
 80003ac:	480b      	ldr	r0, [pc, #44]	; (80003dc <usbTaskBody+0xb4>)
 80003ae:	f007 fefd 	bl	80081ac <USBD_DeInit>

      /* Release the qspiMutex */
      osMutexRelease(qspiMutexHandle);
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <usbTaskBody+0xac>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f00b fe4e 	bl	800c058 <osMutexRelease>

      /* RED LED OFF */
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2104      	movs	r1, #4
 80003c0:	4805      	ldr	r0, [pc, #20]	; (80003d8 <usbTaskBody+0xb0>)
 80003c2:	f001 fb17 	bl	80019f4 <HAL_GPIO_WritePin>
    }
    /* Every 1s we will check if USB_VBUS is available */
    osDelay(1000);
 80003c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ca:	f00b fdcb 	bl	800bf64 <osDelay>
    USB_VBUS_counter = 0;
 80003ce:	e7b1      	b.n	8000334 <usbTaskBody+0xc>
 80003d0:	48000800 	.word	0x48000800
 80003d4:	20001204 	.word	0x20001204
 80003d8:	48000400 	.word	0x48000400
 80003dc:	20009678 	.word	0x20009678

080003e0 <MX_GPIO_Init>:
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
     PB9   ------> LCD_COM3
*/
void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b08c      	sub	sp, #48	; 0x30
 80003e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 031c 	add.w	r3, r7, #28
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003f6:	4bb7      	ldr	r3, [pc, #732]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	4ab6      	ldr	r2, [pc, #728]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 80003fc:	f043 0310 	orr.w	r3, r3, #16
 8000400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000402:	4bb4      	ldr	r3, [pc, #720]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	f003 0310 	and.w	r3, r3, #16
 800040a:	61bb      	str	r3, [r7, #24]
 800040c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040e:	4bb1      	ldr	r3, [pc, #708]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	4ab0      	ldr	r2, [pc, #704]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 8000414:	f043 0304 	orr.w	r3, r3, #4
 8000418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800041a:	4bae      	ldr	r3, [pc, #696]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	f003 0304 	and.w	r3, r3, #4
 8000422:	617b      	str	r3, [r7, #20]
 8000424:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000426:	4bab      	ldr	r3, [pc, #684]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	4aaa      	ldr	r2, [pc, #680]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 800042c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000432:	4ba8      	ldr	r3, [pc, #672]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800043a:	613b      	str	r3, [r7, #16]
 800043c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043e:	4ba5      	ldr	r3, [pc, #660]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	4aa4      	ldr	r2, [pc, #656]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044a:	4ba2      	ldr	r3, [pc, #648]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000456:	4b9f      	ldr	r3, [pc, #636]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	4a9e      	ldr	r2, [pc, #632]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 800045c:	f043 0302 	orr.w	r3, r3, #2
 8000460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000462:	4b9c      	ldr	r3, [pc, #624]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000466:	f003 0302 	and.w	r3, r3, #2
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800046e:	4b99      	ldr	r3, [pc, #612]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	4a98      	ldr	r2, [pc, #608]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 8000474:	f043 0308 	orr.w	r3, r3, #8
 8000478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047a:	4b96      	ldr	r3, [pc, #600]	; (80006d4 <MX_GPIO_Init+0x2f4>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	f003 0308 	and.w	r3, r3, #8
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LED_GREEN_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	f240 1109 	movw	r1, #265	; 0x109
 800048c:	4892      	ldr	r0, [pc, #584]	; (80006d8 <MX_GPIO_Init+0x2f8>)
 800048e:	f001 fab1 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	210c      	movs	r1, #12
 8000496:	4891      	ldr	r0, [pc, #580]	; (80006dc <MX_GPIO_Init+0x2fc>)
 8000498:	f001 faac 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a2:	488f      	ldr	r0, [pc, #572]	; (80006e0 <MX_GPIO_Init+0x300>)
 80004a4:	f001 faa6 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	488d      	ldr	r0, [pc, #564]	; (80006e4 <MX_GPIO_Init+0x304>)
 80004ae:	f001 faa1 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin
 80004b2:	23f4      	movs	r3, #244	; 0xf4
 80004b4:	61fb      	str	r3, [r7, #28]
                          |AUDIO_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b6:	2302      	movs	r3, #2
 80004b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004be:	2303      	movs	r3, #3
 80004c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80004c2:	230d      	movs	r3, #13
 80004c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	4619      	mov	r1, r3
 80004cc:	4882      	ldr	r0, [pc, #520]	; (80006d8 <MX_GPIO_Init+0x2f8>)
 80004ce:	f000 ffdb 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 80004d2:	2308      	movs	r3, #8
 80004d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004de:	2302      	movs	r3, #2
 80004e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 80004e2:	f107 031c 	add.w	r3, r7, #28
 80004e6:	4619      	mov	r1, r3
 80004e8:	487b      	ldr	r0, [pc, #492]	; (80006d8 <MX_GPIO_Init+0x2f8>)
 80004ea:	f000 ffcd 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 80004ee:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80004f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80004f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004fe:	f107 031c 	add.w	r3, r7, #28
 8000502:	4619      	mov	r1, r3
 8000504:	4876      	ldr	r0, [pc, #472]	; (80006e0 <MX_GPIO_Init+0x300>)
 8000506:	f000 ffbf 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin|USB_VBUS_Pin;
 800050a:	f640 0307 	movw	r3, #2055	; 0x807
 800050e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000510:	2300      	movs	r3, #0
 8000512:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000518:	f107 031c 	add.w	r3, r7, #28
 800051c:	4619      	mov	r1, r3
 800051e:	4870      	ldr	r0, [pc, #448]	; (80006e0 <MX_GPIO_Init+0x300>)
 8000520:	f000 ffb2 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8000524:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000528:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052a:	2302      	movs	r3, #2
 800052c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	2300      	movs	r3, #0
 8000534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000536:	230b      	movs	r3, #11
 8000538:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053a:	f107 031c 	add.w	r3, r7, #28
 800053e:	4619      	mov	r1, r3
 8000540:	4867      	ldr	r0, [pc, #412]	; (80006e0 <MX_GPIO_Init+0x300>)
 8000542:	f000 ffa1 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 8000546:	232f      	movs	r3, #47	; 0x2f
 8000548:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054a:	2300      	movs	r3, #0
 800054c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800054e:	2302      	movs	r3, #2
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000552:	f107 031c 	add.w	r3, r7, #28
 8000556:	4619      	mov	r1, r3
 8000558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055c:	f000 ff94 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000560:	2310      	movs	r3, #16
 8000562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000564:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	4619      	mov	r1, r3
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000578:	f000 ff86 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 800057c:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000580:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000582:	2302      	movs	r3, #2
 8000584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2300      	movs	r3, #0
 800058c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800058e:	230b      	movs	r3, #11
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	4619      	mov	r1, r3
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f000 ff74 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 80005a0:	f24f 2333 	movw	r3, #62003	; 0xf233
 80005a4:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a6:	2302      	movs	r3, #2
 80005a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	2300      	movs	r3, #0
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80005b2:	230b      	movs	r3, #11
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	4619      	mov	r1, r3
 80005bc:	4847      	ldr	r0, [pc, #284]	; (80006dc <MX_GPIO_Init+0x2fc>)
 80005be:	f000 ff63 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80005c2:	2304      	movs	r3, #4
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ce:	2303      	movs	r3, #3
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	4619      	mov	r1, r3
 80005d8:	4840      	ldr	r0, [pc, #256]	; (80006dc <MX_GPIO_Init+0x2fc>)
 80005da:	f000 ff55 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80005de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ec:	2303      	movs	r3, #3
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4619      	mov	r1, r3
 80005f6:	4838      	ldr	r0, [pc, #224]	; (80006d8 <MX_GPIO_Init+0x2f8>)
 80005f8:	f000 ff46 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 80005fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800060e:	230d      	movs	r3, #13
 8000610:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	4619      	mov	r1, r3
 8000618:	482f      	ldr	r0, [pc, #188]	; (80006d8 <MX_GPIO_Init+0x2f8>)
 800061a:	f000 ff35 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 800061e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000624:	2312      	movs	r3, #18
 8000626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800062c:	2303      	movs	r3, #3
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000630:	2304      	movs	r3, #4
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4828      	ldr	r0, [pc, #160]	; (80006dc <MX_GPIO_Init+0x2fc>)
 800063c:	f000 ff24 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8000640:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000644:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	2302      	movs	r3, #2
 8000648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000652:	230b      	movs	r3, #11
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	4821      	ldr	r0, [pc, #132]	; (80006e4 <MX_GPIO_Init+0x304>)
 800065e:	f000 ff13 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4619      	mov	r1, r3
 800067a:	4819      	ldr	r0, [pc, #100]	; (80006e0 <MX_GPIO_Init+0x300>)
 800067c:	f000 ff04 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000680:	2305      	movs	r3, #5
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000684:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	4619      	mov	r1, r3
 8000694:	4813      	ldr	r0, [pc, #76]	; (80006e4 <MX_GPIO_Init+0x304>)
 8000696:	f000 fef7 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 800069a:	231a      	movs	r3, #26
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a6:	2303      	movs	r3, #3
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006aa:	2305      	movs	r3, #5
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	480b      	ldr	r0, [pc, #44]	; (80006e4 <MX_GPIO_Init+0x304>)
 80006b6:	f000 fee7 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006ba:	2360      	movs	r3, #96	; 0x60
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006ca:	2307      	movs	r3, #7
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	e009      	b.n	80006e8 <MX_GPIO_Init+0x308>
 80006d4:	40021000 	.word	0x40021000
 80006d8:	48001000 	.word	0x48001000
 80006dc:	48000400 	.word	0x48000400
 80006e0:	48000800 	.word	0x48000800
 80006e4:	48000c00 	.word	0x48000c00
 80006e8:	4619      	mov	r1, r3
 80006ea:	482e      	ldr	r0, [pc, #184]	; (80007a4 <MX_GPIO_Init+0x3c4>)
 80006ec:	f000 fecc 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4827      	ldr	r0, [pc, #156]	; (80007a4 <MX_GPIO_Init+0x3c4>)
 8000708:	f000 febe 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 800070c:	2308      	movs	r3, #8
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4821      	ldr	r0, [pc, #132]	; (80007a8 <MX_GPIO_Init+0x3c8>)
 8000724:	f000 feb0 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000728:	23c0      	movs	r3, #192	; 0xc0
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072c:	2312      	movs	r3, #18
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000738:	2304      	movs	r3, #4
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4819      	ldr	r0, [pc, #100]	; (80007a8 <MX_GPIO_Init+0x3c8>)
 8000744:	f000 fea0 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800074e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MX_GPIO_Init+0x3c8>)
 8000760:	f000 fe92 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000764:	2301      	movs	r3, #1
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_GPIO_Init+0x3cc>)
 800077c:	f000 fe84 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000780:	2302      	movs	r3, #2
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000784:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_GPIO_Init+0x3cc>)
 8000796:	f000 fe77 	bl	8001488 <HAL_GPIO_Init>

}
 800079a:	bf00      	nop
 800079c:	3730      	adds	r7, #48	; 0x30
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	48000c00 	.word	0x48000c00
 80007a8:	48000400 	.word	0x48000400
 80007ac:	48001000 	.word	0x48001000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b4:	f000 fc46 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b8:	f000 f80c 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007bc:	f7ff fe10 	bl	80003e0 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80007c0:	f000 f870 	bl	80008a4 <MX_QUADSPI_Init>
  MX_FATFS_Init();
 80007c4:	f005 fd06 	bl	80061d4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007c8:	f7ff fd1c 	bl	8000204 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007cc:	f00b fb77 	bl	800bebe <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <main+0x20>
	...

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b096      	sub	sp, #88	; 0x58
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2244      	movs	r2, #68	; 0x44
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00e ff8e 	bl	800f704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007fa:	f002 fa57 	bl	8002cac <HAL_PWREx_ControlVoltageScaling>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000804:	f000 f848 	bl	8000898 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000808:	f002 fa32 	bl	8002c70 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800080c:	4b21      	ldr	r3, [pc, #132]	; (8000894 <SystemClock_Config+0xc0>)
 800080e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000812:	4a20      	ldr	r2, [pc, #128]	; (8000894 <SystemClock_Config+0xc0>)
 8000814:	f023 0318 	bic.w	r3, r3, #24
 8000818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800081c:	2314      	movs	r3, #20
 800081e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800082c:	2360      	movs	r3, #96	; 0x60
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000834:	2301      	movs	r3, #1
 8000836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800083c:	2328      	movs	r3, #40	; 0x28
 800083e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000840:	2307      	movs	r3, #7
 8000842:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000844:	2302      	movs	r3, #2
 8000846:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4618      	mov	r0, r3
 8000852:	f002 ff5d 	bl	8003710 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800085c:	f000 f81c 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	2303      	movs	r3, #3
 8000866:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	2104      	movs	r1, #4
 8000878:	4618      	mov	r0, r3
 800087a:	f003 fb31 	bl	8003ee0 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000884:	f000 f808 	bl	8000898 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000888:	f003 ffee 	bl	8004868 <HAL_RCCEx_EnableMSIPLLMode>
}
 800088c:	bf00      	nop
 800088e:	3758      	adds	r7, #88	; 0x58
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_QUADSPI_Init+0x44>)
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <MX_QUADSPI_Init+0x48>)
 80008ac:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_QUADSPI_Init+0x44>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_QUADSPI_Init+0x44>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_QUADSPI_Init+0x44>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 0x17;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_QUADSPI_Init+0x44>)
 80008c2:	2217      	movs	r2, #23
 80008c4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_QUADSPI_Init+0x44>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_QUADSPI_Init+0x44>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_QUADSPI_Init+0x44>)
 80008d4:	f002 fa60 	bl	8002d98 <HAL_QSPI_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80008de:	f7ff ffdb 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000145c 	.word	0x2000145c
 80008ec:	a0001000 	.word	0xa0001000

080008f0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a17      	ldr	r2, [pc, #92]	; (800096c <HAL_QSPI_MspInit+0x7c>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d128      	bne.n	8000964 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <HAL_QSPI_MspInit+0x80>)
 8000914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000916:	4a16      	ldr	r2, [pc, #88]	; (8000970 <HAL_QSPI_MspInit+0x80>)
 8000918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800091c:	6513      	str	r3, [r2, #80]	; 0x50
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_QSPI_MspInit+0x80>)
 8000920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_QSPI_MspInit+0x80>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_QSPI_MspInit+0x80>)
 8000930:	f043 0310 	orr.w	r3, r3, #16
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_QSPI_MspInit+0x80>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0310 	and.w	r3, r3, #16
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|QUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000942:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000946:	617b      	str	r3, [r7, #20]
                          |QUADSPI_BK1_IO2_Pin|QUADSPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000954:	230a      	movs	r3, #10
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_QSPI_MspInit+0x84>)
 8000960:	f000 fd92 	bl	8001488 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	a0001000 	.word	0xa0001000
 8000970:	40021000 	.word	0x40021000
 8000974:	48001000 	.word	0x48001000

08000978 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&hqspi) != QSPI_OK)
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <BSP_QSPI_Init+0x2c>)
 800097e:	f000 f98e 	bl	8000c9e <QSPI_ResetMemory>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <BSP_QSPI_Init+0x14>
  {
    return QSPI_NOT_SUPPORTED;
 8000988:	2304      	movs	r3, #4
 800098a:	e008      	b.n	800099e <BSP_QSPI_Init+0x26>
  }
 
  /* Configuration of the dummy cucles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != QSPI_OK)
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <BSP_QSPI_Init+0x2c>)
 800098e:	f000 f9c8 	bl	8000d22 <QSPI_DummyCyclesCfg>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <BSP_QSPI_Init+0x24>
  {
    return QSPI_NOT_SUPPORTED;
 8000998:	2304      	movs	r3, #4
 800099a:	e000      	b.n	800099e <BSP_QSPI_Init+0x26>
  }
  
  return QSPI_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000145c 	.word	0x2000145c

080009a8 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b092      	sub	sp, #72	; 0x48
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80009b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80009ba:	23eb      	movs	r3, #235	; 0xeb
 80009bc:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 80009be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80009c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c8:	61fb      	str	r3, [r7, #28]
  sCommand.Address           = ReadAddr;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80009d2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80009d8:	230a      	movs	r3, #10
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = Size;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80009e4:	2300      	movs	r3, #0
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80009e8:	2300      	movs	r3, #0
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80009f4:	4619      	mov	r1, r3
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <BSP_QSPI_Read+0x80>)
 80009f8:	f002 fa44 	bl	8002e84 <HAL_QSPI_Command>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e00b      	b.n	8000a1e <BSP_QSPI_Read+0x76>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a0a:	68f9      	ldr	r1, [r7, #12]
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <BSP_QSPI_Read+0x80>)
 8000a0e:	f002 fb2e 	bl	800306e <HAL_QSPI_Receive>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <BSP_QSPI_Read+0x74>
  {
    return QSPI_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e000      	b.n	8000a1e <BSP_QSPI_Read+0x76>
  }

  return QSPI_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3748      	adds	r7, #72	; 0x48
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000145c 	.word	0x2000145c

08000a2c <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b096      	sub	sp, #88	; 0x58
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	653b      	str	r3, [r7, #80]	; 0x50

  while (current_addr <= WriteAddr)
 8000a3c:	e003      	b.n	8000a46 <BSP_QSPI_Write+0x1a>
  {
    current_addr += N25Q128A_PAGE_SIZE;
 8000a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a44:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 8000a46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d9f7      	bls.n	8000a3e <BSP_QSPI_Write+0x12>
  }
  current_size = current_addr - WriteAddr;
 8000a4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8000a56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d901      	bls.n	8000a62 <BSP_QSPI_Write+0x36>
  {
    current_size = Size;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8000a74:	2312      	movs	r3, #18
 8000a76:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000a78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a82:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8000a88:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a96:	2300      	movs	r3, #0
 8000a98:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8000a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa0:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8000aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000aa4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&hqspi) != QSPI_OK)
 8000aa6:	4824      	ldr	r0, [pc, #144]	; (8000b38 <BSP_QSPI_Write+0x10c>)
 8000aa8:	f000 f9b6 	bl	8000e18 <QSPI_WriteEnable>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <BSP_QSPI_Write+0x8a>
    {
      return QSPI_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e03b      	b.n	8000b2e <BSP_QSPI_Write+0x102>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481d      	ldr	r0, [pc, #116]	; (8000b38 <BSP_QSPI_Write+0x10c>)
 8000ac2:	f002 f9df 	bl	8002e84 <HAL_QSPI_Command>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <BSP_QSPI_Write+0xa4>
    {
      return QSPI_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e02e      	b.n	8000b2e <BSP_QSPI_Write+0x102>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad4:	68f9      	ldr	r1, [r7, #12]
 8000ad6:	4818      	ldr	r0, [pc, #96]	; (8000b38 <BSP_QSPI_Write+0x10c>)
 8000ad8:	f002 fa32 	bl	8002f40 <HAL_QSPI_Transmit>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e023      	b.n	8000b2e <BSP_QSPI_Write+0x102>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8000ae6:	f241 3188 	movw	r1, #5000	; 0x1388
 8000aea:	4813      	ldr	r0, [pc, #76]	; (8000b38 <BSP_QSPI_Write+0x10c>)
 8000aec:	f000 f9dd 	bl	8000eaa <QSPI_AutoPollingMemReady>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <BSP_QSPI_Write+0xce>
    {
      return QSPI_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e019      	b.n	8000b2e <BSP_QSPI_Write+0x102>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8000afa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000afe:	4413      	add	r3, r2
 8000b00:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b06:	4413      	add	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8000b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b0c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d203      	bcs.n	8000b1e <BSP_QSPI_Write+0xf2>
 8000b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	e001      	b.n	8000b22 <BSP_QSPI_Write+0xf6>
 8000b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b22:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8000b24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d3b8      	bcc.n	8000a9e <BSP_QSPI_Write+0x72>
  
  return QSPI_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3758      	adds	r7, #88	; 0x58
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2000145c 	.word	0x2000145c

08000b3c <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b090      	sub	sp, #64	; 0x40
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b48:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = SUBSECTOR_ERASE_CMD;
 8000b4a:	2320      	movs	r3, #32
 8000b4c:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8000b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b58:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000b72:	2300      	movs	r3, #0
 8000b74:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&hqspi) != QSPI_OK)
 8000b76:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <BSP_QSPI_Erase_Block+0x84>)
 8000b78:	f000 f94e 	bl	8000e18 <QSPI_WriteEnable>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e017      	b.n	8000bb6 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <BSP_QSPI_Erase_Block+0x84>)
 8000b92:	f002 f977 	bl	8002e84 <HAL_QSPI_Command>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e00a      	b.n	8000bb6 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&hqspi, N25Q128A_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8000ba0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <BSP_QSPI_Erase_Block+0x84>)
 8000ba6:	f000 f980 	bl	8000eaa <QSPI_AutoPollingMemReady>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e000      	b.n	8000bb6 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3740      	adds	r7, #64	; 0x40
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000145c 	.word	0x2000145c

08000bc4 <BSP_QSPI_GetStatus>:
/**
  * @brief  Reads current status of the QSPI memory.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetStatus(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b090      	sub	sp, #64	; 0x40
 8000bc8:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read flag status register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bce:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = READ_FLAG_STATUS_REG_CMD;
 8000bd0:	2370      	movs	r3, #112	; 0x70
 8000bd2:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8000bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  sCommand.NbData            = 1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4816      	ldr	r0, [pc, #88]	; (8000c5c <BSP_QSPI_GetStatus+0x98>)
 8000c02:	f002 f93f 	bl	8002e84 <HAL_QSPI_Command>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <BSP_QSPI_GetStatus+0x4c>
  {
    return QSPI_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e020      	b.n	8000c52 <BSP_QSPI_GetStatus+0x8e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c16:	4619      	mov	r1, r3
 8000c18:	4810      	ldr	r0, [pc, #64]	; (8000c5c <BSP_QSPI_GetStatus+0x98>)
 8000c1a:	f002 fa28 	bl	800306e <HAL_QSPI_Receive>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <BSP_QSPI_GetStatus+0x64>
  {
    return QSPI_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e014      	b.n	8000c52 <BSP_QSPI_GetStatus+0x8e>
  }
  
  /* Check the value of the register */
  if ((reg & (N25Q128A_FSR_PRERR | N25Q128A_FSR_VPPERR | N25Q128A_FSR_PGERR | N25Q128A_FSR_ERERR)) != 0)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <BSP_QSPI_GetStatus+0x72>
  {
    return QSPI_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00d      	b.n	8000c52 <BSP_QSPI_GetStatus+0x8e>
  }
  else if ((reg & (N25Q128A_FSR_PGSUS | N25Q128A_FSR_ERSUS)) != 0)
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <BSP_QSPI_GetStatus+0x80>
  {
    return QSPI_SUSPENDED;
 8000c40:	2308      	movs	r3, #8
 8000c42:	e006      	b.n	8000c52 <BSP_QSPI_GetStatus+0x8e>
  }
  else if ((reg & N25Q128A_FSR_READY) != 0)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	da01      	bge.n	8000c50 <BSP_QSPI_GetStatus+0x8c>
  {
    return QSPI_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e000      	b.n	8000c52 <BSP_QSPI_GetStatus+0x8e>
  }
  else
  {
    return QSPI_BUSY;
 8000c50:	2302      	movs	r3, #2
  }
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3740      	adds	r7, #64	; 0x40
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000145c 	.word	0x2000145c

08000c60 <BSP_QSPI_GetInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo: pointer on the configuration structure  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetInfo(QSPI_Info* pInfo)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize          = N25Q128A_FLASH_SIZE;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c6e:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = N25Q128A_SUBSECTOR_SIZE;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c76:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber = (N25Q128A_FLASH_SIZE/N25Q128A_SUBSECTOR_SIZE);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c7e:	609a      	str	r2, [r3, #8]
  pInfo->ProgPageSize       = N25Q128A_PAGE_SIZE;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c86:	60da      	str	r2, [r3, #12]
  pInfo->ProgPagesNumber    = (N25Q128A_FLASH_SIZE/N25Q128A_PAGE_SIZE);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c8e:	611a      	str	r2, [r3, #16]
  
  return QSPI_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b090      	sub	sp, #64	; 0x40
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000caa:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8000cac:	2366      	movs	r3, #102	; 0x66
 8000cae:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f002 f8d4 	bl	8002e84 <HAL_QSPI_Command>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e019      	b.n	8000d1a <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8000ce6:	2399      	movs	r3, #153	; 0x99
 8000ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f002 f8c5 	bl	8002e84 <HAL_QSPI_Command>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e00a      	b.n	8000d1a <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8000d04:	f241 3188 	movw	r1, #5000	; 0x1388
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f000 f8ce 	bl	8000eaa <QSPI_AutoPollingMemReady>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e000      	b.n	8000d1a <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3740      	adds	r7, #64	; 0x40
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b094      	sub	sp, #80	; 0x50
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 8000d30:	2385      	movs	r3, #133	; 0x85
 8000d32:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8000d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000d52:	2300      	movs	r3, #0
 8000d54:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5e:	4619      	mov	r1, r3
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f002 f88f 	bl	8002e84 <HAL_QSPI_Command>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e04f      	b.n	8000e10 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d70:	f107 030b 	add.w	r3, r7, #11
 8000d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d78:	4619      	mov	r1, r3
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f002 f977 	bl	800306e <HAL_QSPI_Receive>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e042      	b.n	8000e10 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f844 	bl	8000e18 <QSPI_WriteEnable>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e03a      	b.n	8000e10 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8000d9a:	2381      	movs	r3, #129	; 0x81
 8000d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8000d9e:	7afb      	ldrb	r3, [r7, #11]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	b25a      	sxtb	r2, r3
 8000da8:	23f0      	movs	r3, #240	; 0xf0
 8000daa:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dae:	fa93 f3a3 	rbit	r3, r3
 8000db2:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000db6:	64fb      	str	r3, [r7, #76]	; 0x4c
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <QSPI_DummyCyclesCfg+0xa0>
  {
    return 32U;
 8000dbe:	2320      	movs	r3, #32
 8000dc0:	e003      	b.n	8000dca <QSPI_DummyCyclesCfg+0xa8>
  }
  return __builtin_clz(value);
 8000dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dc4:	fab3 f383 	clz	r3, r3
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4619      	mov	r1, r3
 8000dcc:	230a      	movs	r3, #10
 8000dce:	408b      	lsls	r3, r1
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b25b      	sxtb	r3, r3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	72fb      	strb	r3, [r7, #11]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de2:	4619      	mov	r1, r3
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f002 f84d 	bl	8002e84 <HAL_QSPI_Command>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e00d      	b.n	8000e10 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000df4:	f107 030b 	add.w	r3, r7, #11
 8000df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f002 f89e 	bl	8002f40 <HAL_QSPI_Transmit>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <QSPI_DummyCyclesCfg+0xee>
  }
  
  return QSPI_OK;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3750      	adds	r7, #80	; 0x50
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b096      	sub	sp, #88	; 0x58
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8000e26:	2306      	movs	r3, #6
 8000e28:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000e42:	2300      	movs	r3, #0
 8000e44:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e46:	f107 0320 	add.w	r3, r7, #32
 8000e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e4e:	4619      	mov	r1, r3
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f002 f817 	bl	8002e84 <HAL_QSPI_Command>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e020      	b.n	8000ea2 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = N25Q128A_SR_WREN;
 8000e60:	2302      	movs	r3, #2
 8000e62:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 8000e64:	2302      	movs	r3, #2
 8000e66:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8000e70:	2310      	movs	r3, #16
 8000e72:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000e74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e78:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8000e7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e84:	f107 0208 	add.w	r2, r7, #8
 8000e88:	f107 0120 	add.w	r1, r7, #32
 8000e8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f002 f98e 	bl	80031b2 <HAL_QSPI_AutoPolling>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3758      	adds	r7, #88	; 0x58
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b096      	sub	sp, #88	; 0x58
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8000eba:	2305      	movs	r3, #5
 8000ebc:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8000ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eca:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8000eec:	2310      	movs	r3, #16
 8000eee:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000ef0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ef4:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &sCommand, &sConfig, Timeout) != HAL_OK)
 8000ef6:	f107 0208 	add.w	r2, r7, #8
 8000efa:	f107 0120 	add.w	r1, r7, #32
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f002 f956 	bl	80031b2 <HAL_QSPI_AutoPolling>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e000      	b.n	8000f12 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3758      	adds	r7, #88	; 0x58
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6593      	str	r3, [r2, #88]	; 0x58
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	210f      	movs	r1, #15
 8000f56:	f06f 0001 	mvn.w	r0, #1
 8000f5a:	f000 fa12 	bl	8001382 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 f8ae 	bl	80010fc <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa0:	f000 f8ac 	bl	80010fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000fa4:	f00c fde6 	bl	800db74 <xTaskGetSchedulerState>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d001      	beq.n	8000fb2 <SysTick_Handler+0x1a>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000fae:	f00d f9c3 	bl	800e338 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <OTG_FS_IRQHandler+0x10>)
 8000fbe:	f000 fedc 	bl	8001d7a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000ab48 	.word	0x2000ab48

08000fcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001028 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff4:	f7ff ffea 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	; (8001030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <LoopForever+0xe>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	; (800103c <LoopForever+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101e:	f00e fb3f 	bl	800f6a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001022:	f7ff fbc5 	bl	80007b0 <main>

08001026 <LoopForever>:

LoopForever:
    b LoopForever
 8001026:	e7fe      	b.n	8001026 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001028:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001034:	0800f914 	.word	0x0800f914
  ldr r2, =_sbss
 8001038:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 800103c:	2000bfc8 	.word	0x2000bfc8

08001040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_2_IRQHandler>
	...

08001044 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_Init+0x3c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <HAL_Init+0x3c>)
 8001054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001058:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105a:	2003      	movs	r0, #3
 800105c:	f000 f986 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001060:	200f      	movs	r0, #15
 8001062:	f000 f80f 	bl	8001084 <HAL_InitTick>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	e001      	b.n	8001076 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001072:	f7ff ff53 	bl	8000f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001076:	79fb      	ldrb	r3, [r7, #7]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40022000 	.word	0x40022000

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_InitTick+0x6c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d023      	beq.n	80010e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_InitTick+0x70>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_InitTick+0x6c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f99f 	bl	80013f2 <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10f      	bne.n	80010da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d809      	bhi.n	80010d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 f95b 	bl	8001382 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_InitTick+0x74>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e007      	b.n	80010e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e004      	b.n	80010e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e001      	b.n	80010e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008
 8001120:	200014a0 	.word	0x200014a0

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200014a0 	.word	0x200014a0

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffde 	bl	8001124 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db12      	blt.n	800125c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	490a      	ldr	r1, [pc, #40]	; (8001268 <__NVIC_DisableIRQ+0x44>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	3320      	adds	r3, #32
 800124c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001250:	f3bf 8f4f 	dsb	sy
}
 8001254:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001256:	f3bf 8f6f 	isb	sy
}
 800125a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff05 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001394:	f7ff ff1a 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001398:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f7ff ff8e 	bl	80012c0 <NVIC_EncodePriority>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff5d 	bl	800126c <__NVIC_SetPriority>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff0d 	bl	80011e8 <__NVIC_EnableIRQ>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff1d 	bl	8001224 <__NVIC_DisableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ff94 	bl	8001328 <SysTick_Config>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800140a:	b480      	push	{r7}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d008      	beq.n	8001434 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2204      	movs	r2, #4
 8001426:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e022      	b.n	800147a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 020e 	bic.w	r2, r2, #14
 8001442:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001458:	f003 021c 	and.w	r2, r3, #28
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001478:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e17f      	b.n	8001798 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	4013      	ands	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8171 	beq.w	8001792 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d005      	beq.n	80014c8 <HAL_GPIO_Init+0x40>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d130      	bne.n	800152a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014fe:	2201      	movs	r2, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	f003 0201 	and.w	r2, r3, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b03      	cmp	r3, #3
 8001534:	d118      	bne.n	8001568 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800153c:	2201      	movs	r2, #1
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	08db      	lsrs	r3, r3, #3
 8001552:	f003 0201 	and.w	r2, r3, #1
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b03      	cmp	r3, #3
 8001572:	d017      	beq.n	80015a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d123      	bne.n	80015f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3208      	adds	r2, #8
 80015b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	6939      	ldr	r1, [r7, #16]
 80015f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0203 	and.w	r2, r3, #3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80ac 	beq.w	8001792 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b5f      	ldr	r3, [pc, #380]	; (80017b8 <HAL_GPIO_Init+0x330>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	4a5e      	ldr	r2, [pc, #376]	; (80017b8 <HAL_GPIO_Init+0x330>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6613      	str	r3, [r2, #96]	; 0x60
 8001646:	4b5c      	ldr	r3, [pc, #368]	; (80017b8 <HAL_GPIO_Init+0x330>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001652:	4a5a      	ldr	r2, [pc, #360]	; (80017bc <HAL_GPIO_Init+0x334>)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800167c:	d025      	beq.n	80016ca <HAL_GPIO_Init+0x242>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4f      	ldr	r2, [pc, #316]	; (80017c0 <HAL_GPIO_Init+0x338>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d01f      	beq.n	80016c6 <HAL_GPIO_Init+0x23e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4e      	ldr	r2, [pc, #312]	; (80017c4 <HAL_GPIO_Init+0x33c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d019      	beq.n	80016c2 <HAL_GPIO_Init+0x23a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4d      	ldr	r2, [pc, #308]	; (80017c8 <HAL_GPIO_Init+0x340>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0x236>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <HAL_GPIO_Init+0x344>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00d      	beq.n	80016ba <HAL_GPIO_Init+0x232>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4b      	ldr	r2, [pc, #300]	; (80017d0 <HAL_GPIO_Init+0x348>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d007      	beq.n	80016b6 <HAL_GPIO_Init+0x22e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4a      	ldr	r2, [pc, #296]	; (80017d4 <HAL_GPIO_Init+0x34c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_GPIO_Init+0x22a>
 80016ae:	2306      	movs	r3, #6
 80016b0:	e00c      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016b2:	2307      	movs	r3, #7
 80016b4:	e00a      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016b6:	2305      	movs	r3, #5
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016ba:	2304      	movs	r3, #4
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016ca:	2300      	movs	r3, #0
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016dc:	4937      	ldr	r1, [pc, #220]	; (80017bc <HAL_GPIO_Init+0x334>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ea:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <HAL_GPIO_Init+0x350>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800170e:	4a32      	ldr	r2, [pc, #200]	; (80017d8 <HAL_GPIO_Init+0x350>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <HAL_GPIO_Init+0x350>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001738:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <HAL_GPIO_Init+0x350>)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <HAL_GPIO_Init+0x350>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001762:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_GPIO_Init+0x350>)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_GPIO_Init+0x350>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <HAL_GPIO_Init+0x350>)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f47f ae78 	bne.w	8001498 <HAL_GPIO_Init+0x10>
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	371c      	adds	r7, #28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000
 80017c0:	48000400 	.word	0x48000400
 80017c4:	48000800 	.word	0x48000800
 80017c8:	48000c00 	.word	0x48000c00
 80017cc:	48001000 	.word	0x48001000
 80017d0:	48001400 	.word	0x48001400
 80017d4:	48001800 	.word	0x48001800
 80017d8:	40010400 	.word	0x40010400

080017dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80017ea:	e0cd      	b.n	8001988 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80017ec:	2201      	movs	r2, #1
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80c0 	beq.w	8001982 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001802:	4a68      	ldr	r2, [pc, #416]	; (80019a4 <HAL_GPIO_DeInit+0x1c8>)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4013      	ands	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800182a:	d025      	beq.n	8001878 <HAL_GPIO_DeInit+0x9c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a5e      	ldr	r2, [pc, #376]	; (80019a8 <HAL_GPIO_DeInit+0x1cc>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d01f      	beq.n	8001874 <HAL_GPIO_DeInit+0x98>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a5d      	ldr	r2, [pc, #372]	; (80019ac <HAL_GPIO_DeInit+0x1d0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d019      	beq.n	8001870 <HAL_GPIO_DeInit+0x94>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a5c      	ldr	r2, [pc, #368]	; (80019b0 <HAL_GPIO_DeInit+0x1d4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d013      	beq.n	800186c <HAL_GPIO_DeInit+0x90>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a5b      	ldr	r2, [pc, #364]	; (80019b4 <HAL_GPIO_DeInit+0x1d8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d00d      	beq.n	8001868 <HAL_GPIO_DeInit+0x8c>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a5a      	ldr	r2, [pc, #360]	; (80019b8 <HAL_GPIO_DeInit+0x1dc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d007      	beq.n	8001864 <HAL_GPIO_DeInit+0x88>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a59      	ldr	r2, [pc, #356]	; (80019bc <HAL_GPIO_DeInit+0x1e0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d101      	bne.n	8001860 <HAL_GPIO_DeInit+0x84>
 800185c:	2306      	movs	r3, #6
 800185e:	e00c      	b.n	800187a <HAL_GPIO_DeInit+0x9e>
 8001860:	2307      	movs	r3, #7
 8001862:	e00a      	b.n	800187a <HAL_GPIO_DeInit+0x9e>
 8001864:	2305      	movs	r3, #5
 8001866:	e008      	b.n	800187a <HAL_GPIO_DeInit+0x9e>
 8001868:	2304      	movs	r3, #4
 800186a:	e006      	b.n	800187a <HAL_GPIO_DeInit+0x9e>
 800186c:	2303      	movs	r3, #3
 800186e:	e004      	b.n	800187a <HAL_GPIO_DeInit+0x9e>
 8001870:	2302      	movs	r3, #2
 8001872:	e002      	b.n	800187a <HAL_GPIO_DeInit+0x9e>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_GPIO_DeInit+0x9e>
 8001878:	2300      	movs	r3, #0
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	f002 0203 	and.w	r2, r2, #3
 8001880:	0092      	lsls	r2, r2, #2
 8001882:	4093      	lsls	r3, r2
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	429a      	cmp	r2, r3
 8001888:	d132      	bne.n	80018f0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800188a:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <HAL_GPIO_DeInit+0x1e4>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	43db      	mvns	r3, r3
 8001892:	494b      	ldr	r1, [pc, #300]	; (80019c0 <HAL_GPIO_DeInit+0x1e4>)
 8001894:	4013      	ands	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001898:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <HAL_GPIO_DeInit+0x1e4>)
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	43db      	mvns	r3, r3
 80018a0:	4947      	ldr	r1, [pc, #284]	; (80019c0 <HAL_GPIO_DeInit+0x1e4>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80018a6:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <HAL_GPIO_DeInit+0x1e4>)
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4944      	ldr	r1, [pc, #272]	; (80019c0 <HAL_GPIO_DeInit+0x1e4>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80018b4:	4b42      	ldr	r3, [pc, #264]	; (80019c0 <HAL_GPIO_DeInit+0x1e4>)
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	4940      	ldr	r1, [pc, #256]	; (80019c0 <HAL_GPIO_DeInit+0x1e4>)
 80018be:	4013      	ands	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	220f      	movs	r2, #15
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80018d2:	4a34      	ldr	r2, [pc, #208]	; (80019a4 <HAL_GPIO_DeInit+0x1c8>)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43da      	mvns	r2, r3
 80018e2:	4830      	ldr	r0, [pc, #192]	; (80019a4 <HAL_GPIO_DeInit+0x1c8>)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	400a      	ands	r2, r1
 80018ea:	3302      	adds	r3, #2
 80018ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2103      	movs	r1, #3
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	08d2      	lsrs	r2, r2, #3
 8001924:	4019      	ands	r1, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3208      	adds	r2, #8
 800192a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2103      	movs	r1, #3
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	401a      	ands	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	2101      	movs	r1, #1
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	401a      	ands	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2103      	movs	r1, #3
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	401a      	ands	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001972:	2101      	movs	r1, #1
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	401a      	ands	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	f47f af2b 	bne.w	80017ec <HAL_GPIO_DeInit+0x10>
  }
}
 8001996:	bf00      	nop
 8001998:	bf00      	nop
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40010000 	.word	0x40010000
 80019a8:	48000400 	.word	0x48000400
 80019ac:	48000800 	.word	0x48000800
 80019b0:	48000c00 	.word	0x48000c00
 80019b4:	48001000 	.word	0x48001000
 80019b8:	48001400 	.word	0x48001400
 80019bc:	48001800 	.word	0x48001800
 80019c0:	40010400 	.word	0x40010400

080019c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	e001      	b.n	80019e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a10:	e002      	b.n	8001a18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a12:	887a      	ldrh	r2, [r7, #2]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a26:	b08f      	sub	sp, #60	; 0x3c
 8001a28:	af0a      	add	r7, sp, #40	; 0x28
 8001a2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e116      	b.n	8001c64 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d106      	bne.n	8001a56 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f00d f959 	bl	800ed08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2203      	movs	r2, #3
 8001a5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d102      	bne.n	8001a70 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 f9b2 	bl	8004dde <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	687e      	ldr	r6, [r7, #4]
 8001a82:	466d      	mov	r5, sp
 8001a84:	f106 0410 	add.w	r4, r6, #16
 8001a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a94:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a98:	1d33      	adds	r3, r6, #4
 8001a9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a9c:	6838      	ldr	r0, [r7, #0]
 8001a9e:	f003 f8c5 	bl	8004c2c <USB_CoreInit>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0d7      	b.n	8001c64 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 f9a0 	bl	8004e00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e04a      	b.n	8001b5c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	1a9b      	subs	r3, r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	333d      	adds	r3, #61	; 0x3d
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	1a9b      	subs	r3, r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	333c      	adds	r3, #60	; 0x3c
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001aee:	7bfa      	ldrb	r2, [r7, #15]
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	b298      	uxth	r0, r3
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	3342      	adds	r3, #66	; 0x42
 8001b02:	4602      	mov	r2, r0
 8001b04:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	333f      	adds	r3, #63	; 0x3f
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	3344      	adds	r3, #68	; 0x44
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3348      	adds	r3, #72	; 0x48
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	3350      	adds	r3, #80	; 0x50
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d3af      	bcc.n	8001ac6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]
 8001b6a:	e044      	b.n	8001bf6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	1a9b      	subs	r3, r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	1a9b      	subs	r3, r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d3b5      	bcc.n	8001b6c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	687e      	ldr	r6, [r7, #4]
 8001c08:	466d      	mov	r5, sp
 8001c0a:	f106 0410 	add.w	r4, r6, #16
 8001c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c1e:	1d33      	adds	r3, r6, #4
 8001c20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c22:	6838      	ldr	r0, [r7, #0]
 8001c24:	f003 f938 	bl	8004e98 <USB_DevInit>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2202      	movs	r2, #2
 8001c32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e014      	b.n	8001c64 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d102      	bne.n	8001c58 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 ffdc 	bl	8002c10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f004 f959 	bl	8005f14 <USB_DevDisconnect>

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c6c <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e015      	b.n	8001caa <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2203      	movs	r2, #3
 8001c82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f004 f8ac 	bl	8005de8 <USB_StopDevice>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e007      	b.n	8001caa <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f00d f8c6 	bl	800ee2c <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_PCD_Start+0x1c>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e01c      	b.n	8001d08 <HAL_PCD_Start+0x56>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 f864 	bl	8004dbc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f004 f8ea 	bl	8005ed2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_PCD_Stop+0x1c>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e022      	b.n	8001d72 <HAL_PCD_Stop+0x62>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 f850 	bl	8004dde <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 f8e6 	bl	8005f14 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2110      	movs	r1, #16
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 f9ee 	bl	8005130 <USB_FlushTxFifo>

  if (hpcd->Init.battery_charging_enable == 1U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d105      	bne.n	8001d68 <HAL_PCD_Stop+0x58>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d7a:	b590      	push	{r4, r7, lr}
 8001d7c:	b08d      	sub	sp, #52	; 0x34
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f004 f973 	bl	800607c <USB_GetMode>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f040 8384 	bne.w	80024a6 <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 f8d7 	bl	8005f56 <USB_ReadInterrupts>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 837a 	beq.w	80024a4 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f004 f8ce 	bl	8005f56 <USB_ReadInterrupts>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d107      	bne.n	8001dd4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f002 0202 	and.w	r2, r2, #2
 8001dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 f8bc 	bl	8005f56 <USB_ReadInterrupts>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b10      	cmp	r3, #16
 8001de6:	d161      	bne.n	8001eac <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699a      	ldr	r2, [r3, #24]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0210 	bic.w	r2, r2, #16
 8001df6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f003 020f 	and.w	r2, r3, #15
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	3304      	adds	r3, #4
 8001e16:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	0c5b      	lsrs	r3, r3, #17
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d124      	bne.n	8001e6e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d035      	beq.n	8001e9c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	6a38      	ldr	r0, [r7, #32]
 8001e44:	f003 fea4 	bl	8005b90 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e54:	441a      	add	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	699a      	ldr	r2, [r3, #24]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e66:	441a      	add	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	619a      	str	r2, [r3, #24]
 8001e6c:	e016      	b.n	8001e9c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	0c5b      	lsrs	r3, r3, #17
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d110      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e80:	2208      	movs	r2, #8
 8001e82:	4619      	mov	r1, r3
 8001e84:	6a38      	ldr	r0, [r7, #32]
 8001e86:	f003 fe83 	bl	8005b90 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e96:	441a      	add	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0210 	orr.w	r2, r2, #16
 8001eaa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 f850 	bl	8005f56 <USB_ReadInterrupts>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ebc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ec0:	d16e      	bne.n	8001fa0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 f856 	bl	8005f7c <USB_ReadDevAllOutEpInterrupt>
 8001ed0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ed2:	e062      	b.n	8001f9a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d057      	beq.n	8001f8e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f004 f87b 	bl	8005fe4 <USB_ReadDevOutEPInterrupt>
 8001eee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00c      	beq.n	8001f14 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f06:	461a      	mov	r2, r3
 8001f08:	2301      	movs	r3, #1
 8001f0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fda4 	bl	8002a5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00c      	beq.n	8001f38 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fde0 	bl	8002af8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2310      	movs	r3, #16
 8001f52:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d008      	beq.n	8001f70 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f86:	461a      	mov	r2, r3
 8001f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f8c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	3301      	adds	r3, #1
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	085b      	lsrs	r3, r3, #1
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d199      	bne.n	8001ed4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f003 ffd6 	bl	8005f56 <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fb4:	f040 808c 	bne.w	80020d0 <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 fff7 	bl	8005fb0 <USB_ReadDevAllInEpInterrupt>
 8001fc2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001fc8:	e07e      	b.n	80020c8 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d073      	beq.n	80020bc <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 f81e 	bl	8006020 <USB_ReadDevInEPInterrupt>
 8001fe4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	43db      	mvns	r3, r3
 800200a:	69f9      	ldr	r1, [r7, #28]
 800200c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002010:	4013      	ands	r3, r2
 8002012:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	4413      	add	r3, r2
 800201c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002020:	461a      	mov	r2, r3
 8002022:	2301      	movs	r3, #1
 8002024:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	b2db      	uxtb	r3, r3
 800202a:	4619      	mov	r1, r3
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f00c ff66 	bl	800eefe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	4413      	add	r3, r2
 8002044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002048:	461a      	mov	r2, r3
 800204a:	2308      	movs	r3, #8
 800204c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	015a      	lsls	r2, r3, #5
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	4413      	add	r3, r2
 8002060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002064:	461a      	mov	r2, r3
 8002066:	2310      	movs	r3, #16
 8002068:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	4413      	add	r3, r2
 800207c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002080:	461a      	mov	r2, r3
 8002082:	2340      	movs	r3, #64	; 0x40
 8002084:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00c      	beq.n	80020aa <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002092:	6a38      	ldr	r0, [r7, #32]
 8002094:	f003 f84c 	bl	8005130 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020a4:	461a      	mov	r2, r3
 80020a6:	2302      	movs	r3, #2
 80020a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fc47 	bl	800294a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	3301      	adds	r3, #1
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f47f af7d 	bne.w	8001fca <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 ff3e 	bl	8005f56 <USB_ReadInterrupts>
 80020da:	4603      	mov	r3, r0
 80020dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020e4:	d122      	bne.n	800212c <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002100:	2b01      	cmp	r3, #1
 8002102:	d108      	bne.n	8002116 <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800210c:	2100      	movs	r1, #0
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fda2 	bl	8002c58 <HAL_PCDEx_LPM_Callback>
 8002114:	e002      	b.n	800211c <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f00c ff5e 	bl	800efd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800212a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f003 ff10 	bl	8005f56 <USB_ReadInterrupts>
 8002136:	4603      	mov	r3, r0
 8002138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800213c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002140:	d112      	bne.n	8002168 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b01      	cmp	r3, #1
 8002150:	d102      	bne.n	8002158 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f00c ff1a 	bl	800ef8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002166:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f003 fef2 	bl	8005f56 <USB_ReadInterrupts>
 8002172:	4603      	mov	r3, r0
 8002174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800217c:	d121      	bne.n	80021c2 <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800218c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d111      	bne.n	80021bc <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	f003 020f 	and.w	r2, r3, #15
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80021b2:	2101      	movs	r1, #1
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fd4f 	bl	8002c58 <HAL_PCDEx_LPM_Callback>
 80021ba:	e002      	b.n	80021c2 <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f00c fee5 	bl	800ef8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 fec5 	bl	8005f56 <USB_ReadInterrupts>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d6:	f040 80b5 	bne.w	8002344 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2110      	movs	r1, #16
 80021f4:	4618      	mov	r0, r3
 80021f6:	f002 ff9b 	bl	8005130 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fe:	e046      	b.n	800228e <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	4413      	add	r3, r2
 8002208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800220c:	461a      	mov	r2, r3
 800220e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002212:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002224:	0151      	lsls	r1, r2, #5
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	440a      	add	r2, r1
 800222a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800222e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002232:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	4413      	add	r3, r2
 800223c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002240:	461a      	mov	r2, r3
 8002242:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002246:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	4413      	add	r3, r2
 8002250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002258:	0151      	lsls	r1, r2, #5
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	440a      	add	r2, r1
 800225e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002262:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002266:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4413      	add	r3, r2
 8002270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002278:	0151      	lsls	r1, r2, #5
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	440a      	add	r2, r1
 800227e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002282:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002286:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	3301      	adds	r3, #1
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002294:	429a      	cmp	r2, r3
 8002296:	d3b3      	bcc.n	8002200 <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80022aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d016      	beq.n	80022e2 <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c4:	f043 030b 	orr.w	r3, r3, #11
 80022c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022da:	f043 030b 	orr.w	r3, r3, #11
 80022de:	6453      	str	r3, [r2, #68]	; 0x44
 80022e0:	e015      	b.n	800230e <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022f4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80022f8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002308:	f043 030b 	orr.w	r3, r3, #11
 800230c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800231c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002320:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800232c:	4619      	mov	r1, r3
 800232e:	4610      	mov	r0, r2
 8002330:	f003 fed6 	bl	80060e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002342:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f003 fe04 	bl	8005f56 <USB_ReadInterrupts>
 800234e:	4603      	mov	r3, r0
 8002350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002358:	d124      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f003 fe9a 	bl	8006098 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f002 ff5a 	bl	8005222 <USB_GetDevSpeed>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681c      	ldr	r4, [r3, #0]
 800237a:	f001 ff1f 	bl	80041bc <HAL_RCC_GetHCLKFreq>
 800237e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	4620      	mov	r0, r4
 800238a:	f002 fc7b 	bl	8004c84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f00c fddd 	bl	800ef4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80023a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 fdd4 	bl	8005f56 <USB_ReadInterrupts>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d10a      	bne.n	80023ce <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f00c fdba 	bl	800ef32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f002 0208 	and.w	r2, r2, #8
 80023cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fdbf 	bl	8005f56 <USB_ReadInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023e2:	d10f      	bne.n	8002404 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f00c fe2c 	bl	800f04c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002402:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fda4 	bl	8005f56 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002418:	d10f      	bne.n	800243a <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	b2db      	uxtb	r3, r3
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f00c fdff 	bl	800f028 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002438:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f003 fd89 	bl	8005f56 <USB_ReadInterrupts>
 8002444:	4603      	mov	r3, r0
 8002446:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d10a      	bne.n	8002466 <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f00c fe0d 	bl	800f070 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002464:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f003 fd73 	bl	8005f56 <USB_ReadInterrupts>
 8002470:	4603      	mov	r3, r0
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b04      	cmp	r3, #4
 8002478:	d115      	bne.n	80024a6 <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f00c fdfd 	bl	800f08c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	e000      	b.n	80024a6 <HAL_PCD_IRQHandler+0x72c>
      return;
 80024a4:	bf00      	nop
    }
  }
}
 80024a6:	3734      	adds	r7, #52	; 0x34
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd90      	pop	{r4, r7, pc}

080024ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_PCD_SetAddress+0x1a>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e013      	b.n	80024ee <HAL_PCD_SetAddress+0x42>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 fcd1 	bl	8005e86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	4608      	mov	r0, r1
 8002500:	4611      	mov	r1, r2
 8002502:	461a      	mov	r2, r3
 8002504:	4603      	mov	r3, r0
 8002506:	70fb      	strb	r3, [r7, #3]
 8002508:	460b      	mov	r3, r1
 800250a:	803b      	strh	r3, [r7, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002518:	2b00      	cmp	r3, #0
 800251a:	da0f      	bge.n	800253c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	f003 020f 	and.w	r2, r3, #15
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	3338      	adds	r3, #56	; 0x38
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	3304      	adds	r3, #4
 8002532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	705a      	strb	r2, [r3, #1]
 800253a:	e00f      	b.n	800255c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	f003 020f 	and.w	r2, r3, #15
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	3304      	adds	r3, #4
 8002554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	b2da      	uxtb	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002568:	883a      	ldrh	r2, [r7, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	78ba      	ldrb	r2, [r7, #2]
 8002572:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d004      	beq.n	8002586 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002586:	78bb      	ldrb	r3, [r7, #2]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d102      	bne.n	8002592 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_PCD_EP_Open+0xaa>
 800259c:	2302      	movs	r3, #2
 800259e:	e00e      	b.n	80025be <HAL_PCD_EP_Open+0xc8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68f9      	ldr	r1, [r7, #12]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 fe56 	bl	8005260 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80025bc:	7afb      	ldrb	r3, [r7, #11]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	da0f      	bge.n	80025fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 020f 	and.w	r2, r3, #15
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	3338      	adds	r3, #56	; 0x38
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	3304      	adds	r3, #4
 80025f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	705a      	strb	r2, [r3, #1]
 80025f8:	e00f      	b.n	800261a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	f003 020f 	and.w	r2, r3, #15
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	3304      	adds	r3, #4
 8002612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	b2da      	uxtb	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_PCD_EP_Close+0x6e>
 8002630:	2302      	movs	r3, #2
 8002632:	e00e      	b.n	8002652 <HAL_PCD_EP_Close+0x8c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68f9      	ldr	r1, [r7, #12]
 8002642:	4618      	mov	r0, r3
 8002644:	f002 fe94 	bl	8005370 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	460b      	mov	r3, r1
 8002668:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800266a:	7afb      	ldrb	r3, [r7, #11]
 800266c:	f003 020f 	and.w	r2, r3, #15
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4413      	add	r3, r2
 8002680:	3304      	adds	r3, #4
 8002682:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2200      	movs	r2, #0
 800269a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800269c:	7afb      	ldrb	r3, [r7, #11]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026a8:	7afb      	ldrb	r3, [r7, #11]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6979      	ldr	r1, [r7, #20]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 f911 	bl	80058e0 <USB_EP0StartXfer>
 80026be:	e005      	b.n	80026cc <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6979      	ldr	r1, [r7, #20]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f002 ff2e 	bl	8005528 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	f003 020f 	and.w	r2, r3, #15
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80026f8:	681b      	ldr	r3, [r3, #0]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	460b      	mov	r3, r1
 8002714:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002716:	7afb      	ldrb	r3, [r7, #11]
 8002718:	f003 020f 	and.w	r2, r3, #15
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	3338      	adds	r3, #56	; 0x38
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4413      	add	r3, r2
 800272a:	3304      	adds	r3, #4
 800272c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2201      	movs	r2, #1
 8002744:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002746:	7afb      	ldrb	r3, [r7, #11]
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	b2da      	uxtb	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002752:	7afb      	ldrb	r3, [r7, #11]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	2b00      	cmp	r3, #0
 800275a:	d106      	bne.n	800276a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6979      	ldr	r1, [r7, #20]
 8002762:	4618      	mov	r0, r3
 8002764:	f003 f8bc 	bl	80058e0 <USB_EP0StartXfer>
 8002768:	e005      	b.n	8002776 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6979      	ldr	r1, [r7, #20]
 8002770:	4618      	mov	r0, r3
 8002772:	f002 fed9 	bl	8005528 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	f003 020f 	and.w	r2, r3, #15
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	d901      	bls.n	800279e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e04e      	b.n	800283c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800279e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da0f      	bge.n	80027c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	f003 020f 	and.w	r2, r3, #15
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	3338      	adds	r3, #56	; 0x38
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	3304      	adds	r3, #4
 80027bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	705a      	strb	r2, [r3, #1]
 80027c4:	e00d      	b.n	80027e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027c6:	78fa      	ldrb	r2, [r7, #3]
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	4413      	add	r3, r2
 80027d8:	3304      	adds	r3, #4
 80027da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_PCD_EP_SetStall+0x82>
 80027fe:	2302      	movs	r3, #2
 8002800:	e01c      	b.n	800283c <HAL_PCD_EP_SetStall+0xbc>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68f9      	ldr	r1, [r7, #12]
 8002810:	4618      	mov	r0, r3
 8002812:	f003 fa15 	bl	8005c40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	2b00      	cmp	r3, #0
 800281e:	d108      	bne.n	8002832 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f003 fc57 	bl	80060e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	f003 020f 	and.w	r2, r3, #15
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	d901      	bls.n	8002862 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e042      	b.n	80028e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002862:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002866:	2b00      	cmp	r3, #0
 8002868:	da0f      	bge.n	800288a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	f003 020f 	and.w	r2, r3, #15
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	3338      	adds	r3, #56	; 0x38
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	3304      	adds	r3, #4
 8002880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	705a      	strb	r2, [r3, #1]
 8002888:	e00f      	b.n	80028aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	f003 020f 	and.w	r2, r3, #15
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_PCD_EP_ClrStall+0x86>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e00e      	b.n	80028e8 <HAL_PCD_EP_ClrStall+0xa4>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68f9      	ldr	r1, [r7, #12]
 80028d8:	4618      	mov	r0, r3
 80028da:	f003 fa1f 	bl	8005d1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_PCD_EP_Flush+0x1a>
 8002906:	2302      	movs	r3, #2
 8002908:	e01b      	b.n	8002942 <HAL_PCD_EP_Flush+0x52>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8002912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002916:	2b00      	cmp	r3, #0
 8002918:	da09      	bge.n	800292e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	4619      	mov	r1, r3
 8002926:	4610      	mov	r0, r2
 8002928:	f002 fc02 	bl	8005130 <USB_FlushTxFifo>
 800292c:	e004      	b.n	8002938 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f002 fc2e 	bl	8005194 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b088      	sub	sp, #32
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	3338      	adds	r3, #56	; 0x38
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	3304      	adds	r3, #4
 8002970:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	429a      	cmp	r2, r3
 800297c:	d901      	bls.n	8002982 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e067      	b.n	8002a52 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	429a      	cmp	r2, r3
 8002996:	d902      	bls.n	800299e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3303      	adds	r3, #3
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029a6:	e026      	b.n	80029f6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d902      	bls.n	80029c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	3303      	adds	r3, #3
 80029c8:	089b      	lsrs	r3, r3, #2
 80029ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68d9      	ldr	r1, [r3, #12]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	6978      	ldr	r0, [r7, #20]
 80029da:	f003 f89f 	bl	8005b1c <USB_WritePacket>

    ep->xfer_buff  += len;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	441a      	add	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	441a      	add	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d809      	bhi.n	8002a20 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d203      	bcs.n	8002a20 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1c3      	bne.n	80029a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d811      	bhi.n	8002a50 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	2201      	movs	r2, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	6939      	ldr	r1, [r7, #16]
 8002a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3720      	adds	r7, #32
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	333c      	adds	r3, #60	; 0x3c
 8002a74:	3304      	adds	r3, #4
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <PCD_EP_OutXfrComplete_int+0x98>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d124      	bne.n	8002adc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aae:	6093      	str	r3, [r2, #8]
 8002ab0:	e01a      	b.n	8002ae8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2320      	movs	r3, #32
 8002acc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f00c f9f7 	bl	800eec8 <HAL_PCD_DataOutStageCallback>
 8002ada:	e005      	b.n	8002ae8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f00c f9f0 	bl	800eec8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	4f54310a 	.word	0x4f54310a

08002af8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	333c      	adds	r3, #60	; 0x3c
 8002b10:	3304      	adds	r3, #4
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4a0c      	ldr	r2, [pc, #48]	; (8002b5c <PCD_EP_OutSetupPacket_int+0x64>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d90e      	bls.n	8002b4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d009      	beq.n	8002b4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b44:	461a      	mov	r2, r3
 8002b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f00c f9a9 	bl	800eea4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	4f54300a 	.word	0x4f54300a

08002b60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	70fb      	strb	r3, [r7, #3]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d107      	bne.n	8002b8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b7e:	883b      	ldrh	r3, [r7, #0]
 8002b80:	0419      	lsls	r1, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b8c:	e028      	b.n	8002be0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	4413      	add	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	e00d      	b.n	8002bbe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	3340      	adds	r3, #64	; 0x40
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	0c1b      	lsrs	r3, r3, #16
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d3ec      	bcc.n	8002ba2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002bc8:	883b      	ldrh	r3, [r7, #0]
 8002bca:	0418      	lsls	r0, r3, #16
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	4302      	orrs	r2, r0
 8002bd8:	3340      	adds	r3, #64	; 0x40
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c42:	f043 0303 	orr.w	r3, r3, #3
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40007000 	.word	0x40007000

08002c90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40007000 	.word	0x40007000

08002cac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cba:	d130      	bne.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cbc:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc8:	d038      	beq.n	8002d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cca:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cd2:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cda:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2232      	movs	r2, #50	; 0x32
 8002ce0:	fb02 f303 	mul.w	r3, r2, r3
 8002ce4:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	0c9b      	lsrs	r3, r3, #18
 8002cec:	3301      	adds	r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf0:	e002      	b.n	8002cf8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d04:	d102      	bne.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f2      	bne.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d18:	d110      	bne.n	8002d3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e00f      	b.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2a:	d007      	beq.n	8002d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d34:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	20000000 	.word	0x20000000
 8002d54:	431bde83 	.word	0x431bde83

08002d58 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d66:	6053      	str	r3, [r2, #4]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40007000 	.word	0x40007000

08002d78 <HAL_PWREx_DisableVddUSB>:
/**
  * @brief Disable VDDUSB supply.
  * @retval None
  */
void HAL_PWREx_DisableVddUSB(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_PWREx_DisableVddUSB+0x1c>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <HAL_PWREx_DisableVddUSB+0x1c>)
 8002d82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d86:	6053      	str	r3, [r2, #4]
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40007000 	.word	0x40007000

08002d98 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002da0:	f7fe f9c0 	bl	8001124 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e063      	b.n	8002e78 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10b      	bne.n	8002dd4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7fd fd93 	bl	80008f0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002dca:	f241 3188 	movw	r1, #5000	; 0x1388
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fad3 	bl	800337a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	021a      	lsls	r2, r3, #8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	2120      	movs	r1, #32
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 facb 	bl	8003396 <QSPI_WaitFlagStateUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002e04:	7afb      	ldrb	r3, [r7, #11]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d131      	bne.n	8002e6e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e14:	f023 0310 	bic.w	r3, r3, #16
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6852      	ldr	r2, [r2, #4]
 8002e1c:	0611      	lsls	r1, r2, #24
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68d2      	ldr	r2, [r2, #12]
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <HAL_QSPI_Init+0xe8>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6912      	ldr	r2, [r2, #16]
 8002e3a:	0411      	lsls	r1, r2, #16
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6952      	ldr	r2, [r2, #20]
 8002e40:	4311      	orrs	r1, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6992      	ldr	r2, [r2, #24]
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002e76:	7afb      	ldrb	r3, [r7, #11]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	ffe0f8fe 	.word	0xffe0f8fe

08002e84 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7fe f948 	bl	8001124 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_QSPI_Command+0x22>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e048      	b.n	8002f38 <HAL_QSPI_Command+0xb4>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d137      	bne.n	8002f2a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2120      	movs	r1, #32
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 fa5f 	bl	8003396 <QSPI_WaitFlagStateUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d125      	bne.n	8002f2e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 fa8c 	bl	8003404 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d115      	bne.n	8002f20 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2201      	movs	r2, #1
 8002efc:	2102      	movs	r1, #2
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 fa49 	bl	8003396 <QSPI_WaitFlagStateUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2202      	movs	r2, #2
 8002f14:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002f1e:	e006      	b.n	8002f2e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002f28:	e001      	b.n	8002f2e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002f50:	f7fe f8e8 	bl	8001124 <HAL_GetTick>
 8002f54:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3320      	adds	r3, #32
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_QSPI_Transmit+0x2e>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e07b      	b.n	8003066 <HAL_QSPI_Transmit+0x126>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d16a      	bne.n	8003058 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d05b      	beq.n	8003046 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2212      	movs	r2, #18
 8002f92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002fc2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002fc4:	e01b      	b.n	8002ffe <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	2104      	movs	r1, #4
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f9e0 	bl	8003396 <QSPI_WaitFlagStateUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002fda:	7ffb      	ldrb	r3, [r7, #31]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d113      	bne.n	8003008 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	781a      	ldrb	r2, [r3, #0]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	1e5a      	subs	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1df      	bne.n	8002fc6 <HAL_QSPI_Transmit+0x86>
 8003006:	e000      	b.n	800300a <HAL_QSPI_Transmit+0xca>
          break;
 8003008:	bf00      	nop
      }

      if (status == HAL_OK)
 800300a:	7ffb      	ldrb	r3, [r7, #31]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d115      	bne.n	800303c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2201      	movs	r2, #1
 8003018:	2102      	movs	r1, #2
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f9bb 	bl	8003396 <QSPI_WaitFlagStateUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003024:	7ffb      	ldrb	r3, [r7, #31]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2202      	movs	r2, #2
 8003030:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f934 	bl	80032a0 <HAL_QSPI_Abort>
 8003038:	4603      	mov	r3, r0
 800303a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003044:	e00a      	b.n	800305c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304a:	f043 0208 	orr.w	r2, r3, #8
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e001      	b.n	800305c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003058:	2302      	movs	r3, #2
 800305a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003064:	7ffb      	ldrb	r3, [r7, #31]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b08a      	sub	sp, #40	; 0x28
 8003072:	af02      	add	r7, sp, #8
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800307e:	f7fe f851 	bl	8001124 <HAL_GetTick>
 8003082:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3320      	adds	r3, #32
 8003092:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_QSPI_Receive+0x36>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e082      	b.n	80031aa <HAL_QSPI_Receive+0x13c>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d171      	bne.n	800319c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d062      	beq.n	800318a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2222      	movs	r2, #34	; 0x22
 80030c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80030fc:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003106:	e01c      	b.n	8003142 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2201      	movs	r2, #1
 8003110:	2106      	movs	r1, #6
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f93f 	bl	8003396 <QSPI_WaitFlagStateUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800311c:	7ffb      	ldrb	r3, [r7, #31]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d114      	bne.n	800314c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	7812      	ldrb	r2, [r2, #0]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	1e5a      	subs	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1de      	bne.n	8003108 <HAL_QSPI_Receive+0x9a>
 800314a:	e000      	b.n	800314e <HAL_QSPI_Receive+0xe0>
          break;
 800314c:	bf00      	nop
      }

      if (status == HAL_OK)
 800314e:	7ffb      	ldrb	r3, [r7, #31]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d115      	bne.n	8003180 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2201      	movs	r2, #1
 800315c:	2102      	movs	r1, #2
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f919 	bl	8003396 <QSPI_WaitFlagStateUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003168:	7ffb      	ldrb	r3, [r7, #31]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d108      	bne.n	8003180 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2202      	movs	r2, #2
 8003174:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f892 	bl	80032a0 <HAL_QSPI_Abort>
 800317c:	4603      	mov	r3, r0
 800317e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003188:	e00a      	b.n	80031a0 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318e:	f043 0208 	orr.w	r2, r3, #8
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	77fb      	strb	r3, [r7, #31]
 800319a:	e001      	b.n	80031a0 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800319c:	2302      	movs	r3, #2
 800319e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80031a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b088      	sub	sp, #32
 80031b6:	af02      	add	r7, sp, #8
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80031c0:	f7fd ffb0 	bl	8001124 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_QSPI_AutoPolling+0x24>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e060      	b.n	8003298 <HAL_QSPI_AutoPolling+0xe6>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d14f      	bne.n	800328a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2242      	movs	r2, #66	; 0x42
 80031f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2200      	movs	r2, #0
 8003200:	2120      	movs	r1, #32
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f8c7 	bl	8003396 <QSPI_WaitFlagStateUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d13d      	bne.n	800328e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6852      	ldr	r2, [r2, #4]
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6892      	ldr	r2, [r2, #8]
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	431a      	orrs	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003248:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f8d3 	bl	8003404 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2201      	movs	r2, #1
 8003266:	2108      	movs	r1, #8
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f894 	bl	8003396 <QSPI_WaitFlagStateUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003272:	7dfb      	ldrb	r3, [r7, #23]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10a      	bne.n	800328e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2208      	movs	r2, #8
 800327e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003288:	e001      	b.n	800328e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800328a:	2302      	movs	r3, #2
 800328c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003296:	7dfb      	ldrb	r3, [r7, #23]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80032ac:	f7fd ff3a 	bl	8001124 <HAL_GetTick>
 80032b0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d056      	beq.n	8003370 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d017      	beq.n	8003308 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0204 	bic.w	r2, r2, #4
 80032e6:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe f88c 	bl	800140a <HAL_DMA_Abort>
 80032f2:	4603      	mov	r3, r0
 80032f4:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	f043 0204 	orr.w	r2, r3, #4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0202 	orr.w	r2, r2, #2
 8003316:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2201      	movs	r2, #1
 8003322:	2102      	movs	r1, #2
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f836 	bl	8003396 <QSPI_WaitFlagStateUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10e      	bne.n	8003352 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2202      	movs	r2, #2
 800333a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2200      	movs	r2, #0
 8003346:	2120      	movs	r1, #32
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f824 	bl	8003396 <QSPI_WaitFlagStateUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10b      	bne.n	8003370 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003366:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	641a      	str	r2, [r3, #64]	; 0x40
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80033a6:	e01a      	b.n	80033de <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d016      	beq.n	80033de <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b0:	f7fd feb8 	bl	8001124 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d302      	bcc.n	80033c6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10b      	bne.n	80033de <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2204      	movs	r2, #4
 80033ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e00e      	b.n	80033fc <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf14      	ite	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	2300      	moveq	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d1d6      	bne.n	80033a8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	2b00      	cmp	r3, #0
 8003416:	d009      	beq.n	800342c <QSPI_Config+0x28>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800341e:	d005      	beq.n	800342c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3a01      	subs	r2, #1
 800342a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80b9 	beq.w	80035a8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d05f      	beq.n	80034fe <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	6892      	ldr	r2, [r2, #8]
 8003446:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d031      	beq.n	80034b4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	431a      	orrs	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345e:	431a      	orrs	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	431a      	orrs	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	049b      	lsls	r3, r3, #18
 800346c:	431a      	orrs	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	431a      	orrs	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	431a      	orrs	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	431a      	orrs	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	431a      	orrs	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	431a      	orrs	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	ea42 0103 	orr.w	r1, r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	430a      	orrs	r2, r1
 800349c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80034a4:	f000 812e 	beq.w	8003704 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	6852      	ldr	r2, [r2, #4]
 80034b0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80034b2:	e127      	b.n	8003704 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	431a      	orrs	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	431a      	orrs	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	049b      	lsls	r3, r3, #18
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	431a      	orrs	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	ea42 0103 	orr.w	r1, r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	615a      	str	r2, [r3, #20]
}
 80034fc:	e102      	b.n	8003704 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d02e      	beq.n	8003564 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	431a      	orrs	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003514:	431a      	orrs	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	431a      	orrs	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	049b      	lsls	r3, r3, #18
 8003522:	431a      	orrs	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	431a      	orrs	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	431a      	orrs	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	431a      	orrs	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	431a      	orrs	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	ea42 0103 	orr.w	r1, r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	430a      	orrs	r2, r1
 800354c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003554:	f000 80d6 	beq.w	8003704 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	6852      	ldr	r2, [r2, #4]
 8003560:	619a      	str	r2, [r3, #24]
}
 8003562:	e0cf      	b.n	8003704 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	431a      	orrs	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003572:	431a      	orrs	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	431a      	orrs	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	049b      	lsls	r3, r3, #18
 8003580:	431a      	orrs	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	431a      	orrs	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	431a      	orrs	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	431a      	orrs	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	ea42 0103 	orr.w	r1, r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	615a      	str	r2, [r3, #20]
}
 80035a6:	e0ad      	b.n	8003704 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d058      	beq.n	8003662 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	6892      	ldr	r2, [r2, #8]
 80035b8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d02d      	beq.n	800361e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	431a      	orrs	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	431a      	orrs	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	049b      	lsls	r3, r3, #18
 80035de:	431a      	orrs	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	ea42 0103 	orr.w	r1, r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	430a      	orrs	r2, r1
 8003608:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003610:	d078      	beq.n	8003704 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	6852      	ldr	r2, [r2, #4]
 800361a:	619a      	str	r2, [r3, #24]
}
 800361c:	e072      	b.n	8003704 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	431a      	orrs	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362c:	431a      	orrs	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	431a      	orrs	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	049b      	lsls	r3, r3, #18
 800363a:	431a      	orrs	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	431a      	orrs	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	431a      	orrs	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	431a      	orrs	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	ea42 0103 	orr.w	r1, r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	430a      	orrs	r2, r1
 800365e:	615a      	str	r2, [r3, #20]
}
 8003660:	e050      	b.n	8003704 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d02a      	beq.n	80036c0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	431a      	orrs	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003678:	431a      	orrs	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	431a      	orrs	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	049b      	lsls	r3, r3, #18
 8003686:	431a      	orrs	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	431a      	orrs	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	431a      	orrs	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	431a      	orrs	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	ea42 0103 	orr.w	r1, r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80036b2:	d027      	beq.n	8003704 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	6852      	ldr	r2, [r2, #4]
 80036bc:	619a      	str	r2, [r3, #24]
}
 80036be:	e021      	b.n	8003704 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01d      	beq.n	8003704 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	431a      	orrs	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	431a      	orrs	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	049b      	lsls	r3, r3, #18
 80036e4:	431a      	orrs	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	ea42 0103 	orr.w	r1, r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	430a      	orrs	r2, r1
 8003702:	615a      	str	r2, [r3, #20]
}
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e3d8      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003722:	4b97      	ldr	r3, [pc, #604]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800372c:	4b94      	ldr	r3, [pc, #592]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80e4 	beq.w	800390c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_RCC_OscConfig+0x4a>
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b0c      	cmp	r3, #12
 800374e:	f040 808b 	bne.w	8003868 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b01      	cmp	r3, #1
 8003756:	f040 8087 	bne.w	8003868 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800375a:	4b89      	ldr	r3, [pc, #548]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_RCC_OscConfig+0x62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e3b0      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1a      	ldr	r2, [r3, #32]
 8003776:	4b82      	ldr	r3, [pc, #520]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d004      	beq.n	800378c <HAL_RCC_OscConfig+0x7c>
 8003782:	4b7f      	ldr	r3, [pc, #508]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800378a:	e005      	b.n	8003798 <HAL_RCC_OscConfig+0x88>
 800378c:	4b7c      	ldr	r3, [pc, #496]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 800378e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003798:	4293      	cmp	r3, r2
 800379a:	d223      	bcs.n	80037e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fd17 	bl	80041d4 <RCC_SetFlashLatencyFromMSIRange>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e391      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b0:	4b73      	ldr	r3, [pc, #460]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a72      	ldr	r2, [pc, #456]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037b6:	f043 0308 	orr.w	r3, r3, #8
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b70      	ldr	r3, [pc, #448]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	496d      	ldr	r1, [pc, #436]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ce:	4b6c      	ldr	r3, [pc, #432]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	4968      	ldr	r1, [pc, #416]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
 80037e2:	e025      	b.n	8003830 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037e4:	4b66      	ldr	r3, [pc, #408]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a65      	ldr	r2, [pc, #404]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037ea:	f043 0308 	orr.w	r3, r3, #8
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b63      	ldr	r3, [pc, #396]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	4960      	ldr	r1, [pc, #384]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003802:	4b5f      	ldr	r3, [pc, #380]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	495b      	ldr	r1, [pc, #364]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003812:	4313      	orrs	r3, r2
 8003814:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fcd7 	bl	80041d4 <RCC_SetFlashLatencyFromMSIRange>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e351      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003830:	f000 fc38 	bl	80040a4 <HAL_RCC_GetSysClockFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b52      	ldr	r3, [pc, #328]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	4950      	ldr	r1, [pc, #320]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	fa22 f303 	lsr.w	r3, r2, r3
 800384c:	4a4e      	ldr	r2, [pc, #312]	; (8003988 <HAL_RCC_OscConfig+0x278>)
 800384e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003850:	4b4e      	ldr	r3, [pc, #312]	; (800398c <HAL_RCC_OscConfig+0x27c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fc15 	bl	8001084 <HAL_InitTick>
 800385a:	4603      	mov	r3, r0
 800385c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d052      	beq.n	800390a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	e335      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d032      	beq.n	80038d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003870:	4b43      	ldr	r3, [pc, #268]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a42      	ldr	r2, [pc, #264]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800387c:	f7fd fc52 	bl	8001124 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003884:	f7fd fc4e 	bl	8001124 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e31e      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003896:	4b3a      	ldr	r3, [pc, #232]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038a2:	4b37      	ldr	r3, [pc, #220]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a36      	ldr	r2, [pc, #216]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038a8:	f043 0308 	orr.w	r3, r3, #8
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	4b34      	ldr	r3, [pc, #208]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	4931      	ldr	r1, [pc, #196]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038c0:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	492c      	ldr	r1, [pc, #176]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
 80038d4:	e01a      	b.n	800390c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038d6:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a29      	ldr	r2, [pc, #164]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038e2:	f7fd fc1f 	bl	8001124 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ea:	f7fd fc1b 	bl	8001124 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e2eb      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038fc:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f0      	bne.n	80038ea <HAL_RCC_OscConfig+0x1da>
 8003908:	e000      	b.n	800390c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800390a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d074      	beq.n	8003a02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b08      	cmp	r3, #8
 800391c:	d005      	beq.n	800392a <HAL_RCC_OscConfig+0x21a>
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b0c      	cmp	r3, #12
 8003922:	d10e      	bne.n	8003942 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2b03      	cmp	r3, #3
 8003928:	d10b      	bne.n	8003942 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392a:	4b15      	ldr	r3, [pc, #84]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d064      	beq.n	8003a00 <HAL_RCC_OscConfig+0x2f0>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d160      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e2c8      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394a:	d106      	bne.n	800395a <HAL_RCC_OscConfig+0x24a>
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	e026      	b.n	80039a8 <HAL_RCC_OscConfig+0x298>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003962:	d115      	bne.n	8003990 <HAL_RCC_OscConfig+0x280>
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a05      	ldr	r2, [pc, #20]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 800396a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a02      	ldr	r2, [pc, #8]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 8003976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	e014      	b.n	80039a8 <HAL_RCC_OscConfig+0x298>
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	0800f828 	.word	0x0800f828
 8003988:	20000000 	.word	0x20000000
 800398c:	20000004 	.word	0x20000004
 8003990:	4ba0      	ldr	r3, [pc, #640]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a9f      	ldr	r2, [pc, #636]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b9d      	ldr	r3, [pc, #628]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a9c      	ldr	r2, [pc, #624]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 80039a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fd fbb8 	bl	8001124 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fd fbb4 	bl	8001124 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e284      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ca:	4b92      	ldr	r3, [pc, #584]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x2a8>
 80039d6:	e014      	b.n	8003a02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd fba4 	bl	8001124 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e0:	f7fd fba0 	bl	8001124 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e270      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039f2:	4b88      	ldr	r3, [pc, #544]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x2d0>
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d060      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_OscConfig+0x310>
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b0c      	cmp	r3, #12
 8003a18:	d119      	bne.n	8003a4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d116      	bne.n	8003a4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a20:	4b7c      	ldr	r3, [pc, #496]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_OscConfig+0x328>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e24d      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a38:	4b76      	ldr	r3, [pc, #472]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	061b      	lsls	r3, r3, #24
 8003a46:	4973      	ldr	r1, [pc, #460]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a4c:	e040      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d023      	beq.n	8003a9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a56:	4b6f      	ldr	r3, [pc, #444]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6e      	ldr	r2, [pc, #440]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fd fb5f 	bl	8001124 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a6a:	f7fd fb5b 	bl	8001124 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e22b      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a7c:	4b65      	ldr	r3, [pc, #404]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a88:	4b62      	ldr	r3, [pc, #392]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	061b      	lsls	r3, r3, #24
 8003a96:	495f      	ldr	r1, [pc, #380]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
 8003a9c:	e018      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9e:	4b5d      	ldr	r3, [pc, #372]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a5c      	ldr	r2, [pc, #368]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7fd fb3b 	bl	8001124 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab2:	f7fd fb37 	bl	8001124 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e207      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac4:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f0      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d03c      	beq.n	8003b56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01c      	beq.n	8003b1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae4:	4b4b      	ldr	r3, [pc, #300]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aea:	4a4a      	ldr	r2, [pc, #296]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fd fb16 	bl	8001124 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afc:	f7fd fb12 	bl	8001124 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e1e2      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b0e:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ef      	beq.n	8003afc <HAL_RCC_OscConfig+0x3ec>
 8003b1c:	e01b      	b.n	8003b56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1e:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b24:	4a3b      	ldr	r2, [pc, #236]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fd faf9 	bl	8001124 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fd faf5 	bl	8001124 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1c5      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b48:	4b32      	ldr	r3, [pc, #200]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ef      	bne.n	8003b36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80a6 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b64:	2300      	movs	r3, #0
 8003b66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b68:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10d      	bne.n	8003b90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b74:	4b27      	ldr	r3, [pc, #156]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	4a26      	ldr	r2, [pc, #152]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b80:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b90:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <HAL_RCC_OscConfig+0x508>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d118      	bne.n	8003bce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b9c:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <HAL_RCC_OscConfig+0x508>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a1d      	ldr	r2, [pc, #116]	; (8003c18 <HAL_RCC_OscConfig+0x508>)
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba8:	f7fd fabc 	bl	8001124 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb0:	f7fd fab8 	bl	8001124 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e188      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc2:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <HAL_RCC_OscConfig+0x508>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d108      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4d8>
 8003bd6:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bdc:	4a0d      	ldr	r2, [pc, #52]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003be6:	e029      	b.n	8003c3c <HAL_RCC_OscConfig+0x52c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d115      	bne.n	8003c1c <HAL_RCC_OscConfig+0x50c>
 8003bf0:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	4a07      	ldr	r2, [pc, #28]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	4a03      	ldr	r2, [pc, #12]	; (8003c14 <HAL_RCC_OscConfig+0x504>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c10:	e014      	b.n	8003c3c <HAL_RCC_OscConfig+0x52c>
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	4b91      	ldr	r3, [pc, #580]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	4a90      	ldr	r2, [pc, #576]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c2c:	4b8d      	ldr	r3, [pc, #564]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	4a8c      	ldr	r2, [pc, #560]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003c34:	f023 0304 	bic.w	r3, r3, #4
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d016      	beq.n	8003c72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c44:	f7fd fa6e 	bl	8001124 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fd fa6a 	bl	8001124 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e138      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c62:	4b80      	ldr	r3, [pc, #512]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0ed      	beq.n	8003c4c <HAL_RCC_OscConfig+0x53c>
 8003c70:	e015      	b.n	8003c9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c72:	f7fd fa57 	bl	8001124 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fd fa53 	bl	8001124 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e121      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c90:	4b74      	ldr	r3, [pc, #464]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1ed      	bne.n	8003c7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca4:	4b6f      	ldr	r3, [pc, #444]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	4a6e      	ldr	r2, [pc, #440]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 810c 	beq.w	8003ed2 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	f040 80d4 	bne.w	8003e6c <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cc4:	4b67      	ldr	r3, [pc, #412]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f003 0203 	and.w	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d130      	bne.n	8003d3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d127      	bne.n	8003d3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d11f      	bne.n	8003d3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d04:	2a07      	cmp	r2, #7
 8003d06:	bf14      	ite	ne
 8003d08:	2201      	movne	r2, #1
 8003d0a:	2200      	moveq	r2, #0
 8003d0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d113      	bne.n	8003d3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d109      	bne.n	8003d3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	3b01      	subs	r3, #1
 8003d34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d06e      	beq.n	8003e18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b0c      	cmp	r3, #12
 8003d3e:	d069      	beq.n	8003e14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d40:	4b48      	ldr	r3, [pc, #288]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d105      	bne.n	8003d58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d4c:	4b45      	ldr	r3, [pc, #276]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0bb      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d5c:	4b41      	ldr	r3, [pc, #260]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a40      	ldr	r2, [pc, #256]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d68:	f7fd f9dc 	bl	8001124 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fd f9d8 	bl	8001124 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e0a8      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d82:	4b38      	ldr	r3, [pc, #224]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d8e:	4b35      	ldr	r3, [pc, #212]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <HAL_RCC_OscConfig+0x758>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d9e:	3a01      	subs	r2, #1
 8003da0:	0112      	lsls	r2, r2, #4
 8003da2:	4311      	orrs	r1, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003da8:	0212      	lsls	r2, r2, #8
 8003daa:	4311      	orrs	r1, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003db0:	0852      	lsrs	r2, r2, #1
 8003db2:	3a01      	subs	r2, #1
 8003db4:	0552      	lsls	r2, r2, #21
 8003db6:	4311      	orrs	r1, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003dbc:	0852      	lsrs	r2, r2, #1
 8003dbe:	3a01      	subs	r2, #1
 8003dc0:	0652      	lsls	r2, r2, #25
 8003dc2:	4311      	orrs	r1, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dc8:	0912      	lsrs	r2, r2, #4
 8003dca:	0452      	lsls	r2, r2, #17
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	4925      	ldr	r1, [pc, #148]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dd4:	4b23      	ldr	r3, [pc, #140]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a22      	ldr	r2, [pc, #136]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003de0:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dec:	f7fd f99a 	bl	8001124 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fd f996 	bl	8001124 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e066      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e06:	4b17      	ldr	r3, [pc, #92]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e12:	e05e      	b.n	8003ed2 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e05d      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d156      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a0e      	ldr	r2, [pc, #56]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a0b      	ldr	r2, [pc, #44]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e3c:	f7fd f972 	bl	8001124 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fd f96e 	bl	8001124 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e03e      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e56:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_RCC_OscConfig+0x754>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x734>
 8003e62:	e036      	b.n	8003ed2 <HAL_RCC_OscConfig+0x7c2>
 8003e64:	40021000 	.word	0x40021000
 8003e68:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b0c      	cmp	r3, #12
 8003e70:	d02d      	beq.n	8003ece <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e72:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <HAL_RCC_OscConfig+0x7cc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a19      	ldr	r2, [pc, #100]	; (8003edc <HAL_RCC_OscConfig+0x7cc>)
 8003e78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e7c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <HAL_RCC_OscConfig+0x7cc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d105      	bne.n	8003e96 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <HAL_RCC_OscConfig+0x7cc>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	4a13      	ldr	r2, [pc, #76]	; (8003edc <HAL_RCC_OscConfig+0x7cc>)
 8003e90:	f023 0303 	bic.w	r3, r3, #3
 8003e94:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <HAL_RCC_OscConfig+0x7cc>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	4a10      	ldr	r2, [pc, #64]	; (8003edc <HAL_RCC_OscConfig+0x7cc>)
 8003e9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fd f93d 	bl	8001124 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fd f939 	bl	8001124 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e009      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <HAL_RCC_OscConfig+0x7cc>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCC_OscConfig+0x79e>
 8003ecc:	e001      	b.n	8003ed2 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40021000 	.word	0x40021000

08003ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0c8      	b.n	8004086 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef4:	4b66      	ldr	r3, [pc, #408]	; (8004090 <HAL_RCC_ClockConfig+0x1b0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d910      	bls.n	8003f24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f02:	4b63      	ldr	r3, [pc, #396]	; (8004090 <HAL_RCC_ClockConfig+0x1b0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 0207 	bic.w	r2, r3, #7
 8003f0a:	4961      	ldr	r1, [pc, #388]	; (8004090 <HAL_RCC_ClockConfig+0x1b0>)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f12:	4b5f      	ldr	r3, [pc, #380]	; (8004090 <HAL_RCC_ClockConfig+0x1b0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0b0      	b.n	8004086 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d04c      	beq.n	8003fca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d107      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f38:	4b56      	ldr	r3, [pc, #344]	; (8004094 <HAL_RCC_ClockConfig+0x1b4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d121      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e09e      	b.n	8004086 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d107      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f50:	4b50      	ldr	r3, [pc, #320]	; (8004094 <HAL_RCC_ClockConfig+0x1b4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d115      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e092      	b.n	8004086 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d107      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f68:	4b4a      	ldr	r3, [pc, #296]	; (8004094 <HAL_RCC_ClockConfig+0x1b4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d109      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e086      	b.n	8004086 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f78:	4b46      	ldr	r3, [pc, #280]	; (8004094 <HAL_RCC_ClockConfig+0x1b4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e07e      	b.n	8004086 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f88:	4b42      	ldr	r3, [pc, #264]	; (8004094 <HAL_RCC_ClockConfig+0x1b4>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f023 0203 	bic.w	r2, r3, #3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	493f      	ldr	r1, [pc, #252]	; (8004094 <HAL_RCC_ClockConfig+0x1b4>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9a:	f7fd f8c3 	bl	8001124 <HAL_GetTick>
 8003f9e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa0:	e00a      	b.n	8003fb8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa2:	f7fd f8bf 	bl	8001124 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e066      	b.n	8004086 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb8:	4b36      	ldr	r3, [pc, #216]	; (8004094 <HAL_RCC_ClockConfig+0x1b4>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 020c 	and.w	r2, r3, #12
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d1eb      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <HAL_RCC_ClockConfig+0x1b4>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	492c      	ldr	r1, [pc, #176]	; (8004094 <HAL_RCC_ClockConfig+0x1b4>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b29      	ldr	r3, [pc, #164]	; (8004090 <HAL_RCC_ClockConfig+0x1b0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d210      	bcs.n	8004018 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b26      	ldr	r3, [pc, #152]	; (8004090 <HAL_RCC_ClockConfig+0x1b0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 0207 	bic.w	r2, r3, #7
 8003ffe:	4924      	ldr	r1, [pc, #144]	; (8004090 <HAL_RCC_ClockConfig+0x1b0>)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <HAL_RCC_ClockConfig+0x1b0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e036      	b.n	8004086 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004024:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <HAL_RCC_ClockConfig+0x1b4>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4918      	ldr	r1, [pc, #96]	; (8004094 <HAL_RCC_ClockConfig+0x1b4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d009      	beq.n	8004056 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004042:	4b14      	ldr	r3, [pc, #80]	; (8004094 <HAL_RCC_ClockConfig+0x1b4>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4910      	ldr	r1, [pc, #64]	; (8004094 <HAL_RCC_ClockConfig+0x1b4>)
 8004052:	4313      	orrs	r3, r2
 8004054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004056:	f000 f825 	bl	80040a4 <HAL_RCC_GetSysClockFreq>
 800405a:	4602      	mov	r2, r0
 800405c:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <HAL_RCC_ClockConfig+0x1b4>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	490c      	ldr	r1, [pc, #48]	; (8004098 <HAL_RCC_ClockConfig+0x1b8>)
 8004068:	5ccb      	ldrb	r3, [r1, r3]
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	4a0a      	ldr	r2, [pc, #40]	; (800409c <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004076:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fd f802 	bl	8001084 <HAL_InitTick>
 8004080:	4603      	mov	r3, r0
 8004082:	72fb      	strb	r3, [r7, #11]

  return status;
 8004084:	7afb      	ldrb	r3, [r7, #11]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40022000 	.word	0x40022000
 8004094:	40021000 	.word	0x40021000
 8004098:	0800f828 	.word	0x0800f828
 800409c:	20000000 	.word	0x20000000
 80040a0:	20000004 	.word	0x20000004

080040a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	2300      	movs	r3, #0
 80040b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040b2:	4b3e      	ldr	r3, [pc, #248]	; (80041ac <HAL_RCC_GetSysClockFreq+0x108>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040bc:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <HAL_RCC_GetSysClockFreq+0x108>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <HAL_RCC_GetSysClockFreq+0x34>
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b0c      	cmp	r3, #12
 80040d0:	d121      	bne.n	8004116 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d11e      	bne.n	8004116 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040d8:	4b34      	ldr	r3, [pc, #208]	; (80041ac <HAL_RCC_GetSysClockFreq+0x108>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d107      	bne.n	80040f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040e4:	4b31      	ldr	r3, [pc, #196]	; (80041ac <HAL_RCC_GetSysClockFreq+0x108>)
 80040e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	e005      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040f4:	4b2d      	ldr	r3, [pc, #180]	; (80041ac <HAL_RCC_GetSysClockFreq+0x108>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	091b      	lsrs	r3, r3, #4
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004100:	4a2b      	ldr	r2, [pc, #172]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004108:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10d      	bne.n	800412c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004114:	e00a      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b04      	cmp	r3, #4
 800411a:	d102      	bne.n	8004122 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800411c:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	e004      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b08      	cmp	r3, #8
 8004126:	d101      	bne.n	800412c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004128:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800412a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2b0c      	cmp	r3, #12
 8004130:	d134      	bne.n	800419c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004132:	4b1e      	ldr	r3, [pc, #120]	; (80041ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d003      	beq.n	800414a <HAL_RCC_GetSysClockFreq+0xa6>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d003      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0xac>
 8004148:	e005      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800414a:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800414c:	617b      	str	r3, [r7, #20]
      break;
 800414e:	e005      	b.n	800415c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004150:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004152:	617b      	str	r3, [r7, #20]
      break;
 8004154:	e002      	b.n	800415c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	617b      	str	r3, [r7, #20]
      break;
 800415a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800415c:	4b13      	ldr	r3, [pc, #76]	; (80041ac <HAL_RCC_GetSysClockFreq+0x108>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	3301      	adds	r3, #1
 8004168:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800416a:	4b10      	ldr	r3, [pc, #64]	; (80041ac <HAL_RCC_GetSysClockFreq+0x108>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	0a1b      	lsrs	r3, r3, #8
 8004170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	fb03 f202 	mul.w	r2, r3, r2
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	0e5b      	lsrs	r3, r3, #25
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	3301      	adds	r3, #1
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	fbb2 f3f3 	udiv	r3, r2, r3
 800419a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800419c:	69bb      	ldr	r3, [r7, #24]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3724      	adds	r7, #36	; 0x24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000
 80041b0:	0800f838 	.word	0x0800f838
 80041b4:	00f42400 	.word	0x00f42400
 80041b8:	007a1200 	.word	0x007a1200

080041bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000000 	.word	0x20000000

080041d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041e0:	4b2a      	ldr	r3, [pc, #168]	; (800428c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041ec:	f7fe fd50 	bl	8002c90 <HAL_PWREx_GetVoltageRange>
 80041f0:	6178      	str	r0, [r7, #20]
 80041f2:	e014      	b.n	800421e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041f4:	4b25      	ldr	r3, [pc, #148]	; (800428c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f8:	4a24      	ldr	r2, [pc, #144]	; (800428c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004200:	4b22      	ldr	r3, [pc, #136]	; (800428c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800420c:	f7fe fd40 	bl	8002c90 <HAL_PWREx_GetVoltageRange>
 8004210:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004212:	4b1e      	ldr	r3, [pc, #120]	; (800428c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	4a1d      	ldr	r2, [pc, #116]	; (800428c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004224:	d10b      	bne.n	800423e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b80      	cmp	r3, #128	; 0x80
 800422a:	d919      	bls.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2ba0      	cmp	r3, #160	; 0xa0
 8004230:	d902      	bls.n	8004238 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004232:	2302      	movs	r3, #2
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	e013      	b.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004238:	2301      	movs	r3, #1
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	e010      	b.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	d902      	bls.n	800424a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004244:	2303      	movs	r3, #3
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	e00a      	b.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b80      	cmp	r3, #128	; 0x80
 800424e:	d102      	bne.n	8004256 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004250:	2302      	movs	r3, #2
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	e004      	b.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b70      	cmp	r3, #112	; 0x70
 800425a:	d101      	bne.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800425c:	2301      	movs	r3, #1
 800425e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f023 0207 	bic.w	r2, r3, #7
 8004268:	4909      	ldr	r1, [pc, #36]	; (8004290 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	429a      	cmp	r2, r3
 800427c:	d001      	beq.n	8004282 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40021000 	.word	0x40021000
 8004290:	40022000 	.word	0x40022000

08004294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800429c:	2300      	movs	r3, #0
 800429e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042a0:	2300      	movs	r3, #0
 80042a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d041      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042b8:	d02a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80042ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042be:	d824      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042c4:	d008      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042ca:	d81e      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d4:	d010      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042d6:	e018      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042d8:	4b86      	ldr	r3, [pc, #536]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4a85      	ldr	r2, [pc, #532]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042e4:	e015      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3304      	adds	r3, #4
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 facb 	bl	8004888 <RCCEx_PLLSAI1_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042f6:	e00c      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3320      	adds	r3, #32
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fbb6 	bl	8004a70 <RCCEx_PLLSAI2_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004308:	e003      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	74fb      	strb	r3, [r7, #19]
      break;
 800430e:	e000      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004312:	7cfb      	ldrb	r3, [r7, #19]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10b      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004318:	4b76      	ldr	r3, [pc, #472]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004326:	4973      	ldr	r1, [pc, #460]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800432e:	e001      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004330:	7cfb      	ldrb	r3, [r7, #19]
 8004332:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d041      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004344:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004348:	d02a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800434a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800434e:	d824      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004354:	d008      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800435a:	d81e      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004364:	d010      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004366:	e018      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004368:	4b62      	ldr	r3, [pc, #392]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4a61      	ldr	r2, [pc, #388]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004372:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004374:	e015      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3304      	adds	r3, #4
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fa83 	bl	8004888 <RCCEx_PLLSAI1_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004386:	e00c      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3320      	adds	r3, #32
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fb6e 	bl	8004a70 <RCCEx_PLLSAI2_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004398:	e003      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	74fb      	strb	r3, [r7, #19]
      break;
 800439e:	e000      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80043a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a2:	7cfb      	ldrb	r3, [r7, #19]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043a8:	4b52      	ldr	r3, [pc, #328]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043b6:	494f      	ldr	r1, [pc, #316]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043be:	e001      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	7cfb      	ldrb	r3, [r7, #19]
 80043c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80a0 	beq.w	8004512 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043d6:	4b47      	ldr	r3, [pc, #284]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043e6:	2300      	movs	r3, #0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00d      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ec:	4b41      	ldr	r3, [pc, #260]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	4a40      	ldr	r2, [pc, #256]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f6:	6593      	str	r3, [r2, #88]	; 0x58
 80043f8:	4b3e      	ldr	r3, [pc, #248]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004400:	60bb      	str	r3, [r7, #8]
 8004402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004404:	2301      	movs	r3, #1
 8004406:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004408:	4b3b      	ldr	r3, [pc, #236]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a3a      	ldr	r2, [pc, #232]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800440e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004414:	f7fc fe86 	bl	8001124 <HAL_GetTick>
 8004418:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800441a:	e009      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441c:	f7fc fe82 	bl	8001124 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d902      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	74fb      	strb	r3, [r7, #19]
        break;
 800442e:	e005      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004430:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0ef      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d15c      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004442:	4b2c      	ldr	r3, [pc, #176]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01f      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	429a      	cmp	r2, r3
 800445e:	d019      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004460:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800446a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800446c:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	4a20      	ldr	r2, [pc, #128]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800447c:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	4a1c      	ldr	r2, [pc, #112]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800448c:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d016      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fc fe41 	bl	8001124 <HAL_GetTick>
 80044a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a4:	e00b      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a6:	f7fc fe3d 	bl	8001124 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d902      	bls.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	74fb      	strb	r3, [r7, #19]
            break;
 80044bc:	e006      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044be:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0ec      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10c      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e2:	4904      	ldr	r1, [pc, #16]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044ea:	e009      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	74bb      	strb	r3, [r7, #18]
 80044f0:	e006      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004500:	7c7b      	ldrb	r3, [r7, #17]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d105      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004506:	4b9e      	ldr	r3, [pc, #632]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450a:	4a9d      	ldr	r2, [pc, #628]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004510:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800451e:	4b98      	ldr	r3, [pc, #608]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004524:	f023 0203 	bic.w	r2, r3, #3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	4994      	ldr	r1, [pc, #592]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004540:	4b8f      	ldr	r3, [pc, #572]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	f023 020c 	bic.w	r2, r3, #12
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454e:	498c      	ldr	r1, [pc, #560]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004562:	4b87      	ldr	r3, [pc, #540]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004568:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	4983      	ldr	r1, [pc, #524]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004584:	4b7e      	ldr	r3, [pc, #504]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	497b      	ldr	r1, [pc, #492]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045a6:	4b76      	ldr	r3, [pc, #472]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b4:	4972      	ldr	r1, [pc, #456]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045c8:	4b6d      	ldr	r3, [pc, #436]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d6:	496a      	ldr	r1, [pc, #424]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045ea:	4b65      	ldr	r3, [pc, #404]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f8:	4961      	ldr	r1, [pc, #388]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800460c:	4b5c      	ldr	r3, [pc, #368]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004612:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461a:	4959      	ldr	r1, [pc, #356]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800462e:	4b54      	ldr	r3, [pc, #336]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463c:	4950      	ldr	r1, [pc, #320]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004650:	4b4b      	ldr	r3, [pc, #300]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465e:	4948      	ldr	r1, [pc, #288]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004672:	4b43      	ldr	r3, [pc, #268]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004680:	493f      	ldr	r1, [pc, #252]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d028      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004694:	4b3a      	ldr	r3, [pc, #232]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046a2:	4937      	ldr	r1, [pc, #220]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046b2:	d106      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046b4:	4b32      	ldr	r3, [pc, #200]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4a31      	ldr	r2, [pc, #196]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046be:	60d3      	str	r3, [r2, #12]
 80046c0:	e011      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046ca:	d10c      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	2101      	movs	r1, #1
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 f8d8 	bl	8004888 <RCCEx_PLLSAI1_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80046e2:	7cfb      	ldrb	r3, [r7, #19]
 80046e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d028      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046f2:	4b23      	ldr	r3, [pc, #140]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	491f      	ldr	r1, [pc, #124]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004710:	d106      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004712:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	4a1a      	ldr	r2, [pc, #104]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800471c:	60d3      	str	r3, [r2, #12]
 800471e:	e011      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004724:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004728:	d10c      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3304      	adds	r3, #4
 800472e:	2101      	movs	r1, #1
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f8a9 	bl	8004888 <RCCEx_PLLSAI1_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d02b      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004756:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475e:	4908      	ldr	r1, [pc, #32]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800476e:	d109      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004770:	4b03      	ldr	r3, [pc, #12]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a02      	ldr	r2, [pc, #8]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800477a:	60d3      	str	r3, [r2, #12]
 800477c:	e014      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004788:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800478c:	d10c      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3304      	adds	r3, #4
 8004792:	2101      	movs	r1, #1
 8004794:	4618      	mov	r0, r3
 8004796:	f000 f877 	bl	8004888 <RCCEx_PLLSAI1_Config>
 800479a:	4603      	mov	r3, r0
 800479c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800479e:	7cfb      	ldrb	r3, [r7, #19]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80047a4:	7cfb      	ldrb	r3, [r7, #19]
 80047a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d02f      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047b4:	4b2b      	ldr	r3, [pc, #172]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c2:	4928      	ldr	r1, [pc, #160]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047d2:	d10d      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	2102      	movs	r1, #2
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f854 	bl	8004888 <RCCEx_PLLSAI1_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d014      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047ea:	7cfb      	ldrb	r3, [r7, #19]
 80047ec:	74bb      	strb	r3, [r7, #18]
 80047ee:	e011      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047f8:	d10c      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3320      	adds	r3, #32
 80047fe:	2102      	movs	r1, #2
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f935 	bl	8004a70 <RCCEx_PLLSAI2_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004820:	4b10      	ldr	r3, [pc, #64]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004826:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482e:	490d      	ldr	r1, [pc, #52]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00b      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004842:	4b08      	ldr	r3, [pc, #32]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004848:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004852:	4904      	ldr	r1, [pc, #16]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800485a:	7cbb      	ldrb	r3, [r7, #18]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000

08004868 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a04      	ldr	r2, [pc, #16]	; (8004884 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004872:	f043 0304 	orr.w	r3, r3, #4
 8004876:	6013      	str	r3, [r2, #0]
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000

08004888 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004896:	4b75      	ldr	r3, [pc, #468]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d018      	beq.n	80048d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048a2:	4b72      	ldr	r3, [pc, #456]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0203 	and.w	r2, r3, #3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d10d      	bne.n	80048ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
       ||
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048ba:	4b6c      	ldr	r3, [pc, #432]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	091b      	lsrs	r3, r3, #4
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
       ||
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d047      	beq.n	800495e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	73fb      	strb	r3, [r7, #15]
 80048d2:	e044      	b.n	800495e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d018      	beq.n	800490e <RCCEx_PLLSAI1_Config+0x86>
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d825      	bhi.n	800492c <RCCEx_PLLSAI1_Config+0xa4>
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d002      	beq.n	80048ea <RCCEx_PLLSAI1_Config+0x62>
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d009      	beq.n	80048fc <RCCEx_PLLSAI1_Config+0x74>
 80048e8:	e020      	b.n	800492c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048ea:	4b60      	ldr	r3, [pc, #384]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d11d      	bne.n	8004932 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048fa:	e01a      	b.n	8004932 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048fc:	4b5b      	ldr	r3, [pc, #364]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004904:	2b00      	cmp	r3, #0
 8004906:	d116      	bne.n	8004936 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800490c:	e013      	b.n	8004936 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800490e:	4b57      	ldr	r3, [pc, #348]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10f      	bne.n	800493a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800491a:	4b54      	ldr	r3, [pc, #336]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800492a:	e006      	b.n	800493a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
      break;
 8004930:	e004      	b.n	800493c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004932:	bf00      	nop
 8004934:	e002      	b.n	800493c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004936:	bf00      	nop
 8004938:	e000      	b.n	800493c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800493a:	bf00      	nop
    }

    if(status == HAL_OK)
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10d      	bne.n	800495e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004942:	4b4a      	ldr	r3, [pc, #296]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6819      	ldr	r1, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	3b01      	subs	r3, #1
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	430b      	orrs	r3, r1
 8004958:	4944      	ldr	r1, [pc, #272]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800495a:	4313      	orrs	r3, r2
 800495c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d17d      	bne.n	8004a60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004964:	4b41      	ldr	r3, [pc, #260]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a40      	ldr	r2, [pc, #256]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800496a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800496e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004970:	f7fc fbd8 	bl	8001124 <HAL_GetTick>
 8004974:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004976:	e009      	b.n	800498c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004978:	f7fc fbd4 	bl	8001124 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d902      	bls.n	800498c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	73fb      	strb	r3, [r7, #15]
        break;
 800498a:	e005      	b.n	8004998 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800498c:	4b37      	ldr	r3, [pc, #220]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1ef      	bne.n	8004978 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d160      	bne.n	8004a60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d111      	bne.n	80049c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049a4:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6892      	ldr	r2, [r2, #8]
 80049b4:	0211      	lsls	r1, r2, #8
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	68d2      	ldr	r2, [r2, #12]
 80049ba:	0912      	lsrs	r2, r2, #4
 80049bc:	0452      	lsls	r2, r2, #17
 80049be:	430a      	orrs	r2, r1
 80049c0:	492a      	ldr	r1, [pc, #168]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	610b      	str	r3, [r1, #16]
 80049c6:	e027      	b.n	8004a18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d112      	bne.n	80049f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049ce:	4b27      	ldr	r3, [pc, #156]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6892      	ldr	r2, [r2, #8]
 80049de:	0211      	lsls	r1, r2, #8
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6912      	ldr	r2, [r2, #16]
 80049e4:	0852      	lsrs	r2, r2, #1
 80049e6:	3a01      	subs	r2, #1
 80049e8:	0552      	lsls	r2, r2, #21
 80049ea:	430a      	orrs	r2, r1
 80049ec:	491f      	ldr	r1, [pc, #124]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	610b      	str	r3, [r1, #16]
 80049f2:	e011      	b.n	8004a18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049f4:	4b1d      	ldr	r3, [pc, #116]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6892      	ldr	r2, [r2, #8]
 8004a04:	0211      	lsls	r1, r2, #8
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6952      	ldr	r2, [r2, #20]
 8004a0a:	0852      	lsrs	r2, r2, #1
 8004a0c:	3a01      	subs	r2, #1
 8004a0e:	0652      	lsls	r2, r2, #25
 8004a10:	430a      	orrs	r2, r1
 8004a12:	4916      	ldr	r1, [pc, #88]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a18:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a24:	f7fc fb7e 	bl	8001124 <HAL_GetTick>
 8004a28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a2a:	e009      	b.n	8004a40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a2c:	f7fc fb7a 	bl	8001124 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d902      	bls.n	8004a40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a3e:	e005      	b.n	8004a4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a40:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0ef      	beq.n	8004a2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	4904      	ldr	r1, [pc, #16]	; (8004a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40021000 	.word	0x40021000

08004a70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a7e:	4b6a      	ldr	r3, [pc, #424]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d018      	beq.n	8004abc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a8a:	4b67      	ldr	r3, [pc, #412]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0203 	and.w	r2, r3, #3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d10d      	bne.n	8004ab6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004aa2:	4b61      	ldr	r3, [pc, #388]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d047      	beq.n	8004b46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
 8004aba:	e044      	b.n	8004b46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d018      	beq.n	8004af6 <RCCEx_PLLSAI2_Config+0x86>
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d825      	bhi.n	8004b14 <RCCEx_PLLSAI2_Config+0xa4>
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d002      	beq.n	8004ad2 <RCCEx_PLLSAI2_Config+0x62>
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d009      	beq.n	8004ae4 <RCCEx_PLLSAI2_Config+0x74>
 8004ad0:	e020      	b.n	8004b14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ad2:	4b55      	ldr	r3, [pc, #340]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d11d      	bne.n	8004b1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ae2:	e01a      	b.n	8004b1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ae4:	4b50      	ldr	r3, [pc, #320]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d116      	bne.n	8004b1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af4:	e013      	b.n	8004b1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004af6:	4b4c      	ldr	r3, [pc, #304]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10f      	bne.n	8004b22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b02:	4b49      	ldr	r3, [pc, #292]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d109      	bne.n	8004b22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b12:	e006      	b.n	8004b22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
      break;
 8004b18:	e004      	b.n	8004b24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b1a:	bf00      	nop
 8004b1c:	e002      	b.n	8004b24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b1e:	bf00      	nop
 8004b20:	e000      	b.n	8004b24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b22:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10d      	bne.n	8004b46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b2a:	4b3f      	ldr	r3, [pc, #252]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6819      	ldr	r1, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	4939      	ldr	r1, [pc, #228]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d167      	bne.n	8004c1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b4c:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a35      	ldr	r2, [pc, #212]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b58:	f7fc fae4 	bl	8001124 <HAL_GetTick>
 8004b5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b5e:	e009      	b.n	8004b74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b60:	f7fc fae0 	bl	8001124 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d902      	bls.n	8004b74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	73fb      	strb	r3, [r7, #15]
        break;
 8004b72:	e005      	b.n	8004b80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b74:	4b2c      	ldr	r3, [pc, #176]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1ef      	bne.n	8004b60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d14a      	bne.n	8004c1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d111      	bne.n	8004bb0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b8c:	4b26      	ldr	r3, [pc, #152]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6892      	ldr	r2, [r2, #8]
 8004b9c:	0211      	lsls	r1, r2, #8
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	68d2      	ldr	r2, [r2, #12]
 8004ba2:	0912      	lsrs	r2, r2, #4
 8004ba4:	0452      	lsls	r2, r2, #17
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	491f      	ldr	r1, [pc, #124]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	614b      	str	r3, [r1, #20]
 8004bae:	e011      	b.n	8004bd4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bb0:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6892      	ldr	r2, [r2, #8]
 8004bc0:	0211      	lsls	r1, r2, #8
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6912      	ldr	r2, [r2, #16]
 8004bc6:	0852      	lsrs	r2, r2, #1
 8004bc8:	3a01      	subs	r2, #1
 8004bca:	0652      	lsls	r2, r2, #25
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	4916      	ldr	r1, [pc, #88]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004bd4:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7fc faa0 	bl	8001124 <HAL_GetTick>
 8004be4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004be6:	e009      	b.n	8004bfc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004be8:	f7fc fa9c 	bl	8001124 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d902      	bls.n	8004bfc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	73fb      	strb	r3, [r7, #15]
          break;
 8004bfa:	e005      	b.n	8004c08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0ef      	beq.n	8004be8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4904      	ldr	r1, [pc, #16]	; (8004c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000

08004c2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	f107 001c 	add.w	r0, r7, #28
 8004c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f001 fa90 	bl	8006170 <USB_CoreReset>
 8004c50:	4603      	mov	r3, r0
 8004c52:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
 8004c66:	e005      	b.n	8004c74 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c80:	b004      	add	sp, #16
 8004c82:	4770      	bx	lr

08004c84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d165      	bne.n	8004d64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4a3e      	ldr	r2, [pc, #248]	; (8004d94 <USB_SetTurnaroundTime+0x110>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d906      	bls.n	8004cae <USB_SetTurnaroundTime+0x2a>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4a3d      	ldr	r2, [pc, #244]	; (8004d98 <USB_SetTurnaroundTime+0x114>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d202      	bcs.n	8004cae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ca8:	230f      	movs	r3, #15
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e05c      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4a39      	ldr	r2, [pc, #228]	; (8004d98 <USB_SetTurnaroundTime+0x114>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d306      	bcc.n	8004cc4 <USB_SetTurnaroundTime+0x40>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4a38      	ldr	r2, [pc, #224]	; (8004d9c <USB_SetTurnaroundTime+0x118>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d202      	bcs.n	8004cc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004cbe:	230e      	movs	r3, #14
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e051      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4a35      	ldr	r2, [pc, #212]	; (8004d9c <USB_SetTurnaroundTime+0x118>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d306      	bcc.n	8004cda <USB_SetTurnaroundTime+0x56>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4a34      	ldr	r2, [pc, #208]	; (8004da0 <USB_SetTurnaroundTime+0x11c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d202      	bcs.n	8004cda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004cd4:	230d      	movs	r3, #13
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e046      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4a30      	ldr	r2, [pc, #192]	; (8004da0 <USB_SetTurnaroundTime+0x11c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d306      	bcc.n	8004cf0 <USB_SetTurnaroundTime+0x6c>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4a2f      	ldr	r2, [pc, #188]	; (8004da4 <USB_SetTurnaroundTime+0x120>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d802      	bhi.n	8004cf0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004cea:	230c      	movs	r3, #12
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	e03b      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4a2c      	ldr	r2, [pc, #176]	; (8004da4 <USB_SetTurnaroundTime+0x120>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d906      	bls.n	8004d06 <USB_SetTurnaroundTime+0x82>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4a2b      	ldr	r2, [pc, #172]	; (8004da8 <USB_SetTurnaroundTime+0x124>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d802      	bhi.n	8004d06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d00:	230b      	movs	r3, #11
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e030      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4a27      	ldr	r2, [pc, #156]	; (8004da8 <USB_SetTurnaroundTime+0x124>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d906      	bls.n	8004d1c <USB_SetTurnaroundTime+0x98>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4a26      	ldr	r2, [pc, #152]	; (8004dac <USB_SetTurnaroundTime+0x128>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d802      	bhi.n	8004d1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d16:	230a      	movs	r3, #10
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	e025      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4a23      	ldr	r2, [pc, #140]	; (8004dac <USB_SetTurnaroundTime+0x128>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d906      	bls.n	8004d32 <USB_SetTurnaroundTime+0xae>
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4a22      	ldr	r2, [pc, #136]	; (8004db0 <USB_SetTurnaroundTime+0x12c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d202      	bcs.n	8004d32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d2c:	2309      	movs	r3, #9
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	e01a      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4a1e      	ldr	r2, [pc, #120]	; (8004db0 <USB_SetTurnaroundTime+0x12c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d306      	bcc.n	8004d48 <USB_SetTurnaroundTime+0xc4>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4a1d      	ldr	r2, [pc, #116]	; (8004db4 <USB_SetTurnaroundTime+0x130>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d802      	bhi.n	8004d48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d42:	2308      	movs	r3, #8
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	e00f      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4a1a      	ldr	r2, [pc, #104]	; (8004db4 <USB_SetTurnaroundTime+0x130>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d906      	bls.n	8004d5e <USB_SetTurnaroundTime+0xda>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <USB_SetTurnaroundTime+0x134>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d202      	bcs.n	8004d5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d58:	2307      	movs	r3, #7
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	e004      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d5e:	2306      	movs	r3, #6
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	e001      	b.n	8004d68 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d64:	2309      	movs	r3, #9
 8004d66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	029b      	lsls	r3, r3, #10
 8004d7c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004d80:	431a      	orrs	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	00d8acbf 	.word	0x00d8acbf
 8004d98:	00e4e1c0 	.word	0x00e4e1c0
 8004d9c:	00f42400 	.word	0x00f42400
 8004da0:	01067380 	.word	0x01067380
 8004da4:	011a499f 	.word	0x011a499f
 8004da8:	01312cff 	.word	0x01312cff
 8004dac:	014ca43f 	.word	0x014ca43f
 8004db0:	016e3600 	.word	0x016e3600
 8004db4:	01a6ab1f 	.word	0x01a6ab1f
 8004db8:	01e84800 	.word	0x01e84800

08004dbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f043 0201 	orr.w	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f023 0201 	bic.w	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d115      	bne.n	8004e4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e2e:	2001      	movs	r0, #1
 8004e30:	f7fc f984 	bl	800113c <HAL_Delay>
      ms++;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3301      	adds	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 f91e 	bl	800607c <USB_GetMode>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d01e      	beq.n	8004e84 <USB_SetCurrentMode+0x84>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b31      	cmp	r3, #49	; 0x31
 8004e4a:	d9f0      	bls.n	8004e2e <USB_SetCurrentMode+0x2e>
 8004e4c:	e01a      	b.n	8004e84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e4e:	78fb      	ldrb	r3, [r7, #3]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d115      	bne.n	8004e80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e60:	2001      	movs	r0, #1
 8004e62:	f7fc f96b 	bl	800113c <HAL_Delay>
      ms++;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f001 f905 	bl	800607c <USB_GetMode>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <USB_SetCurrentMode+0x84>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b31      	cmp	r3, #49	; 0x31
 8004e7c:	d9f0      	bls.n	8004e60 <USB_SetCurrentMode+0x60>
 8004e7e:	e001      	b.n	8004e84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e005      	b.n	8004e90 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b32      	cmp	r3, #50	; 0x32
 8004e88:	d101      	bne.n	8004e8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e98:	b084      	sub	sp, #16
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b086      	sub	sp, #24
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	e009      	b.n	8004ecc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	3340      	adds	r3, #64	; 0x40
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	2b0e      	cmp	r3, #14
 8004ed0:	d9f2      	bls.n	8004eb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d11c      	bne.n	8004f12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee6:	f043 0302 	orr.w	r3, r3, #2
 8004eea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e005      	b.n	8004f1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f24:	461a      	mov	r2, r3
 8004f26:	2300      	movs	r3, #0
 8004f28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f30:	4619      	mov	r1, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f38:	461a      	mov	r2, r3
 8004f3a:	680b      	ldr	r3, [r1, #0]
 8004f3c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f3e:	2103      	movs	r1, #3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f955 	bl	80051f0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f46:	2110      	movs	r1, #16
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f8f1 	bl	8005130 <USB_FlushTxFifo>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f91b 	bl	8005194 <USB_FlushRxFifo>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	461a      	mov	r2, r3
 8004f70:	2300      	movs	r3, #0
 8004f72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f86:	461a      	mov	r2, r3
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	e043      	b.n	800501a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fa8:	d118      	bne.n	8004fdc <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10a      	bne.n	8004fc6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	e013      	b.n	8004fee <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	e008      	b.n	8004fee <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe8:	461a      	mov	r2, r3
 8004fea:	2300      	movs	r3, #0
 8004fec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	461a      	mov	r2, r3
 800500e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005012:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	3301      	adds	r3, #1
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	429a      	cmp	r2, r3
 8005020:	d3b7      	bcc.n	8004f92 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	e043      	b.n	80050b0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800503a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800503e:	d118      	bne.n	8005072 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005052:	461a      	mov	r2, r3
 8005054:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e013      	b.n	8005084 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005068:	461a      	mov	r2, r3
 800506a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	e008      	b.n	8005084 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507e:	461a      	mov	r2, r3
 8005080:	2300      	movs	r3, #0
 8005082:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005090:	461a      	mov	r2, r3
 8005092:	2300      	movs	r3, #0
 8005094:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a2:	461a      	mov	r2, r3
 80050a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	3301      	adds	r3, #1
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d3b7      	bcc.n	8005028 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f043 0210 	orr.w	r2, r3, #16
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	4b10      	ldr	r3, [pc, #64]	; (800512c <USB_DevInit+0x294>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	f043 0208 	orr.w	r2, r3, #8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005106:	2b01      	cmp	r3, #1
 8005108:	d107      	bne.n	800511a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005112:	f043 0304 	orr.w	r3, r3, #4
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800511a:	7dfb      	ldrb	r3, [r7, #23]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005126:	b004      	add	sp, #16
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	803c3800 	.word	0x803c3800

08005130 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3301      	adds	r3, #1
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	4a12      	ldr	r2, [pc, #72]	; (8005190 <USB_FlushTxFifo+0x60>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e01a      	b.n	8005184 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	daf3      	bge.n	800513e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	019b      	lsls	r3, r3, #6
 800515e:	f043 0220 	orr.w	r2, r3, #32
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3301      	adds	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	4a08      	ldr	r2, [pc, #32]	; (8005190 <USB_FlushTxFifo+0x60>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d901      	bls.n	8005176 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e006      	b.n	8005184 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b20      	cmp	r3, #32
 8005180:	d0f1      	beq.n	8005166 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	00030d40 	.word	0x00030d40

08005194 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3301      	adds	r3, #1
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	4a11      	ldr	r2, [pc, #68]	; (80051ec <USB_FlushRxFifo+0x58>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e017      	b.n	80051e0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	daf3      	bge.n	80051a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2210      	movs	r2, #16
 80051c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3301      	adds	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	4a08      	ldr	r2, [pc, #32]	; (80051ec <USB_FlushRxFifo+0x58>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e006      	b.n	80051e0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b10      	cmp	r3, #16
 80051dc:	d0f1      	beq.n	80051c2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	00030d40 	.word	0x00030d40

080051f0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	68f9      	ldr	r1, [r7, #12]
 800520c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005210:	4313      	orrs	r3, r2
 8005212:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005222:	b480      	push	{r7}
 8005224:	b087      	sub	sp, #28
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 0306 	and.w	r3, r3, #6
 800523a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d002      	beq.n	8005248 <USB_GetDevSpeed+0x26>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b06      	cmp	r3, #6
 8005246:	d102      	bne.n	800524e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005248:	2302      	movs	r3, #2
 800524a:	75fb      	strb	r3, [r7, #23]
 800524c:	e001      	b.n	8005252 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800524e:	230f      	movs	r3, #15
 8005250:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005252:	7dfb      	ldrb	r3, [r7, #23]
}
 8005254:	4618      	mov	r0, r3
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d13a      	bne.n	80052f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005282:	69da      	ldr	r2, [r3, #28]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	2101      	movs	r1, #1
 800528e:	fa01 f303 	lsl.w	r3, r1, r3
 8005292:	b29b      	uxth	r3, r3
 8005294:	68f9      	ldr	r1, [r7, #12]
 8005296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800529a:	4313      	orrs	r3, r2
 800529c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d155      	bne.n	8005360 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	78db      	ldrb	r3, [r3, #3]
 80052ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	059b      	lsls	r3, r3, #22
 80052d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052d8:	4313      	orrs	r3, r2
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	e036      	b.n	8005360 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	2101      	movs	r1, #1
 8005304:	fa01 f303 	lsl.w	r3, r1, r3
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	68f9      	ldr	r1, [r7, #12]
 800530c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005310:	4313      	orrs	r3, r2
 8005312:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d11a      	bne.n	8005360 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	78db      	ldrb	r3, [r3, #3]
 8005344:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005346:	430b      	orrs	r3, r1
 8005348:	4313      	orrs	r3, r2
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	0151      	lsls	r1, r2, #5
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	440a      	add	r2, r1
 8005352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800535e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d161      	bne.n	8005450 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800539e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a2:	d11f      	bne.n	80053e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	2101      	movs	r1, #1
 80053f6:	fa01 f303 	lsl.w	r3, r1, r3
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	43db      	mvns	r3, r3
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005404:	4013      	ands	r3, r2
 8005406:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	2101      	movs	r1, #1
 800541a:	fa01 f303 	lsl.w	r3, r1, r3
 800541e:	b29b      	uxth	r3, r3
 8005420:	43db      	mvns	r3, r3
 8005422:	68f9      	ldr	r1, [r7, #12]
 8005424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005428:	4013      	ands	r3, r2
 800542a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	0159      	lsls	r1, r3, #5
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	440b      	add	r3, r1
 8005442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005446:	4619      	mov	r1, r3
 8005448:	4b35      	ldr	r3, [pc, #212]	; (8005520 <USB_DeactivateEndpoint+0x1b0>)
 800544a:	4013      	ands	r3, r2
 800544c:	600b      	str	r3, [r1, #0]
 800544e:	e060      	b.n	8005512 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005466:	d11f      	bne.n	80054a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	440a      	add	r2, r1
 800547e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005482:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005486:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	0151      	lsls	r1, r2, #5
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	440a      	add	r2, r1
 800549e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	2101      	movs	r1, #1
 80054ba:	fa01 f303 	lsl.w	r3, r1, r3
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	43db      	mvns	r3, r3
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c8:	4013      	ands	r3, r2
 80054ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	2101      	movs	r1, #1
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	041b      	lsls	r3, r3, #16
 80054e4:	43db      	mvns	r3, r3
 80054e6:	68f9      	ldr	r1, [r7, #12]
 80054e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054ec:	4013      	ands	r3, r2
 80054ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	0159      	lsls	r1, r3, #5
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	440b      	add	r3, r1
 8005506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550a:	4619      	mov	r1, r3
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <USB_DeactivateEndpoint+0x1b4>)
 800550e:	4013      	ands	r3, r2
 8005510:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	ec337800 	.word	0xec337800
 8005524:	eff37800 	.word	0xeff37800

08005528 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	785b      	ldrb	r3, [r3, #1]
 8005540:	2b01      	cmp	r3, #1
 8005542:	f040 810a 	bne.w	800575a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d132      	bne.n	80055b4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	440a      	add	r2, r1
 8005564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005568:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800556c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005570:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	440a      	add	r2, r1
 8005588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005590:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	0151      	lsls	r1, r2, #5
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	440a      	add	r2, r1
 80055a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ac:	0cdb      	lsrs	r3, r3, #19
 80055ae:	04db      	lsls	r3, r3, #19
 80055b0:	6113      	str	r3, [r2, #16]
 80055b2:	e074      	b.n	800569e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ce:	0cdb      	lsrs	r3, r3, #19
 80055d0:	04db      	lsls	r3, r3, #19
 80055d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	0151      	lsls	r1, r2, #5
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	440a      	add	r2, r1
 80055ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6959      	ldr	r1, [r3, #20]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	440b      	add	r3, r1
 8005610:	1e59      	subs	r1, r3, #1
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	fbb1 f3f3 	udiv	r3, r1, r3
 800561a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800561c:	4baf      	ldr	r3, [pc, #700]	; (80058dc <USB_EPStartXfer+0x3b4>)
 800561e:	400b      	ands	r3, r1
 8005620:	6939      	ldr	r1, [r7, #16]
 8005622:	0148      	lsls	r0, r1, #5
 8005624:	6979      	ldr	r1, [r7, #20]
 8005626:	4401      	add	r1, r0
 8005628:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800562c:	4313      	orrs	r3, r2
 800562e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005646:	6939      	ldr	r1, [r7, #16]
 8005648:	0148      	lsls	r0, r1, #5
 800564a:	6979      	ldr	r1, [r7, #20]
 800564c:	4401      	add	r1, r0
 800564e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005652:	4313      	orrs	r3, r2
 8005654:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	78db      	ldrb	r3, [r3, #3]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d11f      	bne.n	800569e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	0151      	lsls	r1, r2, #5
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	440a      	add	r2, r1
 8005674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005678:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800567c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	0151      	lsls	r1, r2, #5
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	440a      	add	r2, r1
 8005694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005698:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800569c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	0151      	lsls	r1, r2, #5
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	440a      	add	r2, r1
 80056b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056bc:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	78db      	ldrb	r3, [r3, #3]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d015      	beq.n	80056f2 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 8100 	beq.w	80058d0 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	2101      	movs	r1, #1
 80056e2:	fa01 f303 	lsl.w	r3, r1, r3
 80056e6:	6979      	ldr	r1, [r7, #20]
 80056e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ec:	4313      	orrs	r3, r2
 80056ee:	634b      	str	r3, [r1, #52]	; 0x34
 80056f0:	e0ee      	b.n	80058d0 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d110      	bne.n	8005724 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	440a      	add	r2, r1
 8005718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800571c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e00f      	b.n	8005744 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005742:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68d9      	ldr	r1, [r3, #12]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	b29b      	uxth	r3, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f9e2 	bl	8005b1c <USB_WritePacket>
 8005758:	e0ba      	b.n	80058d0 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	0151      	lsls	r1, r2, #5
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	440a      	add	r2, r1
 8005770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005774:	0cdb      	lsrs	r3, r3, #19
 8005776:	04db      	lsls	r3, r3, #19
 8005778:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	440a      	add	r2, r1
 8005790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005794:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005798:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800579c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d123      	bne.n	80057ee <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057bc:	6939      	ldr	r1, [r7, #16]
 80057be:	0148      	lsls	r0, r1, #5
 80057c0:	6979      	ldr	r1, [r7, #20]
 80057c2:	4401      	add	r1, r0
 80057c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057c8:	4313      	orrs	r3, r2
 80057ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ea:	6113      	str	r3, [r2, #16]
 80057ec:	e033      	b.n	8005856 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	695a      	ldr	r2, [r3, #20]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	4413      	add	r3, r2
 80057f8:	1e5a      	subs	r2, r3, #1
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	89fb      	ldrh	r3, [r7, #14]
 8005814:	04d9      	lsls	r1, r3, #19
 8005816:	4b31      	ldr	r3, [pc, #196]	; (80058dc <USB_EPStartXfer+0x3b4>)
 8005818:	400b      	ands	r3, r1
 800581a:	6939      	ldr	r1, [r7, #16]
 800581c:	0148      	lsls	r0, r1, #5
 800581e:	6979      	ldr	r1, [r7, #20]
 8005820:	4401      	add	r1, r0
 8005822:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005826:	4313      	orrs	r3, r2
 8005828:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	89f9      	ldrh	r1, [r7, #14]
 800583e:	fb01 f303 	mul.w	r3, r1, r3
 8005842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005846:	6939      	ldr	r1, [r7, #16]
 8005848:	0148      	lsls	r0, r1, #5
 800584a:	6979      	ldr	r1, [r7, #20]
 800584c:	4401      	add	r1, r0
 800584e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005852:	4313      	orrs	r3, r2
 8005854:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	78db      	ldrb	r3, [r3, #3]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d128      	bne.n	80058b0 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586a:	2b00      	cmp	r3, #0
 800586c:	d110      	bne.n	8005890 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	0151      	lsls	r1, r2, #5
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	440a      	add	r2, r1
 8005884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005888:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	e00f      	b.n	80058b0 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	0151      	lsls	r1, r2, #5
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	440a      	add	r2, r1
 80058a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	0151      	lsls	r1, r2, #5
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	440a      	add	r2, r1
 80058c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	1ff80000 	.word	0x1ff80000

080058e0 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	785b      	ldrb	r3, [r3, #1]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	f040 80ab 	bne.w	8005a54 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d132      	bne.n	800596c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005920:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005924:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005928:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	440a      	add	r2, r1
 8005940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005944:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005948:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005964:	0cdb      	lsrs	r3, r3, #19
 8005966:	04db      	lsls	r3, r3, #19
 8005968:	6113      	str	r3, [r2, #16]
 800596a:	e04e      	b.n	8005a0a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	440a      	add	r2, r1
 8005982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005986:	0cdb      	lsrs	r3, r3, #19
 8005988:	04db      	lsls	r3, r3, #19
 800598a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d903      	bls.n	80059c4 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	0151      	lsls	r1, r2, #5
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	440a      	add	r2, r1
 80059da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	0148      	lsls	r0, r1, #5
 80059fe:	68f9      	ldr	r1, [r7, #12]
 8005a00:	4401      	add	r1, r0
 8005a02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a06:	4313      	orrs	r3, r2
 8005a08:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a28:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d06d      	beq.n	8005b0e <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	2101      	movs	r1, #1
 8005a44:	fa01 f303 	lsl.w	r3, r1, r3
 8005a48:	68f9      	ldr	r1, [r7, #12]
 8005a4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	634b      	str	r3, [r1, #52]	; 0x34
 8005a52:	e05c      	b.n	8005b0e <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6e:	0cdb      	lsrs	r3, r3, #19
 8005a70:	04db      	lsls	r3, r3, #19
 8005a72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	0151      	lsls	r1, r2, #5
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	440a      	add	r2, r1
 8005a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a96:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	0151      	lsls	r1, r2, #5
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	440a      	add	r2, r1
 8005abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ac6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	0148      	lsls	r0, r1, #5
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	4401      	add	r1, r0
 8005ae6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005aea:	4313      	orrs	r3, r2
 8005aec:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b089      	sub	sp, #36	; 0x24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4611      	mov	r1, r2
 8005b28:	461a      	mov	r2, r3
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	71fb      	strb	r3, [r7, #7]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005b3a:	88bb      	ldrh	r3, [r7, #4]
 8005b3c:	3303      	adds	r3, #3
 8005b3e:	089b      	lsrs	r3, r3, #2
 8005b40:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005b42:	2300      	movs	r3, #0
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	e018      	b.n	8005b7a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b48:	79fb      	ldrb	r3, [r7, #7]
 8005b4a:	031a      	lsls	r2, r3, #12
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b54:	461a      	mov	r2, r3
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	3301      	adds	r3, #1
 8005b66:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	3301      	adds	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	3301      	adds	r3, #1
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d3e2      	bcc.n	8005b48 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3724      	adds	r7, #36	; 0x24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b08b      	sub	sp, #44	; 0x2c
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ba6:	88fb      	ldrh	r3, [r7, #6]
 8005ba8:	089b      	lsrs	r3, r3, #2
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	f003 0303 	and.w	r3, r3, #3
 8005bb4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	623b      	str	r3, [r7, #32]
 8005bba:	e014      	b.n	8005be6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	3301      	adds	r3, #1
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	3301      	adds	r3, #1
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	3301      	adds	r3, #1
 8005be4:	623b      	str	r3, [r7, #32]
 8005be6:	6a3a      	ldr	r2, [r7, #32]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d3e6      	bcc.n	8005bbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bee:	8bfb      	ldrh	r3, [r7, #30]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01e      	beq.n	8005c32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f107 0310 	add.w	r3, r7, #16
 8005c04:	6812      	ldr	r2, [r2, #0]
 8005c06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	701a      	strb	r2, [r3, #0]
      i++;
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	3301      	adds	r3, #1
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c26:	8bfb      	ldrh	r3, [r7, #30]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c2c:	8bfb      	ldrh	r3, [r7, #30]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1ea      	bne.n	8005c08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	372c      	adds	r7, #44	; 0x2c
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	785b      	ldrb	r3, [r3, #1]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d12c      	bne.n	8005cb6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	db12      	blt.n	8005c94 <USB_EPSetStall+0x54>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00f      	beq.n	8005c94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	e02b      	b.n	8005d0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	db12      	blt.n	8005cee <USB_EPSetStall+0xae>
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00f      	beq.n	8005cee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	0151      	lsls	r1, r2, #5
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	440a      	add	r2, r1
 8005ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d128      	bne.n	8005d8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	0151      	lsls	r1, r2, #5
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	78db      	ldrb	r3, [r3, #3]
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d003      	beq.n	8005d68 <USB_EPClearStall+0x4c>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	78db      	ldrb	r3, [r3, #3]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d138      	bne.n	8005dda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	e027      	b.n	8005dda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005da8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	78db      	ldrb	r3, [r3, #3]
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d003      	beq.n	8005dba <USB_EPClearStall+0x9e>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	78db      	ldrb	r3, [r3, #3]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d10f      	bne.n	8005dda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	e016      	b.n	8005e28 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e06:	461a      	mov	r2, r3
 8005e08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e0c:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	3301      	adds	r3, #1
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2b0e      	cmp	r3, #14
 8005e2c:	d9e5      	bls.n	8005dfa <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e34:	461a      	mov	r2, r3
 8005e36:	2300      	movs	r3, #0
 8005e38:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e40:	461a      	mov	r2, r3
 8005e42:	2300      	movs	r3, #0
 8005e44:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff f99e 	bl	8005194 <USB_FlushRxFifo>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <USB_StopDevice+0x7e>
  {
    return ret;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	e00b      	b.n	8005e7e <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 8005e66:	2110      	movs	r1, #16
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff f961 	bl	8005130 <USB_FlushTxFifo>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <USB_StopDevice+0x94>
  {
    return ret;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	e000      	b.n	8005e7e <USB_StopDevice+0x96>
  }

  return ret;
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ea4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ea8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	78fb      	ldrb	r3, [r7, #3]
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005eba:	68f9      	ldr	r1, [r7, #12]
 8005ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b085      	sub	sp, #20
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005eec:	f023 0303 	bic.w	r3, r3, #3
 8005ef0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f00:	f023 0302 	bic.w	r3, r3, #2
 8005f04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f2e:	f023 0303 	bic.w	r3, r3, #3
 8005f32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f42:	f043 0302 	orr.w	r3, r3, #2
 8005f46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	0c1b      	lsrs	r3, r3, #16
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	b29b      	uxth	r3, r3
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ff4:	78fb      	ldrb	r3, [r7, #3]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	4013      	ands	r3, r2
 8006010:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006012:	68bb      	ldr	r3, [r7, #8]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006042:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	fa22 f303 	lsr.w	r3, r2, r3
 8006050:	01db      	lsls	r3, r3, #7
 8006052:	b2db      	uxtb	r3, r3
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800605a:	78fb      	ldrb	r3, [r7, #3]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4013      	ands	r3, r2
 800606c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800606e:	68bb      	ldr	r3, [r7, #8]
}
 8006070:	4618      	mov	r0, r3
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	f003 0301 	and.w	r3, r3, #1
}
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060b6:	f023 0307 	bic.w	r3, r3, #7
 80060ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
	...

080060e0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	333c      	adds	r3, #60	; 0x3c
 80060f2:	3304      	adds	r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4a1c      	ldr	r2, [pc, #112]	; (800616c <USB_EP0_OutStart+0x8c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d90a      	bls.n	8006116 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800610c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006110:	d101      	bne.n	8006116 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	e024      	b.n	8006160 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611c:	461a      	mov	r2, r3
 800611e:	2300      	movs	r3, #0
 8006120:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006134:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006144:	f043 0318 	orr.w	r3, r3, #24
 8006148:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006158:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800615c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	4f54300a 	.word	0x4f54300a

08006170 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3301      	adds	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	4a13      	ldr	r2, [pc, #76]	; (80061d0 <USB_CoreReset+0x60>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d901      	bls.n	800618c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e01a      	b.n	80061c2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	daf3      	bge.n	800617c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f043 0201 	orr.w	r2, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3301      	adds	r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <USB_CoreReset+0x60>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d901      	bls.n	80061b4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e006      	b.n	80061c2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d0f1      	beq.n	80061a4 <USB_CoreReset+0x34>

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	00030d40 	.word	0x00030d40

080061d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80061d8:	4904      	ldr	r1, [pc, #16]	; (80061ec <MX_FATFS_Init+0x18>)
 80061da:	4805      	ldr	r0, [pc, #20]	; (80061f0 <MX_FATFS_Init+0x1c>)
 80061dc:	f005 fdea 	bl	800bdb4 <FATFS_LinkDriver>
 80061e0:	4603      	mov	r3, r0
 80061e2:	461a      	mov	r2, r3
 80061e4:	4b03      	ldr	r3, [pc, #12]	; (80061f4 <MX_FATFS_Init+0x20>)
 80061e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80061e8:	bf00      	nop
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	200014a8 	.word	0x200014a8
 80061f0:	2000000c 	.word	0x2000000c
 80061f4:	200014a4 	.word	0x200014a4

080061f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80061fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80061fe:	4618      	mov	r0, r3
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	4603      	mov	r3, r0
 8006210:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006212:	4b15      	ldr	r3, [pc, #84]	; (8006268 <USER_initialize+0x60>)
 8006214:	2201      	movs	r2, #1
 8006216:	701a      	strb	r2, [r3, #0]

  /* USER CODE HERE */

  uint8_t status = BSP_QSPI_GetStatus();
 8006218:	f7fa fcd4 	bl	8000bc4 <BSP_QSPI_GetStatus>
 800621c:	4603      	mov	r3, r0
 800621e:	73fb      	strb	r3, [r7, #15]

  switch (status)
 8006220:	7bfb      	ldrb	r3, [r7, #15]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d108      	bne.n	8006238 <USER_initialize+0x30>
  {
  case QSPI_OK:
    Stat &= ~STA_NOINIT;
 8006226:	4b10      	ldr	r3, [pc, #64]	; (8006268 <USER_initialize+0x60>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f023 0301 	bic.w	r3, r3, #1
 8006230:	b2da      	uxtb	r2, r3
 8006232:	4b0d      	ldr	r3, [pc, #52]	; (8006268 <USER_initialize+0x60>)
 8006234:	701a      	strb	r2, [r3, #0]
    break;
 8006236:	e010      	b.n	800625a <USER_initialize+0x52>
  default:
    HAL_QSPI_Init(&hqspi);
 8006238:	480c      	ldr	r0, [pc, #48]	; (800626c <USER_initialize+0x64>)
 800623a:	f7fc fdad 	bl	8002d98 <HAL_QSPI_Init>

    if (BSP_QSPI_Init() == QSPI_OK)
 800623e:	f7fa fb9b 	bl	8000978 <BSP_QSPI_Init>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d107      	bne.n	8006258 <USER_initialize+0x50>
    {
      Stat &= ~STA_NOINIT;
 8006248:	4b07      	ldr	r3, [pc, #28]	; (8006268 <USER_initialize+0x60>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f023 0301 	bic.w	r3, r3, #1
 8006252:	b2da      	uxtb	r2, r3
 8006254:	4b04      	ldr	r3, [pc, #16]	; (8006268 <USER_initialize+0x60>)
 8006256:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006258:	bf00      	nop
  }

  return Stat;
 800625a:	4b03      	ldr	r3, [pc, #12]	; (8006268 <USER_initialize+0x60>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	b2db      	uxtb	r3, r3
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20000009 	.word	0x20000009
 800626c:	2000145c 	.word	0x2000145c

08006270 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive nmuber to identify the drive */
)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800627a:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <USER_status+0x38>)
 800627c:	2201      	movs	r2, #1
 800627e:	701a      	strb	r2, [r3, #0]

  if (BSP_QSPI_GetStatus() == QSPI_OK)
 8006280:	f7fa fca0 	bl	8000bc4 <BSP_QSPI_GetStatus>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d107      	bne.n	800629a <USER_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800628a:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <USER_status+0x38>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	b2db      	uxtb	r3, r3
 8006290:	f023 0301 	bic.w	r3, r3, #1
 8006294:	b2da      	uxtb	r2, r3
 8006296:	4b04      	ldr	r3, [pc, #16]	; (80062a8 <USER_status+0x38>)
 8006298:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800629a:	4b03      	ldr	r3, [pc, #12]	; (80062a8 <USER_status+0x38>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	b2db      	uxtb	r3, r3
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20000009 	.word	0x20000009

080062ac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE HERE */

  DRESULT result = RES_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	75fb      	strb	r3, [r7, #23]

  if (count > 1)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d901      	bls.n	80062ca <USER_read+0x1e>
  {
    result = RES_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Read sector from QSPI FLASH memory */
  if (BSP_QSPI_Read(buff, sector * _MIN_SS, _MIN_SS) == QSPI_ERROR)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	031b      	lsls	r3, r3, #12
 80062ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062d2:	4619      	mov	r1, r3
 80062d4:	68b8      	ldr	r0, [r7, #8]
 80062d6:	f7fa fb67 	bl	80009a8 <BSP_QSPI_Read>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <USER_read+0x38>
  {
    result = RES_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b086      	sub	sp, #24
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	603b      	str	r3, [r7, #0]
 80062fa:	4603      	mov	r3, r0
 80062fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE HERE */

  DRESULT result = RES_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	75fb      	strb	r3, [r7, #23]

  /* Erase the 4kB block */
  if (BSP_QSPI_Erase_Block(sector * _MIN_SS) == QSPI_ERROR)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	031b      	lsls	r3, r3, #12
 8006306:	4618      	mov	r0, r3
 8006308:	f7fa fc18 	bl	8000b3c <BSP_QSPI_Erase_Block>
 800630c:	4603      	mov	r3, r0
 800630e:	2b01      	cmp	r3, #1
 8006310:	d102      	bne.n	8006318 <USER_write+0x2a>
  {
    result = RES_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	75fb      	strb	r3, [r7, #23]
 8006316:	e00c      	b.n	8006332 <USER_write+0x44>
  }

  /* Write new 4kB data */
  else {
    if (BSP_QSPI_Write((uint8_t *)buff, sector * _MIN_SS, _MIN_SS) == QSPI_ERROR)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	031b      	lsls	r3, r3, #12
 800631c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006320:	4619      	mov	r1, r3
 8006322:	68b8      	ldr	r0, [r7, #8]
 8006324:	f7fa fb82 	bl	8000a2c <BSP_QSPI_Write>
 8006328:	4603      	mov	r3, r0
 800632a:	2b01      	cmp	r3, #1
 800632c:	d101      	bne.n	8006332 <USER_write+0x44>
    {
      result = RES_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	75fb      	strb	r3, [r7, #23]
    }
  }

  return result;
 8006332:	7dfb      	ldrb	r3, [r7, #23]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	4603      	mov	r3, r0
 8006344:	603a      	str	r2, [r7, #0]
 8006346:	71fb      	strb	r3, [r7, #7]
 8006348:	460b      	mov	r3, r1
 800634a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	73fb      	strb	r3, [r7, #15]

  /* USER CODE HERE */

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006350:	4b1b      	ldr	r3, [pc, #108]	; (80063c0 <USER_ioctl+0x84>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <USER_ioctl+0x26>
 800635e:	2303      	movs	r3, #3
 8006360:	e027      	b.n	80063b2 <USER_ioctl+0x76>

  switch (cmd)
 8006362:	79bb      	ldrb	r3, [r7, #6]
 8006364:	2b03      	cmp	r3, #3
 8006366:	d821      	bhi.n	80063ac <USER_ioctl+0x70>
 8006368:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <USER_ioctl+0x34>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	08006381 	.word	0x08006381
 8006374:	08006387 	.word	0x08006387
 8006378:	08006395 	.word	0x08006395
 800637c:	080063a3 	.word	0x080063a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	73fb      	strb	r3, [r7, #15]
    break;
 8006384:	e014      	b.n	80063b0 <USER_ioctl+0x74>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    *(DWORD*)buff = 0x1000;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800638c:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	73fb      	strb	r3, [r7, #15]
    break;
 8006392:	e00d      	b.n	80063b0 <USER_ioctl+0x74>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    *(WORD*)buff = 0x1000;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800639a:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	73fb      	strb	r3, [r7, #15]
    break;
 80063a0:	e006      	b.n	80063b0 <USER_ioctl+0x74>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = 0x1000;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80063a8:	601a      	str	r2, [r3, #0]
    break;
 80063aa:	e001      	b.n	80063b0 <USER_ioctl+0x74>

  default:
    res = RES_PARERR;
 80063ac:	2304      	movs	r3, #4
 80063ae:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	20000009 	.word	0x20000009

080063c4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80063d0:	f241 0074 	movw	r0, #4212	; 0x1074
 80063d4:	f009 f946 	bl	800f664 <USBD_static_malloc>
 80063d8:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d105      	bne.n	80063ec <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80063e8:	2302      	movs	r3, #2
 80063ea:	e034      	b.n	8006456 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	7c1b      	ldrb	r3, [r3, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d115      	bne.n	8006428 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80063fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006400:	2202      	movs	r2, #2
 8006402:	2101      	movs	r1, #1
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f008 ff31 	bl	800f26c <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006416:	2202      	movs	r2, #2
 8006418:	2181      	movs	r1, #129	; 0x81
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f008 ff26 	bl	800f26c <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	871a      	strh	r2, [r3, #56]	; 0x38
 8006426:	e012      	b.n	800644e <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006428:	2340      	movs	r3, #64	; 0x40
 800642a:	2202      	movs	r2, #2
 800642c:	2101      	movs	r1, #1
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f008 ff1c 	bl	800f26c <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800643c:	2340      	movs	r3, #64	; 0x40
 800643e:	2202      	movs	r2, #2
 8006440:	2181      	movs	r1, #129	; 0x81
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f008 ff12 	bl	800f26c <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f999 	bl	8006786 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b082      	sub	sp, #8
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800646a:	2101      	movs	r1, #1
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f008 ff3b 	bl	800f2e8 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800647a:	2181      	movs	r1, #129	; 0x81
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f008 ff33 	bl	800f2e8 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00c      	beq.n	80064ac <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f9dd 	bl	8006852 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800649e:	4618      	mov	r0, r3
 80064a0:	f009 f8ee 	bl	800f680 <USBD_static_free>
    pdev->pClassData = NULL;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064c8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80064d8:	2303      	movs	r3, #3
 80064da:	e0db      	b.n	8006694 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d04e      	beq.n	8006586 <USBD_MSC_Setup+0xce>
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	f040 80cb 	bne.w	8006684 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	785b      	ldrb	r3, [r3, #1]
 80064f2:	2bfe      	cmp	r3, #254	; 0xfe
 80064f4:	d002      	beq.n	80064fc <USBD_MSC_Setup+0x44>
 80064f6:	2bff      	cmp	r3, #255	; 0xff
 80064f8:	d025      	beq.n	8006546 <USBD_MSC_Setup+0x8e>
 80064fa:	e03c      	b.n	8006576 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	885b      	ldrh	r3, [r3, #2]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d119      	bne.n	8006538 <USBD_MSC_Setup+0x80>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	88db      	ldrh	r3, [r3, #6]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d115      	bne.n	8006538 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006512:	2b00      	cmp	r3, #0
 8006514:	da10      	bge.n	8006538 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	4798      	blx	r3
 8006520:	4603      	mov	r3, r0
 8006522:	461a      	mov	r2, r3
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2201      	movs	r2, #1
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f002 ff29 	bl	8009386 <USBD_CtlSendData>
 8006534:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006536:	e025      	b.n	8006584 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f002 feb2 	bl	80092a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006540:	2303      	movs	r3, #3
 8006542:	75fb      	strb	r3, [r7, #23]
          break;
 8006544:	e01e      	b.n	8006584 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	885b      	ldrh	r3, [r3, #2]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10c      	bne.n	8006568 <USBD_MSC_Setup+0xb0>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	88db      	ldrh	r3, [r3, #6]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d108      	bne.n	8006568 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800655c:	2b00      	cmp	r3, #0
 800655e:	db03      	blt.n	8006568 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f94f 	bl	8006804 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006566:	e00d      	b.n	8006584 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f002 fe9a 	bl	80092a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006570:	2303      	movs	r3, #3
 8006572:	75fb      	strb	r3, [r7, #23]
          break;
 8006574:	e006      	b.n	8006584 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f002 fe93 	bl	80092a4 <USBD_CtlError>
          ret = USBD_FAIL;
 800657e:	2303      	movs	r3, #3
 8006580:	75fb      	strb	r3, [r7, #23]
          break;
 8006582:	bf00      	nop
      }
      break;
 8006584:	e085      	b.n	8006692 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	785b      	ldrb	r3, [r3, #1]
 800658a:	2b0b      	cmp	r3, #11
 800658c:	d871      	bhi.n	8006672 <USBD_MSC_Setup+0x1ba>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <USBD_MSC_Setup+0xdc>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065c5 	.word	0x080065c5
 8006598:	08006641 	.word	0x08006641
 800659c:	08006673 	.word	0x08006673
 80065a0:	08006673 	.word	0x08006673
 80065a4:	08006673 	.word	0x08006673
 80065a8:	08006673 	.word	0x08006673
 80065ac:	08006673 	.word	0x08006673
 80065b0:	08006673 	.word	0x08006673
 80065b4:	08006673 	.word	0x08006673
 80065b8:	08006673 	.word	0x08006673
 80065bc:	080065ef 	.word	0x080065ef
 80065c0:	08006619 	.word	0x08006619
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d107      	bne.n	80065e0 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065d0:	f107 030e 	add.w	r3, r7, #14
 80065d4:	2202      	movs	r2, #2
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f002 fed4 	bl	8009386 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065de:	e050      	b.n	8006682 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f002 fe5e 	bl	80092a4 <USBD_CtlError>
            ret = USBD_FAIL;
 80065e8:	2303      	movs	r3, #3
 80065ea:	75fb      	strb	r3, [r7, #23]
          break;
 80065ec:	e049      	b.n	8006682 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d107      	bne.n	800660a <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	3304      	adds	r3, #4
 80065fe:	2201      	movs	r2, #1
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f002 febf 	bl	8009386 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006608:	e03b      	b.n	8006682 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f002 fe49 	bl	80092a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006612:	2303      	movs	r3, #3
 8006614:	75fb      	strb	r3, [r7, #23]
          break;
 8006616:	e034      	b.n	8006682 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b03      	cmp	r3, #3
 8006622:	d106      	bne.n	8006632 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	885b      	ldrh	r3, [r3, #2]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	461a      	mov	r2, r3
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006630:	e027      	b.n	8006682 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f002 fe35 	bl	80092a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800663a:	2303      	movs	r3, #3
 800663c:	75fb      	strb	r3, [r7, #23]
          break;
 800663e:	e020      	b.n	8006682 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b03      	cmp	r3, #3
 800664a:	d119      	bne.n	8006680 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	885b      	ldrh	r3, [r3, #2]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d115      	bne.n	8006680 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	889b      	ldrh	r3, [r3, #4]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f008 fe79 	bl	800f354 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	889b      	ldrh	r3, [r3, #4]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	4619      	mov	r1, r3
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 faa6 	bl	8006bbc <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8006670:	e006      	b.n	8006680 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f002 fe15 	bl	80092a4 <USBD_CtlError>
          ret = USBD_FAIL;
 800667a:	2303      	movs	r3, #3
 800667c:	75fb      	strb	r3, [r7, #23]
          break;
 800667e:	e000      	b.n	8006682 <USBD_MSC_Setup+0x1ca>
          break;
 8006680:	bf00      	nop
      }
      break;
 8006682:	e006      	b.n	8006692 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f002 fe0c 	bl	80092a4 <USBD_CtlError>
      ret = USBD_FAIL;
 800668c:	2303      	movs	r3, #3
 800668e:	75fb      	strb	r3, [r7, #23]
      break;
 8006690:	bf00      	nop
  }

  return (uint8_t)ret;
 8006692:	7dfb      	ldrb	r3, [r7, #23]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f8e4 	bl	800687a <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f90c 	bl	80068ea <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80066ea:	4b03      	ldr	r3, [pc, #12]	; (80066f8 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	20000058 	.word	0x20000058

080066fc <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800670a:	4b03      	ldr	r3, [pc, #12]	; (8006718 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	20000078 	.word	0x20000078

0800671c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800672a:	4b03      	ldr	r3, [pc, #12]	; (8006738 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	20000098 	.word	0x20000098

0800673c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	220a      	movs	r2, #10
 8006748:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800674a:	4b03      	ldr	r3, [pc, #12]	; (8006758 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800674c:	4618      	mov	r0, r3
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	200000b8 	.word	0x200000b8

0800675c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800676c:	2303      	movs	r3, #3
 800676e:	e004      	b.n	800677a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006794:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d02f      	beq.n	80067fc <MSC_BOT_Init+0x76>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2000      	movs	r0, #0
 80067d6:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80067d8:	2101      	movs	r1, #1
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f008 fdba 	bl	800f354 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80067e0:	2181      	movs	r1, #129	; 0x81
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f008 fdb6 	bl	800f354 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80067ee:	3210      	adds	r2, #16
 80067f0:	231f      	movs	r3, #31
 80067f2:	2101      	movs	r1, #1
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f008 fee9 	bl	800f5cc <USBD_LL_PrepareReceive>
 80067fa:	e000      	b.n	80067fe <MSC_BOT_Init+0x78>
    return;
 80067fc:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006812:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d017      	beq.n	800684a <MSC_BOT_Reset+0x46>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2201      	movs	r2, #1
 8006824:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8006826:	2181      	movs	r1, #129	; 0x81
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f008 fdff 	bl	800f42c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800682e:	2101      	movs	r1, #1
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f008 fdfb 	bl	800f42c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800683c:	3210      	adds	r2, #16
 800683e:	231f      	movs	r3, #31
 8006840:	2101      	movs	r1, #1
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f008 fec2 	bl	800f5cc <USBD_LL_PrepareReceive>
 8006848:	e000      	b.n	800684c <MSC_BOT_Reset+0x48>
    return;
 800684a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006852:	b480      	push	{r7}
 8006854:	b085      	sub	sp, #20
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006860:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	721a      	strb	r2, [r3, #8]
  }
}
 800686e:	bf00      	nop
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	460b      	mov	r3, r1
 8006884:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800688c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d022      	beq.n	80068da <MSC_BOT_DataIn+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	7a1b      	ldrb	r3, [r3, #8]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d005      	beq.n	80068a8 <MSC_BOT_DataIn+0x2e>
 800689c:	2b02      	cmp	r3, #2
 800689e:	db1e      	blt.n	80068de <MSC_BOT_DataIn+0x64>
 80068a0:	3b03      	subs	r3, #3
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d81b      	bhi.n	80068de <MSC_BOT_DataIn+0x64>
 80068a6:	e013      	b.n	80068d0 <MSC_BOT_DataIn+0x56>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ae:	7f59      	ldrb	r1, [r3, #29]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b6:	331f      	adds	r3, #31
 80068b8:	461a      	mov	r2, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f9ac 	bl	8006c18 <SCSI_ProcessCmd>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da0d      	bge.n	80068e2 <MSC_BOT_DataIn+0x68>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80068c6:	2101      	movs	r1, #1
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f90d 	bl	8006ae8 <MSC_BOT_SendCSW>
      }
      break;
 80068ce:	e008      	b.n	80068e2 <MSC_BOT_DataIn+0x68>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80068d0:	2100      	movs	r1, #0
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f908 	bl	8006ae8 <MSC_BOT_SendCSW>
      break;
 80068d8:	e004      	b.n	80068e4 <MSC_BOT_DataIn+0x6a>
    return;
 80068da:	bf00      	nop
 80068dc:	e002      	b.n	80068e4 <MSC_BOT_DataIn+0x6a>

    default:
      break;
 80068de:	bf00      	nop
 80068e0:	e000      	b.n	80068e4 <MSC_BOT_DataIn+0x6a>
      break;
 80068e2:	bf00      	nop
  }
}
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068fc:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01e      	beq.n	8006942 <MSC_BOT_DataOut+0x58>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	7a1b      	ldrb	r3, [r3, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <MSC_BOT_DataOut+0x28>
 800690c:	2b01      	cmp	r3, #1
 800690e:	d004      	beq.n	800691a <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006910:	e01a      	b.n	8006948 <MSC_BOT_DataOut+0x5e>
      MSC_BOT_CBW_Decode(pdev);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f81c 	bl	8006950 <MSC_BOT_CBW_Decode>
      break;
 8006918:	e016      	b.n	8006948 <MSC_BOT_DataOut+0x5e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006920:	7f59      	ldrb	r1, [r3, #29]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006928:	331f      	adds	r3, #31
 800692a:	461a      	mov	r2, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f973 	bl	8006c18 <SCSI_ProcessCmd>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	da06      	bge.n	8006946 <MSC_BOT_DataOut+0x5c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006938:	2101      	movs	r1, #1
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f8d4 	bl	8006ae8 <MSC_BOT_SendCSW>
      break;
 8006940:	e001      	b.n	8006946 <MSC_BOT_DataOut+0x5c>
    return;
 8006942:	bf00      	nop
 8006944:	e000      	b.n	8006948 <MSC_BOT_DataOut+0x5e>
      break;
 8006946:	bf00      	nop
  }
}
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800695e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 8083 	beq.w	8006a6e <MSC_BOT_CBW_Decode+0x11e>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006976:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006986:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006988:	2101      	movs	r1, #1
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f008 fe56 	bl	800f63c <USBD_LL_GetRxDataSize>
 8006990:	4603      	mov	r3, r0
 8006992:	2b1f      	cmp	r3, #31
 8006994:	d118      	bne.n	80069c8 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699c:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800699e:	4a37      	ldr	r2, [pc, #220]	; (8006a7c <MSC_BOT_CBW_Decode+0x12c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d111      	bne.n	80069c8 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069aa:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d80b      	bhi.n	80069c8 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b6:	7f9b      	ldrb	r3, [r3, #30]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d005      	beq.n	80069c8 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bCBLength > 16U))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069c2:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d90f      	bls.n	80069e8 <MSC_BOT_CBW_Decode+0x98>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ce:	7f59      	ldrb	r1, [r3, #29]
 80069d0:	2320      	movs	r3, #32
 80069d2:	2205      	movs	r2, #5
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fe0d 	bl	80075f4 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2202      	movs	r2, #2
 80069de:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f8b7 	bl	8006b54 <MSC_BOT_Abort>
 80069e6:	e045      	b.n	8006a74 <MSC_BOT_CBW_Decode+0x124>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ee:	7f59      	ldrb	r1, [r3, #29]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f6:	331f      	adds	r3, #31
 80069f8:	461a      	mov	r2, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f90c 	bl	8006c18 <SCSI_ProcessCmd>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	da0c      	bge.n	8006a20 <MSC_BOT_CBW_Decode+0xd0>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	7a1b      	ldrb	r3, [r3, #8]
 8006a0a:	2b05      	cmp	r3, #5
 8006a0c:	d104      	bne.n	8006a18 <MSC_BOT_CBW_Decode+0xc8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006a0e:	2101      	movs	r1, #1
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f869 	bl	8006ae8 <MSC_BOT_SendCSW>
 8006a16:	e02d      	b.n	8006a74 <MSC_BOT_CBW_Decode+0x124>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f89b 	bl	8006b54 <MSC_BOT_Abort>
 8006a1e:	e029      	b.n	8006a74 <MSC_BOT_CBW_Decode+0x124>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	7a1b      	ldrb	r3, [r3, #8]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d024      	beq.n	8006a72 <MSC_BOT_CBW_Decode+0x122>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d020      	beq.n	8006a72 <MSC_BOT_CBW_Decode+0x122>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d01c      	beq.n	8006a72 <MSC_BOT_CBW_Decode+0x122>
    {
      if (hmsc->bot_data_length > 0U)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d009      	beq.n	8006a54 <MSC_BOT_CBW_Decode+0x104>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f103 0110 	add.w	r1, r3, #16
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f817 	bl	8006a80 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006a52:	e00f      	b.n	8006a74 <MSC_BOT_CBW_Decode+0x124>
      }
      else if (hmsc->bot_data_length == 0U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <MSC_BOT_CBW_Decode+0x116>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f842 	bl	8006ae8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006a64:	e006      	b.n	8006a74 <MSC_BOT_CBW_Decode+0x124>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f874 	bl	8006b54 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006a6c:	e002      	b.n	8006a74 <MSC_BOT_CBW_Decode+0x124>
    return;
 8006a6e:	bf00      	nop
 8006a70:	e000      	b.n	8006a74 <MSC_BOT_CBW_Decode+0x124>
      }
    }
    else
    {
      return;
 8006a72:	bf00      	nop
    }
  }
}
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	43425355 	.word	0x43425355

08006a80 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a92:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	bf28      	it	cs
 8006aa2:	4613      	movcs	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d019      	beq.n	8006ae0 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006abe:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2204      	movs	r2, #4
 8006ad0:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	2181      	movs	r1, #129	; 0x81
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f008 fd3f 	bl	800f55c <USBD_LL_Transmit>
 8006ade:	e000      	b.n	8006ae2 <MSC_BOT_SendData+0x62>
    return;
 8006ae0:	bf00      	nop
}
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006afa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d022      	beq.n	8006b48 <MSC_BOT_SendCSW+0x60>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <MSC_BOT_SendCSW+0x68>)
 8006b0c:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b14:	461a      	mov	r2, r3
 8006b16:	78fb      	ldrb	r3, [r7, #3]
 8006b18:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8006b28:	3210      	adds	r2, #16
 8006b2a:	230d      	movs	r3, #13
 8006b2c:	2181      	movs	r1, #129	; 0x81
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f008 fd14 	bl	800f55c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8006b3a:	3210      	adds	r2, #16
 8006b3c:	231f      	movs	r3, #31
 8006b3e:	2101      	movs	r1, #1
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f008 fd43 	bl	800f5cc <USBD_LL_PrepareReceive>
 8006b46:	e000      	b.n	8006b4a <MSC_BOT_SendCSW+0x62>
    return;
 8006b48:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	53425355 	.word	0x53425355

08006b54 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b62:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d024      	beq.n	8006bb4 <MSC_BOT_Abort+0x60>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b70:	7f1b      	ldrb	r3, [r3, #28]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10d      	bne.n	8006b92 <MSC_BOT_Abort+0x3e>
      (hmsc->cbw.dDataLength != 0U) &&
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b7c:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d007      	beq.n	8006b92 <MSC_BOT_Abort+0x3e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d103      	bne.n	8006b92 <MSC_BOT_Abort+0x3e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f008 fc17 	bl	800f3c0 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006b92:	2181      	movs	r1, #129	; 0x81
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f008 fc13 	bl	800f3c0 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	7a5b      	ldrb	r3, [r3, #9]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d109      	bne.n	8006bb6 <MSC_BOT_Abort+0x62>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006ba2:	2181      	movs	r1, #129	; 0x81
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f008 fc0b 	bl	800f3c0 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006baa:	2101      	movs	r1, #1
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f008 fc07 	bl	800f3c0 <USBD_LL_StallEP>
 8006bb2:	e000      	b.n	8006bb6 <MSC_BOT_Abort+0x62>
    return;
 8006bb4:	bf00      	nop
  }
}
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bce:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d019      	beq.n	8006c0a <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	7a5b      	ldrb	r3, [r3, #9]
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d108      	bne.n	8006bf0 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006bde:	2181      	movs	r1, #129	; 0x81
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f008 fbed 	bl	800f3c0 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006be6:	2101      	movs	r1, #1
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f008 fbe9 	bl	800f3c0 <USBD_LL_StallEP>
 8006bee:	e00f      	b.n	8006c10 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	da0a      	bge.n	8006c0e <MSC_BOT_CplClrFeature+0x52>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	7a5b      	ldrb	r3, [r3, #9]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d006      	beq.n	8006c0e <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006c00:	2101      	movs	r1, #1
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff ff70 	bl	8006ae8 <MSC_BOT_SendCSW>
 8006c08:	e002      	b.n	8006c10 <MSC_BOT_CplClrFeature+0x54>
    return;
 8006c0a:	bf00      	nop
 8006c0c:	e000      	b.n	8006c10 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8006c0e:	bf00      	nop
  }
}
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	460b      	mov	r3, r1
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c2c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d102      	bne.n	8006c3a <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8006c34:	f04f 33ff 	mov.w	r3, #4294967295
 8006c38:	e168      	b.n	8006f0c <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2baa      	cmp	r3, #170	; 0xaa
 8006c40:	f000 8144 	beq.w	8006ecc <SCSI_ProcessCmd+0x2b4>
 8006c44:	2baa      	cmp	r3, #170	; 0xaa
 8006c46:	f300 8153 	bgt.w	8006ef0 <SCSI_ProcessCmd+0x2d8>
 8006c4a:	2ba8      	cmp	r3, #168	; 0xa8
 8006c4c:	f000 812c 	beq.w	8006ea8 <SCSI_ProcessCmd+0x290>
 8006c50:	2ba8      	cmp	r3, #168	; 0xa8
 8006c52:	f300 814d 	bgt.w	8006ef0 <SCSI_ProcessCmd+0x2d8>
 8006c56:	2b5a      	cmp	r3, #90	; 0x5a
 8006c58:	f300 80c0 	bgt.w	8006ddc <SCSI_ProcessCmd+0x1c4>
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f2c0 8147 	blt.w	8006ef0 <SCSI_ProcessCmd+0x2d8>
 8006c62:	2b5a      	cmp	r3, #90	; 0x5a
 8006c64:	f200 8144 	bhi.w	8006ef0 <SCSI_ProcessCmd+0x2d8>
 8006c68:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <SCSI_ProcessCmd+0x58>)
 8006c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6e:	bf00      	nop
 8006c70:	08006de3 	.word	0x08006de3
 8006c74:	08006ef1 	.word	0x08006ef1
 8006c78:	08006ef1 	.word	0x08006ef1
 8006c7c:	08006df5 	.word	0x08006df5
 8006c80:	08006ef1 	.word	0x08006ef1
 8006c84:	08006ef1 	.word	0x08006ef1
 8006c88:	08006ef1 	.word	0x08006ef1
 8006c8c:	08006ef1 	.word	0x08006ef1
 8006c90:	08006ef1 	.word	0x08006ef1
 8006c94:	08006ef1 	.word	0x08006ef1
 8006c98:	08006ef1 	.word	0x08006ef1
 8006c9c:	08006ef1 	.word	0x08006ef1
 8006ca0:	08006ef1 	.word	0x08006ef1
 8006ca4:	08006ef1 	.word	0x08006ef1
 8006ca8:	08006ef1 	.word	0x08006ef1
 8006cac:	08006ef1 	.word	0x08006ef1
 8006cb0:	08006ef1 	.word	0x08006ef1
 8006cb4:	08006ef1 	.word	0x08006ef1
 8006cb8:	08006e07 	.word	0x08006e07
 8006cbc:	08006ef1 	.word	0x08006ef1
 8006cc0:	08006ef1 	.word	0x08006ef1
 8006cc4:	08006ef1 	.word	0x08006ef1
 8006cc8:	08006ef1 	.word	0x08006ef1
 8006ccc:	08006ef1 	.word	0x08006ef1
 8006cd0:	08006ef1 	.word	0x08006ef1
 8006cd4:	08006ef1 	.word	0x08006ef1
 8006cd8:	08006e3d 	.word	0x08006e3d
 8006cdc:	08006e19 	.word	0x08006e19
 8006ce0:	08006ef1 	.word	0x08006ef1
 8006ce4:	08006ef1 	.word	0x08006ef1
 8006ce8:	08006e2b 	.word	0x08006e2b
 8006cec:	08006ef1 	.word	0x08006ef1
 8006cf0:	08006ef1 	.word	0x08006ef1
 8006cf4:	08006ef1 	.word	0x08006ef1
 8006cf8:	08006ef1 	.word	0x08006ef1
 8006cfc:	08006e61 	.word	0x08006e61
 8006d00:	08006ef1 	.word	0x08006ef1
 8006d04:	08006e73 	.word	0x08006e73
 8006d08:	08006ef1 	.word	0x08006ef1
 8006d0c:	08006ef1 	.word	0x08006ef1
 8006d10:	08006e97 	.word	0x08006e97
 8006d14:	08006ef1 	.word	0x08006ef1
 8006d18:	08006ebb 	.word	0x08006ebb
 8006d1c:	08006ef1 	.word	0x08006ef1
 8006d20:	08006ef1 	.word	0x08006ef1
 8006d24:	08006ef1 	.word	0x08006ef1
 8006d28:	08006ef1 	.word	0x08006ef1
 8006d2c:	08006edf 	.word	0x08006edf
 8006d30:	08006ef1 	.word	0x08006ef1
 8006d34:	08006ef1 	.word	0x08006ef1
 8006d38:	08006ef1 	.word	0x08006ef1
 8006d3c:	08006ef1 	.word	0x08006ef1
 8006d40:	08006ef1 	.word	0x08006ef1
 8006d44:	08006ef1 	.word	0x08006ef1
 8006d48:	08006ef1 	.word	0x08006ef1
 8006d4c:	08006ef1 	.word	0x08006ef1
 8006d50:	08006ef1 	.word	0x08006ef1
 8006d54:	08006ef1 	.word	0x08006ef1
 8006d58:	08006ef1 	.word	0x08006ef1
 8006d5c:	08006ef1 	.word	0x08006ef1
 8006d60:	08006ef1 	.word	0x08006ef1
 8006d64:	08006ef1 	.word	0x08006ef1
 8006d68:	08006ef1 	.word	0x08006ef1
 8006d6c:	08006ef1 	.word	0x08006ef1
 8006d70:	08006ef1 	.word	0x08006ef1
 8006d74:	08006ef1 	.word	0x08006ef1
 8006d78:	08006ef1 	.word	0x08006ef1
 8006d7c:	08006ef1 	.word	0x08006ef1
 8006d80:	08006ef1 	.word	0x08006ef1
 8006d84:	08006ef1 	.word	0x08006ef1
 8006d88:	08006ef1 	.word	0x08006ef1
 8006d8c:	08006ef1 	.word	0x08006ef1
 8006d90:	08006ef1 	.word	0x08006ef1
 8006d94:	08006ef1 	.word	0x08006ef1
 8006d98:	08006ef1 	.word	0x08006ef1
 8006d9c:	08006ef1 	.word	0x08006ef1
 8006da0:	08006ef1 	.word	0x08006ef1
 8006da4:	08006ef1 	.word	0x08006ef1
 8006da8:	08006ef1 	.word	0x08006ef1
 8006dac:	08006ef1 	.word	0x08006ef1
 8006db0:	08006ef1 	.word	0x08006ef1
 8006db4:	08006ef1 	.word	0x08006ef1
 8006db8:	08006ef1 	.word	0x08006ef1
 8006dbc:	08006ef1 	.word	0x08006ef1
 8006dc0:	08006ef1 	.word	0x08006ef1
 8006dc4:	08006ef1 	.word	0x08006ef1
 8006dc8:	08006ef1 	.word	0x08006ef1
 8006dcc:	08006ef1 	.word	0x08006ef1
 8006dd0:	08006ef1 	.word	0x08006ef1
 8006dd4:	08006ef1 	.word	0x08006ef1
 8006dd8:	08006e4f 	.word	0x08006e4f
 8006ddc:	2b9e      	cmp	r3, #158	; 0x9e
 8006dde:	d051      	beq.n	8006e84 <SCSI_ProcessCmd+0x26c>
 8006de0:	e086      	b.n	8006ef0 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8006de2:	7afb      	ldrb	r3, [r7, #11]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	4619      	mov	r1, r3
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 f893 	bl	8006f14 <SCSI_TestUnitReady>
 8006dee:	4603      	mov	r3, r0
 8006df0:	75fb      	strb	r3, [r7, #23]
      break;
 8006df2:	e089      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8006df4:	7afb      	ldrb	r3, [r7, #11]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fb64 	bl	80074c8 <SCSI_RequestSense>
 8006e00:	4603      	mov	r3, r0
 8006e02:	75fb      	strb	r3, [r7, #23]
      break;
 8006e04:	e080      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8006e06:	7afb      	ldrb	r3, [r7, #11]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 f8d5 	bl	8006fbc <SCSI_Inquiry>
 8006e12:	4603      	mov	r3, r0
 8006e14:	75fb      	strb	r3, [r7, #23]
      break;
 8006e16:	e077      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8006e18:	7afb      	ldrb	r3, [r7, #11]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 fc40 	bl	80076a4 <SCSI_StartStopUnit>
 8006e24:	4603      	mov	r3, r0
 8006e26:	75fb      	strb	r3, [r7, #23]
      break;
 8006e28:	e06e      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8006e2a:	7afb      	ldrb	r3, [r7, #11]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fc90 	bl	8007756 <SCSI_AllowPreventRemovable>
 8006e36:	4603      	mov	r3, r0
 8006e38:	75fb      	strb	r3, [r7, #23]
      break;
 8006e3a:	e065      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8006e3c:	7afb      	ldrb	r3, [r7, #11]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	4619      	mov	r1, r3
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 fae8 	bl	8007418 <SCSI_ModeSense6>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4c:	e05c      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8006e4e:	7afb      	ldrb	r3, [r7, #11]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	4619      	mov	r1, r3
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fb0b 	bl	8007470 <SCSI_ModeSense10>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e5e:	e053      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006e60:	7afb      	ldrb	r3, [r7, #11]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	4619      	mov	r1, r3
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 fa61 	bl	800732e <SCSI_ReadFormatCapacity>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e70:	e04a      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8006e72:	7afb      	ldrb	r3, [r7, #11]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	4619      	mov	r1, r3
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 f917 	bl	80070ac <SCSI_ReadCapacity10>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	75fb      	strb	r3, [r7, #23]
      break;
 8006e82:	e041      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8006e84:	7afb      	ldrb	r3, [r7, #11]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f994 	bl	80071b8 <SCSI_ReadCapacity16>
 8006e90:	4603      	mov	r3, r0
 8006e92:	75fb      	strb	r3, [r7, #23]
      break;
 8006e94:	e038      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8006e96:	7afb      	ldrb	r3, [r7, #11]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 fc87 	bl	80077b0 <SCSI_Read10>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea6:	e02f      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8006ea8:	7afb      	ldrb	r3, [r7, #11]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4619      	mov	r1, r3
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 fd2c 	bl	800790c <SCSI_Read12>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb8:	e026      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8006eba:	7afb      	ldrb	r3, [r7, #11]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 fddb 	bl	8007a7c <SCSI_Write10>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eca:	e01d      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8006ecc:	7afb      	ldrb	r3, [r7, #11]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 fea4 	bl	8007c20 <SCSI_Write12>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	75fb      	strb	r3, [r7, #23]
      break;
 8006edc:	e014      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8006ede:	7afb      	ldrb	r3, [r7, #11]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 ff7d 	bl	8007de4 <SCSI_Verify10>
 8006eea:	4603      	mov	r3, r0
 8006eec:	75fb      	strb	r3, [r7, #23]
      break;
 8006eee:	e00b      	b.n	8006f08 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006ef0:	7af9      	ldrb	r1, [r7, #11]
 8006ef2:	2320      	movs	r3, #32
 8006ef4:	2205      	movs	r2, #5
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 fb7c 	bl	80075f4 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2202      	movs	r2, #2
 8006f00:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8006f02:	23ff      	movs	r3, #255	; 0xff
 8006f04:	75fb      	strb	r3, [r7, #23]
      break;
 8006f06:	bf00      	nop
  }

  return ret;
 8006f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f28:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d102      	bne.n	8006f36 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8006f30:	f04f 33ff 	mov.w	r3, #4294967295
 8006f34:	e03e      	b.n	8006fb4 <SCSI_TestUnitReady+0xa0>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00b      	beq.n	8006f5a <SCSI_TestUnitReady+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f48:	7f59      	ldrb	r1, [r3, #29]
 8006f4a:	2320      	movs	r3, #32
 8006f4c:	2205      	movs	r2, #5
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fb50 	bl	80075f4 <SCSI_SenseCode>

    return -1;
 8006f54:	f04f 33ff 	mov.w	r3, #4294967295
 8006f58:	e02c      	b.n	8006fb4 <SCSI_TestUnitReady+0xa0>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f60:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d10b      	bne.n	8006f80 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006f68:	7af9      	ldrb	r1, [r7, #11]
 8006f6a:	233a      	movs	r3, #58	; 0x3a
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 fb40 	bl	80075f4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2205      	movs	r2, #5
 8006f78:	721a      	strb	r2, [r3, #8]
    return -1;
 8006f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7e:	e019      	b.n	8006fb4 <SCSI_TestUnitReady+0xa0>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	7afa      	ldrb	r2, [r7, #11]
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	4798      	blx	r3
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00b      	beq.n	8006fac <SCSI_TestUnitReady+0x98>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006f94:	7af9      	ldrb	r1, [r7, #11]
 8006f96:	233a      	movs	r3, #58	; 0x3a
 8006f98:	2202      	movs	r2, #2
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 fb2a 	bl	80075f4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2205      	movs	r2, #5
 8006fa4:	721a      	strb	r2, [r3, #8]

    return -1;
 8006fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8006faa:	e003      	b.n	8006fb4 <SCSI_TestUnitReady+0xa0>
  }
  hmsc->bot_data_length = 0U;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	60da      	str	r2, [r3, #12]

  return 0;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	607a      	str	r2, [r7, #4]
 8006fc8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fd0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d102      	bne.n	8006fde <SCSI_Inquiry+0x22>
  {
    return -1;
 8006fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fdc:	e05d      	b.n	800709a <SCSI_Inquiry+0xde>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10b      	bne.n	8007002 <SCSI_Inquiry+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff0:	7f59      	ldrb	r1, [r3, #29]
 8006ff2:	2320      	movs	r3, #32
 8006ff4:	2205      	movs	r2, #5
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 fafc 	bl	80075f4 <SCSI_SenseCode>
    return -1;
 8006ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8007000:	e04b      	b.n	800709a <SCSI_Inquiry+0xde>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3301      	adds	r3, #1
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d021      	beq.n	8007054 <SCSI_Inquiry+0x98>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3302      	adds	r3, #2
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d105      	bne.n	8007026 <SCSI_Inquiry+0x6a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800701a:	2206      	movs	r2, #6
 800701c:	4921      	ldr	r1, [pc, #132]	; (80070a4 <SCSI_Inquiry+0xe8>)
 800701e:	69b8      	ldr	r0, [r7, #24]
 8007020:	f001 f86b 	bl	80080fa <SCSI_UpdateBotData>
 8007024:	e038      	b.n	8007098 <SCSI_Inquiry+0xdc>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3302      	adds	r3, #2
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b80      	cmp	r3, #128	; 0x80
 800702e:	d105      	bne.n	800703c <SCSI_Inquiry+0x80>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8007030:	2208      	movs	r2, #8
 8007032:	491d      	ldr	r1, [pc, #116]	; (80070a8 <SCSI_Inquiry+0xec>)
 8007034:	69b8      	ldr	r0, [r7, #24]
 8007036:	f001 f860 	bl	80080fa <SCSI_UpdateBotData>
 800703a:	e02d      	b.n	8007098 <SCSI_Inquiry+0xdc>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007042:	7f59      	ldrb	r1, [r3, #29]
 8007044:	2324      	movs	r3, #36	; 0x24
 8007046:	2205      	movs	r2, #5
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 fad3 	bl	80075f4 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800704e:	f04f 33ff 	mov.w	r3, #4294967295
 8007052:	e022      	b.n	800709a <SCSI_Inquiry+0xde>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800705a:	69d9      	ldr	r1, [r3, #28]
 800705c:	7afa      	ldrb	r2, [r7, #11]
 800705e:	4613      	mov	r3, r2
 8007060:	00db      	lsls	r3, r3, #3
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	440b      	add	r3, r1
 8007068:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	3304      	adds	r3, #4
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	b29b      	uxth	r3, r3
 8007072:	3305      	adds	r3, #5
 8007074:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3304      	adds	r3, #4
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	8bfa      	ldrh	r2, [r7, #30]
 8007080:	429a      	cmp	r2, r3
 8007082:	d303      	bcc.n	800708c <SCSI_Inquiry+0xd0>
    {
      len = params[4];
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3304      	adds	r3, #4
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800708c:	8bfb      	ldrh	r3, [r7, #30]
 800708e:	461a      	mov	r2, r3
 8007090:	6979      	ldr	r1, [r7, #20]
 8007092:	69b8      	ldr	r0, [r7, #24]
 8007094:	f001 f831 	bl	80080fa <SCSI_UpdateBotData>
  }

  return 0;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3720      	adds	r7, #32
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	200000c4 	.word	0x200000c4
 80070a8:	200000cc 	.word	0x200000cc

080070ac <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80070ac:	b590      	push	{r4, r7, lr}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	460b      	mov	r3, r1
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070c0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d102      	bne.n	80070ce <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 80070c8:	f04f 33ff 	mov.w	r3, #4294967295
 80070cc:	e070      	b.n	80071b0 <SCSI_ReadCapacity10+0x104>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070d4:	685c      	ldr	r4, [r3, #4]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80070dc:	3308      	adds	r3, #8
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 80070e4:	3204      	adds	r2, #4
 80070e6:	7af8      	ldrb	r0, [r7, #11]
 80070e8:	4619      	mov	r1, r3
 80070ea:	47a0      	blx	r4
 80070ec:	4603      	mov	r3, r0
 80070ee:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80070f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d106      	bne.n	8007106 <SCSI_ReadCapacity10+0x5a>
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070fe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007102:	2b02      	cmp	r3, #2
 8007104:	d108      	bne.n	8007118 <SCSI_ReadCapacity10+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007106:	7af9      	ldrb	r1, [r7, #11]
 8007108:	233a      	movs	r3, #58	; 0x3a
 800710a:	2202      	movs	r2, #2
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 fa71 	bl	80075f4 <SCSI_SenseCode>
    return -1;
 8007112:	f04f 33ff 	mov.w	r3, #4294967295
 8007116:	e04b      	b.n	80071b0 <SCSI_ReadCapacity10+0x104>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800711e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007120:	3b01      	subs	r3, #1
 8007122:	0e1b      	lsrs	r3, r3, #24
 8007124:	b2da      	uxtb	r2, r3
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007132:	3b01      	subs	r3, #1
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	b2da      	uxtb	r2, r3
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007144:	3b01      	subs	r3, #1
 8007146:	0a1b      	lsrs	r3, r3, #8
 8007148:	b2da      	uxtb	r2, r3
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007156:	b2db      	uxtb	r3, r3
 8007158:	3b01      	subs	r3, #1
 800715a:	b2da      	uxtb	r2, r3
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007166:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800716a:	161b      	asrs	r3, r3, #24
 800716c:	b2da      	uxtb	r2, r3
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007178:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800717c:	141b      	asrs	r3, r3, #16
 800717e:	b2da      	uxtb	r2, r3
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800718a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800718e:	0a1b      	lsrs	r3, r3, #8
 8007190:	b29b      	uxth	r3, r3
 8007192:	b2da      	uxtb	r2, r3
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800719e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2208      	movs	r2, #8
 80071ac:	60da      	str	r2, [r3, #12]

  return 0;
 80071ae:	2300      	movs	r3, #0

}
 80071b0:	4618      	mov	r0, r3
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd90      	pop	{r4, r7, pc}

080071b8 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80071b8:	b590      	push	{r4, r7, lr}
 80071ba:	b089      	sub	sp, #36	; 0x24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	460b      	mov	r3, r1
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071cc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d102      	bne.n	80071da <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 80071d4:	f04f 33ff 	mov.w	r3, #4294967295
 80071d8:	e0a5      	b.n	8007326 <SCSI_ReadCapacity16+0x16e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071e0:	685c      	ldr	r4, [r3, #4]
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80071e8:	3308      	adds	r3, #8
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 80071f0:	3204      	adds	r2, #4
 80071f2:	7af8      	ldrb	r0, [r7, #11]
 80071f4:	4619      	mov	r1, r3
 80071f6:	47a0      	blx	r4
 80071f8:	4603      	mov	r3, r0
 80071fa:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80071fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d106      	bne.n	8007212 <SCSI_ReadCapacity16+0x5a>
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800720a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800720e:	2b02      	cmp	r3, #2
 8007210:	d108      	bne.n	8007224 <SCSI_ReadCapacity16+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007212:	7af9      	ldrb	r1, [r7, #11]
 8007214:	233a      	movs	r3, #58	; 0x3a
 8007216:	2202      	movs	r2, #2
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 f9eb 	bl	80075f4 <SCSI_SenseCode>
    return -1;
 800721e:	f04f 33ff 	mov.w	r3, #4294967295
 8007222:	e080      	b.n	8007326 <SCSI_ReadCapacity16+0x16e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	330a      	adds	r3, #10
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	330b      	adds	r3, #11
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007234:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	330c      	adds	r3, #12
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800723e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	320d      	adds	r2, #13
 8007244:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007246:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800724c:	2300      	movs	r3, #0
 800724e:	77fb      	strb	r3, [r7, #31]
 8007250:	e007      	b.n	8007262 <SCSI_ReadCapacity16+0xaa>
  {
    hmsc->bot_data[idx] = 0U;
 8007252:	7ffb      	ldrb	r3, [r7, #31]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	4413      	add	r3, r2
 8007258:	2200      	movs	r2, #0
 800725a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800725c:	7ffb      	ldrb	r3, [r7, #31]
 800725e:	3301      	adds	r3, #1
 8007260:	77fb      	strb	r3, [r7, #31]
 8007262:	7ffa      	ldrb	r2, [r7, #31]
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	429a      	cmp	r2, r3
 800726a:	d3f2      	bcc.n	8007252 <SCSI_ReadCapacity16+0x9a>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007274:	3b01      	subs	r3, #1
 8007276:	0e1b      	lsrs	r3, r3, #24
 8007278:	b2da      	uxtb	r2, r3
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007286:	3b01      	subs	r3, #1
 8007288:	0c1b      	lsrs	r3, r3, #16
 800728a:	b2da      	uxtb	r2, r3
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007298:	3b01      	subs	r3, #1
 800729a:	0a1b      	lsrs	r3, r3, #8
 800729c:	b2da      	uxtb	r2, r3
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	3b01      	subs	r3, #1
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80072be:	161b      	asrs	r3, r3, #24
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072cc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80072d0:	141b      	asrs	r3, r3, #16
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80072e2:	0a1b      	lsrs	r3, r3, #8
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	330a      	adds	r3, #10
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	330b      	adds	r3, #11
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800730c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	330c      	adds	r3, #12
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007316:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	320d      	adds	r2, #13
 800731c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800731e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	60da      	str	r2, [r3, #12]

  return 0;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3724      	adds	r7, #36	; 0x24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd90      	pop	{r4, r7, pc}

0800732e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b088      	sub	sp, #32
 8007332:	af00      	add	r7, sp, #0
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	460b      	mov	r3, r1
 8007338:	607a      	str	r2, [r7, #4]
 800733a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007342:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d102      	bne.n	8007350 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 800734a:	f04f 33ff 	mov.w	r3, #4294967295
 800734e:	e05e      	b.n	800740e <SCSI_ReadFormatCapacity+0xe0>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f107 0214 	add.w	r2, r7, #20
 800735c:	f107 0110 	add.w	r1, r7, #16
 8007360:	7af8      	ldrb	r0, [r7, #11]
 8007362:	4798      	blx	r3
 8007364:	4603      	mov	r3, r0
 8007366:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007368:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <SCSI_ReadFormatCapacity+0x50>
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007376:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800737a:	2b02      	cmp	r3, #2
 800737c:	d108      	bne.n	8007390 <SCSI_ReadFormatCapacity+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800737e:	7af9      	ldrb	r1, [r7, #11]
 8007380:	233a      	movs	r3, #58	; 0x3a
 8007382:	2202      	movs	r2, #2
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 f935 	bl	80075f4 <SCSI_SenseCode>
    return -1;
 800738a:	f04f 33ff 	mov.w	r3, #4294967295
 800738e:	e03e      	b.n	800740e <SCSI_ReadFormatCapacity+0xe0>
  }

  for (i = 0U; i < 12U ; i++)
 8007390:	2300      	movs	r3, #0
 8007392:	83fb      	strh	r3, [r7, #30]
 8007394:	e007      	b.n	80073a6 <SCSI_ReadFormatCapacity+0x78>
  {
    hmsc->bot_data[i] = 0U;
 8007396:	8bfb      	ldrh	r3, [r7, #30]
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	4413      	add	r3, r2
 800739c:	2200      	movs	r2, #0
 800739e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80073a0:	8bfb      	ldrh	r3, [r7, #30]
 80073a2:	3301      	adds	r3, #1
 80073a4:	83fb      	strh	r3, [r7, #30]
 80073a6:	8bfb      	ldrh	r3, [r7, #30]
 80073a8:	2b0b      	cmp	r3, #11
 80073aa:	d9f4      	bls.n	8007396 <SCSI_ReadFormatCapacity+0x68>
  }

  hmsc->bot_data[3] = 0x08U;
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	2208      	movs	r2, #8
 80073b0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	0e1b      	lsrs	r3, r3, #24
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	0c1b      	lsrs	r3, r3, #16
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	0a1b      	lsrs	r3, r3, #8
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	3b01      	subs	r3, #1
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	2202      	movs	r2, #2
 80073e6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80073e8:	8abb      	ldrh	r3, [r7, #20]
 80073ea:	141b      	asrs	r3, r3, #16
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80073f2:	8abb      	ldrh	r3, [r7, #20]
 80073f4:	0a1b      	lsrs	r3, r3, #8
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80073fe:	8abb      	ldrh	r3, [r7, #20]
 8007400:	b2da      	uxtb	r2, r3
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	220c      	movs	r2, #12
 800740a:	60da      	str	r2, [r3, #12]

  return 0;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3720      	adds	r7, #32
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	460b      	mov	r3, r1
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800742c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800742e:	2317      	movs	r3, #23
 8007430:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <SCSI_ModeSense6+0x26>
  {
    return -1;
 8007438:	f04f 33ff 	mov.w	r3, #4294967295
 800743c:	e011      	b.n	8007462 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3304      	adds	r3, #4
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	b29b      	uxth	r3, r3
 8007446:	8afa      	ldrh	r2, [r7, #22]
 8007448:	429a      	cmp	r2, r3
 800744a:	d303      	bcc.n	8007454 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8007454:	8afb      	ldrh	r3, [r7, #22]
 8007456:	461a      	mov	r2, r3
 8007458:	4904      	ldr	r1, [pc, #16]	; (800746c <SCSI_ModeSense6+0x54>)
 800745a:	6938      	ldr	r0, [r7, #16]
 800745c:	f000 fe4d 	bl	80080fa <SCSI_UpdateBotData>

  return 0;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	200000d4 	.word	0x200000d4

08007470 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	460b      	mov	r3, r1
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007484:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8007486:	231b      	movs	r3, #27
 8007488:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <SCSI_ModeSense10+0x26>
  {
    return -1;
 8007490:	f04f 33ff 	mov.w	r3, #4294967295
 8007494:	e011      	b.n	80074ba <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3308      	adds	r3, #8
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	b29b      	uxth	r3, r3
 800749e:	8afa      	ldrh	r2, [r7, #22]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d303      	bcc.n	80074ac <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3308      	adds	r3, #8
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80074ac:	8afb      	ldrh	r3, [r7, #22]
 80074ae:	461a      	mov	r2, r3
 80074b0:	4904      	ldr	r1, [pc, #16]	; (80074c4 <SCSI_ModeSense10+0x54>)
 80074b2:	6938      	ldr	r0, [r7, #16]
 80074b4:	f000 fe21 	bl	80080fa <SCSI_UpdateBotData>

  return 0;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	200000ec 	.word	0x200000ec

080074c8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	460b      	mov	r3, r1
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074dc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d102      	bne.n	80074ea <SCSI_RequestSense+0x22>
  {
    return -1;
 80074e4:	f04f 33ff 	mov.w	r3, #4294967295
 80074e8:	e080      	b.n	80075ec <SCSI_RequestSense+0x124>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10b      	bne.n	800750e <SCSI_RequestSense+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074fc:	7f59      	ldrb	r1, [r3, #29]
 80074fe:	2320      	movs	r3, #32
 8007500:	2205      	movs	r2, #5
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 f876 	bl	80075f4 <SCSI_SenseCode>
    return -1;
 8007508:	f04f 33ff 	mov.w	r3, #4294967295
 800750c:	e06e      	b.n	80075ec <SCSI_RequestSense+0x124>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800750e:	2300      	movs	r3, #0
 8007510:	75fb      	strb	r3, [r7, #23]
 8007512:	e007      	b.n	8007524 <SCSI_RequestSense+0x5c>
  {
    hmsc->bot_data[i] = 0U;
 8007514:	7dfb      	ldrb	r3, [r7, #23]
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	4413      	add	r3, r2
 800751a:	2200      	movs	r2, #0
 800751c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	3301      	adds	r3, #1
 8007522:	75fb      	strb	r3, [r7, #23]
 8007524:	7dfb      	ldrb	r3, [r7, #23]
 8007526:	2b11      	cmp	r3, #17
 8007528:	d9f4      	bls.n	8007514 <SCSI_RequestSense+0x4c>
  }

  hmsc->bot_data[0] = 0x70U;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	2270      	movs	r2, #112	; 0x70
 800752e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	220c      	movs	r2, #12
 8007534:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007546:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800754a:	429a      	cmp	r2, r3
 800754c:	d03f      	beq.n	80075ce <SCSI_RequestSense+0x106>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007554:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007558:	461a      	mov	r2, r3
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8007560:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800756e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007578:	00db      	lsls	r3, r3, #3
 800757a:	4413      	add	r3, r2
 800757c:	791a      	ldrb	r2, [r3, #4]
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007588:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4413      	add	r3, r2
 8007596:	795a      	ldrb	r2, [r3, #5]
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80075a6:	3301      	adds	r3, #1
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ba:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d105      	bne.n	80075ce <SCSI_RequestSense+0x106>
    {
      hmsc->scsi_sense_head = 0U;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2212      	movs	r2, #18
 80075d2:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3304      	adds	r3, #4
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b12      	cmp	r3, #18
 80075dc:	d805      	bhi.n	80075ea <SCSI_RequestSense+0x122>
  {
    hmsc->bot_data_length = params[4];
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3304      	adds	r3, #4
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	4608      	mov	r0, r1
 80075fe:	4611      	mov	r1, r2
 8007600:	461a      	mov	r2, r3
 8007602:	4603      	mov	r3, r0
 8007604:	70fb      	strb	r3, [r7, #3]
 8007606:	460b      	mov	r3, r1
 8007608:	70bb      	strb	r3, [r7, #2]
 800760a:	4613      	mov	r3, r2
 800760c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007614:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d03d      	beq.n	8007698 <SCSI_SenseCode+0xa4>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007622:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007626:	461a      	mov	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800762e:	78b9      	ldrb	r1, [r7, #2]
 8007630:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800763a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007644:	00db      	lsls	r3, r3, #3
 8007646:	4413      	add	r3, r2
 8007648:	787a      	ldrb	r2, [r7, #1]
 800764a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007652:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	4413      	add	r3, r2
 8007660:	2200      	movs	r2, #0
 8007662:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800766a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800766e:	3301      	adds	r3, #1
 8007670:	b2da      	uxtb	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007678:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007682:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007686:	2b04      	cmp	r3, #4
 8007688:	d107      	bne.n	800769a <SCSI_SenseCode+0xa6>
  {
    hmsc->scsi_sense_tail = 0U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8007696:	e000      	b.n	800769a <SCSI_SenseCode+0xa6>
    return;
 8007698:	bf00      	nop
  }
}
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	460b      	mov	r3, r1
 80076ae:	607a      	str	r2, [r7, #4]
 80076b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076b8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 80076c0:	f04f 33ff 	mov.w	r3, #4294967295
 80076c4:	e043      	b.n	800774e <SCSI_StartStopUnit+0xaa>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076cc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d10f      	bne.n	80076f4 <SCSI_StartStopUnit+0x50>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3304      	adds	r3, #4
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d108      	bne.n	80076f4 <SCSI_StartStopUnit+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80076e2:	7af9      	ldrb	r1, [r7, #11]
 80076e4:	2324      	movs	r3, #36	; 0x24
 80076e6:	2205      	movs	r2, #5
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f7ff ff83 	bl	80075f4 <SCSI_SenseCode>

    return -1;
 80076ee:	f04f 33ff 	mov.w	r3, #4294967295
 80076f2:	e02c      	b.n	800774e <SCSI_StartStopUnit+0xaa>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3304      	adds	r3, #4
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d106      	bne.n	8007710 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800770e:	e01a      	b.n	8007746 <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3304      	adds	r3, #4
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	2b02      	cmp	r3, #2
 800771c:	d106      	bne.n	800772c <SCSI_StartStopUnit+0x88>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007724:	2202      	movs	r2, #2
 8007726:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800772a:	e00c      	b.n	8007746 <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	3304      	adds	r3, #4
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	2b03      	cmp	r3, #3
 8007738:	d105      	bne.n	8007746 <SCSI_StartStopUnit+0xa2>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2200      	movs	r2, #0
 800774a:	60da      	str	r2, [r3, #12]

  return 0;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007756:	b480      	push	{r7}
 8007758:	b087      	sub	sp, #28
 800775a:	af00      	add	r7, sp, #0
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	460b      	mov	r3, r1
 8007760:	607a      	str	r2, [r7, #4]
 8007762:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800776a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d102      	bne.n	8007778 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8007772:	f04f 33ff 	mov.w	r3, #4294967295
 8007776:	e015      	b.n	80077a4 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	3304      	adds	r3, #4
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d106      	bne.n	8007790 <SCSI_AllowPreventRemovable+0x3a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800778e:	e005      	b.n	800779c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	2200      	movs	r2, #0
 80077a0:	60da      	str	r2, [r3, #12]

  return 0;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	371c      	adds	r7, #28
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	460b      	mov	r3, r1
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077c4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d102      	bne.n	80077d2 <SCSI_Read10+0x22>
  {
    return -1;
 80077cc:	f04f 33ff 	mov.w	r3, #4294967295
 80077d0:	e098      	b.n	8007904 <SCSI_Read10+0x154>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	7a1b      	ldrb	r3, [r3, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f040 808a 	bne.w	80078f0 <SCSI_Read10+0x140>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e2:	7f1b      	ldrb	r3, [r3, #28]
 80077e4:	b25b      	sxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	db0b      	blt.n	8007802 <SCSI_Read10+0x52>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f0:	7f59      	ldrb	r1, [r3, #29]
 80077f2:	2320      	movs	r3, #32
 80077f4:	2205      	movs	r2, #5
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f7ff fefc 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 80077fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007800:	e080      	b.n	8007904 <SCSI_Read10+0x154>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007808:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800780c:	2b02      	cmp	r3, #2
 800780e:	d108      	bne.n	8007822 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007810:	7af9      	ldrb	r1, [r7, #11]
 8007812:	233a      	movs	r3, #58	; 0x3a
 8007814:	2202      	movs	r2, #2
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f7ff feec 	bl	80075f4 <SCSI_SenseCode>

      return -1;
 800781c:	f04f 33ff 	mov.w	r3, #4294967295
 8007820:	e070      	b.n	8007904 <SCSI_Read10+0x154>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	7afa      	ldrb	r2, [r7, #11]
 800782c:	4610      	mov	r0, r2
 800782e:	4798      	blx	r3
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d008      	beq.n	8007848 <SCSI_Read10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007836:	7af9      	ldrb	r1, [r7, #11]
 8007838:	233a      	movs	r3, #58	; 0x3a
 800783a:	2202      	movs	r2, #2
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f7ff fed9 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 8007842:	f04f 33ff 	mov.w	r3, #4294967295
 8007846:	e05d      	b.n	8007904 <SCSI_Read10+0x154>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3302      	adds	r3, #2
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3303      	adds	r3, #3
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007858:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3304      	adds	r3, #4
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007862:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	3205      	adds	r2, #5
 8007868:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800786a:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007872:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3307      	adds	r3, #7
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	021b      	lsls	r3, r3, #8
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	3208      	adds	r2, #8
 8007880:	7812      	ldrb	r2, [r2, #0]
 8007882:	4313      	orrs	r3, r2
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800788a:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007892:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800789a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789c:	7af9      	ldrb	r1, [r7, #11]
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 fadb 	bl	8007e5a <SCSI_CheckAddressRange>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	da02      	bge.n	80078b0 <SCSI_Read10+0x100>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80078aa:	f04f 33ff 	mov.w	r3, #4294967295
 80078ae:	e029      	b.n	8007904 <SCSI_Read10+0x154>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b6:	699a      	ldr	r2, [r3, #24]
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c0:	6979      	ldr	r1, [r7, #20]
 80078c2:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80078c6:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d00b      	beq.n	80078ea <SCSI_Read10+0x13a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078d8:	7f59      	ldrb	r1, [r3, #29]
 80078da:	2320      	movs	r3, #32
 80078dc:	2205      	movs	r2, #5
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f7ff fe88 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 80078e4:	f04f 33ff 	mov.w	r3, #4294967295
 80078e8:	e00c      	b.n	8007904 <SCSI_Read10+0x154>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2202      	movs	r2, #2
 80078ee:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80078f6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80078f8:	7afb      	ldrb	r3, [r7, #11]
 80078fa:	4619      	mov	r1, r3
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 fad5 	bl	8007eac <SCSI_ProcessRead>
 8007902:	4603      	mov	r3, r0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	460b      	mov	r3, r1
 8007916:	607a      	str	r2, [r7, #4]
 8007918:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007920:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d102      	bne.n	800792e <SCSI_Read12+0x22>
  {
    return -1;
 8007928:	f04f 33ff 	mov.w	r3, #4294967295
 800792c:	e0a2      	b.n	8007a74 <SCSI_Read12+0x168>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	7a1b      	ldrb	r3, [r3, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	f040 8094 	bne.w	8007a60 <SCSI_Read12+0x154>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800793e:	7f1b      	ldrb	r3, [r3, #28]
 8007940:	b25b      	sxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	db0b      	blt.n	800795e <SCSI_Read12+0x52>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800794c:	7f59      	ldrb	r1, [r3, #29]
 800794e:	2320      	movs	r3, #32
 8007950:	2205      	movs	r2, #5
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f7ff fe4e 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 8007958:	f04f 33ff 	mov.w	r3, #4294967295
 800795c:	e08a      	b.n	8007a74 <SCSI_Read12+0x168>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007964:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007968:	2b02      	cmp	r3, #2
 800796a:	d108      	bne.n	800797e <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800796c:	7af9      	ldrb	r1, [r7, #11]
 800796e:	233a      	movs	r3, #58	; 0x3a
 8007970:	2202      	movs	r2, #2
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f7ff fe3e 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 8007978:	f04f 33ff 	mov.w	r3, #4294967295
 800797c:	e07a      	b.n	8007a74 <SCSI_Read12+0x168>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	7afa      	ldrb	r2, [r7, #11]
 8007988:	4610      	mov	r0, r2
 800798a:	4798      	blx	r3
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d008      	beq.n	80079a4 <SCSI_Read12+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007992:	7af9      	ldrb	r1, [r7, #11]
 8007994:	233a      	movs	r3, #58	; 0x3a
 8007996:	2202      	movs	r2, #2
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f7ff fe2b 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 800799e:	f04f 33ff 	mov.w	r3, #4294967295
 80079a2:	e067      	b.n	8007a74 <SCSI_Read12+0x168>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3302      	adds	r3, #2
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	3303      	adds	r3, #3
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80079b4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3304      	adds	r3, #4
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80079be:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	3205      	adds	r2, #5
 80079c4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80079c6:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80079ce:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3306      	adds	r3, #6
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3307      	adds	r3, #7
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80079e0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3308      	adds	r3, #8
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80079ea:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	3209      	adds	r2, #9
 80079f0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80079f2:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80079fa:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0c:	7af9      	ldrb	r1, [r7, #11]
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 fa23 	bl	8007e5a <SCSI_CheckAddressRange>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	da02      	bge.n	8007a20 <SCSI_Read12+0x114>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1e:	e029      	b.n	8007a74 <SCSI_Read12+0x168>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a26:	699a      	ldr	r2, [r3, #24]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a30:	6979      	ldr	r1, [r7, #20]
 8007a32:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007a36:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 8007a3a:	fb01 f303 	mul.w	r3, r1, r3
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d00b      	beq.n	8007a5a <SCSI_Read12+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a48:	7f59      	ldrb	r1, [r3, #29]
 8007a4a:	2320      	movs	r3, #32
 8007a4c:	2205      	movs	r2, #5
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f7ff fdd0 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 8007a54:	f04f 33ff 	mov.w	r3, #4294967295
 8007a58:	e00c      	b.n	8007a74 <SCSI_Read12+0x168>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a66:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007a68:	7afb      	ldrb	r3, [r7, #11]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 fa1d 	bl	8007eac <SCSI_ProcessRead>
 8007a72:	4603      	mov	r3, r0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	460b      	mov	r3, r1
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a90:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <SCSI_Write10+0x22>
  {
    return -1;
 8007a98:	f04f 33ff 	mov.w	r3, #4294967295
 8007a9c:	e0bc      	b.n	8007c18 <SCSI_Write10+0x19c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	7a1b      	ldrb	r3, [r3, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f040 80b2 	bne.w	8007c0c <SCSI_Write10+0x190>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10b      	bne.n	8007acc <SCSI_Write10+0x50>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aba:	7f59      	ldrb	r1, [r3, #29]
 8007abc:	2320      	movs	r3, #32
 8007abe:	2205      	movs	r2, #5
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f7ff fd97 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 8007ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aca:	e0a5      	b.n	8007c18 <SCSI_Write10+0x19c>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad2:	7f1b      	ldrb	r3, [r3, #28]
 8007ad4:	b25b      	sxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da0b      	bge.n	8007af2 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae0:	7f59      	ldrb	r1, [r3, #29]
 8007ae2:	2320      	movs	r3, #32
 8007ae4:	2205      	movs	r2, #5
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f7ff fd84 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 8007aec:	f04f 33ff 	mov.w	r3, #4294967295
 8007af0:	e092      	b.n	8007c18 <SCSI_Write10+0x19c>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	7afa      	ldrb	r2, [r7, #11]
 8007afc:	4610      	mov	r0, r2
 8007afe:	4798      	blx	r3
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d008      	beq.n	8007b18 <SCSI_Write10+0x9c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b06:	7af9      	ldrb	r1, [r7, #11]
 8007b08:	233a      	movs	r3, #58	; 0x3a
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f7ff fd71 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 8007b12:	f04f 33ff 	mov.w	r3, #4294967295
 8007b16:	e07f      	b.n	8007c18 <SCSI_Write10+0x19c>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	7afa      	ldrb	r2, [r7, #11]
 8007b22:	4610      	mov	r0, r2
 8007b24:	4798      	blx	r3
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d008      	beq.n	8007b3e <SCSI_Write10+0xc2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007b2c:	7af9      	ldrb	r1, [r7, #11]
 8007b2e:	2327      	movs	r3, #39	; 0x27
 8007b30:	2202      	movs	r2, #2
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f7ff fd5e 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 8007b38:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3c:	e06c      	b.n	8007c18 <SCSI_Write10+0x19c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3302      	adds	r3, #2
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3303      	adds	r3, #3
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b4e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3304      	adds	r3, #4
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007b58:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	3205      	adds	r2, #5
 8007b5e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007b60:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b68:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	3307      	adds	r3, #7
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	3208      	adds	r2, #8
 8007b76:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b80:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b92:	7af9      	ldrb	r1, [r7, #11]
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 f960 	bl	8007e5a <SCSI_CheckAddressRange>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	da02      	bge.n	8007ba6 <SCSI_Write10+0x12a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba4:	e038      	b.n	8007c18 <SCSI_Write10+0x19c>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007bb4:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8007bb8:	fb02 f303 	mul.w	r3, r2, r3
 8007bbc:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d00b      	beq.n	8007be4 <SCSI_Write10+0x168>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd2:	7f59      	ldrb	r1, [r3, #29]
 8007bd4:	2320      	movs	r3, #32
 8007bd6:	2205      	movs	r2, #5
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f7ff fd0b 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 8007bde:	f04f 33ff 	mov.w	r3, #4294967295
 8007be2:	e019      	b.n	8007c18 <SCSI_Write10+0x19c>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bea:	bf28      	it	cs
 8007bec:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8007bf0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f103 0210 	add.w	r2, r3, #16
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	2101      	movs	r1, #1
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f007 fce2 	bl	800f5cc <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	e005      	b.n	8007c18 <SCSI_Write10+0x19c>
    return SCSI_ProcessWrite(pdev, lun);
 8007c0c:	7afb      	ldrb	r3, [r7, #11]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 f9d5 	bl	8007fc0 <SCSI_ProcessWrite>
 8007c16:	4603      	mov	r3, r0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3718      	adds	r7, #24
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c34:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d102      	bne.n	8007c42 <SCSI_Write12+0x22>
  {
    return -1;
 8007c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c40:	e0cc      	b.n	8007ddc <SCSI_Write12+0x1bc>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	7a1b      	ldrb	r3, [r3, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f040 80c2 	bne.w	8007dd0 <SCSI_Write12+0x1b0>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10b      	bne.n	8007c70 <SCSI_Write12+0x50>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c5e:	7f59      	ldrb	r1, [r3, #29]
 8007c60:	2320      	movs	r3, #32
 8007c62:	2205      	movs	r2, #5
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f7ff fcc5 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 8007c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c6e:	e0b5      	b.n	8007ddc <SCSI_Write12+0x1bc>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c76:	7f1b      	ldrb	r3, [r3, #28]
 8007c78:	b25b      	sxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	da0b      	bge.n	8007c96 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c84:	7f59      	ldrb	r1, [r3, #29]
 8007c86:	2320      	movs	r3, #32
 8007c88:	2205      	movs	r2, #5
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f7ff fcb2 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 8007c90:	f04f 33ff 	mov.w	r3, #4294967295
 8007c94:	e0a2      	b.n	8007ddc <SCSI_Write12+0x1bc>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	7afa      	ldrb	r2, [r7, #11]
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4798      	blx	r3
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00b      	beq.n	8007cc2 <SCSI_Write12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007caa:	7af9      	ldrb	r1, [r7, #11]
 8007cac:	233a      	movs	r3, #58	; 0x3a
 8007cae:	2202      	movs	r2, #2
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f7ff fc9f 	bl	80075f4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2205      	movs	r2, #5
 8007cba:	721a      	strb	r2, [r3, #8]
      return -1;
 8007cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc0:	e08c      	b.n	8007ddc <SCSI_Write12+0x1bc>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	7afa      	ldrb	r2, [r7, #11]
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4798      	blx	r3
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00b      	beq.n	8007cee <SCSI_Write12+0xce>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007cd6:	7af9      	ldrb	r1, [r7, #11]
 8007cd8:	2327      	movs	r3, #39	; 0x27
 8007cda:	2202      	movs	r2, #2
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f7ff fc89 	bl	80075f4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2205      	movs	r2, #5
 8007ce6:	721a      	strb	r2, [r3, #8]
      return -1;
 8007ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cec:	e076      	b.n	8007ddc <SCSI_Write12+0x1bc>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3302      	adds	r3, #2
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	3303      	adds	r3, #3
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007cfe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3304      	adds	r3, #4
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007d08:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	3205      	adds	r2, #5
 8007d0e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007d10:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d18:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3306      	adds	r3, #6
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3307      	adds	r3, #7
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007d2a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3308      	adds	r3, #8
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007d34:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	3209      	adds	r2, #9
 8007d3a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007d3c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d44:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d4c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d56:	7af9      	ldrb	r1, [r7, #11]
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f000 f87e 	bl	8007e5a <SCSI_CheckAddressRange>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	da02      	bge.n	8007d6a <SCSI_Write12+0x14a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007d64:	f04f 33ff 	mov.w	r3, #4294967295
 8007d68:	e038      	b.n	8007ddc <SCSI_Write12+0x1bc>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d78:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8007d7c:	fb02 f303 	mul.w	r3, r2, r3
 8007d80:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d00b      	beq.n	8007da8 <SCSI_Write12+0x188>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d96:	7f59      	ldrb	r1, [r3, #29]
 8007d98:	2320      	movs	r3, #32
 8007d9a:	2205      	movs	r2, #5
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7ff fc29 	bl	80075f4 <SCSI_SenseCode>
      return -1;
 8007da2:	f04f 33ff 	mov.w	r3, #4294967295
 8007da6:	e019      	b.n	8007ddc <SCSI_Write12+0x1bc>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dae:	bf28      	it	cs
 8007db0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8007db4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2201      	movs	r2, #1
 8007dba:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f103 0210 	add.w	r2, r3, #16
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f007 fc00 	bl	800f5cc <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e005      	b.n	8007ddc <SCSI_Write12+0x1bc>
    return SCSI_ProcessWrite(pdev, lun);
 8007dd0:	7afb      	ldrb	r3, [r7, #11]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 f8f3 	bl	8007fc0 <SCSI_ProcessWrite>
 8007dda:	4603      	mov	r3, r0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	460b      	mov	r3, r1
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007df8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d102      	bne.n	8007e06 <SCSI_Verify10+0x22>
  {
    return -1;
 8007e00:	f04f 33ff 	mov.w	r3, #4294967295
 8007e04:	e025      	b.n	8007e52 <SCSI_Verify10+0x6e>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	f003 0302 	and.w	r3, r3, #2
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d008      	beq.n	8007e26 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007e14:	7af9      	ldrb	r1, [r7, #11]
 8007e16:	2324      	movs	r3, #36	; 0x24
 8007e18:	2205      	movs	r2, #5
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f7ff fbea 	bl	80075f4 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007e20:	f04f 33ff 	mov.w	r3, #4294967295
 8007e24:	e015      	b.n	8007e52 <SCSI_Verify10+0x6e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e36:	7af9      	ldrb	r1, [r7, #11]
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f000 f80e 	bl	8007e5a <SCSI_CheckAddressRange>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	da02      	bge.n	8007e4a <SCSI_Verify10+0x66>
  {
    return -1; /* error */
 8007e44:	f04f 33ff 	mov.w	r3, #4294967295
 8007e48:	e003      	b.n	8007e52 <SCSI_Verify10+0x6e>
  }

  hmsc->bot_data_length = 0U;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	60da      	str	r2, [r3, #12]

  return 0;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b086      	sub	sp, #24
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	60f8      	str	r0, [r7, #12]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]
 8007e66:	460b      	mov	r3, r1
 8007e68:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e70:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d102      	bne.n	8007e7e <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8007e78:	f04f 33ff 	mov.w	r3, #4294967295
 8007e7c:	e012      	b.n	8007ea4 <SCSI_CheckAddressRange+0x4a>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	441a      	add	r2, r3
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d908      	bls.n	8007ea2 <SCSI_CheckAddressRange+0x48>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007e90:	7af9      	ldrb	r1, [r7, #11]
 8007e92:	2321      	movs	r3, #33	; 0x21
 8007e94:	2205      	movs	r2, #5
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f7ff fbac 	bl	80075f4 <SCSI_SenseCode>
    return -1;
 8007e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea0:	e000      	b.n	8007ea4 <SCSI_CheckAddressRange+0x4a>
  }

  return 0;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007eac:	b590      	push	{r4, r7, lr}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ebe:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ece:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8007ed2:	fb02 f303 	mul.w	r3, r2, r3
 8007ed6:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d102      	bne.n	8007ee4 <SCSI_ProcessRead+0x38>
  {
    return -1;
 8007ede:	f04f 33ff 	mov.w	r3, #4294967295
 8007ee2:	e069      	b.n	8007fb8 <SCSI_ProcessRead+0x10c>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eea:	bf28      	it	cs
 8007eec:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8007ef0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ef8:	691c      	ldr	r4, [r3, #16]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f103 0110 	add.w	r1, r3, #16
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007f12:	4618      	mov	r0, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	78f8      	ldrb	r0, [r7, #3]
 8007f1e:	47a0      	blx	r4
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	da08      	bge.n	8007f38 <SCSI_ProcessRead+0x8c>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007f26:	78f9      	ldrb	r1, [r7, #3]
 8007f28:	2311      	movs	r3, #17
 8007f2a:	2204      	movs	r2, #4
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff fb61 	bl	80075f4 <SCSI_SenseCode>
    return -1;
 8007f32:	f04f 33ff 	mov.w	r3, #4294967295
 8007f36:	e03f      	b.n	8007fb8 <SCSI_ProcessRead+0x10c>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f103 0210 	add.w	r2, r3, #16
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2181      	movs	r1, #129	; 0x81
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f007 fb0a 	bl	800f55c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f62:	4413      	add	r3, r2
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f6a:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007f7e:	4619      	mov	r1, r3
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f8e:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fa2:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d102      	bne.n	8007fb6 <SCSI_ProcessRead+0x10a>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2203      	movs	r2, #3
 8007fb4:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd90      	pop	{r4, r7, pc}

08007fc0 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007fc0:	b590      	push	{r4, r7, lr}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fd2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fe2:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8007fe6:	fb02 f303 	mul.w	r3, r2, r3
 8007fea:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d102      	bne.n	8007ff8 <SCSI_ProcessWrite+0x38>
  {
    return -1;
 8007ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff6:	e07c      	b.n	80080f2 <SCSI_ProcessWrite+0x132>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ffe:	bf28      	it	cs
 8008000:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8008004:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800800c:	695c      	ldr	r4, [r3, #20]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f103 0110 	add.w	r1, r3, #16
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800801a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008022:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008026:	4618      	mov	r0, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800802e:	b29b      	uxth	r3, r3
 8008030:	78f8      	ldrb	r0, [r7, #3]
 8008032:	47a0      	blx	r4
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	da08      	bge.n	800804c <SCSI_ProcessWrite+0x8c>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800803a:	78f9      	ldrb	r1, [r7, #3]
 800803c:	2303      	movs	r3, #3
 800803e:	2204      	movs	r2, #4
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff fad7 	bl	80075f4 <SCSI_SenseCode>
    return -1;
 8008046:	f04f 33ff 	mov.w	r3, #4294967295
 800804a:	e052      	b.n	80080f2 <SCSI_ProcessWrite+0x132>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008052:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800805a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800805e:	4619      	mov	r1, r3
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	fbb3 f3f1 	udiv	r3, r3, r1
 8008066:	4413      	add	r3, r2
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800806e:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008076:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008082:	4619      	mov	r1, r3
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	fbb3 f3f1 	udiv	r3, r3, r1
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008092:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800809a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80080a6:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d104      	bne.n	80080be <SCSI_ProcessWrite+0xfe>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80080b4:	2100      	movs	r1, #0
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7fe fd16 	bl	8006ae8 <MSC_BOT_SendCSW>
 80080bc:	e018      	b.n	80080f0 <SCSI_ProcessWrite+0x130>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80080cc:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80080d0:	fb02 f303 	mul.w	r3, r2, r3
 80080d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d8:	bf28      	it	cs
 80080da:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 80080de:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f103 0210 	add.w	r2, r3, #16
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2101      	movs	r1, #1
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f007 fa6e 	bl	800f5cc <USBD_LL_PrepareReceive>
  }

  return 0;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd90      	pop	{r4, r7, pc}

080080fa <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b087      	sub	sp, #28
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	4613      	mov	r3, r2
 8008106:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8008108:	88fb      	ldrh	r3, [r7, #6]
 800810a:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d102      	bne.n	8008118 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8008112:	f04f 33ff 	mov.w	r3, #4294967295
 8008116:	e013      	b.n	8008140 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8008118:	8afa      	ldrh	r2, [r7, #22]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800811e:	e00b      	b.n	8008138 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8008120:	8afb      	ldrh	r3, [r7, #22]
 8008122:	3b01      	subs	r3, #1
 8008124:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8008126:	8afb      	ldrh	r3, [r7, #22]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	441a      	add	r2, r3
 800812c:	8afb      	ldrh	r3, [r7, #22]
 800812e:	7811      	ldrb	r1, [r2, #0]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	460a      	mov	r2, r1
 8008136:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8008138:	8afb      	ldrh	r3, [r7, #22]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1f0      	bne.n	8008120 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	371c      	adds	r7, #28
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	4613      	mov	r3, r2
 8008158:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008160:	2303      	movs	r3, #3
 8008162:	e01f      	b.n	80081a4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	79fa      	ldrb	r2, [r7, #7]
 8008196:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f006 ff85 	bl	800f0a8 <USBD_LL_Init>
 800819e:	4603      	mov	r3, r0
 80081a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f007 f827 	bl	800f208 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d011      	beq.n	80081f0 <USBD_DeInit+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	6852      	ldr	r2, [r2, #4]
 80081d8:	b2d2      	uxtb	r2, r2
 80081da:	4611      	mov	r1, r2
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	4798      	blx	r3
    pdev->pClass = NULL;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    pdev->pUserData = NULL;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  }

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f006 ff9d 	bl	800f140 <USBD_LL_DeInit>
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]

  return ret;
 800820a:	7bfb      	ldrb	r3, [r7, #15]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008228:	2303      	movs	r3, #3
 800822a:	e016      	b.n	800825a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800823a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00b      	beq.n	8008258 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	f107 020e 	add.w	r2, r7, #14
 800824c:	4610      	mov	r0, r2
 800824e:	4798      	blx	r3
 8008250:	4602      	mov	r2, r0
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b082      	sub	sp, #8
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f006 ff9a 	bl	800f1a4 <USBD_LL_Start>
 8008270:	4603      	mov	r3, r0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800829c:	2303      	movs	r3, #3
 800829e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d009      	beq.n	80082be <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	78fa      	ldrb	r2, [r7, #3]
 80082b4:	4611      	mov	r1, r2
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	4798      	blx	r3
 80082ba:	4603      	mov	r3, r0
 80082bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082be:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d007      	beq.n	80082ee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	78fa      	ldrb	r2, [r7, #3]
 80082e8:	4611      	mov	r1, r2
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	4798      	blx	r3
  }

  return USBD_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	4618      	mov	r0, r3
 800830c:	f000 ff90 	bl	8009230 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800831e:	461a      	mov	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800832c:	f003 031f 	and.w	r3, r3, #31
 8008330:	2b02      	cmp	r3, #2
 8008332:	d01a      	beq.n	800836a <USBD_LL_SetupStage+0x72>
 8008334:	2b02      	cmp	r3, #2
 8008336:	d822      	bhi.n	800837e <USBD_LL_SetupStage+0x86>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <USBD_LL_SetupStage+0x4a>
 800833c:	2b01      	cmp	r3, #1
 800833e:	d00a      	beq.n	8008356 <USBD_LL_SetupStage+0x5e>
 8008340:	e01d      	b.n	800837e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa62 	bl	8008814 <USBD_StdDevReq>
 8008350:	4603      	mov	r3, r0
 8008352:	73fb      	strb	r3, [r7, #15]
      break;
 8008354:	e020      	b.n	8008398 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fac6 	bl	80088f0 <USBD_StdItfReq>
 8008364:	4603      	mov	r3, r0
 8008366:	73fb      	strb	r3, [r7, #15]
      break;
 8008368:	e016      	b.n	8008398 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fb05 	bl	8008982 <USBD_StdEPReq>
 8008378:	4603      	mov	r3, r0
 800837a:	73fb      	strb	r3, [r7, #15]
      break;
 800837c:	e00c      	b.n	8008398 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008384:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008388:	b2db      	uxtb	r3, r3
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f007 f817 	bl	800f3c0 <USBD_LL_StallEP>
 8008392:	4603      	mov	r3, r0
 8008394:	73fb      	strb	r3, [r7, #15]
      break;
 8008396:	bf00      	nop
  }

  return ret;
 8008398:	7bfb      	ldrb	r3, [r7, #15]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b086      	sub	sp, #24
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	60f8      	str	r0, [r7, #12]
 80083aa:	460b      	mov	r3, r1
 80083ac:	607a      	str	r2, [r7, #4]
 80083ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80083b0:	7afb      	ldrb	r3, [r7, #11]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d138      	bne.n	8008428 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d14a      	bne.n	800845e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	689a      	ldr	r2, [r3, #8]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d913      	bls.n	80083fc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	1ad2      	subs	r2, r2, r3
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	4293      	cmp	r3, r2
 80083ec:	bf28      	it	cs
 80083ee:	4613      	movcs	r3, r2
 80083f0:	461a      	mov	r2, r3
 80083f2:	6879      	ldr	r1, [r7, #4]
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 fff2 	bl	80093de <USBD_CtlContinueRx>
 80083fa:	e030      	b.n	800845e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b03      	cmp	r3, #3
 8008406:	d10b      	bne.n	8008420 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d005      	beq.n	8008420 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 ffed 	bl	8009400 <USBD_CtlSendStatus>
 8008426:	e01a      	b.n	800845e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b03      	cmp	r3, #3
 8008432:	d114      	bne.n	800845e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00e      	beq.n	800845e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	7afa      	ldrb	r2, [r7, #11]
 800844a:	4611      	mov	r1, r2
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	4798      	blx	r3
 8008450:	4603      	mov	r3, r0
 8008452:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008454:	7dfb      	ldrb	r3, [r7, #23]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	e000      	b.n	8008460 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	460b      	mov	r3, r1
 8008472:	607a      	str	r2, [r7, #4]
 8008474:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008476:	7afb      	ldrb	r3, [r7, #11]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d16b      	bne.n	8008554 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3314      	adds	r3, #20
 8008480:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008488:	2b02      	cmp	r3, #2
 800848a:	d156      	bne.n	800853a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	689a      	ldr	r2, [r3, #8]
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	429a      	cmp	r2, r3
 8008496:	d914      	bls.n	80084c2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	1ad2      	subs	r2, r2, r3
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	461a      	mov	r2, r3
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 ff84 	bl	80093bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084b4:	2300      	movs	r3, #0
 80084b6:	2200      	movs	r2, #0
 80084b8:	2100      	movs	r1, #0
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f007 f886 	bl	800f5cc <USBD_LL_PrepareReceive>
 80084c0:	e03b      	b.n	800853a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	68da      	ldr	r2, [r3, #12]
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d11c      	bne.n	8008508 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d316      	bcc.n	8008508 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d20f      	bcs.n	8008508 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084e8:	2200      	movs	r2, #0
 80084ea:	2100      	movs	r1, #0
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f000 ff65 	bl	80093bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084fa:	2300      	movs	r3, #0
 80084fc:	2200      	movs	r2, #0
 80084fe:	2100      	movs	r1, #0
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f007 f863 	bl	800f5cc <USBD_LL_PrepareReceive>
 8008506:	e018      	b.n	800853a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b03      	cmp	r3, #3
 8008512:	d10b      	bne.n	800852c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d005      	beq.n	800852c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800852c:	2180      	movs	r1, #128	; 0x80
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f006 ff46 	bl	800f3c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 ff76 	bl	8009426 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008540:	2b01      	cmp	r3, #1
 8008542:	d122      	bne.n	800858a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f7ff fe98 	bl	800827a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008552:	e01a      	b.n	800858a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b03      	cmp	r3, #3
 800855e:	d114      	bne.n	800858a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00e      	beq.n	800858a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	7afa      	ldrb	r2, [r7, #11]
 8008576:	4611      	mov	r1, r2
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	4798      	blx	r3
 800857c:	4603      	mov	r3, r0
 800857e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	e000      	b.n	800858c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e02f      	b.n	8008628 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00f      	beq.n	80085f2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d009      	beq.n	80085f2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	6852      	ldr	r2, [r2, #4]
 80085ea:	b2d2      	uxtb	r2, r2
 80085ec:	4611      	mov	r1, r2
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085f2:	2340      	movs	r3, #64	; 0x40
 80085f4:	2200      	movs	r2, #0
 80085f6:	2100      	movs	r1, #0
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f006 fe37 	bl	800f26c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2240      	movs	r2, #64	; 0x40
 800860a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800860e:	2340      	movs	r3, #64	; 0x40
 8008610:	2200      	movs	r2, #0
 8008612:	2180      	movs	r1, #128	; 0x80
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f006 fe29 	bl	800f26c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2240      	movs	r2, #64	; 0x40
 8008624:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	78fa      	ldrb	r2, [r7, #3]
 8008640:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865e:	b2da      	uxtb	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2204      	movs	r2, #4
 800866a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b04      	cmp	r3, #4
 800868e:	d106      	bne.n	800869e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008696:	b2da      	uxtb	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80086be:	2303      	movs	r3, #3
 80086c0:	e012      	b.n	80086e8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b03      	cmp	r3, #3
 80086cc:	d10b      	bne.n	80086e6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d005      	beq.n	80086e6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008706:	2303      	movs	r3, #3
 8008708:	e014      	b.n	8008734 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b03      	cmp	r3, #3
 8008714:	d10d      	bne.n	8008732 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d007      	beq.n	8008732 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	78fa      	ldrb	r2, [r7, #3]
 800872c:	4611      	mov	r1, r2
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	460b      	mov	r3, r1
 8008746:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008752:	2303      	movs	r3, #3
 8008754:	e014      	b.n	8008780 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b03      	cmp	r3, #3
 8008760:	d10d      	bne.n	800877e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	2b00      	cmp	r3, #0
 800876c:	d007      	beq.n	800877e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	78fa      	ldrb	r2, [r7, #3]
 8008778:	4611      	mov	r1, r2
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d009      	beq.n	80087cc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	6852      	ldr	r2, [r2, #4]
 80087c4:	b2d2      	uxtb	r2, r2
 80087c6:	4611      	mov	r1, r2
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	4798      	blx	r3
  }

  return USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b087      	sub	sp, #28
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	3301      	adds	r3, #1
 80087ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80087f4:	8a3b      	ldrh	r3, [r7, #16]
 80087f6:	021b      	lsls	r3, r3, #8
 80087f8:	b21a      	sxth	r2, r3
 80087fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087fe:	4313      	orrs	r3, r2
 8008800:	b21b      	sxth	r3, r3
 8008802:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008804:	89fb      	ldrh	r3, [r7, #14]
}
 8008806:	4618      	mov	r0, r3
 8008808:	371c      	adds	r7, #28
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
	...

08008814 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800882a:	2b40      	cmp	r3, #64	; 0x40
 800882c:	d005      	beq.n	800883a <USBD_StdDevReq+0x26>
 800882e:	2b40      	cmp	r3, #64	; 0x40
 8008830:	d853      	bhi.n	80088da <USBD_StdDevReq+0xc6>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00b      	beq.n	800884e <USBD_StdDevReq+0x3a>
 8008836:	2b20      	cmp	r3, #32
 8008838:	d14f      	bne.n	80088da <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	4798      	blx	r3
 8008848:	4603      	mov	r3, r0
 800884a:	73fb      	strb	r3, [r7, #15]
      break;
 800884c:	e04a      	b.n	80088e4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	2b09      	cmp	r3, #9
 8008854:	d83b      	bhi.n	80088ce <USBD_StdDevReq+0xba>
 8008856:	a201      	add	r2, pc, #4	; (adr r2, 800885c <USBD_StdDevReq+0x48>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	080088b1 	.word	0x080088b1
 8008860:	080088c5 	.word	0x080088c5
 8008864:	080088cf 	.word	0x080088cf
 8008868:	080088bb 	.word	0x080088bb
 800886c:	080088cf 	.word	0x080088cf
 8008870:	0800888f 	.word	0x0800888f
 8008874:	08008885 	.word	0x08008885
 8008878:	080088cf 	.word	0x080088cf
 800887c:	080088a7 	.word	0x080088a7
 8008880:	08008899 	.word	0x08008899
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f9de 	bl	8008c48 <USBD_GetDescriptor>
          break;
 800888c:	e024      	b.n	80088d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fb43 	bl	8008f1c <USBD_SetAddress>
          break;
 8008896:	e01f      	b.n	80088d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fb82 	bl	8008fa4 <USBD_SetConfig>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73fb      	strb	r3, [r7, #15]
          break;
 80088a4:	e018      	b.n	80088d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fc21 	bl	80090f0 <USBD_GetConfig>
          break;
 80088ae:	e013      	b.n	80088d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fc52 	bl	800915c <USBD_GetStatus>
          break;
 80088b8:	e00e      	b.n	80088d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fc81 	bl	80091c4 <USBD_SetFeature>
          break;
 80088c2:	e009      	b.n	80088d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fc90 	bl	80091ec <USBD_ClrFeature>
          break;
 80088cc:	e004      	b.n	80088d8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fce7 	bl	80092a4 <USBD_CtlError>
          break;
 80088d6:	bf00      	nop
      }
      break;
 80088d8:	e004      	b.n	80088e4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fce1 	bl	80092a4 <USBD_CtlError>
      break;
 80088e2:	bf00      	nop
  }

  return ret;
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop

080088f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008906:	2b40      	cmp	r3, #64	; 0x40
 8008908:	d005      	beq.n	8008916 <USBD_StdItfReq+0x26>
 800890a:	2b40      	cmp	r3, #64	; 0x40
 800890c:	d82f      	bhi.n	800896e <USBD_StdItfReq+0x7e>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <USBD_StdItfReq+0x26>
 8008912:	2b20      	cmp	r3, #32
 8008914:	d12b      	bne.n	800896e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800891c:	b2db      	uxtb	r3, r3
 800891e:	3b01      	subs	r3, #1
 8008920:	2b02      	cmp	r3, #2
 8008922:	d81d      	bhi.n	8008960 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	889b      	ldrh	r3, [r3, #4]
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b01      	cmp	r3, #1
 800892c:	d813      	bhi.n	8008956 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	4798      	blx	r3
 800893c:	4603      	mov	r3, r0
 800893e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	88db      	ldrh	r3, [r3, #6]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d110      	bne.n	800896a <USBD_StdItfReq+0x7a>
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10d      	bne.n	800896a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fd56 	bl	8009400 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008954:	e009      	b.n	800896a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fca3 	bl	80092a4 <USBD_CtlError>
          break;
 800895e:	e004      	b.n	800896a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fc9e 	bl	80092a4 <USBD_CtlError>
          break;
 8008968:	e000      	b.n	800896c <USBD_StdItfReq+0x7c>
          break;
 800896a:	bf00      	nop
      }
      break;
 800896c:	e004      	b.n	8008978 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fc97 	bl	80092a4 <USBD_CtlError>
      break;
 8008976:	bf00      	nop
  }

  return ret;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	889b      	ldrh	r3, [r3, #4]
 8008994:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800899e:	2b40      	cmp	r3, #64	; 0x40
 80089a0:	d007      	beq.n	80089b2 <USBD_StdEPReq+0x30>
 80089a2:	2b40      	cmp	r3, #64	; 0x40
 80089a4:	f200 8145 	bhi.w	8008c32 <USBD_StdEPReq+0x2b0>
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00c      	beq.n	80089c6 <USBD_StdEPReq+0x44>
 80089ac:	2b20      	cmp	r3, #32
 80089ae:	f040 8140 	bne.w	8008c32 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	4798      	blx	r3
 80089c0:	4603      	mov	r3, r0
 80089c2:	73fb      	strb	r3, [r7, #15]
      break;
 80089c4:	e13a      	b.n	8008c3c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	785b      	ldrb	r3, [r3, #1]
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d007      	beq.n	80089de <USBD_StdEPReq+0x5c>
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	f300 8129 	bgt.w	8008c26 <USBD_StdEPReq+0x2a4>
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d07f      	beq.n	8008ad8 <USBD_StdEPReq+0x156>
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d03c      	beq.n	8008a56 <USBD_StdEPReq+0xd4>
 80089dc:	e123      	b.n	8008c26 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d002      	beq.n	80089f0 <USBD_StdEPReq+0x6e>
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d016      	beq.n	8008a1c <USBD_StdEPReq+0x9a>
 80089ee:	e02c      	b.n	8008a4a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00d      	beq.n	8008a12 <USBD_StdEPReq+0x90>
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	2b80      	cmp	r3, #128	; 0x80
 80089fa:	d00a      	beq.n	8008a12 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f006 fcdd 	bl	800f3c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a06:	2180      	movs	r1, #128	; 0x80
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f006 fcd9 	bl	800f3c0 <USBD_LL_StallEP>
 8008a0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a10:	e020      	b.n	8008a54 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fc45 	bl	80092a4 <USBD_CtlError>
              break;
 8008a1a:	e01b      	b.n	8008a54 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	885b      	ldrh	r3, [r3, #2]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10e      	bne.n	8008a42 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00b      	beq.n	8008a42 <USBD_StdEPReq+0xc0>
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b80      	cmp	r3, #128	; 0x80
 8008a2e:	d008      	beq.n	8008a42 <USBD_StdEPReq+0xc0>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	88db      	ldrh	r3, [r3, #6]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d104      	bne.n	8008a42 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f006 fcbf 	bl	800f3c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fcdc 	bl	8009400 <USBD_CtlSendStatus>

              break;
 8008a48:	e004      	b.n	8008a54 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fc29 	bl	80092a4 <USBD_CtlError>
              break;
 8008a52:	bf00      	nop
          }
          break;
 8008a54:	e0ec      	b.n	8008c30 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d002      	beq.n	8008a68 <USBD_StdEPReq+0xe6>
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d016      	beq.n	8008a94 <USBD_StdEPReq+0x112>
 8008a66:	e030      	b.n	8008aca <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00d      	beq.n	8008a8a <USBD_StdEPReq+0x108>
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	2b80      	cmp	r3, #128	; 0x80
 8008a72:	d00a      	beq.n	8008a8a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f006 fca1 	bl	800f3c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a7e:	2180      	movs	r1, #128	; 0x80
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f006 fc9d 	bl	800f3c0 <USBD_LL_StallEP>
 8008a86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a88:	e025      	b.n	8008ad6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fc09 	bl	80092a4 <USBD_CtlError>
              break;
 8008a92:	e020      	b.n	8008ad6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	885b      	ldrh	r3, [r3, #2]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d11b      	bne.n	8008ad4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d004      	beq.n	8008ab0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f006 fcbe 	bl	800f42c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fca5 	bl	8009400 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	4798      	blx	r3
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008ac8:	e004      	b.n	8008ad4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fbe9 	bl	80092a4 <USBD_CtlError>
              break;
 8008ad2:	e000      	b.n	8008ad6 <USBD_StdEPReq+0x154>
              break;
 8008ad4:	bf00      	nop
          }
          break;
 8008ad6:	e0ab      	b.n	8008c30 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d002      	beq.n	8008aea <USBD_StdEPReq+0x168>
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d032      	beq.n	8008b4e <USBD_StdEPReq+0x1cc>
 8008ae8:	e097      	b.n	8008c1a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d007      	beq.n	8008b00 <USBD_StdEPReq+0x17e>
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	2b80      	cmp	r3, #128	; 0x80
 8008af4:	d004      	beq.n	8008b00 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fbd3 	bl	80092a4 <USBD_CtlError>
                break;
 8008afe:	e091      	b.n	8008c24 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	da0b      	bge.n	8008b20 <USBD_StdEPReq+0x19e>
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
 8008b0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	3310      	adds	r3, #16
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	e00b      	b.n	8008b38 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b26:	4613      	mov	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	4413      	add	r3, r2
 8008b36:	3304      	adds	r3, #4
 8008b38:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2202      	movs	r2, #2
 8008b44:	4619      	mov	r1, r3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fc1d 	bl	8009386 <USBD_CtlSendData>
              break;
 8008b4c:	e06a      	b.n	8008c24 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	da11      	bge.n	8008b7a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
 8008b58:	f003 020f 	and.w	r2, r3, #15
 8008b5c:	6879      	ldr	r1, [r7, #4]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	440b      	add	r3, r1
 8008b68:	3324      	adds	r3, #36	; 0x24
 8008b6a:	881b      	ldrh	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d117      	bne.n	8008ba0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fb96 	bl	80092a4 <USBD_CtlError>
                  break;
 8008b78:	e054      	b.n	8008c24 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	f003 020f 	and.w	r2, r3, #15
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	4613      	mov	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	440b      	add	r3, r1
 8008b8c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b90:	881b      	ldrh	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d104      	bne.n	8008ba0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fb83 	bl	80092a4 <USBD_CtlError>
                  break;
 8008b9e:	e041      	b.n	8008c24 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	da0b      	bge.n	8008bc0 <USBD_StdEPReq+0x23e>
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
 8008baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bae:	4613      	mov	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	3310      	adds	r3, #16
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	4413      	add	r3, r2
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	e00b      	b.n	8008bd8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <USBD_StdEPReq+0x264>
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	2b80      	cmp	r3, #128	; 0x80
 8008be4:	d103      	bne.n	8008bee <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	e00e      	b.n	8008c0c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008bee:	7bbb      	ldrb	r3, [r7, #14]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f006 fc50 	bl	800f498 <USBD_LL_IsStallEP>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2201      	movs	r2, #1
 8008c02:	601a      	str	r2, [r3, #0]
 8008c04:	e002      	b.n	8008c0c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fbb7 	bl	8009386 <USBD_CtlSendData>
              break;
 8008c18:	e004      	b.n	8008c24 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fb41 	bl	80092a4 <USBD_CtlError>
              break;
 8008c22:	bf00      	nop
          }
          break;
 8008c24:	e004      	b.n	8008c30 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fb3b 	bl	80092a4 <USBD_CtlError>
          break;
 8008c2e:	bf00      	nop
      }
      break;
 8008c30:	e004      	b.n	8008c3c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fb35 	bl	80092a4 <USBD_CtlError>
      break;
 8008c3a:	bf00      	nop
  }

  return ret;
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
	...

08008c48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c56:	2300      	movs	r3, #0
 8008c58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	885b      	ldrh	r3, [r3, #2]
 8008c62:	0a1b      	lsrs	r3, r3, #8
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	3b01      	subs	r3, #1
 8008c68:	2b06      	cmp	r3, #6
 8008c6a:	f200 8128 	bhi.w	8008ebe <USBD_GetDescriptor+0x276>
 8008c6e:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <USBD_GetDescriptor+0x2c>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008c91 	.word	0x08008c91
 8008c78:	08008ca9 	.word	0x08008ca9
 8008c7c:	08008ce9 	.word	0x08008ce9
 8008c80:	08008ebf 	.word	0x08008ebf
 8008c84:	08008ebf 	.word	0x08008ebf
 8008c88:	08008e5f 	.word	0x08008e5f
 8008c8c:	08008e8b 	.word	0x08008e8b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	7c12      	ldrb	r2, [r2, #16]
 8008c9c:	f107 0108 	add.w	r1, r7, #8
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4798      	blx	r3
 8008ca4:	60f8      	str	r0, [r7, #12]
      break;
 8008ca6:	e112      	b.n	8008ece <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	7c1b      	ldrb	r3, [r3, #16]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10d      	bne.n	8008ccc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb8:	f107 0208 	add.w	r2, r7, #8
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	4798      	blx	r3
 8008cc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008cca:	e100      	b.n	8008ece <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	f107 0208 	add.w	r2, r7, #8
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4798      	blx	r3
 8008cdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	701a      	strb	r2, [r3, #0]
      break;
 8008ce6:	e0f2      	b.n	8008ece <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	885b      	ldrh	r3, [r3, #2]
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b05      	cmp	r3, #5
 8008cf0:	f200 80ac 	bhi.w	8008e4c <USBD_GetDescriptor+0x204>
 8008cf4:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <USBD_GetDescriptor+0xb4>)
 8008cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfa:	bf00      	nop
 8008cfc:	08008d15 	.word	0x08008d15
 8008d00:	08008d49 	.word	0x08008d49
 8008d04:	08008d7d 	.word	0x08008d7d
 8008d08:	08008db1 	.word	0x08008db1
 8008d0c:	08008de5 	.word	0x08008de5
 8008d10:	08008e19 	.word	0x08008e19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00b      	beq.n	8008d38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	7c12      	ldrb	r2, [r2, #16]
 8008d2c:	f107 0108 	add.w	r1, r7, #8
 8008d30:	4610      	mov	r0, r2
 8008d32:	4798      	blx	r3
 8008d34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d36:	e091      	b.n	8008e5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fab2 	bl	80092a4 <USBD_CtlError>
            err++;
 8008d40:	7afb      	ldrb	r3, [r7, #11]
 8008d42:	3301      	adds	r3, #1
 8008d44:	72fb      	strb	r3, [r7, #11]
          break;
 8008d46:	e089      	b.n	8008e5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00b      	beq.n	8008d6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	7c12      	ldrb	r2, [r2, #16]
 8008d60:	f107 0108 	add.w	r1, r7, #8
 8008d64:	4610      	mov	r0, r2
 8008d66:	4798      	blx	r3
 8008d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d6a:	e077      	b.n	8008e5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fa98 	bl	80092a4 <USBD_CtlError>
            err++;
 8008d74:	7afb      	ldrb	r3, [r7, #11]
 8008d76:	3301      	adds	r3, #1
 8008d78:	72fb      	strb	r3, [r7, #11]
          break;
 8008d7a:	e06f      	b.n	8008e5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00b      	beq.n	8008da0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	7c12      	ldrb	r2, [r2, #16]
 8008d94:	f107 0108 	add.w	r1, r7, #8
 8008d98:	4610      	mov	r0, r2
 8008d9a:	4798      	blx	r3
 8008d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d9e:	e05d      	b.n	8008e5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fa7e 	bl	80092a4 <USBD_CtlError>
            err++;
 8008da8:	7afb      	ldrb	r3, [r7, #11]
 8008daa:	3301      	adds	r3, #1
 8008dac:	72fb      	strb	r3, [r7, #11]
          break;
 8008dae:	e055      	b.n	8008e5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00b      	beq.n	8008dd4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	7c12      	ldrb	r2, [r2, #16]
 8008dc8:	f107 0108 	add.w	r1, r7, #8
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4798      	blx	r3
 8008dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dd2:	e043      	b.n	8008e5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fa64 	bl	80092a4 <USBD_CtlError>
            err++;
 8008ddc:	7afb      	ldrb	r3, [r7, #11]
 8008dde:	3301      	adds	r3, #1
 8008de0:	72fb      	strb	r3, [r7, #11]
          break;
 8008de2:	e03b      	b.n	8008e5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00b      	beq.n	8008e08 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	7c12      	ldrb	r2, [r2, #16]
 8008dfc:	f107 0108 	add.w	r1, r7, #8
 8008e00:	4610      	mov	r0, r2
 8008e02:	4798      	blx	r3
 8008e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e06:	e029      	b.n	8008e5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fa4a 	bl	80092a4 <USBD_CtlError>
            err++;
 8008e10:	7afb      	ldrb	r3, [r7, #11]
 8008e12:	3301      	adds	r3, #1
 8008e14:	72fb      	strb	r3, [r7, #11]
          break;
 8008e16:	e021      	b.n	8008e5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00b      	beq.n	8008e3c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	7c12      	ldrb	r2, [r2, #16]
 8008e30:	f107 0108 	add.w	r1, r7, #8
 8008e34:	4610      	mov	r0, r2
 8008e36:	4798      	blx	r3
 8008e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e3a:	e00f      	b.n	8008e5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fa30 	bl	80092a4 <USBD_CtlError>
            err++;
 8008e44:	7afb      	ldrb	r3, [r7, #11]
 8008e46:	3301      	adds	r3, #1
 8008e48:	72fb      	strb	r3, [r7, #11]
          break;
 8008e4a:	e007      	b.n	8008e5c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fa28 	bl	80092a4 <USBD_CtlError>
          err++;
 8008e54:	7afb      	ldrb	r3, [r7, #11]
 8008e56:	3301      	adds	r3, #1
 8008e58:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008e5a:	bf00      	nop
      }
      break;
 8008e5c:	e037      	b.n	8008ece <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	7c1b      	ldrb	r3, [r3, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d109      	bne.n	8008e7a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6e:	f107 0208 	add.w	r2, r7, #8
 8008e72:	4610      	mov	r0, r2
 8008e74:	4798      	blx	r3
 8008e76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e78:	e029      	b.n	8008ece <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fa11 	bl	80092a4 <USBD_CtlError>
        err++;
 8008e82:	7afb      	ldrb	r3, [r7, #11]
 8008e84:	3301      	adds	r3, #1
 8008e86:	72fb      	strb	r3, [r7, #11]
      break;
 8008e88:	e021      	b.n	8008ece <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7c1b      	ldrb	r3, [r3, #16]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10d      	bne.n	8008eae <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9a:	f107 0208 	add.w	r2, r7, #8
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	4798      	blx	r3
 8008ea2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	2207      	movs	r2, #7
 8008eaa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008eac:	e00f      	b.n	8008ece <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f9f7 	bl	80092a4 <USBD_CtlError>
        err++;
 8008eb6:	7afb      	ldrb	r3, [r7, #11]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	72fb      	strb	r3, [r7, #11]
      break;
 8008ebc:	e007      	b.n	8008ece <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f9ef 	bl	80092a4 <USBD_CtlError>
      err++;
 8008ec6:	7afb      	ldrb	r3, [r7, #11]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	72fb      	strb	r3, [r7, #11]
      break;
 8008ecc:	bf00      	nop
  }

  if (err != 0U)
 8008ece:	7afb      	ldrb	r3, [r7, #11]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d11e      	bne.n	8008f12 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	88db      	ldrh	r3, [r3, #6]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d016      	beq.n	8008f0a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008edc:	893b      	ldrh	r3, [r7, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00e      	beq.n	8008f00 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	88da      	ldrh	r2, [r3, #6]
 8008ee6:	893b      	ldrh	r3, [r7, #8]
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	bf28      	it	cs
 8008eec:	4613      	movcs	r3, r2
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ef2:	893b      	ldrh	r3, [r7, #8]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	68f9      	ldr	r1, [r7, #12]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fa44 	bl	8009386 <USBD_CtlSendData>
 8008efe:	e009      	b.n	8008f14 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f9ce 	bl	80092a4 <USBD_CtlError>
 8008f08:	e004      	b.n	8008f14 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fa78 	bl	8009400 <USBD_CtlSendStatus>
 8008f10:	e000      	b.n	8008f14 <USBD_GetDescriptor+0x2cc>
    return;
 8008f12:	bf00      	nop
  }
}
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop

08008f1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	889b      	ldrh	r3, [r3, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d131      	bne.n	8008f92 <USBD_SetAddress+0x76>
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	88db      	ldrh	r3, [r3, #6]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d12d      	bne.n	8008f92 <USBD_SetAddress+0x76>
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	885b      	ldrh	r3, [r3, #2]
 8008f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8008f3c:	d829      	bhi.n	8008f92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	885b      	ldrh	r3, [r3, #2]
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d104      	bne.n	8008f60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f56:	6839      	ldr	r1, [r7, #0]
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f9a3 	bl	80092a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f5e:	e01d      	b.n	8008f9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7bfa      	ldrb	r2, [r7, #15]
 8008f64:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f006 fabf 	bl	800f4f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fa44 	bl	8009400 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d004      	beq.n	8008f88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2202      	movs	r2, #2
 8008f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f86:	e009      	b.n	8008f9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f90:	e004      	b.n	8008f9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f985 	bl	80092a4 <USBD_CtlError>
  }
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	885b      	ldrh	r3, [r3, #2]
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	4b4c      	ldr	r3, [pc, #304]	; (80090ec <USBD_SetConfig+0x148>)
 8008fba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fbc:	4b4b      	ldr	r3, [pc, #300]	; (80090ec <USBD_SetConfig+0x148>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d905      	bls.n	8008fd0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f96c 	bl	80092a4 <USBD_CtlError>
    return USBD_FAIL;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e088      	b.n	80090e2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d002      	beq.n	8008fe2 <USBD_SetConfig+0x3e>
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d025      	beq.n	800902c <USBD_SetConfig+0x88>
 8008fe0:	e071      	b.n	80090c6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008fe2:	4b42      	ldr	r3, [pc, #264]	; (80090ec <USBD_SetConfig+0x148>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d01c      	beq.n	8009024 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008fea:	4b40      	ldr	r3, [pc, #256]	; (80090ec <USBD_SetConfig+0x148>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ff4:	4b3d      	ldr	r3, [pc, #244]	; (80090ec <USBD_SetConfig+0x148>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff f948 	bl	8008290 <USBD_SetClassConfig>
 8009000:	4603      	mov	r3, r0
 8009002:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d004      	beq.n	8009014 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f949 	bl	80092a4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009012:	e065      	b.n	80090e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f9f3 	bl	8009400 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2203      	movs	r2, #3
 800901e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009022:	e05d      	b.n	80090e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f9eb 	bl	8009400 <USBD_CtlSendStatus>
      break;
 800902a:	e059      	b.n	80090e0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800902c:	4b2f      	ldr	r3, [pc, #188]	; (80090ec <USBD_SetConfig+0x148>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d112      	bne.n	800905a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2202      	movs	r2, #2
 8009038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800903c:	4b2b      	ldr	r3, [pc, #172]	; (80090ec <USBD_SetConfig+0x148>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	461a      	mov	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009046:	4b29      	ldr	r3, [pc, #164]	; (80090ec <USBD_SetConfig+0x148>)
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff f93b 	bl	80082c8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f9d4 	bl	8009400 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009058:	e042      	b.n	80090e0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800905a:	4b24      	ldr	r3, [pc, #144]	; (80090ec <USBD_SetConfig+0x148>)
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	429a      	cmp	r2, r3
 8009066:	d02a      	beq.n	80090be <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	b2db      	uxtb	r3, r3
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff f929 	bl	80082c8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009076:	4b1d      	ldr	r3, [pc, #116]	; (80090ec <USBD_SetConfig+0x148>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009080:	4b1a      	ldr	r3, [pc, #104]	; (80090ec <USBD_SetConfig+0x148>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7ff f902 	bl	8008290 <USBD_SetClassConfig>
 800908c:	4603      	mov	r3, r0
 800908e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00f      	beq.n	80090b6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f903 	bl	80092a4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff f90e 	bl	80082c8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80090b4:	e014      	b.n	80090e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f9a2 	bl	8009400 <USBD_CtlSendStatus>
      break;
 80090bc:	e010      	b.n	80090e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f99e 	bl	8009400 <USBD_CtlSendStatus>
      break;
 80090c4:	e00c      	b.n	80090e0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f8eb 	bl	80092a4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090ce:	4b07      	ldr	r3, [pc, #28]	; (80090ec <USBD_SetConfig+0x148>)
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff f8f7 	bl	80082c8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80090da:	2303      	movs	r3, #3
 80090dc:	73fb      	strb	r3, [r7, #15]
      break;
 80090de:	bf00      	nop
  }

  return ret;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	200014ac 	.word	0x200014ac

080090f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	88db      	ldrh	r3, [r3, #6]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d004      	beq.n	800910c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009102:	6839      	ldr	r1, [r7, #0]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f8cd 	bl	80092a4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800910a:	e023      	b.n	8009154 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b02      	cmp	r3, #2
 8009116:	dc02      	bgt.n	800911e <USBD_GetConfig+0x2e>
 8009118:	2b00      	cmp	r3, #0
 800911a:	dc03      	bgt.n	8009124 <USBD_GetConfig+0x34>
 800911c:	e015      	b.n	800914a <USBD_GetConfig+0x5a>
 800911e:	2b03      	cmp	r3, #3
 8009120:	d00b      	beq.n	800913a <USBD_GetConfig+0x4a>
 8009122:	e012      	b.n	800914a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	3308      	adds	r3, #8
 800912e:	2201      	movs	r2, #1
 8009130:	4619      	mov	r1, r3
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f927 	bl	8009386 <USBD_CtlSendData>
        break;
 8009138:	e00c      	b.n	8009154 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	3304      	adds	r3, #4
 800913e:	2201      	movs	r2, #1
 8009140:	4619      	mov	r1, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f91f 	bl	8009386 <USBD_CtlSendData>
        break;
 8009148:	e004      	b.n	8009154 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f8a9 	bl	80092a4 <USBD_CtlError>
        break;
 8009152:	bf00      	nop
}
 8009154:	bf00      	nop
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916c:	b2db      	uxtb	r3, r3
 800916e:	3b01      	subs	r3, #1
 8009170:	2b02      	cmp	r3, #2
 8009172:	d81e      	bhi.n	80091b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	88db      	ldrh	r3, [r3, #6]
 8009178:	2b02      	cmp	r3, #2
 800917a:	d004      	beq.n	8009186 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f890 	bl	80092a4 <USBD_CtlError>
        break;
 8009184:	e01a      	b.n	80091bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009192:	2b00      	cmp	r3, #0
 8009194:	d005      	beq.n	80091a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	f043 0202 	orr.w	r2, r3, #2
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	330c      	adds	r3, #12
 80091a6:	2202      	movs	r2, #2
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f8eb 	bl	8009386 <USBD_CtlSendData>
      break;
 80091b0:	e004      	b.n	80091bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f875 	bl	80092a4 <USBD_CtlError>
      break;
 80091ba:	bf00      	nop
  }
}
 80091bc:	bf00      	nop
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	885b      	ldrh	r3, [r3, #2]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d106      	bne.n	80091e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f90e 	bl	8009400 <USBD_CtlSendStatus>
  }
}
 80091e4:	bf00      	nop
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	3b01      	subs	r3, #1
 8009200:	2b02      	cmp	r3, #2
 8009202:	d80b      	bhi.n	800921c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	885b      	ldrh	r3, [r3, #2]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d10c      	bne.n	8009226 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f8f3 	bl	8009400 <USBD_CtlSendStatus>
      }
      break;
 800921a:	e004      	b.n	8009226 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800921c:	6839      	ldr	r1, [r7, #0]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f840 	bl	80092a4 <USBD_CtlError>
      break;
 8009224:	e000      	b.n	8009228 <USBD_ClrFeature+0x3c>
      break;
 8009226:	bf00      	nop
  }
}
 8009228:	bf00      	nop
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	781a      	ldrb	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	3301      	adds	r3, #1
 8009258:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f7ff fabb 	bl	80087d6 <SWAPBYTE>
 8009260:	4603      	mov	r3, r0
 8009262:	461a      	mov	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	3301      	adds	r3, #1
 800926c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3301      	adds	r3, #1
 8009272:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f7ff faae 	bl	80087d6 <SWAPBYTE>
 800927a:	4603      	mov	r3, r0
 800927c:	461a      	mov	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	3301      	adds	r3, #1
 8009286:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	3301      	adds	r3, #1
 800928c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7ff faa1 	bl	80087d6 <SWAPBYTE>
 8009294:	4603      	mov	r3, r0
 8009296:	461a      	mov	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	80da      	strh	r2, [r3, #6]
}
 800929c:	bf00      	nop
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092ae:	2180      	movs	r1, #128	; 0x80
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f006 f885 	bl	800f3c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092b6:	2100      	movs	r1, #0
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f006 f881 	bl	800f3c0 <USBD_LL_StallEP>
}
 80092be:	bf00      	nop
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b086      	sub	sp, #24
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	60f8      	str	r0, [r7, #12]
 80092ce:	60b9      	str	r1, [r7, #8]
 80092d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d036      	beq.n	800934a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80092e0:	6938      	ldr	r0, [r7, #16]
 80092e2:	f000 f836 	bl	8009352 <USBD_GetLen>
 80092e6:	4603      	mov	r3, r0
 80092e8:	3301      	adds	r3, #1
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	4413      	add	r3, r2
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	7812      	ldrb	r2, [r2, #0]
 80092fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8009300:	7dfb      	ldrb	r3, [r7, #23]
 8009302:	3301      	adds	r3, #1
 8009304:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009306:	7dfb      	ldrb	r3, [r7, #23]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	4413      	add	r3, r2
 800930c:	2203      	movs	r2, #3
 800930e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009310:	7dfb      	ldrb	r3, [r7, #23]
 8009312:	3301      	adds	r3, #1
 8009314:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009316:	e013      	b.n	8009340 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009318:	7dfb      	ldrb	r3, [r7, #23]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	4413      	add	r3, r2
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	7812      	ldrb	r2, [r2, #0]
 8009322:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	3301      	adds	r3, #1
 8009328:	613b      	str	r3, [r7, #16]
    idx++;
 800932a:	7dfb      	ldrb	r3, [r7, #23]
 800932c:	3301      	adds	r3, #1
 800932e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009330:	7dfb      	ldrb	r3, [r7, #23]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	4413      	add	r3, r2
 8009336:	2200      	movs	r2, #0
 8009338:	701a      	strb	r2, [r3, #0]
    idx++;
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	3301      	adds	r3, #1
 800933e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e7      	bne.n	8009318 <USBD_GetString+0x52>
 8009348:	e000      	b.n	800934c <USBD_GetString+0x86>
    return;
 800934a:	bf00      	nop
  }
}
 800934c:	3718      	adds	r7, #24
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009352:	b480      	push	{r7}
 8009354:	b085      	sub	sp, #20
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009362:	e005      	b.n	8009370 <USBD_GetLen+0x1e>
  {
    len++;
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	3301      	adds	r3, #1
 8009368:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	3301      	adds	r3, #1
 800936e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1f5      	bne.n	8009364 <USBD_GetLen+0x12>
  }

  return len;
 8009378:	7bfb      	ldrb	r3, [r7, #15]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr

08009386 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	60f8      	str	r0, [r7, #12]
 800938e:	60b9      	str	r1, [r7, #8]
 8009390:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2202      	movs	r2, #2
 8009396:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	2100      	movs	r1, #0
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f006 f8d5 	bl	800f55c <USBD_LL_Transmit>

  return USBD_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	2100      	movs	r1, #0
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f006 f8c4 	bl	800f55c <USBD_LL_Transmit>

  return USBD_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	60b9      	str	r1, [r7, #8]
 80093e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	2100      	movs	r1, #0
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f006 f8eb 	bl	800f5cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2204      	movs	r2, #4
 800940c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009410:	2300      	movs	r3, #0
 8009412:	2200      	movs	r2, #0
 8009414:	2100      	movs	r1, #0
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f006 f8a0 	bl	800f55c <USBD_LL_Transmit>

  return USBD_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2205      	movs	r2, #5
 8009432:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009436:	2300      	movs	r3, #0
 8009438:	2200      	movs	r2, #0
 800943a:	2100      	movs	r1, #0
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f006 f8c5 	bl	800f5cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	4603      	mov	r3, r0
 8009454:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009456:	79fb      	ldrb	r3, [r7, #7]
 8009458:	4a08      	ldr	r2, [pc, #32]	; (800947c <disk_status+0x30>)
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	79fa      	ldrb	r2, [r7, #7]
 8009464:	4905      	ldr	r1, [pc, #20]	; (800947c <disk_status+0x30>)
 8009466:	440a      	add	r2, r1
 8009468:	7a12      	ldrb	r2, [r2, #8]
 800946a:	4610      	mov	r0, r2
 800946c:	4798      	blx	r3
 800946e:	4603      	mov	r3, r0
 8009470:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009472:	7bfb      	ldrb	r3, [r7, #15]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	200014d8 	.word	0x200014d8

08009480 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800948e:	79fb      	ldrb	r3, [r7, #7]
 8009490:	4a0d      	ldr	r2, [pc, #52]	; (80094c8 <disk_initialize+0x48>)
 8009492:	5cd3      	ldrb	r3, [r2, r3]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d111      	bne.n	80094bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009498:	79fb      	ldrb	r3, [r7, #7]
 800949a:	4a0b      	ldr	r2, [pc, #44]	; (80094c8 <disk_initialize+0x48>)
 800949c:	2101      	movs	r1, #1
 800949e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	4a09      	ldr	r2, [pc, #36]	; (80094c8 <disk_initialize+0x48>)
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	79fa      	ldrb	r2, [r7, #7]
 80094ae:	4906      	ldr	r1, [pc, #24]	; (80094c8 <disk_initialize+0x48>)
 80094b0:	440a      	add	r2, r1
 80094b2:	7a12      	ldrb	r2, [r2, #8]
 80094b4:	4610      	mov	r0, r2
 80094b6:	4798      	blx	r3
 80094b8:	4603      	mov	r3, r0
 80094ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	200014d8 	.word	0x200014d8

080094cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80094cc:	b590      	push	{r4, r7, lr}
 80094ce:	b087      	sub	sp, #28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60b9      	str	r1, [r7, #8]
 80094d4:	607a      	str	r2, [r7, #4]
 80094d6:	603b      	str	r3, [r7, #0]
 80094d8:	4603      	mov	r3, r0
 80094da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	4a0a      	ldr	r2, [pc, #40]	; (8009508 <disk_read+0x3c>)
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	689c      	ldr	r4, [r3, #8]
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
 80094ea:	4a07      	ldr	r2, [pc, #28]	; (8009508 <disk_read+0x3c>)
 80094ec:	4413      	add	r3, r2
 80094ee:	7a18      	ldrb	r0, [r3, #8]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	68b9      	ldr	r1, [r7, #8]
 80094f6:	47a0      	blx	r4
 80094f8:	4603      	mov	r3, r0
 80094fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80094fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	371c      	adds	r7, #28
 8009502:	46bd      	mov	sp, r7
 8009504:	bd90      	pop	{r4, r7, pc}
 8009506:	bf00      	nop
 8009508:	200014d8 	.word	0x200014d8

0800950c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800950c:	b590      	push	{r4, r7, lr}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	607a      	str	r2, [r7, #4]
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	4a0a      	ldr	r2, [pc, #40]	; (8009548 <disk_write+0x3c>)
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	68dc      	ldr	r4, [r3, #12]
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	4a07      	ldr	r2, [pc, #28]	; (8009548 <disk_write+0x3c>)
 800952c:	4413      	add	r3, r2
 800952e:	7a18      	ldrb	r0, [r3, #8]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	68b9      	ldr	r1, [r7, #8]
 8009536:	47a0      	blx	r4
 8009538:	4603      	mov	r3, r0
 800953a:	75fb      	strb	r3, [r7, #23]
  return res;
 800953c:	7dfb      	ldrb	r3, [r7, #23]
}
 800953e:	4618      	mov	r0, r3
 8009540:	371c      	adds	r7, #28
 8009542:	46bd      	mov	sp, r7
 8009544:	bd90      	pop	{r4, r7, pc}
 8009546:	bf00      	nop
 8009548:	200014d8 	.word	0x200014d8

0800954c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	603a      	str	r2, [r7, #0]
 8009556:	71fb      	strb	r3, [r7, #7]
 8009558:	460b      	mov	r3, r1
 800955a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	4a09      	ldr	r2, [pc, #36]	; (8009584 <disk_ioctl+0x38>)
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	79fa      	ldrb	r2, [r7, #7]
 800956a:	4906      	ldr	r1, [pc, #24]	; (8009584 <disk_ioctl+0x38>)
 800956c:	440a      	add	r2, r1
 800956e:	7a10      	ldrb	r0, [r2, #8]
 8009570:	79b9      	ldrb	r1, [r7, #6]
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	4798      	blx	r3
 8009576:	4603      	mov	r3, r0
 8009578:	73fb      	strb	r3, [r7, #15]
  return res;
 800957a:	7bfb      	ldrb	r3, [r7, #15]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	200014d8 	.word	0x200014d8

08009588 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	3301      	adds	r3, #1
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009598:	89fb      	ldrh	r3, [r7, #14]
 800959a:	021b      	lsls	r3, r3, #8
 800959c:	b21a      	sxth	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	b21b      	sxth	r3, r3
 80095a4:	4313      	orrs	r3, r2
 80095a6:	b21b      	sxth	r3, r3
 80095a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80095aa:	89fb      	ldrh	r3, [r7, #14]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3303      	adds	r3, #3
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	021b      	lsls	r3, r3, #8
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	3202      	adds	r2, #2
 80095d0:	7812      	ldrb	r2, [r2, #0]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	021b      	lsls	r3, r3, #8
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	3201      	adds	r2, #1
 80095de:	7812      	ldrb	r2, [r2, #0]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	021b      	lsls	r3, r3, #8
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]
	return rv;
 80095f0:	68fb      	ldr	r3, [r7, #12]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80095fe:	b480      	push	{r7}
 8009600:	b083      	sub	sp, #12
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	460b      	mov	r3, r1
 8009608:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	887a      	ldrh	r2, [r7, #2]
 8009612:	b2d2      	uxtb	r2, r2
 8009614:	701a      	strb	r2, [r3, #0]
 8009616:	887b      	ldrh	r3, [r7, #2]
 8009618:	0a1b      	lsrs	r3, r3, #8
 800961a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	1c5a      	adds	r2, r3, #1
 8009620:	607a      	str	r2, [r7, #4]
 8009622:	887a      	ldrh	r2, [r7, #2]
 8009624:	b2d2      	uxtb	r2, r2
 8009626:	701a      	strb	r2, [r3, #0]
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	1c5a      	adds	r2, r3, #1
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	b2d2      	uxtb	r2, r2
 8009648:	701a      	strb	r2, [r3, #0]
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	0a1b      	lsrs	r3, r3, #8
 800964e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	1c5a      	adds	r2, r3, #1
 8009654:	607a      	str	r2, [r7, #4]
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	b2d2      	uxtb	r2, r2
 800965a:	701a      	strb	r2, [r3, #0]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	0a1b      	lsrs	r3, r3, #8
 8009660:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	607a      	str	r2, [r7, #4]
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	b2d2      	uxtb	r2, r2
 800966c:	701a      	strb	r2, [r3, #0]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	0a1b      	lsrs	r3, r3, #8
 8009672:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	1c5a      	adds	r2, r3, #1
 8009678:	607a      	str	r2, [r7, #4]
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	b2d2      	uxtb	r2, r2
 800967e:	701a      	strb	r2, [r3, #0]
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00d      	beq.n	80096c2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	1c53      	adds	r3, r2, #1
 80096aa:	613b      	str	r3, [r7, #16]
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	1c59      	adds	r1, r3, #1
 80096b0:	6179      	str	r1, [r7, #20]
 80096b2:	7812      	ldrb	r2, [r2, #0]
 80096b4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	607b      	str	r3, [r7, #4]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1f1      	bne.n	80096a6 <mem_cpy+0x1a>
	}
}
 80096c2:	bf00      	nop
 80096c4:	371c      	adds	r7, #28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80096ce:	b480      	push	{r7}
 80096d0:	b087      	sub	sp, #28
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	60b9      	str	r1, [r7, #8]
 80096d8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	617a      	str	r2, [r7, #20]
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	b2d2      	uxtb	r2, r2
 80096e8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	607b      	str	r3, [r7, #4]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1f3      	bne.n	80096de <mem_set+0x10>
}
 80096f6:	bf00      	nop
 80096f8:	bf00      	nop
 80096fa:	371c      	adds	r7, #28
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009704:	b480      	push	{r7}
 8009706:	b089      	sub	sp, #36	; 0x24
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	61fb      	str	r3, [r7, #28]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	1c5a      	adds	r2, r3, #1
 8009720:	61fa      	str	r2, [r7, #28]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	4619      	mov	r1, r3
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	1c5a      	adds	r2, r3, #1
 800972a:	61ba      	str	r2, [r7, #24]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	1acb      	subs	r3, r1, r3
 8009730:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	3b01      	subs	r3, #1
 8009736:	607b      	str	r3, [r7, #4]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <mem_cmp+0x40>
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d0eb      	beq.n	800971c <mem_cmp+0x18>

	return r;
 8009744:	697b      	ldr	r3, [r7, #20]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3724      	adds	r7, #36	; 0x24
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009752:	b480      	push	{r7}
 8009754:	b083      	sub	sp, #12
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800975c:	e002      	b.n	8009764 <chk_chr+0x12>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	3301      	adds	r3, #1
 8009762:	607b      	str	r3, [r7, #4]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d005      	beq.n	8009778 <chk_chr+0x26>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	461a      	mov	r2, r3
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	4293      	cmp	r3, r2
 8009776:	d1f2      	bne.n	800975e <chk_chr+0xc>
	return *str;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	781b      	ldrb	r3, [r3, #0]
}
 800977c:	4618      	mov	r0, r3
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d009      	beq.n	80097aa <lock_fs+0x22>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	4618      	mov	r0, r3
 800979c:	f002 fb45 	bl	800be2a <ff_req_grant>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <lock_fs+0x22>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e000      	b.n	80097ac <lock_fs+0x24>
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00d      	beq.n	80097e2 <unlock_fs+0x2e>
 80097c6:	78fb      	ldrb	r3, [r7, #3]
 80097c8:	2b0c      	cmp	r3, #12
 80097ca:	d00a      	beq.n	80097e2 <unlock_fs+0x2e>
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	2b0b      	cmp	r3, #11
 80097d0:	d007      	beq.n	80097e2 <unlock_fs+0x2e>
 80097d2:	78fb      	ldrb	r3, [r7, #3]
 80097d4:	2b0f      	cmp	r3, #15
 80097d6:	d004      	beq.n	80097e2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	4618      	mov	r0, r3
 80097de:	f002 fb39 	bl	800be54 <ff_rel_grant>
	}
}
 80097e2:	bf00      	nop
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
	...

080097ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80097f6:	2300      	movs	r3, #0
 80097f8:	60bb      	str	r3, [r7, #8]
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	e029      	b.n	8009854 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009800:	4a27      	ldr	r2, [pc, #156]	; (80098a0 <chk_lock+0xb4>)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	011b      	lsls	r3, r3, #4
 8009806:	4413      	add	r3, r2
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d01d      	beq.n	800984a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800980e:	4a24      	ldr	r2, [pc, #144]	; (80098a0 <chk_lock+0xb4>)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	011b      	lsls	r3, r3, #4
 8009814:	4413      	add	r3, r2
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	429a      	cmp	r2, r3
 800981e:	d116      	bne.n	800984e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009820:	4a1f      	ldr	r2, [pc, #124]	; (80098a0 <chk_lock+0xb4>)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	011b      	lsls	r3, r3, #4
 8009826:	4413      	add	r3, r2
 8009828:	3304      	adds	r3, #4
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009830:	429a      	cmp	r2, r3
 8009832:	d10c      	bne.n	800984e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009834:	4a1a      	ldr	r2, [pc, #104]	; (80098a0 <chk_lock+0xb4>)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	011b      	lsls	r3, r3, #4
 800983a:	4413      	add	r3, r2
 800983c:	3308      	adds	r3, #8
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009844:	429a      	cmp	r2, r3
 8009846:	d102      	bne.n	800984e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009848:	e007      	b.n	800985a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800984a:	2301      	movs	r3, #1
 800984c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3301      	adds	r3, #1
 8009852:	60fb      	str	r3, [r7, #12]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d9d2      	bls.n	8009800 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b02      	cmp	r3, #2
 800985e:	d109      	bne.n	8009874 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d102      	bne.n	800986c <chk_lock+0x80>
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b02      	cmp	r3, #2
 800986a:	d101      	bne.n	8009870 <chk_lock+0x84>
 800986c:	2300      	movs	r3, #0
 800986e:	e010      	b.n	8009892 <chk_lock+0xa6>
 8009870:	2312      	movs	r3, #18
 8009872:	e00e      	b.n	8009892 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d108      	bne.n	800988c <chk_lock+0xa0>
 800987a:	4a09      	ldr	r2, [pc, #36]	; (80098a0 <chk_lock+0xb4>)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	011b      	lsls	r3, r3, #4
 8009880:	4413      	add	r3, r2
 8009882:	330c      	adds	r3, #12
 8009884:	881b      	ldrh	r3, [r3, #0]
 8009886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800988a:	d101      	bne.n	8009890 <chk_lock+0xa4>
 800988c:	2310      	movs	r3, #16
 800988e:	e000      	b.n	8009892 <chk_lock+0xa6>
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	200014b8 	.word	0x200014b8

080098a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80098aa:	2300      	movs	r3, #0
 80098ac:	607b      	str	r3, [r7, #4]
 80098ae:	e002      	b.n	80098b6 <enq_lock+0x12>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3301      	adds	r3, #1
 80098b4:	607b      	str	r3, [r7, #4]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d806      	bhi.n	80098ca <enq_lock+0x26>
 80098bc:	4a09      	ldr	r2, [pc, #36]	; (80098e4 <enq_lock+0x40>)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	011b      	lsls	r3, r3, #4
 80098c2:	4413      	add	r3, r2
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1f2      	bne.n	80098b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	bf14      	ite	ne
 80098d0:	2301      	movne	r3, #1
 80098d2:	2300      	moveq	r3, #0
 80098d4:	b2db      	uxtb	r3, r3
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	200014b8 	.word	0x200014b8

080098e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80098f2:	2300      	movs	r3, #0
 80098f4:	60fb      	str	r3, [r7, #12]
 80098f6:	e01f      	b.n	8009938 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80098f8:	4a41      	ldr	r2, [pc, #260]	; (8009a00 <inc_lock+0x118>)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	011b      	lsls	r3, r3, #4
 80098fe:	4413      	add	r3, r2
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d113      	bne.n	8009932 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800990a:	4a3d      	ldr	r2, [pc, #244]	; (8009a00 <inc_lock+0x118>)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	4413      	add	r3, r2
 8009912:	3304      	adds	r3, #4
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800991a:	429a      	cmp	r2, r3
 800991c:	d109      	bne.n	8009932 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800991e:	4a38      	ldr	r2, [pc, #224]	; (8009a00 <inc_lock+0x118>)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	011b      	lsls	r3, r3, #4
 8009924:	4413      	add	r3, r2
 8009926:	3308      	adds	r3, #8
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800992e:	429a      	cmp	r2, r3
 8009930:	d006      	beq.n	8009940 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3301      	adds	r3, #1
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d9dc      	bls.n	80098f8 <inc_lock+0x10>
 800993e:	e000      	b.n	8009942 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009940:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2b02      	cmp	r3, #2
 8009946:	d132      	bne.n	80099ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009948:	2300      	movs	r3, #0
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	e002      	b.n	8009954 <inc_lock+0x6c>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3301      	adds	r3, #1
 8009952:	60fb      	str	r3, [r7, #12]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d806      	bhi.n	8009968 <inc_lock+0x80>
 800995a:	4a29      	ldr	r2, [pc, #164]	; (8009a00 <inc_lock+0x118>)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	011b      	lsls	r3, r3, #4
 8009960:	4413      	add	r3, r2
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1f2      	bne.n	800994e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2b02      	cmp	r3, #2
 800996c:	d101      	bne.n	8009972 <inc_lock+0x8a>
 800996e:	2300      	movs	r3, #0
 8009970:	e040      	b.n	80099f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	4922      	ldr	r1, [pc, #136]	; (8009a00 <inc_lock+0x118>)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	011b      	lsls	r3, r3, #4
 800997c:	440b      	add	r3, r1
 800997e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	689a      	ldr	r2, [r3, #8]
 8009984:	491e      	ldr	r1, [pc, #120]	; (8009a00 <inc_lock+0x118>)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	011b      	lsls	r3, r3, #4
 800998a:	440b      	add	r3, r1
 800998c:	3304      	adds	r3, #4
 800998e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	695a      	ldr	r2, [r3, #20]
 8009994:	491a      	ldr	r1, [pc, #104]	; (8009a00 <inc_lock+0x118>)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	011b      	lsls	r3, r3, #4
 800999a:	440b      	add	r3, r1
 800999c:	3308      	adds	r3, #8
 800999e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80099a0:	4a17      	ldr	r2, [pc, #92]	; (8009a00 <inc_lock+0x118>)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	011b      	lsls	r3, r3, #4
 80099a6:	4413      	add	r3, r2
 80099a8:	330c      	adds	r3, #12
 80099aa:	2200      	movs	r2, #0
 80099ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d009      	beq.n	80099c8 <inc_lock+0xe0>
 80099b4:	4a12      	ldr	r2, [pc, #72]	; (8009a00 <inc_lock+0x118>)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	011b      	lsls	r3, r3, #4
 80099ba:	4413      	add	r3, r2
 80099bc:	330c      	adds	r3, #12
 80099be:	881b      	ldrh	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <inc_lock+0xe0>
 80099c4:	2300      	movs	r3, #0
 80099c6:	e015      	b.n	80099f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d108      	bne.n	80099e0 <inc_lock+0xf8>
 80099ce:	4a0c      	ldr	r2, [pc, #48]	; (8009a00 <inc_lock+0x118>)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	011b      	lsls	r3, r3, #4
 80099d4:	4413      	add	r3, r2
 80099d6:	330c      	adds	r3, #12
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	3301      	adds	r3, #1
 80099dc:	b29a      	uxth	r2, r3
 80099de:	e001      	b.n	80099e4 <inc_lock+0xfc>
 80099e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099e4:	4906      	ldr	r1, [pc, #24]	; (8009a00 <inc_lock+0x118>)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	011b      	lsls	r3, r3, #4
 80099ea:	440b      	add	r3, r1
 80099ec:	330c      	adds	r3, #12
 80099ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	3301      	adds	r3, #1
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	200014b8 	.word	0x200014b8

08009a04 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	607b      	str	r3, [r7, #4]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d825      	bhi.n	8009a64 <dec_lock+0x60>
		n = Files[i].ctr;
 8009a18:	4a17      	ldr	r2, [pc, #92]	; (8009a78 <dec_lock+0x74>)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	011b      	lsls	r3, r3, #4
 8009a1e:	4413      	add	r3, r2
 8009a20:	330c      	adds	r3, #12
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009a26:	89fb      	ldrh	r3, [r7, #14]
 8009a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a2c:	d101      	bne.n	8009a32 <dec_lock+0x2e>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009a32:	89fb      	ldrh	r3, [r7, #14]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <dec_lock+0x3a>
 8009a38:	89fb      	ldrh	r3, [r7, #14]
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009a3e:	4a0e      	ldr	r2, [pc, #56]	; (8009a78 <dec_lock+0x74>)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	011b      	lsls	r3, r3, #4
 8009a44:	4413      	add	r3, r2
 8009a46:	330c      	adds	r3, #12
 8009a48:	89fa      	ldrh	r2, [r7, #14]
 8009a4a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009a4c:	89fb      	ldrh	r3, [r7, #14]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d105      	bne.n	8009a5e <dec_lock+0x5a>
 8009a52:	4a09      	ldr	r2, [pc, #36]	; (8009a78 <dec_lock+0x74>)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	011b      	lsls	r3, r3, #4
 8009a58:	4413      	add	r3, r2
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	737b      	strb	r3, [r7, #13]
 8009a62:	e001      	b.n	8009a68 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009a64:	2302      	movs	r3, #2
 8009a66:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009a68:	7b7b      	ldrb	r3, [r7, #13]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	200014b8 	.word	0x200014b8

08009a7c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009a84:	2300      	movs	r3, #0
 8009a86:	60fb      	str	r3, [r7, #12]
 8009a88:	e010      	b.n	8009aac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009a8a:	4a0d      	ldr	r2, [pc, #52]	; (8009ac0 <clear_lock+0x44>)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	011b      	lsls	r3, r3, #4
 8009a90:	4413      	add	r3, r2
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d105      	bne.n	8009aa6 <clear_lock+0x2a>
 8009a9a:	4a09      	ldr	r2, [pc, #36]	; (8009ac0 <clear_lock+0x44>)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	011b      	lsls	r3, r3, #4
 8009aa0:	4413      	add	r3, r2
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	60fb      	str	r3, [r7, #12]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d9eb      	bls.n	8009a8a <clear_lock+0xe>
	}
}
 8009ab2:	bf00      	nop
 8009ab4:	bf00      	nop
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	200014b8 	.word	0x200014b8

08009ac4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	78db      	ldrb	r3, [r3, #3]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d034      	beq.n	8009b42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009adc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	7858      	ldrb	r0, [r3, #1]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009ae8:	2301      	movs	r3, #1
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	f7ff fd0e 	bl	800950c <disk_write>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <sync_window+0x38>
			res = FR_DISK_ERR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	73fb      	strb	r3, [r7, #15]
 8009afa:	e022      	b.n	8009b42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	1ad2      	subs	r2, r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	69db      	ldr	r3, [r3, #28]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d217      	bcs.n	8009b42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	789b      	ldrb	r3, [r3, #2]
 8009b16:	613b      	str	r3, [r7, #16]
 8009b18:	e010      	b.n	8009b3c <sync_window+0x78>
					wsect += fs->fsize;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	697a      	ldr	r2, [r7, #20]
 8009b20:	4413      	add	r3, r2
 8009b22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7858      	ldrb	r0, [r3, #1]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009b2e:	2301      	movs	r3, #1
 8009b30:	697a      	ldr	r2, [r7, #20]
 8009b32:	f7ff fceb 	bl	800950c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	613b      	str	r3, [r7, #16]
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d8eb      	bhi.n	8009b1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d01b      	beq.n	8009b9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7ff ffad 	bl	8009ac4 <sync_window>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d113      	bne.n	8009b9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	7858      	ldrb	r0, [r3, #1]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009b7e:	2301      	movs	r3, #1
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	f7ff fca3 	bl	80094cc <disk_read>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d004      	beq.n	8009b96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	683a      	ldr	r2, [r7, #0]
 8009b9a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f7ff ff87 	bl	8009ac4 <sync_window>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d158      	bne.n	8009c72 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	2b03      	cmp	r3, #3
 8009bc6:	d148      	bne.n	8009c5a <sync_fs+0xb2>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	791b      	ldrb	r3, [r3, #4]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d144      	bne.n	8009c5a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	3334      	adds	r3, #52	; 0x34
 8009bd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009bd8:	2100      	movs	r1, #0
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7ff fd77 	bl	80096ce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3334      	adds	r3, #52	; 0x34
 8009be4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009be8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7ff fd06 	bl	80095fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3334      	adds	r3, #52	; 0x34
 8009bf6:	4921      	ldr	r1, [pc, #132]	; (8009c7c <sync_fs+0xd4>)
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff fd1b 	bl	8009634 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	3334      	adds	r3, #52	; 0x34
 8009c02:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009c06:	491e      	ldr	r1, [pc, #120]	; (8009c80 <sync_fs+0xd8>)
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff fd13 	bl	8009634 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	3334      	adds	r3, #52	; 0x34
 8009c12:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	f7ff fd09 	bl	8009634 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	3334      	adds	r3, #52	; 0x34
 8009c26:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	4619      	mov	r1, r3
 8009c30:	4610      	mov	r0, r2
 8009c32:	f7ff fcff 	bl	8009634 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	1c5a      	adds	r2, r3, #1
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	7858      	ldrb	r0, [r3, #1]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c4e:	2301      	movs	r3, #1
 8009c50:	f7ff fc5c 	bl	800950c <disk_write>
			fs->fsi_flag = 0;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	785b      	ldrb	r3, [r3, #1]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2100      	movs	r1, #0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7ff fc72 	bl	800954c <disk_ioctl>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <sync_fs+0xca>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	41615252 	.word	0x41615252
 8009c80:	61417272 	.word	0x61417272

08009c84 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	3b02      	subs	r3, #2
 8009c92:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	3b02      	subs	r3, #2
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d301      	bcc.n	8009ca4 <clust2sect+0x20>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e008      	b.n	8009cb6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	895b      	ldrh	r3, [r3, #10]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	fb03 f202 	mul.w	r2, r3, r2
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb4:	4413      	add	r3, r2
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b086      	sub	sp, #24
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d904      	bls.n	8009ce2 <get_fat+0x20>
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d302      	bcc.n	8009ce8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	617b      	str	r3, [r7, #20]
 8009ce6:	e091      	b.n	8009e0c <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d063      	beq.n	8009dbe <get_fat+0xfc>
 8009cf6:	2b03      	cmp	r3, #3
 8009cf8:	dc7e      	bgt.n	8009df8 <get_fat+0x136>
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d002      	beq.n	8009d04 <get_fat+0x42>
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d042      	beq.n	8009d88 <get_fat+0xc6>
 8009d02:	e079      	b.n	8009df8 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	60fb      	str	r3, [r7, #12]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	085b      	lsrs	r3, r3, #1
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	4413      	add	r3, r2
 8009d10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	0b1b      	lsrs	r3, r3, #12
 8009d1a:	4413      	add	r3, r2
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6938      	ldr	r0, [r7, #16]
 8009d20:	f7ff ff14 	bl	8009b4c <move_window>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d169      	bne.n	8009dfe <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	1c5a      	adds	r2, r3, #1
 8009d2e:	60fa      	str	r2, [r7, #12]
 8009d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	4413      	add	r3, r2
 8009d38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d3c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	0b1b      	lsrs	r3, r3, #12
 8009d46:	4413      	add	r3, r2
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6938      	ldr	r0, [r7, #16]
 8009d4c:	f7ff fefe 	bl	8009b4c <move_window>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d155      	bne.n	8009e02 <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d64:	021b      	lsls	r3, r3, #8
 8009d66:	461a      	mov	r2, r3
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <get_fat+0xbc>
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	091b      	lsrs	r3, r3, #4
 8009d7c:	e002      	b.n	8009d84 <get_fat+0xc2>
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d84:	617b      	str	r3, [r7, #20]
			break;
 8009d86:	e041      	b.n	8009e0c <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	0adb      	lsrs	r3, r3, #11
 8009d90:	4413      	add	r3, r2
 8009d92:	4619      	mov	r1, r3
 8009d94:	6938      	ldr	r0, [r7, #16]
 8009d96:	f7ff fed9 	bl	8009b4c <move_window>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d132      	bne.n	8009e06 <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	0059      	lsls	r1, r3, #1
 8009daa:	f640 73fe 	movw	r3, #4094	; 0xffe
 8009dae:	400b      	ands	r3, r1
 8009db0:	4413      	add	r3, r2
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7ff fbe8 	bl	8009588 <ld_word>
 8009db8:	4603      	mov	r3, r0
 8009dba:	617b      	str	r3, [r7, #20]
			break;
 8009dbc:	e026      	b.n	8009e0c <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	0a9b      	lsrs	r3, r3, #10
 8009dc6:	4413      	add	r3, r2
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6938      	ldr	r0, [r7, #16]
 8009dcc:	f7ff febe 	bl	8009b4c <move_window>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d119      	bne.n	8009e0a <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	0099      	lsls	r1, r3, #2
 8009de0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009de4:	400b      	ands	r3, r1
 8009de6:	4413      	add	r3, r2
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7ff fbe5 	bl	80095b8 <ld_dword>
 8009dee:	4603      	mov	r3, r0
 8009df0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009df4:	617b      	str	r3, [r7, #20]
			break;
 8009df6:	e009      	b.n	8009e0c <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009df8:	2301      	movs	r3, #1
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	e006      	b.n	8009e0c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009dfe:	bf00      	nop
 8009e00:	e004      	b.n	8009e0c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e02:	bf00      	nop
 8009e04:	e002      	b.n	8009e0c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009e06:	bf00      	nop
 8009e08:	e000      	b.n	8009e0c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009e0a:	bf00      	nop
		}
	}

	return val;
 8009e0c:	697b      	ldr	r3, [r7, #20]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009e16:	b590      	push	{r4, r7, lr}
 8009e18:	b089      	sub	sp, #36	; 0x24
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	60f8      	str	r0, [r7, #12]
 8009e1e:	60b9      	str	r1, [r7, #8]
 8009e20:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009e22:	2302      	movs	r3, #2
 8009e24:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	f240 80d5 	bls.w	8009fd8 <put_fat+0x1c2>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	f080 80cf 	bcs.w	8009fd8 <put_fat+0x1c2>
		switch (fs->fs_type) {
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	f000 8097 	beq.w	8009f72 <put_fat+0x15c>
 8009e44:	2b03      	cmp	r3, #3
 8009e46:	f300 80d0 	bgt.w	8009fea <put_fat+0x1d4>
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d002      	beq.n	8009e54 <put_fat+0x3e>
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d06e      	beq.n	8009f30 <put_fat+0x11a>
 8009e52:	e0ca      	b.n	8009fea <put_fat+0x1d4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	61bb      	str	r3, [r7, #24]
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	085b      	lsrs	r3, r3, #1
 8009e5c:	69ba      	ldr	r2, [r7, #24]
 8009e5e:	4413      	add	r3, r2
 8009e60:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	0b1b      	lsrs	r3, r3, #12
 8009e6a:	4413      	add	r3, r2
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7ff fe6c 	bl	8009b4c <move_window>
 8009e74:	4603      	mov	r3, r0
 8009e76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e78:	7ffb      	ldrb	r3, [r7, #31]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f040 80ae 	bne.w	8009fdc <put_fat+0x1c6>
			p = fs->win + bc++ % SS(fs);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	1c59      	adds	r1, r3, #1
 8009e8a:	61b9      	str	r1, [r7, #24]
 8009e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e90:	4413      	add	r3, r2
 8009e92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00d      	beq.n	8009eba <put_fat+0xa4>
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	b25b      	sxtb	r3, r3
 8009ea4:	f003 030f 	and.w	r3, r3, #15
 8009ea8:	b25a      	sxtb	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	011b      	lsls	r3, r3, #4
 8009eb0:	b25b      	sxtb	r3, r3
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	b25b      	sxtb	r3, r3
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	e001      	b.n	8009ebe <put_fat+0xa8>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	0b1b      	lsrs	r3, r3, #12
 8009ed0:	4413      	add	r3, r2
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f7ff fe39 	bl	8009b4c <move_window>
 8009eda:	4603      	mov	r3, r0
 8009edc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ede:	7ffb      	ldrb	r3, [r7, #31]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d17d      	bne.n	8009fe0 <put_fat+0x1ca>
			p = fs->win + bc % SS(fs);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ef0:	4413      	add	r3, r2
 8009ef2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <put_fat+0xf0>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	091b      	lsrs	r3, r3, #4
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	e00e      	b.n	8009f24 <put_fat+0x10e>
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	b25b      	sxtb	r3, r3
 8009f0c:	f023 030f 	bic.w	r3, r3, #15
 8009f10:	b25a      	sxtb	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	0a1b      	lsrs	r3, r3, #8
 8009f16:	b25b      	sxtb	r3, r3
 8009f18:	f003 030f 	and.w	r3, r3, #15
 8009f1c:	b25b      	sxtb	r3, r3
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	b25b      	sxtb	r3, r3
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	70da      	strb	r2, [r3, #3]
			break;
 8009f2e:	e05c      	b.n	8009fea <put_fat+0x1d4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	0adb      	lsrs	r3, r3, #11
 8009f38:	4413      	add	r3, r2
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f7ff fe05 	bl	8009b4c <move_window>
 8009f42:	4603      	mov	r3, r0
 8009f44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f46:	7ffb      	ldrb	r3, [r7, #31]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d14b      	bne.n	8009fe4 <put_fat+0x1ce>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	0059      	lsls	r1, r3, #1
 8009f56:	f640 73fe 	movw	r3, #4094	; 0xffe
 8009f5a:	400b      	ands	r3, r1
 8009f5c:	4413      	add	r3, r2
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	b292      	uxth	r2, r2
 8009f62:	4611      	mov	r1, r2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7ff fb4a 	bl	80095fe <st_word>
			fs->wflag = 1;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	70da      	strb	r2, [r3, #3]
			break;
 8009f70:	e03b      	b.n	8009fea <put_fat+0x1d4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	0a9b      	lsrs	r3, r3, #10
 8009f7a:	4413      	add	r3, r2
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f7ff fde4 	bl	8009b4c <move_window>
 8009f84:	4603      	mov	r3, r0
 8009f86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f88:	7ffb      	ldrb	r3, [r7, #31]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d12c      	bne.n	8009fe8 <put_fat+0x1d2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	0099      	lsls	r1, r3, #2
 8009f9e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009fa2:	400b      	ands	r3, r1
 8009fa4:	4413      	add	r3, r2
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7ff fb06 	bl	80095b8 <ld_dword>
 8009fac:	4603      	mov	r3, r0
 8009fae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009fb2:	4323      	orrs	r3, r4
 8009fb4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	0099      	lsls	r1, r3, #2
 8009fc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009fc4:	400b      	ands	r3, r1
 8009fc6:	4413      	add	r3, r2
 8009fc8:	6879      	ldr	r1, [r7, #4]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7ff fb32 	bl	8009634 <st_dword>
			fs->wflag = 1;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	70da      	strb	r2, [r3, #3]
			break;
 8009fd6:	e008      	b.n	8009fea <put_fat+0x1d4>
		}
	}
 8009fd8:	bf00      	nop
 8009fda:	e006      	b.n	8009fea <put_fat+0x1d4>
			if (res != FR_OK) break;
 8009fdc:	bf00      	nop
 8009fde:	e004      	b.n	8009fea <put_fat+0x1d4>
			if (res != FR_OK) break;
 8009fe0:	bf00      	nop
 8009fe2:	e002      	b.n	8009fea <put_fat+0x1d4>
			if (res != FR_OK) break;
 8009fe4:	bf00      	nop
 8009fe6:	e000      	b.n	8009fea <put_fat+0x1d4>
			if (res != FR_OK) break;
 8009fe8:	bf00      	nop
	return res;
 8009fea:	7ffb      	ldrb	r3, [r7, #31]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3724      	adds	r7, #36	; 0x24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd90      	pop	{r4, r7, pc}

08009ff4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d904      	bls.n	800a01a <remove_chain+0x26>
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	429a      	cmp	r2, r3
 800a018:	d301      	bcc.n	800a01e <remove_chain+0x2a>
 800a01a:	2302      	movs	r3, #2
 800a01c:	e04b      	b.n	800a0b6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00c      	beq.n	800a03e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a024:	f04f 32ff 	mov.w	r2, #4294967295
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	69b8      	ldr	r0, [r7, #24]
 800a02c:	f7ff fef3 	bl	8009e16 <put_fat>
 800a030:	4603      	mov	r3, r0
 800a032:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a034:	7ffb      	ldrb	r3, [r7, #31]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d001      	beq.n	800a03e <remove_chain+0x4a>
 800a03a:	7ffb      	ldrb	r3, [r7, #31]
 800a03c:	e03b      	b.n	800a0b6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a03e:	68b9      	ldr	r1, [r7, #8]
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f7ff fe3e 	bl	8009cc2 <get_fat>
 800a046:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d031      	beq.n	800a0b2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d101      	bne.n	800a058 <remove_chain+0x64>
 800a054:	2302      	movs	r3, #2
 800a056:	e02e      	b.n	800a0b6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05e:	d101      	bne.n	800a064 <remove_chain+0x70>
 800a060:	2301      	movs	r3, #1
 800a062:	e028      	b.n	800a0b6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a064:	2200      	movs	r2, #0
 800a066:	68b9      	ldr	r1, [r7, #8]
 800a068:	69b8      	ldr	r0, [r7, #24]
 800a06a:	f7ff fed4 	bl	8009e16 <put_fat>
 800a06e:	4603      	mov	r3, r0
 800a070:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a072:	7ffb      	ldrb	r3, [r7, #31]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <remove_chain+0x88>
 800a078:	7ffb      	ldrb	r3, [r7, #31]
 800a07a:	e01c      	b.n	800a0b6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	695a      	ldr	r2, [r3, #20]
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	699b      	ldr	r3, [r3, #24]
 800a084:	3b02      	subs	r3, #2
 800a086:	429a      	cmp	r2, r3
 800a088:	d20b      	bcs.n	800a0a2 <remove_chain+0xae>
			fs->free_clst++;
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	1c5a      	adds	r2, r3, #1
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	791b      	ldrb	r3, [r3, #4]
 800a098:	f043 0301 	orr.w	r3, r3, #1
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d3c6      	bcc.n	800a03e <remove_chain+0x4a>
 800a0b0:	e000      	b.n	800a0b4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a0b2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3720      	adds	r7, #32
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b088      	sub	sp, #32
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10d      	bne.n	800a0f0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d004      	beq.n	800a0ea <create_chain+0x2c>
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	69ba      	ldr	r2, [r7, #24]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d31b      	bcc.n	800a122 <create_chain+0x64>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	61bb      	str	r3, [r7, #24]
 800a0ee:	e018      	b.n	800a122 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7ff fde5 	bl	8009cc2 <get_fat>
 800a0f8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d801      	bhi.n	800a104 <create_chain+0x46>
 800a100:	2301      	movs	r3, #1
 800a102:	e070      	b.n	800a1e6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a10a:	d101      	bne.n	800a110 <create_chain+0x52>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	e06a      	b.n	800a1e6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	429a      	cmp	r2, r3
 800a118:	d201      	bcs.n	800a11e <create_chain+0x60>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	e063      	b.n	800a1e6 <create_chain+0x128>
		scl = clst;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	3301      	adds	r3, #1
 800a12a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	69fa      	ldr	r2, [r7, #28]
 800a132:	429a      	cmp	r2, r3
 800a134:	d307      	bcc.n	800a146 <create_chain+0x88>
				ncl = 2;
 800a136:	2302      	movs	r3, #2
 800a138:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a13a:	69fa      	ldr	r2, [r7, #28]
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d901      	bls.n	800a146 <create_chain+0x88>
 800a142:	2300      	movs	r3, #0
 800a144:	e04f      	b.n	800a1e6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a146:	69f9      	ldr	r1, [r7, #28]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff fdba 	bl	8009cc2 <get_fat>
 800a14e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00e      	beq.n	800a174 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d003      	beq.n	800a164 <create_chain+0xa6>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a162:	d101      	bne.n	800a168 <create_chain+0xaa>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	e03e      	b.n	800a1e6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a168:	69fa      	ldr	r2, [r7, #28]
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d1da      	bne.n	800a126 <create_chain+0x68>
 800a170:	2300      	movs	r3, #0
 800a172:	e038      	b.n	800a1e6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a174:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a176:	f04f 32ff 	mov.w	r2, #4294967295
 800a17a:	69f9      	ldr	r1, [r7, #28]
 800a17c:	6938      	ldr	r0, [r7, #16]
 800a17e:	f7ff fe4a 	bl	8009e16 <put_fat>
 800a182:	4603      	mov	r3, r0
 800a184:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a186:	7dfb      	ldrb	r3, [r7, #23]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d109      	bne.n	800a1a0 <create_chain+0xe2>
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d006      	beq.n	800a1a0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a192:	69fa      	ldr	r2, [r7, #28]
 800a194:	6839      	ldr	r1, [r7, #0]
 800a196:	6938      	ldr	r0, [r7, #16]
 800a198:	f7ff fe3d 	bl	8009e16 <put_fat>
 800a19c:	4603      	mov	r3, r0
 800a19e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a1a0:	7dfb      	ldrb	r3, [r7, #23]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d116      	bne.n	800a1d4 <create_chain+0x116>
		fs->last_clst = ncl;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	69fa      	ldr	r2, [r7, #28]
 800a1aa:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	695a      	ldr	r2, [r3, #20]
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	3b02      	subs	r3, #2
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d804      	bhi.n	800a1c4 <create_chain+0x106>
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	1e5a      	subs	r2, r3, #1
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	791b      	ldrb	r3, [r3, #4]
 800a1c8:	f043 0301 	orr.w	r3, r3, #1
 800a1cc:	b2da      	uxtb	r2, r3
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	711a      	strb	r2, [r3, #4]
 800a1d2:	e007      	b.n	800a1e4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a1d4:	7dfb      	ldrb	r3, [r7, #23]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d102      	bne.n	800a1e0 <create_chain+0x122>
 800a1da:	f04f 33ff 	mov.w	r3, #4294967295
 800a1de:	e000      	b.n	800a1e2 <create_chain+0x124>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a1e4:	69fb      	ldr	r3, [r7, #28]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3720      	adds	r7, #32
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b087      	sub	sp, #28
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a202:	3304      	adds	r3, #4
 800a204:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	0b1b      	lsrs	r3, r3, #12
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	8952      	ldrh	r2, [r2, #10]
 800a20e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a212:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	1d1a      	adds	r2, r3, #4
 800a218:	613a      	str	r2, [r7, #16]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <clmt_clust+0x3a>
 800a224:	2300      	movs	r3, #0
 800a226:	e010      	b.n	800a24a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d307      	bcc.n	800a240 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	3304      	adds	r3, #4
 800a23c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a23e:	e7e9      	b.n	800a214 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a240:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	4413      	add	r3, r2
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	371c      	adds	r7, #28
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b086      	sub	sp, #24
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a26c:	d204      	bcs.n	800a278 <dir_sdi+0x22>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	f003 031f 	and.w	r3, r3, #31
 800a274:	2b00      	cmp	r3, #0
 800a276:	d001      	beq.n	800a27c <dir_sdi+0x26>
		return FR_INT_ERR;
 800a278:	2302      	movs	r3, #2
 800a27a:	e063      	b.n	800a344 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d106      	bne.n	800a29c <dir_sdi+0x46>
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	2b02      	cmp	r3, #2
 800a294:	d902      	bls.n	800a29c <dir_sdi+0x46>
		clst = fs->dirbase;
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10c      	bne.n	800a2bc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	095b      	lsrs	r3, r3, #5
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	8912      	ldrh	r2, [r2, #8]
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d301      	bcc.n	800a2b2 <dir_sdi+0x5c>
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	e048      	b.n	800a344 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	61da      	str	r2, [r3, #28]
 800a2ba:	e029      	b.n	800a310 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	895b      	ldrh	r3, [r3, #10]
 800a2c0:	031b      	lsls	r3, r3, #12
 800a2c2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a2c4:	e019      	b.n	800a2fa <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6979      	ldr	r1, [r7, #20]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7ff fcf9 	bl	8009cc2 <get_fat>
 800a2d0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d8:	d101      	bne.n	800a2de <dir_sdi+0x88>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e032      	b.n	800a344 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d904      	bls.n	800a2ee <dir_sdi+0x98>
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d301      	bcc.n	800a2f2 <dir_sdi+0x9c>
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	e028      	b.n	800a344 <dir_sdi+0xee>
			ofs -= csz;
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d2e1      	bcs.n	800a2c6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a302:	6979      	ldr	r1, [r7, #20]
 800a304:	6938      	ldr	r0, [r7, #16]
 800a306:	f7ff fcbd 	bl	8009c84 <clust2sect>
 800a30a:	4602      	mov	r2, r0
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	697a      	ldr	r2, [r7, #20]
 800a314:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <dir_sdi+0xcc>
 800a31e:	2302      	movs	r3, #2
 800a320:	e010      	b.n	800a344 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	69da      	ldr	r2, [r3, #28]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	0b1b      	lsrs	r3, r3, #12
 800a32a:	441a      	add	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a33c:	441a      	add	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3718      	adds	r7, #24
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	695b      	ldr	r3, [r3, #20]
 800a360:	3320      	adds	r3, #32
 800a362:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	69db      	ldr	r3, [r3, #28]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d003      	beq.n	800a374 <dir_next+0x28>
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a372:	d301      	bcc.n	800a378 <dir_next+0x2c>
 800a374:	2304      	movs	r3, #4
 800a376:	e0aa      	b.n	800a4ce <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f040 8098 	bne.w	800a4b4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	69db      	ldr	r3, [r3, #28]
 800a388:	1c5a      	adds	r2, r3, #1
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10b      	bne.n	800a3ae <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	095b      	lsrs	r3, r3, #5
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	8912      	ldrh	r2, [r2, #8]
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	f0c0 8088 	bcc.w	800a4b4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	61da      	str	r2, [r3, #28]
 800a3aa:	2304      	movs	r3, #4
 800a3ac:	e08f      	b.n	800a4ce <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	0b1b      	lsrs	r3, r3, #12
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	8952      	ldrh	r2, [r2, #10]
 800a3b6:	3a01      	subs	r2, #1
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d17a      	bne.n	800a4b4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	4610      	mov	r0, r2
 800a3c8:	f7ff fc7b 	bl	8009cc2 <get_fat>
 800a3cc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d801      	bhi.n	800a3d8 <dir_next+0x8c>
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	e07a      	b.n	800a4ce <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3de:	d101      	bne.n	800a3e4 <dir_next+0x98>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e074      	b.n	800a4ce <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d358      	bcc.n	800a4a0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d104      	bne.n	800a3fe <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	61da      	str	r2, [r3, #28]
 800a3fa:	2304      	movs	r3, #4
 800a3fc:	e067      	b.n	800a4ce <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	4619      	mov	r1, r3
 800a406:	4610      	mov	r0, r2
 800a408:	f7ff fe59 	bl	800a0be <create_chain>
 800a40c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d101      	bne.n	800a418 <dir_next+0xcc>
 800a414:	2307      	movs	r3, #7
 800a416:	e05a      	b.n	800a4ce <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d101      	bne.n	800a422 <dir_next+0xd6>
 800a41e:	2302      	movs	r3, #2
 800a420:	e055      	b.n	800a4ce <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a428:	d101      	bne.n	800a42e <dir_next+0xe2>
 800a42a:	2301      	movs	r3, #1
 800a42c:	e04f      	b.n	800a4ce <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7ff fb48 	bl	8009ac4 <sync_window>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <dir_next+0xf2>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e047      	b.n	800a4ce <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3334      	adds	r3, #52	; 0x34
 800a442:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a446:	2100      	movs	r1, #0
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff f940 	bl	80096ce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a44e:	2300      	movs	r3, #0
 800a450:	613b      	str	r3, [r7, #16]
 800a452:	6979      	ldr	r1, [r7, #20]
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f7ff fc15 	bl	8009c84 <clust2sect>
 800a45a:	4602      	mov	r2, r0
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	631a      	str	r2, [r3, #48]	; 0x30
 800a460:	e012      	b.n	800a488 <dir_next+0x13c>
						fs->wflag = 1;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2201      	movs	r2, #1
 800a466:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7ff fb2b 	bl	8009ac4 <sync_window>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <dir_next+0x12c>
 800a474:	2301      	movs	r3, #1
 800a476:	e02a      	b.n	800a4ce <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	3301      	adds	r3, #1
 800a47c:	613b      	str	r3, [r7, #16]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	631a      	str	r2, [r3, #48]	; 0x30
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	895b      	ldrh	r3, [r3, #10]
 800a48c:	461a      	mov	r2, r3
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	4293      	cmp	r3, r2
 800a492:	d3e6      	bcc.n	800a462 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	1ad2      	subs	r2, r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	697a      	ldr	r2, [r7, #20]
 800a4a4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a4a6:	6979      	ldr	r1, [r7, #20]
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f7ff fbeb 	bl	8009c84 <clust2sect>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4c6:	441a      	add	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3718      	adds	r7, #24
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b086      	sub	sp, #24
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7ff feb4 	bl	800a256 <dir_sdi>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a4f2:	7dfb      	ldrb	r3, [r7, #23]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d12b      	bne.n	800a550 <dir_alloc+0x7a>
		n = 0;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	69db      	ldr	r3, [r3, #28]
 800a500:	4619      	mov	r1, r3
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f7ff fb22 	bl	8009b4c <move_window>
 800a508:	4603      	mov	r3, r0
 800a50a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a50c:	7dfb      	ldrb	r3, [r7, #23]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d11d      	bne.n	800a54e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	2be5      	cmp	r3, #229	; 0xe5
 800a51a:	d004      	beq.n	800a526 <dir_alloc+0x50>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a1b      	ldr	r3, [r3, #32]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d107      	bne.n	800a536 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	3301      	adds	r3, #1
 800a52a:	613b      	str	r3, [r7, #16]
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d102      	bne.n	800a53a <dir_alloc+0x64>
 800a534:	e00c      	b.n	800a550 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a536:	2300      	movs	r3, #0
 800a538:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a53a:	2101      	movs	r1, #1
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f7ff ff05 	bl	800a34c <dir_next>
 800a542:	4603      	mov	r3, r0
 800a544:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a546:	7dfb      	ldrb	r3, [r7, #23]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d0d7      	beq.n	800a4fc <dir_alloc+0x26>
 800a54c:	e000      	b.n	800a550 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a54e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a550:	7dfb      	ldrb	r3, [r7, #23]
 800a552:	2b04      	cmp	r3, #4
 800a554:	d101      	bne.n	800a55a <dir_alloc+0x84>
 800a556:	2307      	movs	r3, #7
 800a558:	75fb      	strb	r3, [r7, #23]
	return res;
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	331a      	adds	r3, #26
 800a572:	4618      	mov	r0, r3
 800a574:	f7ff f808 	bl	8009588 <ld_word>
 800a578:	4603      	mov	r3, r0
 800a57a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	2b03      	cmp	r3, #3
 800a582:	d109      	bne.n	800a598 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	3314      	adds	r3, #20
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fe fffd 	bl	8009588 <ld_word>
 800a58e:	4603      	mov	r3, r0
 800a590:	041b      	lsls	r3, r3, #16
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	4313      	orrs	r3, r2
 800a596:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a598:	68fb      	ldr	r3, [r7, #12]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b084      	sub	sp, #16
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	60b9      	str	r1, [r7, #8]
 800a5ac:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	331a      	adds	r3, #26
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	b292      	uxth	r2, r2
 800a5b6:	4611      	mov	r1, r2
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7ff f820 	bl	80095fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d109      	bne.n	800a5da <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	f103 0214 	add.w	r2, r3, #20
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	0c1b      	lsrs	r3, r3, #16
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	f7ff f812 	bl	80095fe <st_word>
	}
}
 800a5da:	bf00      	nop
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b086      	sub	sp, #24
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7ff fe2f 	bl	800a256 <dir_sdi>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a5fc:	7dfb      	ldrb	r3, [r7, #23]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d001      	beq.n	800a606 <dir_find+0x24>
 800a602:	7dfb      	ldrb	r3, [r7, #23]
 800a604:	e03e      	b.n	800a684 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	4619      	mov	r1, r3
 800a60c:	6938      	ldr	r0, [r7, #16]
 800a60e:	f7ff fa9d 	bl	8009b4c <move_window>
 800a612:	4603      	mov	r3, r0
 800a614:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a616:	7dfb      	ldrb	r3, [r7, #23]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d12f      	bne.n	800a67c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a1b      	ldr	r3, [r3, #32]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a624:	7bfb      	ldrb	r3, [r7, #15]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d102      	bne.n	800a630 <dir_find+0x4e>
 800a62a:	2304      	movs	r3, #4
 800a62c:	75fb      	strb	r3, [r7, #23]
 800a62e:	e028      	b.n	800a682 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	330b      	adds	r3, #11
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	330b      	adds	r3, #11
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	f003 0308 	and.w	r3, r3, #8
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d10a      	bne.n	800a668 <dir_find+0x86>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a18      	ldr	r0, [r3, #32]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	3324      	adds	r3, #36	; 0x24
 800a65a:	220b      	movs	r2, #11
 800a65c:	4619      	mov	r1, r3
 800a65e:	f7ff f851 	bl	8009704 <mem_cmp>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00b      	beq.n	800a680 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a668:	2100      	movs	r1, #0
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7ff fe6e 	bl	800a34c <dir_next>
 800a670:	4603      	mov	r3, r0
 800a672:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d0c5      	beq.n	800a606 <dir_find+0x24>
 800a67a:	e002      	b.n	800a682 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a67c:	bf00      	nop
 800a67e:	e000      	b.n	800a682 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a680:	bf00      	nop

	return res;
 800a682:	7dfb      	ldrb	r3, [r7, #23]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3718      	adds	r7, #24
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a69a:	2101      	movs	r1, #1
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7ff ff1a 	bl	800a4d6 <dir_alloc>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a6a6:	7bfb      	ldrb	r3, [r7, #15]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d11c      	bne.n	800a6e6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	69db      	ldr	r3, [r3, #28]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	68b8      	ldr	r0, [r7, #8]
 800a6b4:	f7ff fa4a 	bl	8009b4c <move_window>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d111      	bne.n	800a6e6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a1b      	ldr	r3, [r3, #32]
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe ffff 	bl	80096ce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a18      	ldr	r0, [r3, #32]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	3324      	adds	r3, #36	; 0x24
 800a6d8:	220b      	movs	r2, #11
 800a6da:	4619      	mov	r1, r3
 800a6dc:	f7fe ffd6 	bl	800968c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b088      	sub	sp, #32
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	60fb      	str	r3, [r7, #12]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	3324      	adds	r3, #36	; 0x24
 800a704:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a706:	220b      	movs	r2, #11
 800a708:	2120      	movs	r1, #32
 800a70a:	68b8      	ldr	r0, [r7, #8]
 800a70c:	f7fe ffdf 	bl	80096ce <mem_set>
	si = i = 0; ni = 8;
 800a710:	2300      	movs	r3, #0
 800a712:	613b      	str	r3, [r7, #16]
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	61fb      	str	r3, [r7, #28]
 800a718:	2308      	movs	r3, #8
 800a71a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	1c5a      	adds	r2, r3, #1
 800a720:	61fa      	str	r2, [r7, #28]
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	4413      	add	r3, r2
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a72a:	7efb      	ldrb	r3, [r7, #27]
 800a72c:	2b20      	cmp	r3, #32
 800a72e:	d94e      	bls.n	800a7ce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a730:	7efb      	ldrb	r3, [r7, #27]
 800a732:	2b2f      	cmp	r3, #47	; 0x2f
 800a734:	d006      	beq.n	800a744 <create_name+0x54>
 800a736:	7efb      	ldrb	r3, [r7, #27]
 800a738:	2b5c      	cmp	r3, #92	; 0x5c
 800a73a:	d110      	bne.n	800a75e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a73c:	e002      	b.n	800a744 <create_name+0x54>
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	3301      	adds	r3, #1
 800a742:	61fb      	str	r3, [r7, #28]
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	4413      	add	r3, r2
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	2b2f      	cmp	r3, #47	; 0x2f
 800a74e:	d0f6      	beq.n	800a73e <create_name+0x4e>
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	4413      	add	r3, r2
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	2b5c      	cmp	r3, #92	; 0x5c
 800a75a:	d0f0      	beq.n	800a73e <create_name+0x4e>
			break;
 800a75c:	e038      	b.n	800a7d0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a75e:	7efb      	ldrb	r3, [r7, #27]
 800a760:	2b2e      	cmp	r3, #46	; 0x2e
 800a762:	d003      	beq.n	800a76c <create_name+0x7c>
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d30c      	bcc.n	800a786 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	2b0b      	cmp	r3, #11
 800a770:	d002      	beq.n	800a778 <create_name+0x88>
 800a772:	7efb      	ldrb	r3, [r7, #27]
 800a774:	2b2e      	cmp	r3, #46	; 0x2e
 800a776:	d001      	beq.n	800a77c <create_name+0x8c>
 800a778:	2306      	movs	r3, #6
 800a77a:	e044      	b.n	800a806 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a77c:	2308      	movs	r3, #8
 800a77e:	613b      	str	r3, [r7, #16]
 800a780:	230b      	movs	r3, #11
 800a782:	617b      	str	r3, [r7, #20]
			continue;
 800a784:	e022      	b.n	800a7cc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a786:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	da04      	bge.n	800a798 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a78e:	7efb      	ldrb	r3, [r7, #27]
 800a790:	3b80      	subs	r3, #128	; 0x80
 800a792:	4a1f      	ldr	r2, [pc, #124]	; (800a810 <create_name+0x120>)
 800a794:	5cd3      	ldrb	r3, [r2, r3]
 800a796:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a798:	7efb      	ldrb	r3, [r7, #27]
 800a79a:	4619      	mov	r1, r3
 800a79c:	481d      	ldr	r0, [pc, #116]	; (800a814 <create_name+0x124>)
 800a79e:	f7fe ffd8 	bl	8009752 <chk_chr>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <create_name+0xbc>
 800a7a8:	2306      	movs	r3, #6
 800a7aa:	e02c      	b.n	800a806 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a7ac:	7efb      	ldrb	r3, [r7, #27]
 800a7ae:	2b60      	cmp	r3, #96	; 0x60
 800a7b0:	d905      	bls.n	800a7be <create_name+0xce>
 800a7b2:	7efb      	ldrb	r3, [r7, #27]
 800a7b4:	2b7a      	cmp	r3, #122	; 0x7a
 800a7b6:	d802      	bhi.n	800a7be <create_name+0xce>
 800a7b8:	7efb      	ldrb	r3, [r7, #27]
 800a7ba:	3b20      	subs	r3, #32
 800a7bc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	613a      	str	r2, [r7, #16]
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	7efa      	ldrb	r2, [r7, #27]
 800a7ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a7cc:	e7a6      	b.n	800a71c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a7ce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	441a      	add	r2, r3
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <create_name+0xf4>
 800a7e0:	2306      	movs	r3, #6
 800a7e2:	e010      	b.n	800a806 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	2be5      	cmp	r3, #229	; 0xe5
 800a7ea:	d102      	bne.n	800a7f2 <create_name+0x102>
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	2205      	movs	r2, #5
 800a7f0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a7f2:	7efb      	ldrb	r3, [r7, #27]
 800a7f4:	2b20      	cmp	r3, #32
 800a7f6:	d801      	bhi.n	800a7fc <create_name+0x10c>
 800a7f8:	2204      	movs	r2, #4
 800a7fa:	e000      	b.n	800a7fe <create_name+0x10e>
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	330b      	adds	r3, #11
 800a802:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a804:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a806:	4618      	mov	r0, r3
 800a808:	3720      	adds	r7, #32
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	0800f868 	.word	0x0800f868
 800a814:	0800f798 	.word	0x0800f798

0800a818 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a82c:	e002      	b.n	800a834 <follow_path+0x1c>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	3301      	adds	r3, #1
 800a832:	603b      	str	r3, [r7, #0]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	2b2f      	cmp	r3, #47	; 0x2f
 800a83a:	d0f8      	beq.n	800a82e <follow_path+0x16>
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	2b5c      	cmp	r3, #92	; 0x5c
 800a842:	d0f4      	beq.n	800a82e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	2200      	movs	r2, #0
 800a848:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	2b1f      	cmp	r3, #31
 800a850:	d80a      	bhi.n	800a868 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2280      	movs	r2, #128	; 0x80
 800a856:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a85a:	2100      	movs	r1, #0
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f7ff fcfa 	bl	800a256 <dir_sdi>
 800a862:	4603      	mov	r3, r0
 800a864:	75fb      	strb	r3, [r7, #23]
 800a866:	e043      	b.n	800a8f0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a868:	463b      	mov	r3, r7
 800a86a:	4619      	mov	r1, r3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff ff3f 	bl	800a6f0 <create_name>
 800a872:	4603      	mov	r3, r0
 800a874:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a876:	7dfb      	ldrb	r3, [r7, #23]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d134      	bne.n	800a8e6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f7ff feb0 	bl	800a5e2 <dir_find>
 800a882:	4603      	mov	r3, r0
 800a884:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a88c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a88e:	7dfb      	ldrb	r3, [r7, #23]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00a      	beq.n	800a8aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	2b04      	cmp	r3, #4
 800a898:	d127      	bne.n	800a8ea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a89a:	7afb      	ldrb	r3, [r7, #11]
 800a89c:	f003 0304 	and.w	r3, r3, #4
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d122      	bne.n	800a8ea <follow_path+0xd2>
 800a8a4:	2305      	movs	r3, #5
 800a8a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a8a8:	e01f      	b.n	800a8ea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a8aa:	7afb      	ldrb	r3, [r7, #11]
 800a8ac:	f003 0304 	and.w	r3, r3, #4
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d11c      	bne.n	800a8ee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	799b      	ldrb	r3, [r3, #6]
 800a8b8:	f003 0310 	and.w	r3, r3, #16
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d102      	bne.n	800a8c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a8c0:	2305      	movs	r3, #5
 800a8c2:	75fb      	strb	r3, [r7, #23]
 800a8c4:	e014      	b.n	800a8f0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	695b      	ldr	r3, [r3, #20]
 800a8d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8d4:	4413      	add	r3, r2
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f7ff fe43 	bl	800a564 <ld_clust>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a8e4:	e7c0      	b.n	800a868 <follow_path+0x50>
			if (res != FR_OK) break;
 800a8e6:	bf00      	nop
 800a8e8:	e002      	b.n	800a8f0 <follow_path+0xd8>
				break;
 800a8ea:	bf00      	nop
 800a8ec:	e000      	b.n	800a8f0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a8ee:	bf00      	nop
			}
		}
	}

	return res;
 800a8f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3718      	adds	r7, #24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b087      	sub	sp, #28
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a902:	f04f 33ff 	mov.w	r3, #4294967295
 800a906:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d031      	beq.n	800a974 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	617b      	str	r3, [r7, #20]
 800a916:	e002      	b.n	800a91e <get_ldnumber+0x24>
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	3301      	adds	r3, #1
 800a91c:	617b      	str	r3, [r7, #20]
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	2b20      	cmp	r3, #32
 800a924:	d903      	bls.n	800a92e <get_ldnumber+0x34>
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	2b3a      	cmp	r3, #58	; 0x3a
 800a92c:	d1f4      	bne.n	800a918 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	2b3a      	cmp	r3, #58	; 0x3a
 800a934:	d11c      	bne.n	800a970 <get_ldnumber+0x76>
			tp = *path;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	1c5a      	adds	r2, r3, #1
 800a940:	60fa      	str	r2, [r7, #12]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	3b30      	subs	r3, #48	; 0x30
 800a946:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	2b09      	cmp	r3, #9
 800a94c:	d80e      	bhi.n	800a96c <get_ldnumber+0x72>
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	429a      	cmp	r2, r3
 800a954:	d10a      	bne.n	800a96c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d107      	bne.n	800a96c <get_ldnumber+0x72>
					vol = (int)i;
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	3301      	adds	r3, #1
 800a964:	617b      	str	r3, [r7, #20]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	e002      	b.n	800a976 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a970:	2300      	movs	r3, #0
 800a972:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a974:	693b      	ldr	r3, [r7, #16]
}
 800a976:	4618      	mov	r0, r3
 800a978:	371c      	adds	r7, #28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
	...

0800a984 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	70da      	strb	r2, [r3, #3]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f04f 32ff 	mov.w	r2, #4294967295
 800a99a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7ff f8d4 	bl	8009b4c <move_window>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <check_fs+0x2a>
 800a9aa:	2304      	movs	r3, #4
 800a9ac:	e038      	b.n	800aa20 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	3334      	adds	r3, #52	; 0x34
 800a9b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fe fde6 	bl	8009588 <ld_word>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	461a      	mov	r2, r3
 800a9c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d001      	beq.n	800a9cc <check_fs+0x48>
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	e029      	b.n	800aa20 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9d2:	2be9      	cmp	r3, #233	; 0xe9
 800a9d4:	d009      	beq.n	800a9ea <check_fs+0x66>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9dc:	2beb      	cmp	r3, #235	; 0xeb
 800a9de:	d11e      	bne.n	800aa1e <check_fs+0x9a>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a9e6:	2b90      	cmp	r3, #144	; 0x90
 800a9e8:	d119      	bne.n	800aa1e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	3334      	adds	r3, #52	; 0x34
 800a9ee:	3336      	adds	r3, #54	; 0x36
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fe fde1 	bl	80095b8 <ld_dword>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a9fc:	4a0a      	ldr	r2, [pc, #40]	; (800aa28 <check_fs+0xa4>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d101      	bne.n	800aa06 <check_fs+0x82>
 800aa02:	2300      	movs	r3, #0
 800aa04:	e00c      	b.n	800aa20 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	3334      	adds	r3, #52	; 0x34
 800aa0a:	3352      	adds	r3, #82	; 0x52
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fe fdd3 	bl	80095b8 <ld_dword>
 800aa12:	4603      	mov	r3, r0
 800aa14:	4a05      	ldr	r2, [pc, #20]	; (800aa2c <check_fs+0xa8>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d101      	bne.n	800aa1e <check_fs+0x9a>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	e000      	b.n	800aa20 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800aa1e:	2302      	movs	r3, #2
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	00544146 	.word	0x00544146
 800aa2c:	33544146 	.word	0x33544146

0800aa30 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b096      	sub	sp, #88	; 0x58
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f7ff ff58 	bl	800a8fa <get_ldnumber>
 800aa4a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	da01      	bge.n	800aa56 <find_volume+0x26>
 800aa52:	230b      	movs	r3, #11
 800aa54:	e235      	b.n	800aec2 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aa56:	4aa5      	ldr	r2, [pc, #660]	; (800acec <find_volume+0x2bc>)
 800aa58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa5e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d101      	bne.n	800aa6a <find_volume+0x3a>
 800aa66:	230c      	movs	r3, #12
 800aa68:	e22b      	b.n	800aec2 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800aa6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa6c:	f7fe fe8c 	bl	8009788 <lock_fs>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <find_volume+0x4a>
 800aa76:	230f      	movs	r3, #15
 800aa78:	e223      	b.n	800aec2 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa7e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aa80:	79fb      	ldrb	r3, [r7, #7]
 800aa82:	f023 0301 	bic.w	r3, r3, #1
 800aa86:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d01a      	beq.n	800aac6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800aa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa92:	785b      	ldrb	r3, [r3, #1]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fe fcd9 	bl	800944c <disk_status>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aaa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aaa4:	f003 0301 	and.w	r3, r3, #1
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d10c      	bne.n	800aac6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800aaac:	79fb      	ldrb	r3, [r7, #7]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d007      	beq.n	800aac2 <find_volume+0x92>
 800aab2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aab6:	f003 0304 	and.w	r3, r3, #4
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800aabe:	230a      	movs	r3, #10
 800aac0:	e1ff      	b.n	800aec2 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800aac2:	2300      	movs	r3, #0
 800aac4:	e1fd      	b.n	800aec2 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800aac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac8:	2200      	movs	r2, #0
 800aaca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aacc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad6:	785b      	ldrb	r3, [r3, #1]
 800aad8:	4618      	mov	r0, r3
 800aada:	f7fe fcd1 	bl	8009480 <disk_initialize>
 800aade:	4603      	mov	r3, r0
 800aae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800aae4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aae8:	f003 0301 	and.w	r3, r3, #1
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e1e6      	b.n	800aec2 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d007      	beq.n	800ab0a <find_volume+0xda>
 800aafa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aafe:	f003 0304 	and.w	r3, r3, #4
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ab06:	230a      	movs	r3, #10
 800ab08:	e1db      	b.n	800aec2 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ab0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab12:	f7ff ff37 	bl	800a984 <check_fs>
 800ab16:	4603      	mov	r3, r0
 800ab18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ab1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d149      	bne.n	800abb8 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ab24:	2300      	movs	r3, #0
 800ab26:	643b      	str	r3, [r7, #64]	; 0x40
 800ab28:	e01e      	b.n	800ab68 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ab2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ab30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab32:	011b      	lsls	r3, r3, #4
 800ab34:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ab38:	4413      	add	r3, r2
 800ab3a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	3304      	adds	r3, #4
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d006      	beq.n	800ab54 <find_volume+0x124>
 800ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab48:	3308      	adds	r3, #8
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7fe fd34 	bl	80095b8 <ld_dword>
 800ab50:	4602      	mov	r2, r0
 800ab52:	e000      	b.n	800ab56 <find_volume+0x126>
 800ab54:	2200      	movs	r2, #0
 800ab56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	3358      	adds	r3, #88	; 0x58
 800ab5c:	443b      	add	r3, r7
 800ab5e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ab62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab64:	3301      	adds	r3, #1
 800ab66:	643b      	str	r3, [r7, #64]	; 0x40
 800ab68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab6a:	2b03      	cmp	r3, #3
 800ab6c:	d9dd      	bls.n	800ab2a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ab6e:	2300      	movs	r3, #0
 800ab70:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ab72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <find_volume+0x14e>
 800ab78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ab7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	3358      	adds	r3, #88	; 0x58
 800ab84:	443b      	add	r3, r7
 800ab86:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ab8a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ab8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d005      	beq.n	800ab9e <find_volume+0x16e>
 800ab92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab96:	f7ff fef5 	bl	800a984 <check_fs>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	e000      	b.n	800aba0 <find_volume+0x170>
 800ab9e:	2303      	movs	r3, #3
 800aba0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800aba4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d905      	bls.n	800abb8 <find_volume+0x188>
 800abac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abae:	3301      	adds	r3, #1
 800abb0:	643b      	str	r3, [r7, #64]	; 0x40
 800abb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abb4:	2b03      	cmp	r3, #3
 800abb6:	d9e2      	bls.n	800ab7e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800abb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abbc:	2b04      	cmp	r3, #4
 800abbe:	d101      	bne.n	800abc4 <find_volume+0x194>
 800abc0:	2301      	movs	r3, #1
 800abc2:	e17e      	b.n	800aec2 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800abc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d901      	bls.n	800abd0 <find_volume+0x1a0>
 800abcc:	230d      	movs	r3, #13
 800abce:	e178      	b.n	800aec2 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800abd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd2:	3334      	adds	r3, #52	; 0x34
 800abd4:	330b      	adds	r3, #11
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7fe fcd6 	bl	8009588 <ld_word>
 800abdc:	4603      	mov	r3, r0
 800abde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abe2:	d001      	beq.n	800abe8 <find_volume+0x1b8>
 800abe4:	230d      	movs	r3, #13
 800abe6:	e16c      	b.n	800aec2 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800abe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abea:	3334      	adds	r3, #52	; 0x34
 800abec:	3316      	adds	r3, #22
 800abee:	4618      	mov	r0, r3
 800abf0:	f7fe fcca 	bl	8009588 <ld_word>
 800abf4:	4603      	mov	r3, r0
 800abf6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800abf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d106      	bne.n	800ac0c <find_volume+0x1dc>
 800abfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac00:	3334      	adds	r3, #52	; 0x34
 800ac02:	3324      	adds	r3, #36	; 0x24
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7fe fcd7 	bl	80095b8 <ld_dword>
 800ac0a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ac0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac10:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ac12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac14:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ac18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1e:	789b      	ldrb	r3, [r3, #2]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d005      	beq.n	800ac30 <find_volume+0x200>
 800ac24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac26:	789b      	ldrb	r3, [r3, #2]
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d001      	beq.n	800ac30 <find_volume+0x200>
 800ac2c:	230d      	movs	r3, #13
 800ac2e:	e148      	b.n	800aec2 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ac30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac32:	789b      	ldrb	r3, [r3, #2]
 800ac34:	461a      	mov	r2, r3
 800ac36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac38:	fb02 f303 	mul.w	r3, r2, r3
 800ac3c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ac3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac48:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ac4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4c:	895b      	ldrh	r3, [r3, #10]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d008      	beq.n	800ac64 <find_volume+0x234>
 800ac52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac54:	895b      	ldrh	r3, [r3, #10]
 800ac56:	461a      	mov	r2, r3
 800ac58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5a:	895b      	ldrh	r3, [r3, #10]
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	4013      	ands	r3, r2
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d001      	beq.n	800ac68 <find_volume+0x238>
 800ac64:	230d      	movs	r3, #13
 800ac66:	e12c      	b.n	800aec2 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ac68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6a:	3334      	adds	r3, #52	; 0x34
 800ac6c:	3311      	adds	r3, #17
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fe fc8a 	bl	8009588 <ld_word>
 800ac74:	4603      	mov	r3, r0
 800ac76:	461a      	mov	r2, r3
 800ac78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7e:	891b      	ldrh	r3, [r3, #8]
 800ac80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <find_volume+0x25e>
 800ac8a:	230d      	movs	r3, #13
 800ac8c:	e119      	b.n	800aec2 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac90:	3334      	adds	r3, #52	; 0x34
 800ac92:	3313      	adds	r3, #19
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7fe fc77 	bl	8009588 <ld_word>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ac9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d106      	bne.n	800acb2 <find_volume+0x282>
 800aca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca6:	3334      	adds	r3, #52	; 0x34
 800aca8:	3320      	adds	r3, #32
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fe fc84 	bl	80095b8 <ld_dword>
 800acb0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800acb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb4:	3334      	adds	r3, #52	; 0x34
 800acb6:	330e      	adds	r3, #14
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fe fc65 	bl	8009588 <ld_word>
 800acbe:	4603      	mov	r3, r0
 800acc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800acc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <find_volume+0x29c>
 800acc8:	230d      	movs	r3, #13
 800acca:	e0fa      	b.n	800aec2 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800accc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800acce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acd0:	4413      	add	r3, r2
 800acd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acd4:	8912      	ldrh	r2, [r2, #8]
 800acd6:	09d2      	lsrs	r2, r2, #7
 800acd8:	b292      	uxth	r2, r2
 800acda:	4413      	add	r3, r2
 800acdc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800acde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ace0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d204      	bcs.n	800acf0 <find_volume+0x2c0>
 800ace6:	230d      	movs	r3, #13
 800ace8:	e0eb      	b.n	800aec2 <find_volume+0x492>
 800acea:	bf00      	nop
 800acec:	200014b0 	.word	0x200014b0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800acf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acf8:	8952      	ldrh	r2, [r2, #10]
 800acfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800acfe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d101      	bne.n	800ad0a <find_volume+0x2da>
 800ad06:	230d      	movs	r3, #13
 800ad08:	e0db      	b.n	800aec2 <find_volume+0x492>
		fmt = FS_FAT32;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ad10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad12:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d802      	bhi.n	800ad20 <find_volume+0x2f0>
 800ad1a:	2302      	movs	r3, #2
 800ad1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ad20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad22:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d802      	bhi.n	800ad30 <find_volume+0x300>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	1c9a      	adds	r2, r3, #2
 800ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad36:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad3c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ad3e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ad40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad42:	441a      	add	r2, r3
 800ad44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad46:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ad48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4c:	441a      	add	r2, r3
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad50:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ad52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad56:	2b03      	cmp	r3, #3
 800ad58:	d11e      	bne.n	800ad98 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ad5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5c:	3334      	adds	r3, #52	; 0x34
 800ad5e:	332a      	adds	r3, #42	; 0x2a
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fe fc11 	bl	8009588 <ld_word>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <find_volume+0x340>
 800ad6c:	230d      	movs	r3, #13
 800ad6e:	e0a8      	b.n	800aec2 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ad70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad72:	891b      	ldrh	r3, [r3, #8]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <find_volume+0x34c>
 800ad78:	230d      	movs	r3, #13
 800ad7a:	e0a2      	b.n	800aec2 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ad7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7e:	3334      	adds	r3, #52	; 0x34
 800ad80:	332c      	adds	r3, #44	; 0x2c
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe fc18 	bl	80095b8 <ld_dword>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	647b      	str	r3, [r7, #68]	; 0x44
 800ad96:	e01f      	b.n	800add8 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ad98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9a:	891b      	ldrh	r3, [r3, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <find_volume+0x374>
 800ada0:	230d      	movs	r3, #13
 800ada2:	e08e      	b.n	800aec2 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ada4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ada8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adaa:	441a      	add	r2, r3
 800adac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adae:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800adb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d103      	bne.n	800adc0 <find_volume+0x390>
 800adb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	005b      	lsls	r3, r3, #1
 800adbe:	e00a      	b.n	800add6 <find_volume+0x3a6>
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	699a      	ldr	r2, [r3, #24]
 800adc4:	4613      	mov	r3, r2
 800adc6:	005b      	lsls	r3, r3, #1
 800adc8:	4413      	add	r3, r2
 800adca:	085a      	lsrs	r2, r3, #1
 800adcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800add6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800add8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adda:	69da      	ldr	r2, [r3, #28]
 800addc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adde:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800ade2:	0b1b      	lsrs	r3, r3, #12
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d201      	bcs.n	800adec <find_volume+0x3bc>
 800ade8:	230d      	movs	r3, #13
 800adea:	e06a      	b.n	800aec2 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800adec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adee:	f04f 32ff 	mov.w	r2, #4294967295
 800adf2:	615a      	str	r2, [r3, #20]
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	695a      	ldr	r2, [r3, #20]
 800adf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800adfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfe:	2280      	movs	r2, #128	; 0x80
 800ae00:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ae02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae06:	2b03      	cmp	r3, #3
 800ae08:	d149      	bne.n	800ae9e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0c:	3334      	adds	r3, #52	; 0x34
 800ae0e:	3330      	adds	r3, #48	; 0x30
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe fbb9 	bl	8009588 <ld_word>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d140      	bne.n	800ae9e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ae1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae1e:	3301      	adds	r3, #1
 800ae20:	4619      	mov	r1, r3
 800ae22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae24:	f7fe fe92 	bl	8009b4c <move_window>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d137      	bne.n	800ae9e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800ae2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae30:	2200      	movs	r2, #0
 800ae32:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ae34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae36:	3334      	adds	r3, #52	; 0x34
 800ae38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7fe fba3 	bl	8009588 <ld_word>
 800ae42:	4603      	mov	r3, r0
 800ae44:	461a      	mov	r2, r3
 800ae46:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d127      	bne.n	800ae9e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ae4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae50:	3334      	adds	r3, #52	; 0x34
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fe fbb0 	bl	80095b8 <ld_dword>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	4a1c      	ldr	r2, [pc, #112]	; (800aecc <find_volume+0x49c>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d11e      	bne.n	800ae9e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ae60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae62:	3334      	adds	r3, #52	; 0x34
 800ae64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fe fba5 	bl	80095b8 <ld_dword>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	4a17      	ldr	r2, [pc, #92]	; (800aed0 <find_volume+0x4a0>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d113      	bne.n	800ae9e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	3334      	adds	r3, #52	; 0x34
 800ae7a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe fb9a 	bl	80095b8 <ld_dword>
 800ae84:	4602      	mov	r2, r0
 800ae86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae88:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8c:	3334      	adds	r3, #52	; 0x34
 800ae8e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fe fb90 	bl	80095b8 <ld_dword>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ae9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800aea4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aea6:	4b0b      	ldr	r3, [pc, #44]	; (800aed4 <find_volume+0x4a4>)
 800aea8:	881b      	ldrh	r3, [r3, #0]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	b29a      	uxth	r2, r3
 800aeae:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <find_volume+0x4a4>)
 800aeb0:	801a      	strh	r2, [r3, #0]
 800aeb2:	4b08      	ldr	r3, [pc, #32]	; (800aed4 <find_volume+0x4a4>)
 800aeb4:	881a      	ldrh	r2, [r3, #0]
 800aeb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aeba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aebc:	f7fe fdde 	bl	8009a7c <clear_lock>
#endif
	return FR_OK;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3758      	adds	r7, #88	; 0x58
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	41615252 	.word	0x41615252
 800aed0:	61417272 	.word	0x61417272
 800aed4:	200014b4 	.word	0x200014b4

0800aed8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aee2:	2309      	movs	r3, #9
 800aee4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d02e      	beq.n	800af4a <validate+0x72>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d02a      	beq.n	800af4a <validate+0x72>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d025      	beq.n	800af4a <validate+0x72>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	889a      	ldrh	r2, [r3, #4]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	88db      	ldrh	r3, [r3, #6]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d11e      	bne.n	800af4a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4618      	mov	r0, r3
 800af12:	f7fe fc39 	bl	8009788 <lock_fs>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d014      	beq.n	800af46 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	785b      	ldrb	r3, [r3, #1]
 800af22:	4618      	mov	r0, r3
 800af24:	f7fe fa92 	bl	800944c <disk_status>
 800af28:	4603      	mov	r3, r0
 800af2a:	f003 0301 	and.w	r3, r3, #1
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d102      	bne.n	800af38 <validate+0x60>
				res = FR_OK;
 800af32:	2300      	movs	r3, #0
 800af34:	73fb      	strb	r3, [r7, #15]
 800af36:	e008      	b.n	800af4a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2100      	movs	r1, #0
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fe fc38 	bl	80097b4 <unlock_fs>
 800af44:	e001      	b.n	800af4a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800af46:	230f      	movs	r3, #15
 800af48:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d102      	bne.n	800af56 <validate+0x7e>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	e000      	b.n	800af58 <validate+0x80>
 800af56:	2300      	movs	r3, #0
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	6013      	str	r3, [r2, #0]
	return res;
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
	...

0800af68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	4613      	mov	r3, r2
 800af74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800af7a:	f107 0310 	add.w	r3, r7, #16
 800af7e:	4618      	mov	r0, r3
 800af80:	f7ff fcbb 	bl	800a8fa <get_ldnumber>
 800af84:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	da01      	bge.n	800af90 <f_mount+0x28>
 800af8c:	230b      	movs	r3, #11
 800af8e:	e048      	b.n	800b022 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800af90:	4a26      	ldr	r2, [pc, #152]	; (800b02c <f_mount+0xc4>)
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af98:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00f      	beq.n	800afc0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800afa0:	69b8      	ldr	r0, [r7, #24]
 800afa2:	f7fe fd6b 	bl	8009a7c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 ff31 	bl	800be12 <ff_del_syncobj>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d101      	bne.n	800afba <f_mount+0x52>
 800afb6:	2302      	movs	r3, #2
 800afb8:	e033      	b.n	800b022 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	2200      	movs	r2, #0
 800afbe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00f      	beq.n	800afe6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2200      	movs	r2, #0
 800afca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	b2da      	uxtb	r2, r3
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	330c      	adds	r3, #12
 800afd4:	4619      	mov	r1, r3
 800afd6:	4610      	mov	r0, r2
 800afd8:	f000 fefb 	bl	800bdd2 <ff_cre_syncobj>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <f_mount+0x7e>
 800afe2:	2302      	movs	r3, #2
 800afe4:	e01d      	b.n	800b022 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	4910      	ldr	r1, [pc, #64]	; (800b02c <f_mount+0xc4>)
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d002      	beq.n	800affc <f_mount+0x94>
 800aff6:	79fb      	ldrb	r3, [r7, #7]
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d001      	beq.n	800b000 <f_mount+0x98>
 800affc:	2300      	movs	r3, #0
 800affe:	e010      	b.n	800b022 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b000:	f107 010c 	add.w	r1, r7, #12
 800b004:	f107 0308 	add.w	r3, r7, #8
 800b008:	2200      	movs	r2, #0
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff fd10 	bl	800aa30 <find_volume>
 800b010:	4603      	mov	r3, r0
 800b012:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	7dfa      	ldrb	r2, [r7, #23]
 800b018:	4611      	mov	r1, r2
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe fbca 	bl	80097b4 <unlock_fs>
 800b020:	7dfb      	ldrb	r3, [r7, #23]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3720      	adds	r7, #32
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	200014b0 	.word	0x200014b0

0800b030 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b09a      	sub	sp, #104	; 0x68
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	4613      	mov	r3, r2
 800b03c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d101      	bne.n	800b048 <f_open+0x18>
 800b044:	2309      	movs	r3, #9
 800b046:	e19b      	b.n	800b380 <f_open+0x350>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b048:	79fb      	ldrb	r3, [r7, #7]
 800b04a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b04e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b050:	79fa      	ldrb	r2, [r7, #7]
 800b052:	f107 0114 	add.w	r1, r7, #20
 800b056:	f107 0308 	add.w	r3, r7, #8
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7ff fce8 	bl	800aa30 <find_volume>
 800b060:	4603      	mov	r3, r0
 800b062:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b066:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f040 8178 	bne.w	800b360 <f_open+0x330>
		dj.obj.fs = fs;
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	f107 0318 	add.w	r3, r7, #24
 800b07a:	4611      	mov	r1, r2
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff fbcb 	bl	800a818 <follow_path>
 800b082:	4603      	mov	r3, r0
 800b084:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b088:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d11a      	bne.n	800b0c6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b090:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b094:	b25b      	sxtb	r3, r3
 800b096:	2b00      	cmp	r3, #0
 800b098:	da03      	bge.n	800b0a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b09a:	2306      	movs	r3, #6
 800b09c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b0a0:	e011      	b.n	800b0c6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b0a2:	79fb      	ldrb	r3, [r7, #7]
 800b0a4:	f023 0301 	bic.w	r3, r3, #1
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	bf14      	ite	ne
 800b0ac:	2301      	movne	r3, #1
 800b0ae:	2300      	moveq	r3, #0
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	f107 0318 	add.w	r3, r7, #24
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fe fb96 	bl	80097ec <chk_lock>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b0c6:	79fb      	ldrb	r3, [r7, #7]
 800b0c8:	f003 031c 	and.w	r3, r3, #28
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d07f      	beq.n	800b1d0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b0d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d017      	beq.n	800b108 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b0d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b0dc:	2b04      	cmp	r3, #4
 800b0de:	d10e      	bne.n	800b0fe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b0e0:	f7fe fbe0 	bl	80098a4 <enq_lock>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d006      	beq.n	800b0f8 <f_open+0xc8>
 800b0ea:	f107 0318 	add.w	r3, r7, #24
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7ff facc 	bl	800a68c <dir_register>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	e000      	b.n	800b0fa <f_open+0xca>
 800b0f8:	2312      	movs	r3, #18
 800b0fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b0fe:	79fb      	ldrb	r3, [r7, #7]
 800b100:	f043 0308 	orr.w	r3, r3, #8
 800b104:	71fb      	strb	r3, [r7, #7]
 800b106:	e010      	b.n	800b12a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b108:	7fbb      	ldrb	r3, [r7, #30]
 800b10a:	f003 0311 	and.w	r3, r3, #17
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <f_open+0xea>
					res = FR_DENIED;
 800b112:	2307      	movs	r3, #7
 800b114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b118:	e007      	b.n	800b12a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b11a:	79fb      	ldrb	r3, [r7, #7]
 800b11c:	f003 0304 	and.w	r3, r3, #4
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <f_open+0xfa>
 800b124:	2308      	movs	r3, #8
 800b126:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b12a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d168      	bne.n	800b204 <f_open+0x1d4>
 800b132:	79fb      	ldrb	r3, [r7, #7]
 800b134:	f003 0308 	and.w	r3, r3, #8
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d063      	beq.n	800b204 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b13c:	f7fb f85c 	bl	80061f8 <get_fattime>
 800b140:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b144:	330e      	adds	r3, #14
 800b146:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fe fa73 	bl	8009634 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b150:	3316      	adds	r3, #22
 800b152:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b154:	4618      	mov	r0, r3
 800b156:	f7fe fa6d 	bl	8009634 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15c:	330b      	adds	r3, #11
 800b15e:	2220      	movs	r2, #32
 800b160:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b166:	4611      	mov	r1, r2
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff f9fb 	bl	800a564 <ld_clust>
 800b16e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b174:	2200      	movs	r2, #0
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff fa13 	bl	800a5a2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	331c      	adds	r3, #28
 800b180:	2100      	movs	r1, #0
 800b182:	4618      	mov	r0, r3
 800b184:	f7fe fa56 	bl	8009634 <st_dword>
					fs->wflag = 1;
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	2201      	movs	r2, #1
 800b18c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b18e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b190:	2b00      	cmp	r3, #0
 800b192:	d037      	beq.n	800b204 <f_open+0x1d4>
						dw = fs->winsect;
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b198:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b19a:	f107 0318 	add.w	r3, r7, #24
 800b19e:	2200      	movs	r2, #0
 800b1a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fe ff26 	bl	8009ff4 <remove_chain>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b1ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d126      	bne.n	800b204 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fe fcc6 	bl	8009b4c <move_window>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1ca:	3a01      	subs	r2, #1
 800b1cc:	611a      	str	r2, [r3, #16]
 800b1ce:	e019      	b.n	800b204 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b1d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d115      	bne.n	800b204 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b1d8:	7fbb      	ldrb	r3, [r7, #30]
 800b1da:	f003 0310 	and.w	r3, r3, #16
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d003      	beq.n	800b1ea <f_open+0x1ba>
					res = FR_NO_FILE;
 800b1e2:	2304      	movs	r3, #4
 800b1e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b1e8:	e00c      	b.n	800b204 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b1ea:	79fb      	ldrb	r3, [r7, #7]
 800b1ec:	f003 0302 	and.w	r3, r3, #2
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d007      	beq.n	800b204 <f_open+0x1d4>
 800b1f4:	7fbb      	ldrb	r3, [r7, #30]
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d002      	beq.n	800b204 <f_open+0x1d4>
						res = FR_DENIED;
 800b1fe:	2307      	movs	r3, #7
 800b200:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b204:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d128      	bne.n	800b25e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b20c:	79fb      	ldrb	r3, [r7, #7]
 800b20e:	f003 0308 	and.w	r3, r3, #8
 800b212:	2b00      	cmp	r3, #0
 800b214:	d003      	beq.n	800b21e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b216:	79fb      	ldrb	r3, [r7, #7]
 800b218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b21c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b22c:	79fb      	ldrb	r3, [r7, #7]
 800b22e:	f023 0301 	bic.w	r3, r3, #1
 800b232:	2b00      	cmp	r3, #0
 800b234:	bf14      	ite	ne
 800b236:	2301      	movne	r3, #1
 800b238:	2300      	moveq	r3, #0
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	461a      	mov	r2, r3
 800b23e:	f107 0318 	add.w	r3, r7, #24
 800b242:	4611      	mov	r1, r2
 800b244:	4618      	mov	r0, r3
 800b246:	f7fe fb4f 	bl	80098e8 <inc_lock>
 800b24a:	4602      	mov	r2, r0
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d102      	bne.n	800b25e <f_open+0x22e>
 800b258:	2302      	movs	r3, #2
 800b25a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b25e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b262:	2b00      	cmp	r3, #0
 800b264:	d17c      	bne.n	800b360 <f_open+0x330>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b26a:	4611      	mov	r1, r2
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7ff f979 	bl	800a564 <ld_clust>
 800b272:	4602      	mov	r2, r0
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27a:	331c      	adds	r3, #28
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fe f99b 	bl	80095b8 <ld_dword>
 800b282:	4602      	mov	r2, r0
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b28e:	697a      	ldr	r2, [r7, #20]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	88da      	ldrh	r2, [r3, #6]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	79fa      	ldrb	r2, [r7, #7]
 800b2a0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b2b4:	79fb      	ldrb	r3, [r7, #7]
 800b2b6:	f003 0320 	and.w	r3, r3, #32
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d050      	beq.n	800b360 <f_open+0x330>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d04c      	beq.n	800b360 <f_open+0x330>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	68da      	ldr	r2, [r3, #12]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	895b      	ldrh	r3, [r3, #10]
 800b2d2:	031b      	lsls	r3, r3, #12
 800b2d4:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2e2:	e016      	b.n	800b312 <f_open+0x2e2>
					clst = get_fat(&fp->obj, clst);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fe fcea 	bl	8009cc2 <get_fat>
 800b2ee:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b2f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d802      	bhi.n	800b2fc <f_open+0x2cc>
 800b2f6:	2302      	movs	r3, #2
 800b2f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b2fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b302:	d102      	bne.n	800b30a <f_open+0x2da>
 800b304:	2301      	movs	r3, #1
 800b306:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b30a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b30c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b30e:	1ad3      	subs	r3, r2, r3
 800b310:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b312:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b316:	2b00      	cmp	r3, #0
 800b318:	d103      	bne.n	800b322 <f_open+0x2f2>
 800b31a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b31c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b31e:	429a      	cmp	r2, r3
 800b320:	d8e0      	bhi.n	800b2e4 <f_open+0x2b4>
				}
				fp->clust = clst;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b326:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b328:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d117      	bne.n	800b360 <f_open+0x330>
 800b330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b336:	2b00      	cmp	r3, #0
 800b338:	d012      	beq.n	800b360 <f_open+0x330>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b33e:	4618      	mov	r0, r3
 800b340:	f7fe fca0 	bl	8009c84 <clust2sect>
 800b344:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d103      	bne.n	800b354 <f_open+0x324>
						res = FR_INT_ERR;
 800b34c:	2302      	movs	r3, #2
 800b34e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b352:	e005      	b.n	800b360 <f_open+0x330>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b356:	0b1a      	lsrs	r2, r3, #12
 800b358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b35a:	441a      	add	r2, r3
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	621a      	str	r2, [r3, #32]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b360:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <f_open+0x33e>
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800b374:	4611      	mov	r1, r2
 800b376:	4618      	mov	r0, r3
 800b378:	f7fe fa1c 	bl	80097b4 <unlock_fs>
 800b37c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b380:	4618      	mov	r0, r3
 800b382:	3768      	adds	r7, #104	; 0x68
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b08c      	sub	sp, #48	; 0x30
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
 800b394:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	2200      	movs	r2, #0
 800b39e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f107 0210 	add.w	r2, r7, #16
 800b3a6:	4611      	mov	r1, r2
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7ff fd95 	bl	800aed8 <validate>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b3b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d107      	bne.n	800b3cc <f_write+0x44>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	7d5b      	ldrb	r3, [r3, #21]
 800b3c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b3c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d009      	beq.n	800b3e0 <f_write+0x58>
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b3d2:	4611      	mov	r1, r2
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe f9ed 	bl	80097b4 <unlock_fs>
 800b3da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3de:	e16c      	b.n	800b6ba <f_write+0x332>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	7d1b      	ldrb	r3, [r3, #20]
 800b3e4:	f003 0302 	and.w	r3, r3, #2
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d106      	bne.n	800b3fa <f_write+0x72>
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	2107      	movs	r1, #7
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7fe f9df 	bl	80097b4 <unlock_fs>
 800b3f6:	2307      	movs	r3, #7
 800b3f8:	e15f      	b.n	800b6ba <f_write+0x332>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	699a      	ldr	r2, [r3, #24]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	441a      	add	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	429a      	cmp	r2, r3
 800b408:	f080 8144 	bcs.w	800b694 <f_write+0x30c>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	43db      	mvns	r3, r3
 800b412:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b414:	e13e      	b.n	800b694 <f_write+0x30c>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f040 80ea 	bne.w	800b5f8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	0b1b      	lsrs	r3, r3, #12
 800b42a:	693a      	ldr	r2, [r7, #16]
 800b42c:	8952      	ldrh	r2, [r2, #10]
 800b42e:	3a01      	subs	r2, #1
 800b430:	4013      	ands	r3, r2
 800b432:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d14d      	bne.n	800b4d6 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10c      	bne.n	800b45c <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d11a      	bne.n	800b484 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2100      	movs	r1, #0
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe fe33 	bl	800a0be <create_chain>
 800b458:	62b8      	str	r0, [r7, #40]	; 0x28
 800b45a:	e013      	b.n	800b484 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b460:	2b00      	cmp	r3, #0
 800b462:	d007      	beq.n	800b474 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	699b      	ldr	r3, [r3, #24]
 800b468:	4619      	mov	r1, r3
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f7fe febf 	bl	800a1ee <clmt_clust>
 800b470:	62b8      	str	r0, [r7, #40]	; 0x28
 800b472:	e007      	b.n	800b484 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	69db      	ldr	r3, [r3, #28]
 800b47a:	4619      	mov	r1, r3
 800b47c:	4610      	mov	r0, r2
 800b47e:	f7fe fe1e 	bl	800a0be <create_chain>
 800b482:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b486:	2b00      	cmp	r3, #0
 800b488:	f000 8109 	beq.w	800b69e <f_write+0x316>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d109      	bne.n	800b4a6 <f_write+0x11e>
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2202      	movs	r2, #2
 800b496:	755a      	strb	r2, [r3, #21]
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	2102      	movs	r1, #2
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7fe f989 	bl	80097b4 <unlock_fs>
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	e109      	b.n	800b6ba <f_write+0x332>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ac:	d109      	bne.n	800b4c2 <f_write+0x13a>
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	755a      	strb	r2, [r3, #21]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	2101      	movs	r1, #1
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fe f97b 	bl	80097b4 <unlock_fs>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e0fb      	b.n	800b6ba <f_write+0x332>
				fp->clust = clst;			/* Update current cluster */
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4c6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d102      	bne.n	800b4d6 <f_write+0x14e>
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4d4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6a1b      	ldr	r3, [r3, #32]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d110      	bne.n	800b504 <f_write+0x17c>
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7fe faed 	bl	8009ac4 <sync_window>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d009      	beq.n	800b504 <f_write+0x17c>
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	755a      	strb	r2, [r3, #21]
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	2101      	movs	r1, #1
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fe f95a 	bl	80097b4 <unlock_fs>
 800b500:	2301      	movs	r3, #1
 800b502:	e0da      	b.n	800b6ba <f_write+0x332>
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b504:	693a      	ldr	r2, [r7, #16]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	69db      	ldr	r3, [r3, #28]
 800b50a:	4619      	mov	r1, r3
 800b50c:	4610      	mov	r0, r2
 800b50e:	f7fe fbb9 	bl	8009c84 <clust2sect>
 800b512:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d109      	bne.n	800b52e <f_write+0x1a6>
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2202      	movs	r2, #2
 800b51e:	755a      	strb	r2, [r3, #21]
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	2102      	movs	r1, #2
 800b524:	4618      	mov	r0, r3
 800b526:	f7fe f945 	bl	80097b4 <unlock_fs>
 800b52a:	2302      	movs	r3, #2
 800b52c:	e0c5      	b.n	800b6ba <f_write+0x332>
			sect += csect;
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	4413      	add	r3, r2
 800b534:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	0b1b      	lsrs	r3, r3, #12
 800b53a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b53c:	6a3b      	ldr	r3, [r7, #32]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d03d      	beq.n	800b5be <f_write+0x236>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b542:	69ba      	ldr	r2, [r7, #24]
 800b544:	6a3b      	ldr	r3, [r7, #32]
 800b546:	4413      	add	r3, r2
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	8952      	ldrh	r2, [r2, #10]
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d905      	bls.n	800b55c <f_write+0x1d4>
					cc = fs->csize - csect;
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	895b      	ldrh	r3, [r3, #10]
 800b554:	461a      	mov	r2, r3
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	7858      	ldrb	r0, [r3, #1]
 800b560:	6a3b      	ldr	r3, [r7, #32]
 800b562:	697a      	ldr	r2, [r7, #20]
 800b564:	69f9      	ldr	r1, [r7, #28]
 800b566:	f7fd ffd1 	bl	800950c <disk_write>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d009      	beq.n	800b584 <f_write+0x1fc>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2201      	movs	r2, #1
 800b574:	755a      	strb	r2, [r3, #21]
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	2101      	movs	r1, #1
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe f91a 	bl	80097b4 <unlock_fs>
 800b580:	2301      	movs	r3, #1
 800b582:	e09a      	b.n	800b6ba <f_write+0x332>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	1ad3      	subs	r3, r2, r3
 800b58c:	6a3a      	ldr	r2, [r7, #32]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d911      	bls.n	800b5b6 <f_write+0x22e>
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	031b      	lsls	r3, r3, #12
 800b5a2:	69fa      	ldr	r2, [r7, #28]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	f7fe f86e 	bl	800968c <mem_cpy>
					fs->wflag = 0;
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	70da      	strb	r2, [r3, #3]
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b5b6:	6a3b      	ldr	r3, [r7, #32]
 800b5b8:	031b      	lsls	r3, r3, #12
 800b5ba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b5bc:	e04d      	b.n	800b65a <f_write+0x2d2>
			}
#if _FS_TINY
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	699a      	ldr	r2, [r3, #24]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d313      	bcc.n	800b5f2 <f_write+0x26a>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fe fa79 	bl	8009ac4 <sync_window>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d009      	beq.n	800b5ec <f_write+0x264>
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	755a      	strb	r2, [r3, #21]
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	2101      	movs	r1, #1
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fe f8e6 	bl	80097b4 <unlock_fs>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e066      	b.n	800b6ba <f_write+0x332>
				fs->winsect = sect;
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	631a      	str	r2, [r3, #48]	; 0x30
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b600:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800b604:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d901      	bls.n	800b612 <f_write+0x28a>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6a1b      	ldr	r3, [r3, #32]
 800b618:	4619      	mov	r1, r3
 800b61a:	4610      	mov	r0, r2
 800b61c:	f7fe fa96 	bl	8009b4c <move_window>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d009      	beq.n	800b63a <f_write+0x2b2>
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2201      	movs	r2, #1
 800b62a:	755a      	strb	r2, [r3, #21]
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	2101      	movs	r1, #1
 800b630:	4618      	mov	r0, r3
 800b632:	f7fe f8bf 	bl	80097b4 <unlock_fs>
 800b636:	2301      	movs	r3, #1
 800b638:	e03f      	b.n	800b6ba <f_write+0x332>
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	699b      	ldr	r3, [r3, #24]
 800b644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b648:	4413      	add	r3, r2
 800b64a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b64c:	69f9      	ldr	r1, [r7, #28]
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fe f81c 	bl	800968c <mem_cpy>
		fs->wflag = 1;
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	2201      	movs	r2, #1
 800b658:	70da      	strb	r2, [r3, #3]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b65a:	69fa      	ldr	r2, [r7, #28]
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	4413      	add	r3, r2
 800b660:	61fb      	str	r3, [r7, #28]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	699a      	ldr	r2, [r3, #24]
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	441a      	add	r2, r3
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	619a      	str	r2, [r3, #24]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	68da      	ldr	r2, [r3, #12]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	429a      	cmp	r2, r3
 800b678:	bf38      	it	cc
 800b67a:	461a      	movcc	r2, r3
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	60da      	str	r2, [r3, #12]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	441a      	add	r2, r3
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	601a      	str	r2, [r3, #0]
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b690:	1ad3      	subs	r3, r2, r3
 800b692:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	f47f aebd 	bne.w	800b416 <f_write+0x8e>
 800b69c:	e000      	b.n	800b6a0 <f_write+0x318>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b69e:	bf00      	nop
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	7d1b      	ldrb	r3, [r3, #20]
 800b6a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fe f87e 	bl	80097b4 <unlock_fs>
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3730      	adds	r7, #48	; 0x30
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b086      	sub	sp, #24
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f107 0208 	add.w	r2, r7, #8
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff fc00 	bl	800aed8 <validate>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b6dc:	7dfb      	ldrb	r3, [r7, #23]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d14d      	bne.n	800b77e <f_sync+0xbc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	7d1b      	ldrb	r3, [r3, #20]
 800b6e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d047      	beq.n	800b77e <f_sync+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b6ee:	f7fa fd83 	bl	80061f8 <get_fattime>
 800b6f2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b6f4:	68ba      	ldr	r2, [r7, #8]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	f7fe fa25 	bl	8009b4c <move_window>
 800b702:	4603      	mov	r3, r0
 800b704:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b706:	7dfb      	ldrb	r3, [r7, #23]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d138      	bne.n	800b77e <f_sync+0xbc>
					dir = fp->dir_ptr;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b710:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	330b      	adds	r3, #11
 800b716:	781a      	ldrb	r2, [r3, #0]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	330b      	adds	r3, #11
 800b71c:	f042 0220 	orr.w	r2, r2, #32
 800b720:	b2d2      	uxtb	r2, r2
 800b722:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6818      	ldr	r0, [r3, #0]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	461a      	mov	r2, r3
 800b72e:	68f9      	ldr	r1, [r7, #12]
 800b730:	f7fe ff37 	bl	800a5a2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f103 021c 	add.w	r2, r3, #28
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	4619      	mov	r1, r3
 800b740:	4610      	mov	r0, r2
 800b742:	f7fd ff77 	bl	8009634 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	3316      	adds	r3, #22
 800b74a:	6939      	ldr	r1, [r7, #16]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7fd ff71 	bl	8009634 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3312      	adds	r3, #18
 800b756:	2100      	movs	r1, #0
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fd ff50 	bl	80095fe <st_word>
					fs->wflag = 1;
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	2201      	movs	r2, #1
 800b762:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	4618      	mov	r0, r3
 800b768:	f7fe fa1e 	bl	8009ba8 <sync_fs>
 800b76c:	4603      	mov	r3, r0
 800b76e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	7d1b      	ldrb	r3, [r3, #20]
 800b774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	7dfa      	ldrb	r2, [r7, #23]
 800b782:	4611      	mov	r1, r2
 800b784:	4618      	mov	r0, r3
 800b786:	f7fe f815 	bl	80097b4 <unlock_fs>
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3718      	adds	r7, #24
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f7ff ff90 	bl	800b6c2 <f_sync>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b7a6:	7bfb      	ldrb	r3, [r7, #15]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d11d      	bne.n	800b7e8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f107 0208 	add.w	r2, r7, #8
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7ff fb8f 	bl	800aed8 <validate>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b7be:	7bfb      	ldrb	r3, [r7, #15]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d111      	bne.n	800b7e8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	691b      	ldr	r3, [r3, #16]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fe f91b 	bl	8009a04 <dec_lock>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b7d2:	7bfb      	ldrb	r3, [r7, #15]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d102      	bne.n	800b7de <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fd ffe6 	bl	80097b4 <unlock_fs>
#endif
		}
	}
	return res;
 800b7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b7fe:	78fb      	ldrb	r3, [r7, #3]
 800b800:	2b0a      	cmp	r3, #10
 800b802:	d103      	bne.n	800b80c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b804:	210d      	movs	r1, #13
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f7ff fff3 	bl	800b7f2 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	db25      	blt.n	800b864 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	1c5a      	adds	r2, r3, #1
 800b81c:	60fa      	str	r2, [r7, #12]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	4413      	add	r3, r2
 800b822:	78fa      	ldrb	r2, [r7, #3]
 800b824:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b3c      	cmp	r3, #60	; 0x3c
 800b82a:	dd12      	ble.n	800b852 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6818      	ldr	r0, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f103 010c 	add.w	r1, r3, #12
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	f107 0308 	add.w	r3, r7, #8
 800b83c:	f7ff fda4 	bl	800b388 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	429a      	cmp	r2, r3
 800b846:	d101      	bne.n	800b84c <putc_bfd+0x5a>
 800b848:	2300      	movs	r3, #0
 800b84a:	e001      	b.n	800b850 <putc_bfd+0x5e>
 800b84c:	f04f 33ff 	mov.w	r3, #4294967295
 800b850:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	1c5a      	adds	r2, r3, #1
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	609a      	str	r2, [r3, #8]
 800b862:	e000      	b.n	800b866 <putc_bfd+0x74>
	if (i < 0) return;
 800b864:	bf00      	nop
}
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	db16      	blt.n	800b8aa <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6818      	ldr	r0, [r3, #0]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f103 010c 	add.w	r1, r3, #12
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	461a      	mov	r2, r3
 800b88c:	f107 030c 	add.w	r3, r7, #12
 800b890:	f7ff fd7a 	bl	800b388 <f_write>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d107      	bne.n	800b8aa <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d102      	bne.n	800b8aa <putc_flush+0x3e>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	e001      	b.n	800b8ae <putc_flush+0x42>
	return EOF;
 800b8aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b8b6:	b480      	push	{r7}
 800b8b8:	b083      	sub	sp, #12
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	683a      	ldr	r2, [r7, #0]
 800b8c4:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	605a      	str	r2, [r3, #4]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685a      	ldr	r2, [r3, #4]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	609a      	str	r2, [r3, #8]
}
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800b8e0:	b40e      	push	{r1, r2, r3}
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b0a7      	sub	sp, #156	; 0x9c
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800b8ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8ee:	6879      	ldr	r1, [r7, #4]
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7ff ffe0 	bl	800b8b6 <putc_init>

	va_start(arp, fmt);
 800b8f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b8fa:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800b8fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b900:	1c5a      	adds	r2, r3, #1
 800b902:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800b90c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b910:	2b00      	cmp	r3, #0
 800b912:	f000 81f2 	beq.w	800bcfa <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800b916:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b91a:	2b25      	cmp	r3, #37	; 0x25
 800b91c:	d008      	beq.n	800b930 <f_printf+0x50>
			putc_bfd(&pb, c);
 800b91e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b926:	4611      	mov	r1, r2
 800b928:	4618      	mov	r0, r3
 800b92a:	f7ff ff62 	bl	800b7f2 <putc_bfd>
			continue;
 800b92e:	e1e3      	b.n	800bcf8 <f_printf+0x418>
		}
		w = f = 0;
 800b930:	2300      	movs	r3, #0
 800b932:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b936:	2300      	movs	r3, #0
 800b938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800b93c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b940:	1c5a      	adds	r2, r3, #1
 800b942:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800b94c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b950:	2b30      	cmp	r3, #48	; 0x30
 800b952:	d10b      	bne.n	800b96c <f_printf+0x8c>
			f = 1; c = *fmt++;
 800b954:	2301      	movs	r3, #1
 800b956:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b95a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800b96a:	e024      	b.n	800b9b6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800b96c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b970:	2b2d      	cmp	r3, #45	; 0x2d
 800b972:	d120      	bne.n	800b9b6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800b974:	2302      	movs	r3, #2
 800b976:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b97a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b97e:	1c5a      	adds	r2, r3, #1
 800b980:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800b98a:	e014      	b.n	800b9b6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800b98c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b990:	4613      	mov	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	005b      	lsls	r3, r3, #1
 800b998:	461a      	mov	r2, r3
 800b99a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b99e:	4413      	add	r3, r2
 800b9a0:	3b30      	subs	r3, #48	; 0x30
 800b9a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800b9a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800b9b6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b9ba:	2b2f      	cmp	r3, #47	; 0x2f
 800b9bc:	d903      	bls.n	800b9c6 <f_printf+0xe6>
 800b9be:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b9c2:	2b39      	cmp	r3, #57	; 0x39
 800b9c4:	d9e2      	bls.n	800b98c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800b9c6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b9ca:	2b6c      	cmp	r3, #108	; 0x6c
 800b9cc:	d003      	beq.n	800b9d6 <f_printf+0xf6>
 800b9ce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b9d2:	2b4c      	cmp	r3, #76	; 0x4c
 800b9d4:	d10d      	bne.n	800b9f2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800b9d6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b9da:	f043 0304 	orr.w	r3, r3, #4
 800b9de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b9e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800b9f2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f000 8181 	beq.w	800bcfe <f_printf+0x41e>
		d = c;
 800b9fc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ba00:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800ba04:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ba08:	2b60      	cmp	r3, #96	; 0x60
 800ba0a:	d908      	bls.n	800ba1e <f_printf+0x13e>
 800ba0c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ba10:	2b7a      	cmp	r3, #122	; 0x7a
 800ba12:	d804      	bhi.n	800ba1e <f_printf+0x13e>
 800ba14:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ba18:	3b20      	subs	r3, #32
 800ba1a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800ba1e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ba22:	3b42      	subs	r3, #66	; 0x42
 800ba24:	2b16      	cmp	r3, #22
 800ba26:	f200 8098 	bhi.w	800bb5a <f_printf+0x27a>
 800ba2a:	a201      	add	r2, pc, #4	; (adr r2, 800ba30 <f_printf+0x150>)
 800ba2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba30:	0800bb3b 	.word	0x0800bb3b
 800ba34:	0800bb23 	.word	0x0800bb23
 800ba38:	0800bb4b 	.word	0x0800bb4b
 800ba3c:	0800bb5b 	.word	0x0800bb5b
 800ba40:	0800bb5b 	.word	0x0800bb5b
 800ba44:	0800bb5b 	.word	0x0800bb5b
 800ba48:	0800bb5b 	.word	0x0800bb5b
 800ba4c:	0800bb5b 	.word	0x0800bb5b
 800ba50:	0800bb5b 	.word	0x0800bb5b
 800ba54:	0800bb5b 	.word	0x0800bb5b
 800ba58:	0800bb5b 	.word	0x0800bb5b
 800ba5c:	0800bb5b 	.word	0x0800bb5b
 800ba60:	0800bb5b 	.word	0x0800bb5b
 800ba64:	0800bb43 	.word	0x0800bb43
 800ba68:	0800bb5b 	.word	0x0800bb5b
 800ba6c:	0800bb5b 	.word	0x0800bb5b
 800ba70:	0800bb5b 	.word	0x0800bb5b
 800ba74:	0800ba8d 	.word	0x0800ba8d
 800ba78:	0800bb5b 	.word	0x0800bb5b
 800ba7c:	0800bb4b 	.word	0x0800bb4b
 800ba80:	0800bb5b 	.word	0x0800bb5b
 800ba84:	0800bb5b 	.word	0x0800bb5b
 800ba88:	0800bb53 	.word	0x0800bb53
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800ba8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba8e:	1d1a      	adds	r2, r3, #4
 800ba90:	67ba      	str	r2, [r7, #120]	; 0x78
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800ba96:	2300      	movs	r3, #0
 800ba98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ba9c:	e004      	b.n	800baa8 <f_printf+0x1c8>
 800ba9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800baa2:	3301      	adds	r3, #1
 800baa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800baa8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800baaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800baae:	4413      	add	r3, r2
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1f3      	bne.n	800ba9e <f_printf+0x1be>
			if (!(f & 2)) {
 800bab6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800baba:	f003 0302 	and.w	r3, r3, #2
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d11a      	bne.n	800baf8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800bac2:	e005      	b.n	800bad0 <f_printf+0x1f0>
 800bac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bac8:	2120      	movs	r1, #32
 800baca:	4618      	mov	r0, r3
 800bacc:	f7ff fe91 	bl	800b7f2 <putc_bfd>
 800bad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bad4:	1c5a      	adds	r2, r3, #1
 800bad6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bada:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bade:	429a      	cmp	r2, r3
 800bae0:	d8f0      	bhi.n	800bac4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800bae2:	e009      	b.n	800baf8 <f_printf+0x218>
 800bae4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bae6:	1c5a      	adds	r2, r3, #1
 800bae8:	67fa      	str	r2, [r7, #124]	; 0x7c
 800baea:	781a      	ldrb	r2, [r3, #0]
 800baec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800baf0:	4611      	mov	r1, r2
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7ff fe7d 	bl	800b7f2 <putc_bfd>
 800baf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1f1      	bne.n	800bae4 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800bb00:	e005      	b.n	800bb0e <f_printf+0x22e>
 800bb02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb06:	2120      	movs	r1, #32
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7ff fe72 	bl	800b7f2 <putc_bfd>
 800bb0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bb18:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d8f0      	bhi.n	800bb02 <f_printf+0x222>
			continue;
 800bb20:	e0ea      	b.n	800bcf8 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800bb22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb24:	1d1a      	adds	r2, r3, #4
 800bb26:	67ba      	str	r2, [r7, #120]	; 0x78
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb30:	4611      	mov	r1, r2
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7ff fe5d 	bl	800b7f2 <putc_bfd>
 800bb38:	e0de      	b.n	800bcf8 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800bb3a:	2302      	movs	r3, #2
 800bb3c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800bb40:	e014      	b.n	800bb6c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800bb42:	2308      	movs	r3, #8
 800bb44:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800bb48:	e010      	b.n	800bb6c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800bb4a:	230a      	movs	r3, #10
 800bb4c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800bb50:	e00c      	b.n	800bb6c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800bb52:	2310      	movs	r3, #16
 800bb54:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800bb58:	e008      	b.n	800bb6c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800bb5a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800bb5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb62:	4611      	mov	r1, r2
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7ff fe44 	bl	800b7f2 <putc_bfd>
 800bb6a:	e0c5      	b.n	800bcf8 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800bb6c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bb70:	f003 0304 	and.w	r3, r3, #4
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d004      	beq.n	800bb82 <f_printf+0x2a2>
 800bb78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb7a:	1d1a      	adds	r2, r3, #4
 800bb7c:	67ba      	str	r2, [r7, #120]	; 0x78
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	e00c      	b.n	800bb9c <f_printf+0x2bc>
 800bb82:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bb86:	2b44      	cmp	r3, #68	; 0x44
 800bb88:	d104      	bne.n	800bb94 <f_printf+0x2b4>
 800bb8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb8c:	1d1a      	adds	r2, r3, #4
 800bb8e:	67ba      	str	r2, [r7, #120]	; 0x78
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	e003      	b.n	800bb9c <f_printf+0x2bc>
 800bb94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb96:	1d1a      	adds	r2, r3, #4
 800bb98:	67ba      	str	r2, [r7, #120]	; 0x78
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800bba0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bba4:	2b44      	cmp	r3, #68	; 0x44
 800bba6:	d10e      	bne.n	800bbc6 <f_printf+0x2e6>
 800bba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	da0a      	bge.n	800bbc6 <f_printf+0x2e6>
			v = 0 - v;
 800bbb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbb4:	425b      	negs	r3, r3
 800bbb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800bbba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bbbe:	f043 0308 	orr.w	r3, r3, #8
 800bbc2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800bbcc:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800bbd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbd4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbd8:	fb01 f202 	mul.w	r2, r1, r2
 800bbdc:	1a9b      	subs	r3, r3, r2
 800bbde:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800bbe2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800bbe6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bbea:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800bbf2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bbf6:	2b09      	cmp	r3, #9
 800bbf8:	d90b      	bls.n	800bc12 <f_printf+0x332>
 800bbfa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800bbfe:	2b78      	cmp	r3, #120	; 0x78
 800bc00:	d101      	bne.n	800bc06 <f_printf+0x326>
 800bc02:	2227      	movs	r2, #39	; 0x27
 800bc04:	e000      	b.n	800bc08 <f_printf+0x328>
 800bc06:	2207      	movs	r2, #7
 800bc08:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800bc0c:	4413      	add	r3, r2
 800bc0e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800bc12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc16:	1c5a      	adds	r2, r3, #1
 800bc18:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800bc1c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800bc20:	3230      	adds	r2, #48	; 0x30
 800bc22:	b2d2      	uxtb	r2, r2
 800bc24:	3398      	adds	r3, #152	; 0x98
 800bc26:	443b      	add	r3, r7
 800bc28:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800bc2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d003      	beq.n	800bc3c <f_printf+0x35c>
 800bc34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc38:	2b1f      	cmp	r3, #31
 800bc3a:	d9c7      	bls.n	800bbcc <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800bc3c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bc40:	f003 0308 	and.w	r3, r3, #8
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d009      	beq.n	800bc5c <f_printf+0x37c>
 800bc48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc4c:	1c5a      	adds	r2, r3, #1
 800bc4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800bc52:	3398      	adds	r3, #152	; 0x98
 800bc54:	443b      	add	r3, r7
 800bc56:	222d      	movs	r2, #45	; 0x2d
 800bc58:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800bc5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bc64:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d001      	beq.n	800bc74 <f_printf+0x394>
 800bc70:	2330      	movs	r3, #48	; 0x30
 800bc72:	e000      	b.n	800bc76 <f_printf+0x396>
 800bc74:	2320      	movs	r3, #32
 800bc76:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800bc7a:	e007      	b.n	800bc8c <f_printf+0x3ac>
 800bc7c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800bc80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc84:	4611      	mov	r1, r2
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7ff fdb3 	bl	800b7f2 <putc_bfd>
 800bc8c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bc90:	f003 0302 	and.w	r3, r3, #2
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d108      	bne.n	800bcaa <f_printf+0x3ca>
 800bc98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc9c:	1c5a      	adds	r2, r3, #1
 800bc9e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bca2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d8e8      	bhi.n	800bc7c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800bcaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bcb4:	f107 020c 	add.w	r2, r7, #12
 800bcb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bcbc:	4413      	add	r3, r2
 800bcbe:	781a      	ldrb	r2, [r3, #0]
 800bcc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7ff fd93 	bl	800b7f2 <putc_bfd>
		} while (i);
 800bccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1ea      	bne.n	800bcaa <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800bcd4:	e007      	b.n	800bce6 <f_printf+0x406>
 800bcd6:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800bcda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bcde:	4611      	mov	r1, r2
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7ff fd86 	bl	800b7f2 <putc_bfd>
 800bce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcea:	1c5a      	adds	r2, r3, #1
 800bcec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bcf0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d8ee      	bhi.n	800bcd6 <f_printf+0x3f6>
		c = *fmt++;
 800bcf8:	e600      	b.n	800b8fc <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800bcfa:	bf00      	nop
 800bcfc:	e000      	b.n	800bd00 <f_printf+0x420>
		if (!c) break;
 800bcfe:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800bd00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7ff fdb1 	bl	800b86c <putc_flush>
 800bd0a:	4603      	mov	r3, r0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	379c      	adds	r7, #156	; 0x9c
 800bd10:	46bd      	mov	sp, r7
 800bd12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd16:	b003      	add	sp, #12
 800bd18:	4770      	bx	lr
 800bd1a:	bf00      	nop

0800bd1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b087      	sub	sp, #28
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	4613      	mov	r3, r2
 800bd28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bd32:	4b1f      	ldr	r3, [pc, #124]	; (800bdb0 <FATFS_LinkDriverEx+0x94>)
 800bd34:	7a5b      	ldrb	r3, [r3, #9]
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d131      	bne.n	800bda0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bd3c:	4b1c      	ldr	r3, [pc, #112]	; (800bdb0 <FATFS_LinkDriverEx+0x94>)
 800bd3e:	7a5b      	ldrb	r3, [r3, #9]
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	461a      	mov	r2, r3
 800bd44:	4b1a      	ldr	r3, [pc, #104]	; (800bdb0 <FATFS_LinkDriverEx+0x94>)
 800bd46:	2100      	movs	r1, #0
 800bd48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bd4a:	4b19      	ldr	r3, [pc, #100]	; (800bdb0 <FATFS_LinkDriverEx+0x94>)
 800bd4c:	7a5b      	ldrb	r3, [r3, #9]
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	4a17      	ldr	r2, [pc, #92]	; (800bdb0 <FATFS_LinkDriverEx+0x94>)
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4413      	add	r3, r2
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bd5a:	4b15      	ldr	r3, [pc, #84]	; (800bdb0 <FATFS_LinkDriverEx+0x94>)
 800bd5c:	7a5b      	ldrb	r3, [r3, #9]
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	461a      	mov	r2, r3
 800bd62:	4b13      	ldr	r3, [pc, #76]	; (800bdb0 <FATFS_LinkDriverEx+0x94>)
 800bd64:	4413      	add	r3, r2
 800bd66:	79fa      	ldrb	r2, [r7, #7]
 800bd68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bd6a:	4b11      	ldr	r3, [pc, #68]	; (800bdb0 <FATFS_LinkDriverEx+0x94>)
 800bd6c:	7a5b      	ldrb	r3, [r3, #9]
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	1c5a      	adds	r2, r3, #1
 800bd72:	b2d1      	uxtb	r1, r2
 800bd74:	4a0e      	ldr	r2, [pc, #56]	; (800bdb0 <FATFS_LinkDriverEx+0x94>)
 800bd76:	7251      	strb	r1, [r2, #9]
 800bd78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bd7a:	7dbb      	ldrb	r3, [r7, #22]
 800bd7c:	3330      	adds	r3, #48	; 0x30
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	3301      	adds	r3, #1
 800bd88:	223a      	movs	r2, #58	; 0x3a
 800bd8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	3302      	adds	r3, #2
 800bd90:	222f      	movs	r2, #47	; 0x2f
 800bd92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	3303      	adds	r3, #3
 800bd98:	2200      	movs	r2, #0
 800bd9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	371c      	adds	r7, #28
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	200014d8 	.word	0x200014d8

0800bdb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7ff ffaa 	bl	800bd1c <FATFS_LinkDriverEx>
 800bdc8:	4603      	mov	r3, r0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b086      	sub	sp, #24
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	4603      	mov	r3, r0
 800bdda:	6039      	str	r1, [r7, #0]
 800bddc:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800bdde:	2300      	movs	r3, #0
 800bde0:	60fb      	str	r3, [r7, #12]
 800bde2:	2300      	movs	r3, #0
 800bde4:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800bde6:	f107 030c 	add.w	r3, r7, #12
 800bdea:	2101      	movs	r1, #1
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 f969 	bl	800c0c4 <osSemaphoreCreate>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	bf14      	ite	ne
 800be00:	2301      	movne	r3, #1
 800be02:	2300      	moveq	r3, #0
 800be04:	b2db      	uxtb	r3, r3
 800be06:	617b      	str	r3, [r7, #20]

    return ret;
 800be08:	697b      	ldr	r3, [r7, #20]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3718      	adds	r7, #24
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b082      	sub	sp, #8
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 fa08 	bl	800c230 <osSemaphoreDelete>
#endif
    return 1;
 800be20:	2301      	movs	r3, #1
}
 800be22:	4618      	mov	r0, r3
 800be24:	3708      	adds	r7, #8
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800be32:	2300      	movs	r3, #0
 800be34:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800be36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f974 	bl	800c128 <osSemaphoreWait>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d101      	bne.n	800be4a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800be46:	2301      	movs	r3, #1
 800be48:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800be4a:	68fb      	ldr	r3, [r7, #12]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f9b1 	bl	800c1c4 <osSemaphoreRelease>
#endif
}
 800be62:	bf00      	nop
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800be6a:	b480      	push	{r7}
 800be6c:	b085      	sub	sp, #20
 800be6e:	af00      	add	r7, sp, #0
 800be70:	4603      	mov	r3, r0
 800be72:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800be74:	2300      	movs	r3, #0
 800be76:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800be78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be7c:	2b84      	cmp	r3, #132	; 0x84
 800be7e:	d005      	beq.n	800be8c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800be80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	4413      	add	r3, r2
 800be88:	3303      	adds	r3, #3
 800be8a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800be8c:	68fb      	ldr	r3, [r7, #12]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr

0800be9a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800be9a:	b480      	push	{r7}
 800be9c:	b083      	sub	sp, #12
 800be9e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bea0:	f3ef 8305 	mrs	r3, IPSR
 800bea4:	607b      	str	r3, [r7, #4]
  return(result);
 800bea6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	bf14      	ite	ne
 800beac:	2301      	movne	r3, #1
 800beae:	2300      	moveq	r3, #0
 800beb0:	b2db      	uxtb	r3, r3
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	370c      	adds	r7, #12
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bec2:	f001 fa59 	bl	800d378 <vTaskStartScheduler>
  
  return osOK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	bd80      	pop	{r7, pc}

0800becc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800becc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bece:	b089      	sub	sp, #36	; 0x24
 800bed0:	af04      	add	r7, sp, #16
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d020      	beq.n	800bf20 <osThreadCreate+0x54>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d01c      	beq.n	800bf20 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	685c      	ldr	r4, [r3, #4]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681d      	ldr	r5, [r3, #0]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	691e      	ldr	r6, [r3, #16]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bef8:	4618      	mov	r0, r3
 800befa:	f7ff ffb6 	bl	800be6a <makeFreeRtosPriority>
 800befe:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	695b      	ldr	r3, [r3, #20]
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf08:	9202      	str	r2, [sp, #8]
 800bf0a:	9301      	str	r3, [sp, #4]
 800bf0c:	9100      	str	r1, [sp, #0]
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	4632      	mov	r2, r6
 800bf12:	4629      	mov	r1, r5
 800bf14:	4620      	mov	r0, r4
 800bf16:	f001 f867 	bl	800cfe8 <xTaskCreateStatic>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	60fb      	str	r3, [r7, #12]
 800bf1e:	e01c      	b.n	800bf5a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	685c      	ldr	r4, [r3, #4]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf2c:	b29e      	uxth	r6, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7ff ff98 	bl	800be6a <makeFreeRtosPriority>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	f107 030c 	add.w	r3, r7, #12
 800bf40:	9301      	str	r3, [sp, #4]
 800bf42:	9200      	str	r2, [sp, #0]
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	4632      	mov	r2, r6
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f001 f8a9 	bl	800d0a2 <xTaskCreate>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d001      	beq.n	800bf5a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bf56:	2300      	movs	r3, #0
 800bf58:	e000      	b.n	800bf5c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3714      	adds	r7, #20
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf64 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <osDelay+0x16>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	e000      	b.n	800bf7c <osDelay+0x18>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f001 f9c7 	bl	800d310 <vTaskDelay>
  
  return osOK;
 800bf82:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d007      	beq.n	800bfac <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	2001      	movs	r0, #1
 800bfa4:	f000 fb77 	bl	800c696 <xQueueCreateMutexStatic>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	e003      	b.n	800bfb4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800bfac:	2001      	movs	r0, #1
 800bfae:	f000 fb5a 	bl	800c666 <xQueueCreateMutex>
 800bfb2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d101      	bne.n	800bfd4 <osMutexWait+0x18>
    return osErrorParameter;
 800bfd0:	2380      	movs	r3, #128	; 0x80
 800bfd2:	e03a      	b.n	800c04a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfde:	d103      	bne.n	800bfe8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800bfe0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe4:	60fb      	str	r3, [r7, #12]
 800bfe6:	e009      	b.n	800bffc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d006      	beq.n	800bffc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d101      	bne.n	800bffc <osMutexWait+0x40>
      ticks = 1;
 800bff8:	2301      	movs	r3, #1
 800bffa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bffc:	f7ff ff4d 	bl	800be9a <inHandlerMode>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d017      	beq.n	800c036 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c006:	f107 0308 	add.w	r3, r7, #8
 800c00a:	461a      	mov	r2, r3
 800c00c:	2100      	movs	r1, #0
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 fdf4 	bl	800cbfc <xQueueReceiveFromISR>
 800c014:	4603      	mov	r3, r0
 800c016:	2b01      	cmp	r3, #1
 800c018:	d001      	beq.n	800c01e <osMutexWait+0x62>
      return osErrorOS;
 800c01a:	23ff      	movs	r3, #255	; 0xff
 800c01c:	e015      	b.n	800c04a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d011      	beq.n	800c048 <osMutexWait+0x8c>
 800c024:	4b0b      	ldr	r3, [pc, #44]	; (800c054 <osMutexWait+0x98>)
 800c026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c02a:	601a      	str	r2, [r3, #0]
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	f3bf 8f6f 	isb	sy
 800c034:	e008      	b.n	800c048 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800c036:	68f9      	ldr	r1, [r7, #12]
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 fcd3 	bl	800c9e4 <xQueueSemaphoreTake>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b01      	cmp	r3, #1
 800c042:	d001      	beq.n	800c048 <osMutexWait+0x8c>
    return osErrorOS;
 800c044:	23ff      	movs	r3, #255	; 0xff
 800c046:	e000      	b.n	800c04a <osMutexWait+0x8e>
  }
  
  return osOK;
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	e000ed04 	.word	0xe000ed04

0800c058 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c060:	2300      	movs	r3, #0
 800c062:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c064:	2300      	movs	r3, #0
 800c066:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800c068:	f7ff ff17 	bl	800be9a <inHandlerMode>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d016      	beq.n	800c0a0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c072:	f107 0308 	add.w	r3, r7, #8
 800c076:	4619      	mov	r1, r3
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 fc25 	bl	800c8c8 <xQueueGiveFromISR>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b01      	cmp	r3, #1
 800c082:	d001      	beq.n	800c088 <osMutexRelease+0x30>
      return osErrorOS;
 800c084:	23ff      	movs	r3, #255	; 0xff
 800c086:	e017      	b.n	800c0b8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d013      	beq.n	800c0b6 <osMutexRelease+0x5e>
 800c08e:	4b0c      	ldr	r3, [pc, #48]	; (800c0c0 <osMutexRelease+0x68>)
 800c090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c094:	601a      	str	r2, [r3, #0]
 800c096:	f3bf 8f4f 	dsb	sy
 800c09a:	f3bf 8f6f 	isb	sy
 800c09e:	e00a      	b.n	800c0b6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fb10 	bl	800c6cc <xQueueGenericSend>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d001      	beq.n	800c0b6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800c0b2:	23ff      	movs	r3, #255	; 0xff
 800c0b4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	e000ed04 	.word	0xe000ed04

0800c0c4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af02      	add	r7, sp, #8
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00f      	beq.n	800c0f6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d10a      	bne.n	800c0f2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	2203      	movs	r2, #3
 800c0e2:	9200      	str	r2, [sp, #0]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	2001      	movs	r0, #1
 800c0ea:	f000 f9d1 	bl	800c490 <xQueueGenericCreateStatic>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	e016      	b.n	800c120 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	e014      	b.n	800c120 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d110      	bne.n	800c11e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c0fc:	2203      	movs	r2, #3
 800c0fe:	2100      	movs	r1, #0
 800c100:	2001      	movs	r0, #1
 800c102:	f000 fa3d 	bl	800c580 <xQueueGenericCreate>
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d005      	beq.n	800c11a <osSemaphoreCreate+0x56>
 800c10e:	2300      	movs	r3, #0
 800c110:	2200      	movs	r2, #0
 800c112:	2100      	movs	r1, #0
 800c114:	68f8      	ldr	r0, [r7, #12]
 800c116:	f000 fad9 	bl	800c6cc <xQueueGenericSend>
      return sema;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	e000      	b.n	800c120 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c11e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c120:	4618      	mov	r0, r3
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c132:	2300      	movs	r3, #0
 800c134:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d101      	bne.n	800c140 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c13c:	2380      	movs	r3, #128	; 0x80
 800c13e:	e03a      	b.n	800c1b6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c140:	2300      	movs	r3, #0
 800c142:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14a:	d103      	bne.n	800c154 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c14c:	f04f 33ff 	mov.w	r3, #4294967295
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	e009      	b.n	800c168 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d006      	beq.n	800c168 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d101      	bne.n	800c168 <osSemaphoreWait+0x40>
      ticks = 1;
 800c164:	2301      	movs	r3, #1
 800c166:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c168:	f7ff fe97 	bl	800be9a <inHandlerMode>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d017      	beq.n	800c1a2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c172:	f107 0308 	add.w	r3, r7, #8
 800c176:	461a      	mov	r2, r3
 800c178:	2100      	movs	r1, #0
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fd3e 	bl	800cbfc <xQueueReceiveFromISR>
 800c180:	4603      	mov	r3, r0
 800c182:	2b01      	cmp	r3, #1
 800c184:	d001      	beq.n	800c18a <osSemaphoreWait+0x62>
      return osErrorOS;
 800c186:	23ff      	movs	r3, #255	; 0xff
 800c188:	e015      	b.n	800c1b6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d011      	beq.n	800c1b4 <osSemaphoreWait+0x8c>
 800c190:	4b0b      	ldr	r3, [pc, #44]	; (800c1c0 <osSemaphoreWait+0x98>)
 800c192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c196:	601a      	str	r2, [r3, #0]
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	e008      	b.n	800c1b4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c1a2:	68f9      	ldr	r1, [r7, #12]
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 fc1d 	bl	800c9e4 <xQueueSemaphoreTake>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d001      	beq.n	800c1b4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c1b0:	23ff      	movs	r3, #255	; 0xff
 800c1b2:	e000      	b.n	800c1b6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	e000ed04 	.word	0xe000ed04

0800c1c4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c1d4:	f7ff fe61 	bl	800be9a <inHandlerMode>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d016      	beq.n	800c20c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c1de:	f107 0308 	add.w	r3, r7, #8
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 fb6f 	bl	800c8c8 <xQueueGiveFromISR>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d001      	beq.n	800c1f4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c1f0:	23ff      	movs	r3, #255	; 0xff
 800c1f2:	e017      	b.n	800c224 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d013      	beq.n	800c222 <osSemaphoreRelease+0x5e>
 800c1fa:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <osSemaphoreRelease+0x68>)
 800c1fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c200:	601a      	str	r2, [r3, #0]
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	e00a      	b.n	800c222 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c20c:	2300      	movs	r3, #0
 800c20e:	2200      	movs	r2, #0
 800c210:	2100      	movs	r1, #0
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 fa5a 	bl	800c6cc <xQueueGenericSend>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d001      	beq.n	800c222 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c21e:	23ff      	movs	r3, #255	; 0xff
 800c220:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c222:	68fb      	ldr	r3, [r7, #12]
}
 800c224:	4618      	mov	r0, r3
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	e000ed04 	.word	0xe000ed04

0800c230 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c238:	f7ff fe2f 	bl	800be9a <inHandlerMode>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d001      	beq.n	800c246 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c242:	2382      	movs	r3, #130	; 0x82
 800c244:	e003      	b.n	800c24e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 fd58 	bl	800ccfc <vQueueDelete>

  return osOK; 
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c256:	b480      	push	{r7}
 800c258:	b083      	sub	sp, #12
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f103 0208 	add.w	r2, r3, #8
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f04f 32ff 	mov.w	r2, #4294967295
 800c26e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f103 0208 	add.w	r2, r3, #8
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f103 0208 	add.w	r2, r3, #8
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c28a:	bf00      	nop
 800c28c:	370c      	adds	r7, #12
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr

0800c296 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c296:	b480      	push	{r7}
 800c298:	b083      	sub	sp, #12
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c2a4:	bf00      	nop
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	68fa      	ldr	r2, [r7, #12]
 800c2c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	689a      	ldr	r2, [r3, #8]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	683a      	ldr	r2, [r7, #0]
 800c2d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	1c5a      	adds	r2, r3, #1
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	601a      	str	r2, [r3, #0]
}
 800c2ec:	bf00      	nop
 800c2ee:	3714      	adds	r7, #20
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c30e:	d103      	bne.n	800c318 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	691b      	ldr	r3, [r3, #16]
 800c314:	60fb      	str	r3, [r7, #12]
 800c316:	e00c      	b.n	800c332 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	3308      	adds	r3, #8
 800c31c:	60fb      	str	r3, [r7, #12]
 800c31e:	e002      	b.n	800c326 <vListInsert+0x2e>
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	60fb      	str	r3, [r7, #12]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68ba      	ldr	r2, [r7, #8]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d2f6      	bcs.n	800c320 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	685a      	ldr	r2, [r3, #4]
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	683a      	ldr	r2, [r7, #0]
 800c340:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	683a      	ldr	r2, [r7, #0]
 800c34c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	1c5a      	adds	r2, r3, #1
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	601a      	str	r2, [r3, #0]
}
 800c35e:	bf00      	nop
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c36a:	b480      	push	{r7}
 800c36c:	b085      	sub	sp, #20
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	6892      	ldr	r2, [r2, #8]
 800c380:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	6852      	ldr	r2, [r2, #4]
 800c38a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	429a      	cmp	r2, r3
 800c394:	d103      	bne.n	800c39e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	689a      	ldr	r2, [r3, #8]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	1e5a      	subs	r2, r3, #1
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3714      	adds	r7, #20
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
	...

0800c3c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d10a      	bne.n	800c3ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d8:	f383 8811 	msr	BASEPRI, r3
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	f3bf 8f4f 	dsb	sy
 800c3e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c3e6:	bf00      	nop
 800c3e8:	e7fe      	b.n	800c3e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c3ea:	f001 ff13 	bl	800e214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f6:	68f9      	ldr	r1, [r7, #12]
 800c3f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c3fa:	fb01 f303 	mul.w	r3, r1, r3
 800c3fe:	441a      	add	r2, r3
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2200      	movs	r2, #0
 800c408:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c41a:	3b01      	subs	r3, #1
 800c41c:	68f9      	ldr	r1, [r7, #12]
 800c41e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c420:	fb01 f303 	mul.w	r3, r1, r3
 800c424:	441a      	add	r2, r3
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	22ff      	movs	r2, #255	; 0xff
 800c42e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	22ff      	movs	r2, #255	; 0xff
 800c436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d114      	bne.n	800c46a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	691b      	ldr	r3, [r3, #16]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d01a      	beq.n	800c47e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	3310      	adds	r3, #16
 800c44c:	4618      	mov	r0, r3
 800c44e:	f001 f9d5 	bl	800d7fc <xTaskRemoveFromEventList>
 800c452:	4603      	mov	r3, r0
 800c454:	2b00      	cmp	r3, #0
 800c456:	d012      	beq.n	800c47e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c458:	4b0c      	ldr	r3, [pc, #48]	; (800c48c <xQueueGenericReset+0xcc>)
 800c45a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c45e:	601a      	str	r2, [r3, #0]
 800c460:	f3bf 8f4f 	dsb	sy
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	e009      	b.n	800c47e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	3310      	adds	r3, #16
 800c46e:	4618      	mov	r0, r3
 800c470:	f7ff fef1 	bl	800c256 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	3324      	adds	r3, #36	; 0x24
 800c478:	4618      	mov	r0, r3
 800c47a:	f7ff feec 	bl	800c256 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c47e:	f001 fef9 	bl	800e274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c482:	2301      	movs	r3, #1
}
 800c484:	4618      	mov	r0, r3
 800c486:	3710      	adds	r7, #16
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	e000ed04 	.word	0xe000ed04

0800c490 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c490:	b580      	push	{r7, lr}
 800c492:	b08e      	sub	sp, #56	; 0x38
 800c494:	af02      	add	r7, sp, #8
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10a      	bne.n	800c4ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c4b6:	bf00      	nop
 800c4b8:	e7fe      	b.n	800c4b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10a      	bne.n	800c4d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d002      	beq.n	800c4e2 <xQueueGenericCreateStatic+0x52>
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <xQueueGenericCreateStatic+0x56>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e000      	b.n	800c4e8 <xQueueGenericCreateStatic+0x58>
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d10a      	bne.n	800c502 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	623b      	str	r3, [r7, #32]
}
 800c4fe:	bf00      	nop
 800c500:	e7fe      	b.n	800c500 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d102      	bne.n	800c50e <xQueueGenericCreateStatic+0x7e>
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d101      	bne.n	800c512 <xQueueGenericCreateStatic+0x82>
 800c50e:	2301      	movs	r3, #1
 800c510:	e000      	b.n	800c514 <xQueueGenericCreateStatic+0x84>
 800c512:	2300      	movs	r3, #0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10a      	bne.n	800c52e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	61fb      	str	r3, [r7, #28]
}
 800c52a:	bf00      	nop
 800c52c:	e7fe      	b.n	800c52c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c52e:	2348      	movs	r3, #72	; 0x48
 800c530:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	2b48      	cmp	r3, #72	; 0x48
 800c536:	d00a      	beq.n	800c54e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53c:	f383 8811 	msr	BASEPRI, r3
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	f3bf 8f4f 	dsb	sy
 800c548:	61bb      	str	r3, [r7, #24]
}
 800c54a:	bf00      	nop
 800c54c:	e7fe      	b.n	800c54c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c54e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00d      	beq.n	800c576 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55c:	2201      	movs	r2, #1
 800c55e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c562:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	4613      	mov	r3, r2
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	68b9      	ldr	r1, [r7, #8]
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f000 f83f 	bl	800c5f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c578:	4618      	mov	r0, r3
 800c57a:	3730      	adds	r7, #48	; 0x30
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08a      	sub	sp, #40	; 0x28
 800c584:	af02      	add	r7, sp, #8
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	4613      	mov	r3, r2
 800c58c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10a      	bne.n	800c5aa <xQueueGenericCreate+0x2a>
	__asm volatile
 800c594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c598:	f383 8811 	msr	BASEPRI, r3
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	613b      	str	r3, [r7, #16]
}
 800c5a6:	bf00      	nop
 800c5a8:	e7fe      	b.n	800c5a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	fb02 f303 	mul.w	r3, r2, r3
 800c5b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	3348      	adds	r3, #72	; 0x48
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f001 ff4d 	bl	800e458 <pvPortMalloc>
 800c5be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d011      	beq.n	800c5ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	3348      	adds	r3, #72	; 0x48
 800c5ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c5d8:	79fa      	ldrb	r2, [r7, #7]
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	4613      	mov	r3, r2
 800c5e0:	697a      	ldr	r2, [r7, #20]
 800c5e2:	68b9      	ldr	r1, [r7, #8]
 800c5e4:	68f8      	ldr	r0, [r7, #12]
 800c5e6:	f000 f805 	bl	800c5f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c5ea:	69bb      	ldr	r3, [r7, #24]
	}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3720      	adds	r7, #32
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
 800c600:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d103      	bne.n	800c610 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c608:	69bb      	ldr	r3, [r7, #24]
 800c60a:	69ba      	ldr	r2, [r7, #24]
 800c60c:	601a      	str	r2, [r3, #0]
 800c60e:	e002      	b.n	800c616 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	68ba      	ldr	r2, [r7, #8]
 800c620:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c622:	2101      	movs	r1, #1
 800c624:	69b8      	ldr	r0, [r7, #24]
 800c626:	f7ff fecb 	bl	800c3c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c62a:	bf00      	nop
 800c62c:	3710      	adds	r7, #16
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}

0800c632 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c632:	b580      	push	{r7, lr}
 800c634:	b082      	sub	sp, #8
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00e      	beq.n	800c65e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2200      	movs	r2, #0
 800c64a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c652:	2300      	movs	r3, #0
 800c654:	2200      	movs	r2, #0
 800c656:	2100      	movs	r1, #0
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 f837 	bl	800c6cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c65e:	bf00      	nop
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c666:	b580      	push	{r7, lr}
 800c668:	b086      	sub	sp, #24
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	4603      	mov	r3, r0
 800c66e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c670:	2301      	movs	r3, #1
 800c672:	617b      	str	r3, [r7, #20]
 800c674:	2300      	movs	r3, #0
 800c676:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c678:	79fb      	ldrb	r3, [r7, #7]
 800c67a:	461a      	mov	r2, r3
 800c67c:	6939      	ldr	r1, [r7, #16]
 800c67e:	6978      	ldr	r0, [r7, #20]
 800c680:	f7ff ff7e 	bl	800c580 <xQueueGenericCreate>
 800c684:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f7ff ffd3 	bl	800c632 <prvInitialiseMutex>

		return xNewQueue;
 800c68c:	68fb      	ldr	r3, [r7, #12]
	}
 800c68e:	4618      	mov	r0, r3
 800c690:	3718      	adds	r7, #24
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c696:	b580      	push	{r7, lr}
 800c698:	b088      	sub	sp, #32
 800c69a:	af02      	add	r7, sp, #8
 800c69c:	4603      	mov	r3, r0
 800c69e:	6039      	str	r1, [r7, #0]
 800c6a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	617b      	str	r3, [r7, #20]
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c6aa:	79fb      	ldrb	r3, [r7, #7]
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	6939      	ldr	r1, [r7, #16]
 800c6b4:	6978      	ldr	r0, [r7, #20]
 800c6b6:	f7ff feeb 	bl	800c490 <xQueueGenericCreateStatic>
 800c6ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	f7ff ffb8 	bl	800c632 <prvInitialiseMutex>

		return xNewQueue;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
	}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3718      	adds	r7, #24
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08e      	sub	sp, #56	; 0x38
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
 800c6d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10a      	bne.n	800c6fe <xQueueGenericSend+0x32>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c6fa:	bf00      	nop
 800c6fc:	e7fe      	b.n	800c6fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d103      	bne.n	800c70c <xQueueGenericSend+0x40>
 800c704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d101      	bne.n	800c710 <xQueueGenericSend+0x44>
 800c70c:	2301      	movs	r3, #1
 800c70e:	e000      	b.n	800c712 <xQueueGenericSend+0x46>
 800c710:	2300      	movs	r3, #0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d10a      	bne.n	800c72c <xQueueGenericSend+0x60>
	__asm volatile
 800c716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71a:	f383 8811 	msr	BASEPRI, r3
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c728:	bf00      	nop
 800c72a:	e7fe      	b.n	800c72a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	2b02      	cmp	r3, #2
 800c730:	d103      	bne.n	800c73a <xQueueGenericSend+0x6e>
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c736:	2b01      	cmp	r3, #1
 800c738:	d101      	bne.n	800c73e <xQueueGenericSend+0x72>
 800c73a:	2301      	movs	r3, #1
 800c73c:	e000      	b.n	800c740 <xQueueGenericSend+0x74>
 800c73e:	2300      	movs	r3, #0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d10a      	bne.n	800c75a <xQueueGenericSend+0x8e>
	__asm volatile
 800c744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	623b      	str	r3, [r7, #32]
}
 800c756:	bf00      	nop
 800c758:	e7fe      	b.n	800c758 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c75a:	f001 fa0b 	bl	800db74 <xTaskGetSchedulerState>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d102      	bne.n	800c76a <xQueueGenericSend+0x9e>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d101      	bne.n	800c76e <xQueueGenericSend+0xa2>
 800c76a:	2301      	movs	r3, #1
 800c76c:	e000      	b.n	800c770 <xQueueGenericSend+0xa4>
 800c76e:	2300      	movs	r3, #0
 800c770:	2b00      	cmp	r3, #0
 800c772:	d10a      	bne.n	800c78a <xQueueGenericSend+0xbe>
	__asm volatile
 800c774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c778:	f383 8811 	msr	BASEPRI, r3
 800c77c:	f3bf 8f6f 	isb	sy
 800c780:	f3bf 8f4f 	dsb	sy
 800c784:	61fb      	str	r3, [r7, #28]
}
 800c786:	bf00      	nop
 800c788:	e7fe      	b.n	800c788 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c78a:	f001 fd43 	bl	800e214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c796:	429a      	cmp	r2, r3
 800c798:	d302      	bcc.n	800c7a0 <xQueueGenericSend+0xd4>
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d129      	bne.n	800c7f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	68b9      	ldr	r1, [r7, #8]
 800c7a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7a6:	f000 fae4 	bl	800cd72 <prvCopyDataToQueue>
 800c7aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d010      	beq.n	800c7d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	3324      	adds	r3, #36	; 0x24
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f001 f81f 	bl	800d7fc <xTaskRemoveFromEventList>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d013      	beq.n	800c7ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c7c4:	4b3f      	ldr	r3, [pc, #252]	; (800c8c4 <xQueueGenericSend+0x1f8>)
 800c7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ca:	601a      	str	r2, [r3, #0]
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	e00a      	b.n	800c7ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d007      	beq.n	800c7ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c7dc:	4b39      	ldr	r3, [pc, #228]	; (800c8c4 <xQueueGenericSend+0x1f8>)
 800c7de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7e2:	601a      	str	r2, [r3, #0]
 800c7e4:	f3bf 8f4f 	dsb	sy
 800c7e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c7ec:	f001 fd42 	bl	800e274 <vPortExitCritical>
				return pdPASS;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e063      	b.n	800c8bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d103      	bne.n	800c802 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c7fa:	f001 fd3b 	bl	800e274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c7fe:	2300      	movs	r3, #0
 800c800:	e05c      	b.n	800c8bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c804:	2b00      	cmp	r3, #0
 800c806:	d106      	bne.n	800c816 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c808:	f107 0314 	add.w	r3, r7, #20
 800c80c:	4618      	mov	r0, r3
 800c80e:	f001 f857 	bl	800d8c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c812:	2301      	movs	r3, #1
 800c814:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c816:	f001 fd2d 	bl	800e274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c81a:	f000 fe0d 	bl	800d438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c81e:	f001 fcf9 	bl	800e214 <vPortEnterCritical>
 800c822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c828:	b25b      	sxtb	r3, r3
 800c82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c82e:	d103      	bne.n	800c838 <xQueueGenericSend+0x16c>
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	2200      	movs	r2, #0
 800c834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c83e:	b25b      	sxtb	r3, r3
 800c840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c844:	d103      	bne.n	800c84e <xQueueGenericSend+0x182>
 800c846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c848:	2200      	movs	r2, #0
 800c84a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c84e:	f001 fd11 	bl	800e274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c852:	1d3a      	adds	r2, r7, #4
 800c854:	f107 0314 	add.w	r3, r7, #20
 800c858:	4611      	mov	r1, r2
 800c85a:	4618      	mov	r0, r3
 800c85c:	f001 f846 	bl	800d8ec <xTaskCheckForTimeOut>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d124      	bne.n	800c8b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c868:	f000 fb7b 	bl	800cf62 <prvIsQueueFull>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d018      	beq.n	800c8a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c874:	3310      	adds	r3, #16
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f000 ff9a 	bl	800d7b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c882:	f000 fb06 	bl	800ce92 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c886:	f000 fde5 	bl	800d454 <xTaskResumeAll>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f47f af7c 	bne.w	800c78a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c892:	4b0c      	ldr	r3, [pc, #48]	; (800c8c4 <xQueueGenericSend+0x1f8>)
 800c894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c898:	601a      	str	r2, [r3, #0]
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	e772      	b.n	800c78a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c8a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8a6:	f000 faf4 	bl	800ce92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8aa:	f000 fdd3 	bl	800d454 <xTaskResumeAll>
 800c8ae:	e76c      	b.n	800c78a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c8b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8b2:	f000 faee 	bl	800ce92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8b6:	f000 fdcd 	bl	800d454 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c8ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3738      	adds	r7, #56	; 0x38
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	e000ed04 	.word	0xe000ed04

0800c8c8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b08e      	sub	sp, #56	; 0x38
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d10a      	bne.n	800c8f2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	623b      	str	r3, [r7, #32]
}
 800c8ee:	bf00      	nop
 800c8f0:	e7fe      	b.n	800c8f0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00a      	beq.n	800c910 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	61fb      	str	r3, [r7, #28]
}
 800c90c:	bf00      	nop
 800c90e:	e7fe      	b.n	800c90e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d103      	bne.n	800c920 <xQueueGiveFromISR+0x58>
 800c918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <xQueueGiveFromISR+0x5c>
 800c920:	2301      	movs	r3, #1
 800c922:	e000      	b.n	800c926 <xQueueGiveFromISR+0x5e>
 800c924:	2300      	movs	r3, #0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10a      	bne.n	800c940 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	61bb      	str	r3, [r7, #24]
}
 800c93c:	bf00      	nop
 800c93e:	e7fe      	b.n	800c93e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c940:	f001 fd4a 	bl	800e3d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c944:	f3ef 8211 	mrs	r2, BASEPRI
 800c948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94c:	f383 8811 	msr	BASEPRI, r3
 800c950:	f3bf 8f6f 	isb	sy
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	617a      	str	r2, [r7, #20]
 800c95a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c95c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c95e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c964:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c96a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d22b      	bcs.n	800c9c8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97c:	1c5a      	adds	r2, r3, #1
 800c97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c980:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c982:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98a:	d112      	bne.n	800c9b2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c990:	2b00      	cmp	r3, #0
 800c992:	d016      	beq.n	800c9c2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c996:	3324      	adds	r3, #36	; 0x24
 800c998:	4618      	mov	r0, r3
 800c99a:	f000 ff2f 	bl	800d7fc <xTaskRemoveFromEventList>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d00e      	beq.n	800c9c2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00b      	beq.n	800c9c2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	601a      	str	r2, [r3, #0]
 800c9b0:	e007      	b.n	800c9c2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c9b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	b25a      	sxtb	r2, r3
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c9c6:	e001      	b.n	800c9cc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	637b      	str	r3, [r7, #52]	; 0x34
 800c9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ce:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c9d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3738      	adds	r7, #56	; 0x38
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
	...

0800c9e4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b08e      	sub	sp, #56	; 0x38
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10a      	bne.n	800ca16 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ca00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	623b      	str	r3, [r7, #32]
}
 800ca12:	bf00      	nop
 800ca14:	e7fe      	b.n	800ca14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ca16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00a      	beq.n	800ca34 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	61fb      	str	r3, [r7, #28]
}
 800ca30:	bf00      	nop
 800ca32:	e7fe      	b.n	800ca32 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca34:	f001 f89e 	bl	800db74 <xTaskGetSchedulerState>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d102      	bne.n	800ca44 <xQueueSemaphoreTake+0x60>
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d101      	bne.n	800ca48 <xQueueSemaphoreTake+0x64>
 800ca44:	2301      	movs	r3, #1
 800ca46:	e000      	b.n	800ca4a <xQueueSemaphoreTake+0x66>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d10a      	bne.n	800ca64 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ca4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	61bb      	str	r3, [r7, #24]
}
 800ca60:	bf00      	nop
 800ca62:	e7fe      	b.n	800ca62 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca64:	f001 fbd6 	bl	800e214 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca6c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ca6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d024      	beq.n	800cabe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ca74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca76:	1e5a      	subs	r2, r3, #1
 800ca78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d104      	bne.n	800ca8e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ca84:	f001 fa1e 	bl	800dec4 <pvTaskIncrementMutexHeldCount>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00f      	beq.n	800cab6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	3310      	adds	r3, #16
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 feae 	bl	800d7fc <xTaskRemoveFromEventList>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d007      	beq.n	800cab6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800caa6:	4b54      	ldr	r3, [pc, #336]	; (800cbf8 <xQueueSemaphoreTake+0x214>)
 800caa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caac:	601a      	str	r2, [r3, #0]
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cab6:	f001 fbdd 	bl	800e274 <vPortExitCritical>
				return pdPASS;
 800caba:	2301      	movs	r3, #1
 800cabc:	e097      	b.n	800cbee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d111      	bne.n	800cae8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00a      	beq.n	800cae0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800caca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cace:	f383 8811 	msr	BASEPRI, r3
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	f3bf 8f4f 	dsb	sy
 800cada:	617b      	str	r3, [r7, #20]
}
 800cadc:	bf00      	nop
 800cade:	e7fe      	b.n	800cade <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cae0:	f001 fbc8 	bl	800e274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cae4:	2300      	movs	r3, #0
 800cae6:	e082      	b.n	800cbee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caea:	2b00      	cmp	r3, #0
 800caec:	d106      	bne.n	800cafc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800caee:	f107 030c 	add.w	r3, r7, #12
 800caf2:	4618      	mov	r0, r3
 800caf4:	f000 fee4 	bl	800d8c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800caf8:	2301      	movs	r3, #1
 800cafa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cafc:	f001 fbba 	bl	800e274 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb00:	f000 fc9a 	bl	800d438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb04:	f001 fb86 	bl	800e214 <vPortEnterCritical>
 800cb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb0e:	b25b      	sxtb	r3, r3
 800cb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb14:	d103      	bne.n	800cb1e <xQueueSemaphoreTake+0x13a>
 800cb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb24:	b25b      	sxtb	r3, r3
 800cb26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb2a:	d103      	bne.n	800cb34 <xQueueSemaphoreTake+0x150>
 800cb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb34:	f001 fb9e 	bl	800e274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb38:	463a      	mov	r2, r7
 800cb3a:	f107 030c 	add.w	r3, r7, #12
 800cb3e:	4611      	mov	r1, r2
 800cb40:	4618      	mov	r0, r3
 800cb42:	f000 fed3 	bl	800d8ec <xTaskCheckForTimeOut>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d132      	bne.n	800cbb2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb4e:	f000 f9f2 	bl	800cf36 <prvIsQueueEmpty>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d026      	beq.n	800cba6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d109      	bne.n	800cb74 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cb60:	f001 fb58 	bl	800e214 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f001 f821 	bl	800dbb0 <xTaskPriorityInherit>
 800cb6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cb70:	f001 fb80 	bl	800e274 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb76:	3324      	adds	r3, #36	; 0x24
 800cb78:	683a      	ldr	r2, [r7, #0]
 800cb7a:	4611      	mov	r1, r2
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f000 fe19 	bl	800d7b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cb82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb84:	f000 f985 	bl	800ce92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb88:	f000 fc64 	bl	800d454 <xTaskResumeAll>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	f47f af68 	bne.w	800ca64 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cb94:	4b18      	ldr	r3, [pc, #96]	; (800cbf8 <xQueueSemaphoreTake+0x214>)
 800cb96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb9a:	601a      	str	r2, [r3, #0]
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	e75e      	b.n	800ca64 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cba8:	f000 f973 	bl	800ce92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbac:	f000 fc52 	bl	800d454 <xTaskResumeAll>
 800cbb0:	e758      	b.n	800ca64 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cbb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbb4:	f000 f96d 	bl	800ce92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbb8:	f000 fc4c 	bl	800d454 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbbe:	f000 f9ba 	bl	800cf36 <prvIsQueueEmpty>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	f43f af4d 	beq.w	800ca64 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00d      	beq.n	800cbec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cbd0:	f001 fb20 	bl	800e214 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cbd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbd6:	f000 f8b4 	bl	800cd42 <prvGetDisinheritPriorityAfterTimeout>
 800cbda:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f001 f8e0 	bl	800dda8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cbe8:	f001 fb44 	bl	800e274 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cbec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3738      	adds	r7, #56	; 0x38
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	e000ed04 	.word	0xe000ed04

0800cbfc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b08e      	sub	sp, #56	; 0x38
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10a      	bne.n	800cc28 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc16:	f383 8811 	msr	BASEPRI, r3
 800cc1a:	f3bf 8f6f 	isb	sy
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	623b      	str	r3, [r7, #32]
}
 800cc24:	bf00      	nop
 800cc26:	e7fe      	b.n	800cc26 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d103      	bne.n	800cc36 <xQueueReceiveFromISR+0x3a>
 800cc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d101      	bne.n	800cc3a <xQueueReceiveFromISR+0x3e>
 800cc36:	2301      	movs	r3, #1
 800cc38:	e000      	b.n	800cc3c <xQueueReceiveFromISR+0x40>
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10a      	bne.n	800cc56 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc44:	f383 8811 	msr	BASEPRI, r3
 800cc48:	f3bf 8f6f 	isb	sy
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	61fb      	str	r3, [r7, #28]
}
 800cc52:	bf00      	nop
 800cc54:	e7fe      	b.n	800cc54 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc56:	f001 fbbf 	bl	800e3d8 <vPortValidateInterruptPriority>
	__asm volatile
 800cc5a:	f3ef 8211 	mrs	r2, BASEPRI
 800cc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	61ba      	str	r2, [r7, #24]
 800cc70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cc72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d02f      	beq.n	800cce2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cc8c:	68b9      	ldr	r1, [r7, #8]
 800cc8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc90:	f000 f8d9 	bl	800ce46 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc96:	1e5a      	subs	r2, r3, #1
 800cc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cc9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cca4:	d112      	bne.n	800cccc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca8:	691b      	ldr	r3, [r3, #16]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d016      	beq.n	800ccdc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	3310      	adds	r3, #16
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f000 fda2 	bl	800d7fc <xTaskRemoveFromEventList>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00e      	beq.n	800ccdc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d00b      	beq.n	800ccdc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	601a      	str	r2, [r3, #0]
 800ccca:	e007      	b.n	800ccdc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	b25a      	sxtb	r2, r3
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	637b      	str	r3, [r7, #52]	; 0x34
 800cce0:	e001      	b.n	800cce6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cce2:	2300      	movs	r3, #0
 800cce4:	637b      	str	r3, [r7, #52]	; 0x34
 800cce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	f383 8811 	msr	BASEPRI, r3
}
 800ccf0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ccf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3738      	adds	r7, #56	; 0x38
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d10a      	bne.n	800cd24 <vQueueDelete+0x28>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	60bb      	str	r3, [r7, #8]
}
 800cd20:	bf00      	nop
 800cd22:	e7fe      	b.n	800cd22 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cd24:	68f8      	ldr	r0, [r7, #12]
 800cd26:	f000 f935 	bl	800cf94 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d102      	bne.n	800cd3a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f001 fc5b 	bl	800e5f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cd3a:	bf00      	nop
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cd42:	b480      	push	{r7}
 800cd44:	b085      	sub	sp, #20
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d006      	beq.n	800cd60 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f1c3 0307 	rsb	r3, r3, #7
 800cd5c:	60fb      	str	r3, [r7, #12]
 800cd5e:	e001      	b.n	800cd64 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cd60:	2300      	movs	r3, #0
 800cd62:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cd64:	68fb      	ldr	r3, [r7, #12]
	}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3714      	adds	r7, #20
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr

0800cd72 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b086      	sub	sp, #24
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	60f8      	str	r0, [r7, #12]
 800cd7a:	60b9      	str	r1, [r7, #8]
 800cd7c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd86:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d10d      	bne.n	800cdac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d14d      	bne.n	800ce34 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	689b      	ldr	r3, [r3, #8]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f000 ff7d 	bl	800dc9c <xTaskPriorityDisinherit>
 800cda2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2200      	movs	r2, #0
 800cda8:	609a      	str	r2, [r3, #8]
 800cdaa:	e043      	b.n	800ce34 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d119      	bne.n	800cde6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	6858      	ldr	r0, [r3, #4]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdba:	461a      	mov	r2, r3
 800cdbc:	68b9      	ldr	r1, [r7, #8]
 800cdbe:	f002 fc93 	bl	800f6e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdca:	441a      	add	r2, r3
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	685a      	ldr	r2, [r3, #4]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d32b      	bcc.n	800ce34 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	605a      	str	r2, [r3, #4]
 800cde4:	e026      	b.n	800ce34 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	68d8      	ldr	r0, [r3, #12]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdee:	461a      	mov	r2, r3
 800cdf0:	68b9      	ldr	r1, [r7, #8]
 800cdf2:	f002 fc79 	bl	800f6e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	68da      	ldr	r2, [r3, #12]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfe:	425b      	negs	r3, r3
 800ce00:	441a      	add	r2, r3
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	68da      	ldr	r2, [r3, #12]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d207      	bcs.n	800ce22 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	689a      	ldr	r2, [r3, #8]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce1a:	425b      	negs	r3, r3
 800ce1c:	441a      	add	r2, r3
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b02      	cmp	r3, #2
 800ce26:	d105      	bne.n	800ce34 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d002      	beq.n	800ce34 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	1c5a      	adds	r2, r3, #1
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ce3c:	697b      	ldr	r3, [r7, #20]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3718      	adds	r7, #24
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b082      	sub	sp, #8
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
 800ce4e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d018      	beq.n	800ce8a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	68da      	ldr	r2, [r3, #12]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce60:	441a      	add	r2, r3
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	68da      	ldr	r2, [r3, #12]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d303      	bcc.n	800ce7a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	68d9      	ldr	r1, [r3, #12]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce82:	461a      	mov	r2, r3
 800ce84:	6838      	ldr	r0, [r7, #0]
 800ce86:	f002 fc2f 	bl	800f6e8 <memcpy>
	}
}
 800ce8a:	bf00      	nop
 800ce8c:	3708      	adds	r7, #8
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b084      	sub	sp, #16
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ce9a:	f001 f9bb 	bl	800e214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cea4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cea6:	e011      	b.n	800cecc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d012      	beq.n	800ced6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	3324      	adds	r3, #36	; 0x24
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f000 fca1 	bl	800d7fc <xTaskRemoveFromEventList>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d001      	beq.n	800cec4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cec0:	f000 fd76 	bl	800d9b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cec4:	7bfb      	ldrb	r3, [r7, #15]
 800cec6:	3b01      	subs	r3, #1
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	dce9      	bgt.n	800cea8 <prvUnlockQueue+0x16>
 800ced4:	e000      	b.n	800ced8 <prvUnlockQueue+0x46>
					break;
 800ced6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	22ff      	movs	r2, #255	; 0xff
 800cedc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cee0:	f001 f9c8 	bl	800e274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cee4:	f001 f996 	bl	800e214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ceee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cef0:	e011      	b.n	800cf16 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	691b      	ldr	r3, [r3, #16]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d012      	beq.n	800cf20 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	3310      	adds	r3, #16
 800cefe:	4618      	mov	r0, r3
 800cf00:	f000 fc7c 	bl	800d7fc <xTaskRemoveFromEventList>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cf0a:	f000 fd51 	bl	800d9b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cf0e:	7bbb      	ldrb	r3, [r7, #14]
 800cf10:	3b01      	subs	r3, #1
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	dce9      	bgt.n	800cef2 <prvUnlockQueue+0x60>
 800cf1e:	e000      	b.n	800cf22 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cf20:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	22ff      	movs	r2, #255	; 0xff
 800cf26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cf2a:	f001 f9a3 	bl	800e274 <vPortExitCritical>
}
 800cf2e:	bf00      	nop
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b084      	sub	sp, #16
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf3e:	f001 f969 	bl	800e214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d102      	bne.n	800cf50 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	60fb      	str	r3, [r7, #12]
 800cf4e:	e001      	b.n	800cf54 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cf50:	2300      	movs	r3, #0
 800cf52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf54:	f001 f98e 	bl	800e274 <vPortExitCritical>

	return xReturn;
 800cf58:	68fb      	ldr	r3, [r7, #12]
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b084      	sub	sp, #16
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf6a:	f001 f953 	bl	800e214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d102      	bne.n	800cf80 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	60fb      	str	r3, [r7, #12]
 800cf7e:	e001      	b.n	800cf84 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cf80:	2300      	movs	r3, #0
 800cf82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf84:	f001 f976 	bl	800e274 <vPortExitCritical>

	return xReturn;
 800cf88:	68fb      	ldr	r3, [r7, #12]
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3710      	adds	r7, #16
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
	...

0800cf94 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cf94:	b480      	push	{r7}
 800cf96:	b085      	sub	sp, #20
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	60fb      	str	r3, [r7, #12]
 800cfa0:	e016      	b.n	800cfd0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cfa2:	4a10      	ldr	r2, [pc, #64]	; (800cfe4 <vQueueUnregisterQueue+0x50>)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	00db      	lsls	r3, r3, #3
 800cfa8:	4413      	add	r3, r2
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d10b      	bne.n	800cfca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cfb2:	4a0c      	ldr	r2, [pc, #48]	; (800cfe4 <vQueueUnregisterQueue+0x50>)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cfbc:	4a09      	ldr	r2, [pc, #36]	; (800cfe4 <vQueueUnregisterQueue+0x50>)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	00db      	lsls	r3, r3, #3
 800cfc2:	4413      	add	r3, r2
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	605a      	str	r2, [r3, #4]
				break;
 800cfc8:	e006      	b.n	800cfd8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2b07      	cmp	r3, #7
 800cfd4:	d9e5      	bls.n	800cfa2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cfd6:	bf00      	nop
 800cfd8:	bf00      	nop
 800cfda:	3714      	adds	r7, #20
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr
 800cfe4:	200014e4 	.word	0x200014e4

0800cfe8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b08e      	sub	sp, #56	; 0x38
 800cfec:	af04      	add	r7, sp, #16
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	607a      	str	r2, [r7, #4]
 800cff4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d10a      	bne.n	800d012 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	623b      	str	r3, [r7, #32]
}
 800d00e:	bf00      	nop
 800d010:	e7fe      	b.n	800d010 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d014:	2b00      	cmp	r3, #0
 800d016:	d10a      	bne.n	800d02e <xTaskCreateStatic+0x46>
	__asm volatile
 800d018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	61fb      	str	r3, [r7, #28]
}
 800d02a:	bf00      	nop
 800d02c:	e7fe      	b.n	800d02c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d02e:	2354      	movs	r3, #84	; 0x54
 800d030:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	2b54      	cmp	r3, #84	; 0x54
 800d036:	d00a      	beq.n	800d04e <xTaskCreateStatic+0x66>
	__asm volatile
 800d038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03c:	f383 8811 	msr	BASEPRI, r3
 800d040:	f3bf 8f6f 	isb	sy
 800d044:	f3bf 8f4f 	dsb	sy
 800d048:	61bb      	str	r3, [r7, #24]
}
 800d04a:	bf00      	nop
 800d04c:	e7fe      	b.n	800d04c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d04e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d052:	2b00      	cmp	r3, #0
 800d054:	d01e      	beq.n	800d094 <xTaskCreateStatic+0xac>
 800d056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d01b      	beq.n	800d094 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d064:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d068:	2202      	movs	r2, #2
 800d06a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d06e:	2300      	movs	r3, #0
 800d070:	9303      	str	r3, [sp, #12]
 800d072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d074:	9302      	str	r3, [sp, #8]
 800d076:	f107 0314 	add.w	r3, r7, #20
 800d07a:	9301      	str	r3, [sp, #4]
 800d07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07e:	9300      	str	r3, [sp, #0]
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	68b9      	ldr	r1, [r7, #8]
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f000 f850 	bl	800d12c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d08c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d08e:	f000 f8d5 	bl	800d23c <prvAddNewTaskToReadyList>
 800d092:	e001      	b.n	800d098 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d094:	2300      	movs	r3, #0
 800d096:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d098:	697b      	ldr	r3, [r7, #20]
	}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3728      	adds	r7, #40	; 0x28
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b08c      	sub	sp, #48	; 0x30
 800d0a6:	af04      	add	r7, sp, #16
 800d0a8:	60f8      	str	r0, [r7, #12]
 800d0aa:	60b9      	str	r1, [r7, #8]
 800d0ac:	603b      	str	r3, [r7, #0]
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d0b2:	88fb      	ldrh	r3, [r7, #6]
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f001 f9ce 	bl	800e458 <pvPortMalloc>
 800d0bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00e      	beq.n	800d0e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d0c4:	2054      	movs	r0, #84	; 0x54
 800d0c6:	f001 f9c7 	bl	800e458 <pvPortMalloc>
 800d0ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d0cc:	69fb      	ldr	r3, [r7, #28]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d003      	beq.n	800d0da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	697a      	ldr	r2, [r7, #20]
 800d0d6:	631a      	str	r2, [r3, #48]	; 0x30
 800d0d8:	e005      	b.n	800d0e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d0da:	6978      	ldr	r0, [r7, #20]
 800d0dc:	f001 fa88 	bl	800e5f0 <vPortFree>
 800d0e0:	e001      	b.n	800d0e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d017      	beq.n	800d11c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d0f4:	88fa      	ldrh	r2, [r7, #6]
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	9303      	str	r3, [sp, #12]
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	9302      	str	r3, [sp, #8]
 800d0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d100:	9301      	str	r3, [sp, #4]
 800d102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d104:	9300      	str	r3, [sp, #0]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	68b9      	ldr	r1, [r7, #8]
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f000 f80e 	bl	800d12c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d110:	69f8      	ldr	r0, [r7, #28]
 800d112:	f000 f893 	bl	800d23c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d116:	2301      	movs	r3, #1
 800d118:	61bb      	str	r3, [r7, #24]
 800d11a:	e002      	b.n	800d122 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d11c:	f04f 33ff 	mov.w	r3, #4294967295
 800d120:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d122:	69bb      	ldr	r3, [r7, #24]
	}
 800d124:	4618      	mov	r0, r3
 800d126:	3720      	adds	r7, #32
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b088      	sub	sp, #32
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	607a      	str	r2, [r7, #4]
 800d138:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d144:	3b01      	subs	r3, #1
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	4413      	add	r3, r2
 800d14a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	f023 0307 	bic.w	r3, r3, #7
 800d152:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d154:	69bb      	ldr	r3, [r7, #24]
 800d156:	f003 0307 	and.w	r3, r3, #7
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00a      	beq.n	800d174 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	617b      	str	r3, [r7, #20]
}
 800d170:	bf00      	nop
 800d172:	e7fe      	b.n	800d172 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d01f      	beq.n	800d1ba <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d17a:	2300      	movs	r3, #0
 800d17c:	61fb      	str	r3, [r7, #28]
 800d17e:	e012      	b.n	800d1a6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	4413      	add	r3, r2
 800d186:	7819      	ldrb	r1, [r3, #0]
 800d188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	4413      	add	r3, r2
 800d18e:	3334      	adds	r3, #52	; 0x34
 800d190:	460a      	mov	r2, r1
 800d192:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d194:	68ba      	ldr	r2, [r7, #8]
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	4413      	add	r3, r2
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d006      	beq.n	800d1ae <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	61fb      	str	r3, [r7, #28]
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	2b0f      	cmp	r3, #15
 800d1aa:	d9e9      	bls.n	800d180 <prvInitialiseNewTask+0x54>
 800d1ac:	e000      	b.n	800d1b0 <prvInitialiseNewTask+0x84>
			{
				break;
 800d1ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d1b8:	e003      	b.n	800d1c2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c4:	2b06      	cmp	r3, #6
 800d1c6:	d901      	bls.n	800d1cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d1c8:	2306      	movs	r3, #6
 800d1ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1da:	2200      	movs	r2, #0
 800d1dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e0:	3304      	adds	r3, #4
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7ff f857 	bl	800c296 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ea:	3318      	adds	r3, #24
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7ff f852 	bl	800c296 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fa:	f1c3 0207 	rsb	r2, r3, #7
 800d1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d200:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d206:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20a:	2200      	movs	r2, #0
 800d20c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d210:	2200      	movs	r2, #0
 800d212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d216:	683a      	ldr	r2, [r7, #0]
 800d218:	68f9      	ldr	r1, [r7, #12]
 800d21a:	69b8      	ldr	r0, [r7, #24]
 800d21c:	f000 fecc 	bl	800dfb8 <pxPortInitialiseStack>
 800d220:	4602      	mov	r2, r0
 800d222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d224:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d002      	beq.n	800d232 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d232:	bf00      	nop
 800d234:	3720      	adds	r7, #32
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d244:	f000 ffe6 	bl	800e214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d248:	4b2a      	ldr	r3, [pc, #168]	; (800d2f4 <prvAddNewTaskToReadyList+0xb8>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	3301      	adds	r3, #1
 800d24e:	4a29      	ldr	r2, [pc, #164]	; (800d2f4 <prvAddNewTaskToReadyList+0xb8>)
 800d250:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d252:	4b29      	ldr	r3, [pc, #164]	; (800d2f8 <prvAddNewTaskToReadyList+0xbc>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d109      	bne.n	800d26e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d25a:	4a27      	ldr	r2, [pc, #156]	; (800d2f8 <prvAddNewTaskToReadyList+0xbc>)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d260:	4b24      	ldr	r3, [pc, #144]	; (800d2f4 <prvAddNewTaskToReadyList+0xb8>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2b01      	cmp	r3, #1
 800d266:	d110      	bne.n	800d28a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d268:	f000 fbc6 	bl	800d9f8 <prvInitialiseTaskLists>
 800d26c:	e00d      	b.n	800d28a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d26e:	4b23      	ldr	r3, [pc, #140]	; (800d2fc <prvAddNewTaskToReadyList+0xc0>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d109      	bne.n	800d28a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d276:	4b20      	ldr	r3, [pc, #128]	; (800d2f8 <prvAddNewTaskToReadyList+0xbc>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d280:	429a      	cmp	r2, r3
 800d282:	d802      	bhi.n	800d28a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d284:	4a1c      	ldr	r2, [pc, #112]	; (800d2f8 <prvAddNewTaskToReadyList+0xbc>)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d28a:	4b1d      	ldr	r3, [pc, #116]	; (800d300 <prvAddNewTaskToReadyList+0xc4>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	3301      	adds	r3, #1
 800d290:	4a1b      	ldr	r2, [pc, #108]	; (800d300 <prvAddNewTaskToReadyList+0xc4>)
 800d292:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d298:	2201      	movs	r2, #1
 800d29a:	409a      	lsls	r2, r3
 800d29c:	4b19      	ldr	r3, [pc, #100]	; (800d304 <prvAddNewTaskToReadyList+0xc8>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	4a18      	ldr	r2, [pc, #96]	; (800d304 <prvAddNewTaskToReadyList+0xc8>)
 800d2a4:	6013      	str	r3, [r2, #0]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2aa:	4613      	mov	r3, r2
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	4413      	add	r3, r2
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	4a15      	ldr	r2, [pc, #84]	; (800d308 <prvAddNewTaskToReadyList+0xcc>)
 800d2b4:	441a      	add	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	3304      	adds	r3, #4
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	4610      	mov	r0, r2
 800d2be:	f7fe fff7 	bl	800c2b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d2c2:	f000 ffd7 	bl	800e274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d2c6:	4b0d      	ldr	r3, [pc, #52]	; (800d2fc <prvAddNewTaskToReadyList+0xc0>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d00e      	beq.n	800d2ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d2ce:	4b0a      	ldr	r3, [pc, #40]	; (800d2f8 <prvAddNewTaskToReadyList+0xbc>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d207      	bcs.n	800d2ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d2dc:	4b0b      	ldr	r3, [pc, #44]	; (800d30c <prvAddNewTaskToReadyList+0xd0>)
 800d2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	20001624 	.word	0x20001624
 800d2f8:	20001524 	.word	0x20001524
 800d2fc:	20001630 	.word	0x20001630
 800d300:	20001640 	.word	0x20001640
 800d304:	2000162c 	.word	0x2000162c
 800d308:	20001528 	.word	0x20001528
 800d30c:	e000ed04 	.word	0xe000ed04

0800d310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d310:	b580      	push	{r7, lr}
 800d312:	b084      	sub	sp, #16
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d318:	2300      	movs	r3, #0
 800d31a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d017      	beq.n	800d352 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d322:	4b13      	ldr	r3, [pc, #76]	; (800d370 <vTaskDelay+0x60>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00a      	beq.n	800d340 <vTaskDelay+0x30>
	__asm volatile
 800d32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	60bb      	str	r3, [r7, #8]
}
 800d33c:	bf00      	nop
 800d33e:	e7fe      	b.n	800d33e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d340:	f000 f87a 	bl	800d438 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d344:	2100      	movs	r1, #0
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 fdd0 	bl	800deec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d34c:	f000 f882 	bl	800d454 <xTaskResumeAll>
 800d350:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d107      	bne.n	800d368 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d358:	4b06      	ldr	r3, [pc, #24]	; (800d374 <vTaskDelay+0x64>)
 800d35a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d35e:	601a      	str	r2, [r3, #0]
 800d360:	f3bf 8f4f 	dsb	sy
 800d364:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d368:	bf00      	nop
 800d36a:	3710      	adds	r7, #16
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	2000164c 	.word	0x2000164c
 800d374:	e000ed04 	.word	0xe000ed04

0800d378 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b08a      	sub	sp, #40	; 0x28
 800d37c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d37e:	2300      	movs	r3, #0
 800d380:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d382:	2300      	movs	r3, #0
 800d384:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d386:	463a      	mov	r2, r7
 800d388:	1d39      	adds	r1, r7, #4
 800d38a:	f107 0308 	add.w	r3, r7, #8
 800d38e:	4618      	mov	r0, r3
 800d390:	f7f2 ff1e 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d394:	6839      	ldr	r1, [r7, #0]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	9202      	str	r2, [sp, #8]
 800d39c:	9301      	str	r3, [sp, #4]
 800d39e:	2300      	movs	r3, #0
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	460a      	mov	r2, r1
 800d3a6:	491e      	ldr	r1, [pc, #120]	; (800d420 <vTaskStartScheduler+0xa8>)
 800d3a8:	481e      	ldr	r0, [pc, #120]	; (800d424 <vTaskStartScheduler+0xac>)
 800d3aa:	f7ff fe1d 	bl	800cfe8 <xTaskCreateStatic>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	4a1d      	ldr	r2, [pc, #116]	; (800d428 <vTaskStartScheduler+0xb0>)
 800d3b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d3b4:	4b1c      	ldr	r3, [pc, #112]	; (800d428 <vTaskStartScheduler+0xb0>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d002      	beq.n	800d3c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	617b      	str	r3, [r7, #20]
 800d3c0:	e001      	b.n	800d3c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d116      	bne.n	800d3fa <vTaskStartScheduler+0x82>
	__asm volatile
 800d3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d0:	f383 8811 	msr	BASEPRI, r3
 800d3d4:	f3bf 8f6f 	isb	sy
 800d3d8:	f3bf 8f4f 	dsb	sy
 800d3dc:	613b      	str	r3, [r7, #16]
}
 800d3de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d3e0:	4b12      	ldr	r3, [pc, #72]	; (800d42c <vTaskStartScheduler+0xb4>)
 800d3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d3e8:	4b11      	ldr	r3, [pc, #68]	; (800d430 <vTaskStartScheduler+0xb8>)
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d3ee:	4b11      	ldr	r3, [pc, #68]	; (800d434 <vTaskStartScheduler+0xbc>)
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d3f4:	f000 fe6c 	bl	800e0d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d3f8:	e00e      	b.n	800d418 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d400:	d10a      	bne.n	800d418 <vTaskStartScheduler+0xa0>
	__asm volatile
 800d402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d406:	f383 8811 	msr	BASEPRI, r3
 800d40a:	f3bf 8f6f 	isb	sy
 800d40e:	f3bf 8f4f 	dsb	sy
 800d412:	60fb      	str	r3, [r7, #12]
}
 800d414:	bf00      	nop
 800d416:	e7fe      	b.n	800d416 <vTaskStartScheduler+0x9e>
}
 800d418:	bf00      	nop
 800d41a:	3718      	adds	r7, #24
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	0800f7dc 	.word	0x0800f7dc
 800d424:	0800d9c9 	.word	0x0800d9c9
 800d428:	20001648 	.word	0x20001648
 800d42c:	20001644 	.word	0x20001644
 800d430:	20001630 	.word	0x20001630
 800d434:	20001628 	.word	0x20001628

0800d438 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d438:	b480      	push	{r7}
 800d43a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d43c:	4b04      	ldr	r3, [pc, #16]	; (800d450 <vTaskSuspendAll+0x18>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	3301      	adds	r3, #1
 800d442:	4a03      	ldr	r2, [pc, #12]	; (800d450 <vTaskSuspendAll+0x18>)
 800d444:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d446:	bf00      	nop
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr
 800d450:	2000164c 	.word	0x2000164c

0800d454 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d45a:	2300      	movs	r3, #0
 800d45c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d45e:	2300      	movs	r3, #0
 800d460:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d462:	4b41      	ldr	r3, [pc, #260]	; (800d568 <xTaskResumeAll+0x114>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d10a      	bne.n	800d480 <xTaskResumeAll+0x2c>
	__asm volatile
 800d46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	603b      	str	r3, [r7, #0]
}
 800d47c:	bf00      	nop
 800d47e:	e7fe      	b.n	800d47e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d480:	f000 fec8 	bl	800e214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d484:	4b38      	ldr	r3, [pc, #224]	; (800d568 <xTaskResumeAll+0x114>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	3b01      	subs	r3, #1
 800d48a:	4a37      	ldr	r2, [pc, #220]	; (800d568 <xTaskResumeAll+0x114>)
 800d48c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d48e:	4b36      	ldr	r3, [pc, #216]	; (800d568 <xTaskResumeAll+0x114>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d161      	bne.n	800d55a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d496:	4b35      	ldr	r3, [pc, #212]	; (800d56c <xTaskResumeAll+0x118>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d05d      	beq.n	800d55a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d49e:	e02e      	b.n	800d4fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4a0:	4b33      	ldr	r3, [pc, #204]	; (800d570 <xTaskResumeAll+0x11c>)
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	68db      	ldr	r3, [r3, #12]
 800d4a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	3318      	adds	r3, #24
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7fe ff5c 	bl	800c36a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	3304      	adds	r3, #4
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7fe ff57 	bl	800c36a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	409a      	lsls	r2, r3
 800d4c4:	4b2b      	ldr	r3, [pc, #172]	; (800d574 <xTaskResumeAll+0x120>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	4a2a      	ldr	r2, [pc, #168]	; (800d574 <xTaskResumeAll+0x120>)
 800d4cc:	6013      	str	r3, [r2, #0]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	4413      	add	r3, r2
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	4a27      	ldr	r2, [pc, #156]	; (800d578 <xTaskResumeAll+0x124>)
 800d4dc:	441a      	add	r2, r3
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	4610      	mov	r0, r2
 800d4e6:	f7fe fee3 	bl	800c2b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ee:	4b23      	ldr	r3, [pc, #140]	; (800d57c <xTaskResumeAll+0x128>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d302      	bcc.n	800d4fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d4f8:	4b21      	ldr	r3, [pc, #132]	; (800d580 <xTaskResumeAll+0x12c>)
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d4fe:	4b1c      	ldr	r3, [pc, #112]	; (800d570 <xTaskResumeAll+0x11c>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1cc      	bne.n	800d4a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d001      	beq.n	800d510 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d50c:	f000 fb12 	bl	800db34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d510:	4b1c      	ldr	r3, [pc, #112]	; (800d584 <xTaskResumeAll+0x130>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d010      	beq.n	800d53e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d51c:	f000 f836 	bl	800d58c <xTaskIncrementTick>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d002      	beq.n	800d52c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d526:	4b16      	ldr	r3, [pc, #88]	; (800d580 <xTaskResumeAll+0x12c>)
 800d528:	2201      	movs	r2, #1
 800d52a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	3b01      	subs	r3, #1
 800d530:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d1f1      	bne.n	800d51c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d538:	4b12      	ldr	r3, [pc, #72]	; (800d584 <xTaskResumeAll+0x130>)
 800d53a:	2200      	movs	r2, #0
 800d53c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d53e:	4b10      	ldr	r3, [pc, #64]	; (800d580 <xTaskResumeAll+0x12c>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d009      	beq.n	800d55a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d546:	2301      	movs	r3, #1
 800d548:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d54a:	4b0f      	ldr	r3, [pc, #60]	; (800d588 <xTaskResumeAll+0x134>)
 800d54c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d55a:	f000 fe8b 	bl	800e274 <vPortExitCritical>

	return xAlreadyYielded;
 800d55e:	68bb      	ldr	r3, [r7, #8]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3710      	adds	r7, #16
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	2000164c 	.word	0x2000164c
 800d56c:	20001624 	.word	0x20001624
 800d570:	200015e4 	.word	0x200015e4
 800d574:	2000162c 	.word	0x2000162c
 800d578:	20001528 	.word	0x20001528
 800d57c:	20001524 	.word	0x20001524
 800d580:	20001638 	.word	0x20001638
 800d584:	20001634 	.word	0x20001634
 800d588:	e000ed04 	.word	0xe000ed04

0800d58c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b086      	sub	sp, #24
 800d590:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d592:	2300      	movs	r3, #0
 800d594:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d596:	4b4e      	ldr	r3, [pc, #312]	; (800d6d0 <xTaskIncrementTick+0x144>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	f040 808e 	bne.w	800d6bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d5a0:	4b4c      	ldr	r3, [pc, #304]	; (800d6d4 <xTaskIncrementTick+0x148>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d5a8:	4a4a      	ldr	r2, [pc, #296]	; (800d6d4 <xTaskIncrementTick+0x148>)
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d120      	bne.n	800d5f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d5b4:	4b48      	ldr	r3, [pc, #288]	; (800d6d8 <xTaskIncrementTick+0x14c>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d00a      	beq.n	800d5d4 <xTaskIncrementTick+0x48>
	__asm volatile
 800d5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c2:	f383 8811 	msr	BASEPRI, r3
 800d5c6:	f3bf 8f6f 	isb	sy
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	603b      	str	r3, [r7, #0]
}
 800d5d0:	bf00      	nop
 800d5d2:	e7fe      	b.n	800d5d2 <xTaskIncrementTick+0x46>
 800d5d4:	4b40      	ldr	r3, [pc, #256]	; (800d6d8 <xTaskIncrementTick+0x14c>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	60fb      	str	r3, [r7, #12]
 800d5da:	4b40      	ldr	r3, [pc, #256]	; (800d6dc <xTaskIncrementTick+0x150>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a3e      	ldr	r2, [pc, #248]	; (800d6d8 <xTaskIncrementTick+0x14c>)
 800d5e0:	6013      	str	r3, [r2, #0]
 800d5e2:	4a3e      	ldr	r2, [pc, #248]	; (800d6dc <xTaskIncrementTick+0x150>)
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6013      	str	r3, [r2, #0]
 800d5e8:	4b3d      	ldr	r3, [pc, #244]	; (800d6e0 <xTaskIncrementTick+0x154>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	4a3c      	ldr	r2, [pc, #240]	; (800d6e0 <xTaskIncrementTick+0x154>)
 800d5f0:	6013      	str	r3, [r2, #0]
 800d5f2:	f000 fa9f 	bl	800db34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d5f6:	4b3b      	ldr	r3, [pc, #236]	; (800d6e4 <xTaskIncrementTick+0x158>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	693a      	ldr	r2, [r7, #16]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d348      	bcc.n	800d692 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d600:	4b35      	ldr	r3, [pc, #212]	; (800d6d8 <xTaskIncrementTick+0x14c>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d104      	bne.n	800d614 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d60a:	4b36      	ldr	r3, [pc, #216]	; (800d6e4 <xTaskIncrementTick+0x158>)
 800d60c:	f04f 32ff 	mov.w	r2, #4294967295
 800d610:	601a      	str	r2, [r3, #0]
					break;
 800d612:	e03e      	b.n	800d692 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d614:	4b30      	ldr	r3, [pc, #192]	; (800d6d8 <xTaskIncrementTick+0x14c>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d624:	693a      	ldr	r2, [r7, #16]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d203      	bcs.n	800d634 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d62c:	4a2d      	ldr	r2, [pc, #180]	; (800d6e4 <xTaskIncrementTick+0x158>)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d632:	e02e      	b.n	800d692 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	3304      	adds	r3, #4
 800d638:	4618      	mov	r0, r3
 800d63a:	f7fe fe96 	bl	800c36a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d642:	2b00      	cmp	r3, #0
 800d644:	d004      	beq.n	800d650 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	3318      	adds	r3, #24
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7fe fe8d 	bl	800c36a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d654:	2201      	movs	r2, #1
 800d656:	409a      	lsls	r2, r3
 800d658:	4b23      	ldr	r3, [pc, #140]	; (800d6e8 <xTaskIncrementTick+0x15c>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	4313      	orrs	r3, r2
 800d65e:	4a22      	ldr	r2, [pc, #136]	; (800d6e8 <xTaskIncrementTick+0x15c>)
 800d660:	6013      	str	r3, [r2, #0]
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d666:	4613      	mov	r3, r2
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	4413      	add	r3, r2
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	4a1f      	ldr	r2, [pc, #124]	; (800d6ec <xTaskIncrementTick+0x160>)
 800d670:	441a      	add	r2, r3
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	3304      	adds	r3, #4
 800d676:	4619      	mov	r1, r3
 800d678:	4610      	mov	r0, r2
 800d67a:	f7fe fe19 	bl	800c2b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d682:	4b1b      	ldr	r3, [pc, #108]	; (800d6f0 <xTaskIncrementTick+0x164>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d688:	429a      	cmp	r2, r3
 800d68a:	d3b9      	bcc.n	800d600 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d68c:	2301      	movs	r3, #1
 800d68e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d690:	e7b6      	b.n	800d600 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d692:	4b17      	ldr	r3, [pc, #92]	; (800d6f0 <xTaskIncrementTick+0x164>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d698:	4914      	ldr	r1, [pc, #80]	; (800d6ec <xTaskIncrementTick+0x160>)
 800d69a:	4613      	mov	r3, r2
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	4413      	add	r3, r2
 800d6a0:	009b      	lsls	r3, r3, #2
 800d6a2:	440b      	add	r3, r1
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d901      	bls.n	800d6ae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d6ae:	4b11      	ldr	r3, [pc, #68]	; (800d6f4 <xTaskIncrementTick+0x168>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d007      	beq.n	800d6c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	617b      	str	r3, [r7, #20]
 800d6ba:	e004      	b.n	800d6c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d6bc:	4b0e      	ldr	r3, [pc, #56]	; (800d6f8 <xTaskIncrementTick+0x16c>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	4a0d      	ldr	r2, [pc, #52]	; (800d6f8 <xTaskIncrementTick+0x16c>)
 800d6c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d6c6:	697b      	ldr	r3, [r7, #20]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3718      	adds	r7, #24
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	2000164c 	.word	0x2000164c
 800d6d4:	20001628 	.word	0x20001628
 800d6d8:	200015dc 	.word	0x200015dc
 800d6dc:	200015e0 	.word	0x200015e0
 800d6e0:	2000163c 	.word	0x2000163c
 800d6e4:	20001644 	.word	0x20001644
 800d6e8:	2000162c 	.word	0x2000162c
 800d6ec:	20001528 	.word	0x20001528
 800d6f0:	20001524 	.word	0x20001524
 800d6f4:	20001638 	.word	0x20001638
 800d6f8:	20001634 	.word	0x20001634

0800d6fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b087      	sub	sp, #28
 800d700:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d702:	4b27      	ldr	r3, [pc, #156]	; (800d7a0 <vTaskSwitchContext+0xa4>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d003      	beq.n	800d712 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d70a:	4b26      	ldr	r3, [pc, #152]	; (800d7a4 <vTaskSwitchContext+0xa8>)
 800d70c:	2201      	movs	r2, #1
 800d70e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d710:	e03f      	b.n	800d792 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d712:	4b24      	ldr	r3, [pc, #144]	; (800d7a4 <vTaskSwitchContext+0xa8>)
 800d714:	2200      	movs	r2, #0
 800d716:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d718:	4b23      	ldr	r3, [pc, #140]	; (800d7a8 <vTaskSwitchContext+0xac>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	fab3 f383 	clz	r3, r3
 800d724:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d726:	7afb      	ldrb	r3, [r7, #11]
 800d728:	f1c3 031f 	rsb	r3, r3, #31
 800d72c:	617b      	str	r3, [r7, #20]
 800d72e:	491f      	ldr	r1, [pc, #124]	; (800d7ac <vTaskSwitchContext+0xb0>)
 800d730:	697a      	ldr	r2, [r7, #20]
 800d732:	4613      	mov	r3, r2
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	4413      	add	r3, r2
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	440b      	add	r3, r1
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d10a      	bne.n	800d758 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d746:	f383 8811 	msr	BASEPRI, r3
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	607b      	str	r3, [r7, #4]
}
 800d754:	bf00      	nop
 800d756:	e7fe      	b.n	800d756 <vTaskSwitchContext+0x5a>
 800d758:	697a      	ldr	r2, [r7, #20]
 800d75a:	4613      	mov	r3, r2
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	4413      	add	r3, r2
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	4a12      	ldr	r2, [pc, #72]	; (800d7ac <vTaskSwitchContext+0xb0>)
 800d764:	4413      	add	r3, r2
 800d766:	613b      	str	r3, [r7, #16]
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	685a      	ldr	r2, [r3, #4]
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	605a      	str	r2, [r3, #4]
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	685a      	ldr	r2, [r3, #4]
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	3308      	adds	r3, #8
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d104      	bne.n	800d788 <vTaskSwitchContext+0x8c>
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	685a      	ldr	r2, [r3, #4]
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	605a      	str	r2, [r3, #4]
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	4a08      	ldr	r2, [pc, #32]	; (800d7b0 <vTaskSwitchContext+0xb4>)
 800d790:	6013      	str	r3, [r2, #0]
}
 800d792:	bf00      	nop
 800d794:	371c      	adds	r7, #28
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	2000164c 	.word	0x2000164c
 800d7a4:	20001638 	.word	0x20001638
 800d7a8:	2000162c 	.word	0x2000162c
 800d7ac:	20001528 	.word	0x20001528
 800d7b0:	20001524 	.word	0x20001524

0800d7b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d10a      	bne.n	800d7da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c8:	f383 8811 	msr	BASEPRI, r3
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	60fb      	str	r3, [r7, #12]
}
 800d7d6:	bf00      	nop
 800d7d8:	e7fe      	b.n	800d7d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d7da:	4b07      	ldr	r3, [pc, #28]	; (800d7f8 <vTaskPlaceOnEventList+0x44>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	3318      	adds	r3, #24
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f7fe fd88 	bl	800c2f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d7e8:	2101      	movs	r1, #1
 800d7ea:	6838      	ldr	r0, [r7, #0]
 800d7ec:	f000 fb7e 	bl	800deec <prvAddCurrentTaskToDelayedList>
}
 800d7f0:	bf00      	nop
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	20001524 	.word	0x20001524

0800d7fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b086      	sub	sp, #24
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d10a      	bne.n	800d828 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d816:	f383 8811 	msr	BASEPRI, r3
 800d81a:	f3bf 8f6f 	isb	sy
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	60fb      	str	r3, [r7, #12]
}
 800d824:	bf00      	nop
 800d826:	e7fe      	b.n	800d826 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	3318      	adds	r3, #24
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7fe fd9c 	bl	800c36a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d832:	4b1d      	ldr	r3, [pc, #116]	; (800d8a8 <xTaskRemoveFromEventList+0xac>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d11c      	bne.n	800d874 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	3304      	adds	r3, #4
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fe fd93 	bl	800c36a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d848:	2201      	movs	r2, #1
 800d84a:	409a      	lsls	r2, r3
 800d84c:	4b17      	ldr	r3, [pc, #92]	; (800d8ac <xTaskRemoveFromEventList+0xb0>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4313      	orrs	r3, r2
 800d852:	4a16      	ldr	r2, [pc, #88]	; (800d8ac <xTaskRemoveFromEventList+0xb0>)
 800d854:	6013      	str	r3, [r2, #0]
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d85a:	4613      	mov	r3, r2
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	4413      	add	r3, r2
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	4a13      	ldr	r2, [pc, #76]	; (800d8b0 <xTaskRemoveFromEventList+0xb4>)
 800d864:	441a      	add	r2, r3
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	3304      	adds	r3, #4
 800d86a:	4619      	mov	r1, r3
 800d86c:	4610      	mov	r0, r2
 800d86e:	f7fe fd1f 	bl	800c2b0 <vListInsertEnd>
 800d872:	e005      	b.n	800d880 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	3318      	adds	r3, #24
 800d878:	4619      	mov	r1, r3
 800d87a:	480e      	ldr	r0, [pc, #56]	; (800d8b4 <xTaskRemoveFromEventList+0xb8>)
 800d87c:	f7fe fd18 	bl	800c2b0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d884:	4b0c      	ldr	r3, [pc, #48]	; (800d8b8 <xTaskRemoveFromEventList+0xbc>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d905      	bls.n	800d89a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d88e:	2301      	movs	r3, #1
 800d890:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d892:	4b0a      	ldr	r3, [pc, #40]	; (800d8bc <xTaskRemoveFromEventList+0xc0>)
 800d894:	2201      	movs	r2, #1
 800d896:	601a      	str	r2, [r3, #0]
 800d898:	e001      	b.n	800d89e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d89a:	2300      	movs	r3, #0
 800d89c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d89e:	697b      	ldr	r3, [r7, #20]
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3718      	adds	r7, #24
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	2000164c 	.word	0x2000164c
 800d8ac:	2000162c 	.word	0x2000162c
 800d8b0:	20001528 	.word	0x20001528
 800d8b4:	200015e4 	.word	0x200015e4
 800d8b8:	20001524 	.word	0x20001524
 800d8bc:	20001638 	.word	0x20001638

0800d8c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d8c8:	4b06      	ldr	r3, [pc, #24]	; (800d8e4 <vTaskInternalSetTimeOutState+0x24>)
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d8d0:	4b05      	ldr	r3, [pc, #20]	; (800d8e8 <vTaskInternalSetTimeOutState+0x28>)
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	605a      	str	r2, [r3, #4]
}
 800d8d8:	bf00      	nop
 800d8da:	370c      	adds	r7, #12
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr
 800d8e4:	2000163c 	.word	0x2000163c
 800d8e8:	20001628 	.word	0x20001628

0800d8ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b088      	sub	sp, #32
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d10a      	bne.n	800d912 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	613b      	str	r3, [r7, #16]
}
 800d90e:	bf00      	nop
 800d910:	e7fe      	b.n	800d910 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d10a      	bne.n	800d92e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91c:	f383 8811 	msr	BASEPRI, r3
 800d920:	f3bf 8f6f 	isb	sy
 800d924:	f3bf 8f4f 	dsb	sy
 800d928:	60fb      	str	r3, [r7, #12]
}
 800d92a:	bf00      	nop
 800d92c:	e7fe      	b.n	800d92c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d92e:	f000 fc71 	bl	800e214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d932:	4b1d      	ldr	r3, [pc, #116]	; (800d9a8 <xTaskCheckForTimeOut+0xbc>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	69ba      	ldr	r2, [r7, #24]
 800d93e:	1ad3      	subs	r3, r2, r3
 800d940:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d94a:	d102      	bne.n	800d952 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d94c:	2300      	movs	r3, #0
 800d94e:	61fb      	str	r3, [r7, #28]
 800d950:	e023      	b.n	800d99a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	4b15      	ldr	r3, [pc, #84]	; (800d9ac <xTaskCheckForTimeOut+0xc0>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d007      	beq.n	800d96e <xTaskCheckForTimeOut+0x82>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	69ba      	ldr	r2, [r7, #24]
 800d964:	429a      	cmp	r2, r3
 800d966:	d302      	bcc.n	800d96e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d968:	2301      	movs	r3, #1
 800d96a:	61fb      	str	r3, [r7, #28]
 800d96c:	e015      	b.n	800d99a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	697a      	ldr	r2, [r7, #20]
 800d974:	429a      	cmp	r2, r3
 800d976:	d20b      	bcs.n	800d990 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	1ad2      	subs	r2, r2, r3
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7ff ff9b 	bl	800d8c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d98a:	2300      	movs	r3, #0
 800d98c:	61fb      	str	r3, [r7, #28]
 800d98e:	e004      	b.n	800d99a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	2200      	movs	r2, #0
 800d994:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d996:	2301      	movs	r3, #1
 800d998:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d99a:	f000 fc6b 	bl	800e274 <vPortExitCritical>

	return xReturn;
 800d99e:	69fb      	ldr	r3, [r7, #28]
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3720      	adds	r7, #32
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	20001628 	.word	0x20001628
 800d9ac:	2000163c 	.word	0x2000163c

0800d9b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d9b4:	4b03      	ldr	r3, [pc, #12]	; (800d9c4 <vTaskMissedYield+0x14>)
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	601a      	str	r2, [r3, #0]
}
 800d9ba:	bf00      	nop
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr
 800d9c4:	20001638 	.word	0x20001638

0800d9c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d9d0:	f000 f852 	bl	800da78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d9d4:	4b06      	ldr	r3, [pc, #24]	; (800d9f0 <prvIdleTask+0x28>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d9f9      	bls.n	800d9d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d9dc:	4b05      	ldr	r3, [pc, #20]	; (800d9f4 <prvIdleTask+0x2c>)
 800d9de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9e2:	601a      	str	r2, [r3, #0]
 800d9e4:	f3bf 8f4f 	dsb	sy
 800d9e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d9ec:	e7f0      	b.n	800d9d0 <prvIdleTask+0x8>
 800d9ee:	bf00      	nop
 800d9f0:	20001528 	.word	0x20001528
 800d9f4:	e000ed04 	.word	0xe000ed04

0800d9f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9fe:	2300      	movs	r3, #0
 800da00:	607b      	str	r3, [r7, #4]
 800da02:	e00c      	b.n	800da1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	4613      	mov	r3, r2
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	4413      	add	r3, r2
 800da0c:	009b      	lsls	r3, r3, #2
 800da0e:	4a12      	ldr	r2, [pc, #72]	; (800da58 <prvInitialiseTaskLists+0x60>)
 800da10:	4413      	add	r3, r2
 800da12:	4618      	mov	r0, r3
 800da14:	f7fe fc1f 	bl	800c256 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	3301      	adds	r3, #1
 800da1c:	607b      	str	r3, [r7, #4]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2b06      	cmp	r3, #6
 800da22:	d9ef      	bls.n	800da04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800da24:	480d      	ldr	r0, [pc, #52]	; (800da5c <prvInitialiseTaskLists+0x64>)
 800da26:	f7fe fc16 	bl	800c256 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800da2a:	480d      	ldr	r0, [pc, #52]	; (800da60 <prvInitialiseTaskLists+0x68>)
 800da2c:	f7fe fc13 	bl	800c256 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800da30:	480c      	ldr	r0, [pc, #48]	; (800da64 <prvInitialiseTaskLists+0x6c>)
 800da32:	f7fe fc10 	bl	800c256 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800da36:	480c      	ldr	r0, [pc, #48]	; (800da68 <prvInitialiseTaskLists+0x70>)
 800da38:	f7fe fc0d 	bl	800c256 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da3c:	480b      	ldr	r0, [pc, #44]	; (800da6c <prvInitialiseTaskLists+0x74>)
 800da3e:	f7fe fc0a 	bl	800c256 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800da42:	4b0b      	ldr	r3, [pc, #44]	; (800da70 <prvInitialiseTaskLists+0x78>)
 800da44:	4a05      	ldr	r2, [pc, #20]	; (800da5c <prvInitialiseTaskLists+0x64>)
 800da46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da48:	4b0a      	ldr	r3, [pc, #40]	; (800da74 <prvInitialiseTaskLists+0x7c>)
 800da4a:	4a05      	ldr	r2, [pc, #20]	; (800da60 <prvInitialiseTaskLists+0x68>)
 800da4c:	601a      	str	r2, [r3, #0]
}
 800da4e:	bf00      	nop
 800da50:	3708      	adds	r7, #8
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	20001528 	.word	0x20001528
 800da5c:	200015b4 	.word	0x200015b4
 800da60:	200015c8 	.word	0x200015c8
 800da64:	200015e4 	.word	0x200015e4
 800da68:	200015f8 	.word	0x200015f8
 800da6c:	20001610 	.word	0x20001610
 800da70:	200015dc 	.word	0x200015dc
 800da74:	200015e0 	.word	0x200015e0

0800da78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da7e:	e019      	b.n	800dab4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da80:	f000 fbc8 	bl	800e214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da84:	4b10      	ldr	r3, [pc, #64]	; (800dac8 <prvCheckTasksWaitingTermination+0x50>)
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	3304      	adds	r3, #4
 800da90:	4618      	mov	r0, r3
 800da92:	f7fe fc6a 	bl	800c36a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da96:	4b0d      	ldr	r3, [pc, #52]	; (800dacc <prvCheckTasksWaitingTermination+0x54>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	3b01      	subs	r3, #1
 800da9c:	4a0b      	ldr	r2, [pc, #44]	; (800dacc <prvCheckTasksWaitingTermination+0x54>)
 800da9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800daa0:	4b0b      	ldr	r3, [pc, #44]	; (800dad0 <prvCheckTasksWaitingTermination+0x58>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	3b01      	subs	r3, #1
 800daa6:	4a0a      	ldr	r2, [pc, #40]	; (800dad0 <prvCheckTasksWaitingTermination+0x58>)
 800daa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800daaa:	f000 fbe3 	bl	800e274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 f810 	bl	800dad4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dab4:	4b06      	ldr	r3, [pc, #24]	; (800dad0 <prvCheckTasksWaitingTermination+0x58>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d1e1      	bne.n	800da80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dabc:	bf00      	nop
 800dabe:	bf00      	nop
 800dac0:	3708      	adds	r7, #8
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	200015f8 	.word	0x200015f8
 800dacc:	20001624 	.word	0x20001624
 800dad0:	2000160c 	.word	0x2000160c

0800dad4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d108      	bne.n	800daf8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daea:	4618      	mov	r0, r3
 800daec:	f000 fd80 	bl	800e5f0 <vPortFree>
				vPortFree( pxTCB );
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fd7d 	bl	800e5f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800daf6:	e018      	b.n	800db2a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d103      	bne.n	800db0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 fd74 	bl	800e5f0 <vPortFree>
	}
 800db08:	e00f      	b.n	800db2a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db10:	2b02      	cmp	r3, #2
 800db12:	d00a      	beq.n	800db2a <prvDeleteTCB+0x56>
	__asm volatile
 800db14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	60fb      	str	r3, [r7, #12]
}
 800db26:	bf00      	nop
 800db28:	e7fe      	b.n	800db28 <prvDeleteTCB+0x54>
	}
 800db2a:	bf00      	nop
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
	...

0800db34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db3a:	4b0c      	ldr	r3, [pc, #48]	; (800db6c <prvResetNextTaskUnblockTime+0x38>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d104      	bne.n	800db4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800db44:	4b0a      	ldr	r3, [pc, #40]	; (800db70 <prvResetNextTaskUnblockTime+0x3c>)
 800db46:	f04f 32ff 	mov.w	r2, #4294967295
 800db4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800db4c:	e008      	b.n	800db60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db4e:	4b07      	ldr	r3, [pc, #28]	; (800db6c <prvResetNextTaskUnblockTime+0x38>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	4a04      	ldr	r2, [pc, #16]	; (800db70 <prvResetNextTaskUnblockTime+0x3c>)
 800db5e:	6013      	str	r3, [r2, #0]
}
 800db60:	bf00      	nop
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr
 800db6c:	200015dc 	.word	0x200015dc
 800db70:	20001644 	.word	0x20001644

0800db74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db74:	b480      	push	{r7}
 800db76:	b083      	sub	sp, #12
 800db78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db7a:	4b0b      	ldr	r3, [pc, #44]	; (800dba8 <xTaskGetSchedulerState+0x34>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d102      	bne.n	800db88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db82:	2301      	movs	r3, #1
 800db84:	607b      	str	r3, [r7, #4]
 800db86:	e008      	b.n	800db9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db88:	4b08      	ldr	r3, [pc, #32]	; (800dbac <xTaskGetSchedulerState+0x38>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d102      	bne.n	800db96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db90:	2302      	movs	r3, #2
 800db92:	607b      	str	r3, [r7, #4]
 800db94:	e001      	b.n	800db9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db96:	2300      	movs	r3, #0
 800db98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db9a:	687b      	ldr	r3, [r7, #4]
	}
 800db9c:	4618      	mov	r0, r3
 800db9e:	370c      	adds	r7, #12
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr
 800dba8:	20001630 	.word	0x20001630
 800dbac:	2000164c 	.word	0x2000164c

0800dbb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d05e      	beq.n	800dc84 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbca:	4b31      	ldr	r3, [pc, #196]	; (800dc90 <xTaskPriorityInherit+0xe0>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d24e      	bcs.n	800dc72 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	699b      	ldr	r3, [r3, #24]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	db06      	blt.n	800dbea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbdc:	4b2c      	ldr	r3, [pc, #176]	; (800dc90 <xTaskPriorityInherit+0xe0>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe2:	f1c3 0207 	rsb	r2, r3, #7
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	6959      	ldr	r1, [r3, #20]
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	4413      	add	r3, r2
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	4a26      	ldr	r2, [pc, #152]	; (800dc94 <xTaskPriorityInherit+0xe4>)
 800dbfc:	4413      	add	r3, r2
 800dbfe:	4299      	cmp	r1, r3
 800dc00:	d12f      	bne.n	800dc62 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	3304      	adds	r3, #4
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fe fbaf 	bl	800c36a <uxListRemove>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d10a      	bne.n	800dc28 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc16:	2201      	movs	r2, #1
 800dc18:	fa02 f303 	lsl.w	r3, r2, r3
 800dc1c:	43da      	mvns	r2, r3
 800dc1e:	4b1e      	ldr	r3, [pc, #120]	; (800dc98 <xTaskPriorityInherit+0xe8>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	4013      	ands	r3, r2
 800dc24:	4a1c      	ldr	r2, [pc, #112]	; (800dc98 <xTaskPriorityInherit+0xe8>)
 800dc26:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc28:	4b19      	ldr	r3, [pc, #100]	; (800dc90 <xTaskPriorityInherit+0xe0>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc36:	2201      	movs	r2, #1
 800dc38:	409a      	lsls	r2, r3
 800dc3a:	4b17      	ldr	r3, [pc, #92]	; (800dc98 <xTaskPriorityInherit+0xe8>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	4a15      	ldr	r2, [pc, #84]	; (800dc98 <xTaskPriorityInherit+0xe8>)
 800dc42:	6013      	str	r3, [r2, #0]
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc48:	4613      	mov	r3, r2
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4413      	add	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4a10      	ldr	r2, [pc, #64]	; (800dc94 <xTaskPriorityInherit+0xe4>)
 800dc52:	441a      	add	r2, r3
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	3304      	adds	r3, #4
 800dc58:	4619      	mov	r1, r3
 800dc5a:	4610      	mov	r0, r2
 800dc5c:	f7fe fb28 	bl	800c2b0 <vListInsertEnd>
 800dc60:	e004      	b.n	800dc6c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc62:	4b0b      	ldr	r3, [pc, #44]	; (800dc90 <xTaskPriorityInherit+0xe0>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	60fb      	str	r3, [r7, #12]
 800dc70:	e008      	b.n	800dc84 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc76:	4b06      	ldr	r3, [pc, #24]	; (800dc90 <xTaskPriorityInherit+0xe0>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d201      	bcs.n	800dc84 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dc80:	2301      	movs	r3, #1
 800dc82:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc84:	68fb      	ldr	r3, [r7, #12]
	}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	20001524 	.word	0x20001524
 800dc94:	20001528 	.word	0x20001528
 800dc98:	2000162c 	.word	0x2000162c

0800dc9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b086      	sub	sp, #24
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d06e      	beq.n	800dd90 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dcb2:	4b3a      	ldr	r3, [pc, #232]	; (800dd9c <xTaskPriorityDisinherit+0x100>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	693a      	ldr	r2, [r7, #16]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d00a      	beq.n	800dcd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dcbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc0:	f383 8811 	msr	BASEPRI, r3
 800dcc4:	f3bf 8f6f 	isb	sy
 800dcc8:	f3bf 8f4f 	dsb	sy
 800dccc:	60fb      	str	r3, [r7, #12]
}
 800dcce:	bf00      	nop
 800dcd0:	e7fe      	b.n	800dcd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d10a      	bne.n	800dcf0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcde:	f383 8811 	msr	BASEPRI, r3
 800dce2:	f3bf 8f6f 	isb	sy
 800dce6:	f3bf 8f4f 	dsb	sy
 800dcea:	60bb      	str	r3, [r7, #8]
}
 800dcec:	bf00      	nop
 800dcee:	e7fe      	b.n	800dcee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcf4:	1e5a      	subs	r2, r3, #1
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d044      	beq.n	800dd90 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d140      	bne.n	800dd90 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	3304      	adds	r3, #4
 800dd12:	4618      	mov	r0, r3
 800dd14:	f7fe fb29 	bl	800c36a <uxListRemove>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d115      	bne.n	800dd4a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd22:	491f      	ldr	r1, [pc, #124]	; (800dda0 <xTaskPriorityDisinherit+0x104>)
 800dd24:	4613      	mov	r3, r2
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	4413      	add	r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	440b      	add	r3, r1
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d10a      	bne.n	800dd4a <xTaskPriorityDisinherit+0xae>
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd38:	2201      	movs	r2, #1
 800dd3a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd3e:	43da      	mvns	r2, r3
 800dd40:	4b18      	ldr	r3, [pc, #96]	; (800dda4 <xTaskPriorityDisinherit+0x108>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4013      	ands	r3, r2
 800dd46:	4a17      	ldr	r2, [pc, #92]	; (800dda4 <xTaskPriorityDisinherit+0x108>)
 800dd48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd56:	f1c3 0207 	rsb	r2, r3, #7
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd62:	2201      	movs	r2, #1
 800dd64:	409a      	lsls	r2, r3
 800dd66:	4b0f      	ldr	r3, [pc, #60]	; (800dda4 <xTaskPriorityDisinherit+0x108>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	4a0d      	ldr	r2, [pc, #52]	; (800dda4 <xTaskPriorityDisinherit+0x108>)
 800dd6e:	6013      	str	r3, [r2, #0]
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd74:	4613      	mov	r3, r2
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4413      	add	r3, r2
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	4a08      	ldr	r2, [pc, #32]	; (800dda0 <xTaskPriorityDisinherit+0x104>)
 800dd7e:	441a      	add	r2, r3
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	3304      	adds	r3, #4
 800dd84:	4619      	mov	r1, r3
 800dd86:	4610      	mov	r0, r2
 800dd88:	f7fe fa92 	bl	800c2b0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd90:	697b      	ldr	r3, [r7, #20]
	}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3718      	adds	r7, #24
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	20001524 	.word	0x20001524
 800dda0:	20001528 	.word	0x20001528
 800dda4:	2000162c 	.word	0x2000162c

0800dda8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b088      	sub	sp, #32
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d077      	beq.n	800deb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ddc0:	69bb      	ldr	r3, [r7, #24]
 800ddc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d10a      	bne.n	800ddde <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ddc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddcc:	f383 8811 	msr	BASEPRI, r3
 800ddd0:	f3bf 8f6f 	isb	sy
 800ddd4:	f3bf 8f4f 	dsb	sy
 800ddd8:	60fb      	str	r3, [r7, #12]
}
 800ddda:	bf00      	nop
 800dddc:	e7fe      	b.n	800dddc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dde2:	683a      	ldr	r2, [r7, #0]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d902      	bls.n	800ddee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	61fb      	str	r3, [r7, #28]
 800ddec:	e002      	b.n	800ddf4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddf2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ddf4:	69bb      	ldr	r3, [r7, #24]
 800ddf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf8:	69fa      	ldr	r2, [r7, #28]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d058      	beq.n	800deb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de02:	697a      	ldr	r2, [r7, #20]
 800de04:	429a      	cmp	r2, r3
 800de06:	d153      	bne.n	800deb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800de08:	4b2b      	ldr	r3, [pc, #172]	; (800deb8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	69ba      	ldr	r2, [r7, #24]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d10a      	bne.n	800de28 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800de12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de16:	f383 8811 	msr	BASEPRI, r3
 800de1a:	f3bf 8f6f 	isb	sy
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	60bb      	str	r3, [r7, #8]
}
 800de24:	bf00      	nop
 800de26:	e7fe      	b.n	800de26 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800de28:	69bb      	ldr	r3, [r7, #24]
 800de2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800de2e:	69bb      	ldr	r3, [r7, #24]
 800de30:	69fa      	ldr	r2, [r7, #28]
 800de32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	699b      	ldr	r3, [r3, #24]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	db04      	blt.n	800de46 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	f1c3 0207 	rsb	r2, r3, #7
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800de46:	69bb      	ldr	r3, [r7, #24]
 800de48:	6959      	ldr	r1, [r3, #20]
 800de4a:	693a      	ldr	r2, [r7, #16]
 800de4c:	4613      	mov	r3, r2
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4413      	add	r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	4a19      	ldr	r2, [pc, #100]	; (800debc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800de56:	4413      	add	r3, r2
 800de58:	4299      	cmp	r1, r3
 800de5a:	d129      	bne.n	800deb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	3304      	adds	r3, #4
 800de60:	4618      	mov	r0, r3
 800de62:	f7fe fa82 	bl	800c36a <uxListRemove>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d10a      	bne.n	800de82 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800de6c:	69bb      	ldr	r3, [r7, #24]
 800de6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de70:	2201      	movs	r2, #1
 800de72:	fa02 f303 	lsl.w	r3, r2, r3
 800de76:	43da      	mvns	r2, r3
 800de78:	4b11      	ldr	r3, [pc, #68]	; (800dec0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	4013      	ands	r3, r2
 800de7e:	4a10      	ldr	r2, [pc, #64]	; (800dec0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800de80:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800de82:	69bb      	ldr	r3, [r7, #24]
 800de84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de86:	2201      	movs	r2, #1
 800de88:	409a      	lsls	r2, r3
 800de8a:	4b0d      	ldr	r3, [pc, #52]	; (800dec0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4313      	orrs	r3, r2
 800de90:	4a0b      	ldr	r2, [pc, #44]	; (800dec0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800de92:	6013      	str	r3, [r2, #0]
 800de94:	69bb      	ldr	r3, [r7, #24]
 800de96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de98:	4613      	mov	r3, r2
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	4413      	add	r3, r2
 800de9e:	009b      	lsls	r3, r3, #2
 800dea0:	4a06      	ldr	r2, [pc, #24]	; (800debc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800dea2:	441a      	add	r2, r3
 800dea4:	69bb      	ldr	r3, [r7, #24]
 800dea6:	3304      	adds	r3, #4
 800dea8:	4619      	mov	r1, r3
 800deaa:	4610      	mov	r0, r2
 800deac:	f7fe fa00 	bl	800c2b0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800deb0:	bf00      	nop
 800deb2:	3720      	adds	r7, #32
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	20001524 	.word	0x20001524
 800debc:	20001528 	.word	0x20001528
 800dec0:	2000162c 	.word	0x2000162c

0800dec4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dec4:	b480      	push	{r7}
 800dec6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dec8:	4b07      	ldr	r3, [pc, #28]	; (800dee8 <pvTaskIncrementMutexHeldCount+0x24>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d004      	beq.n	800deda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ded0:	4b05      	ldr	r3, [pc, #20]	; (800dee8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ded6:	3201      	adds	r2, #1
 800ded8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800deda:	4b03      	ldr	r3, [pc, #12]	; (800dee8 <pvTaskIncrementMutexHeldCount+0x24>)
 800dedc:	681b      	ldr	r3, [r3, #0]
	}
 800dede:	4618      	mov	r0, r3
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr
 800dee8:	20001524 	.word	0x20001524

0800deec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800def6:	4b29      	ldr	r3, [pc, #164]	; (800df9c <prvAddCurrentTaskToDelayedList+0xb0>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800defc:	4b28      	ldr	r3, [pc, #160]	; (800dfa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	3304      	adds	r3, #4
 800df02:	4618      	mov	r0, r3
 800df04:	f7fe fa31 	bl	800c36a <uxListRemove>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10b      	bne.n	800df26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800df0e:	4b24      	ldr	r3, [pc, #144]	; (800dfa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df14:	2201      	movs	r2, #1
 800df16:	fa02 f303 	lsl.w	r3, r2, r3
 800df1a:	43da      	mvns	r2, r3
 800df1c:	4b21      	ldr	r3, [pc, #132]	; (800dfa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4013      	ands	r3, r2
 800df22:	4a20      	ldr	r2, [pc, #128]	; (800dfa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800df24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df2c:	d10a      	bne.n	800df44 <prvAddCurrentTaskToDelayedList+0x58>
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d007      	beq.n	800df44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df34:	4b1a      	ldr	r3, [pc, #104]	; (800dfa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	3304      	adds	r3, #4
 800df3a:	4619      	mov	r1, r3
 800df3c:	481a      	ldr	r0, [pc, #104]	; (800dfa8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800df3e:	f7fe f9b7 	bl	800c2b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df42:	e026      	b.n	800df92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	4413      	add	r3, r2
 800df4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800df4c:	4b14      	ldr	r3, [pc, #80]	; (800dfa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df54:	68ba      	ldr	r2, [r7, #8]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d209      	bcs.n	800df70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df5c:	4b13      	ldr	r3, [pc, #76]	; (800dfac <prvAddCurrentTaskToDelayedList+0xc0>)
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	4b0f      	ldr	r3, [pc, #60]	; (800dfa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	3304      	adds	r3, #4
 800df66:	4619      	mov	r1, r3
 800df68:	4610      	mov	r0, r2
 800df6a:	f7fe f9c5 	bl	800c2f8 <vListInsert>
}
 800df6e:	e010      	b.n	800df92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df70:	4b0f      	ldr	r3, [pc, #60]	; (800dfb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	4b0a      	ldr	r3, [pc, #40]	; (800dfa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	3304      	adds	r3, #4
 800df7a:	4619      	mov	r1, r3
 800df7c:	4610      	mov	r0, r2
 800df7e:	f7fe f9bb 	bl	800c2f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800df82:	4b0c      	ldr	r3, [pc, #48]	; (800dfb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	68ba      	ldr	r2, [r7, #8]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d202      	bcs.n	800df92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800df8c:	4a09      	ldr	r2, [pc, #36]	; (800dfb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	6013      	str	r3, [r2, #0]
}
 800df92:	bf00      	nop
 800df94:	3710      	adds	r7, #16
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	20001628 	.word	0x20001628
 800dfa0:	20001524 	.word	0x20001524
 800dfa4:	2000162c 	.word	0x2000162c
 800dfa8:	20001610 	.word	0x20001610
 800dfac:	200015e0 	.word	0x200015e0
 800dfb0:	200015dc 	.word	0x200015dc
 800dfb4:	20001644 	.word	0x20001644

0800dfb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b085      	sub	sp, #20
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	60f8      	str	r0, [r7, #12]
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	3b04      	subs	r3, #4
 800dfc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dfd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	3b04      	subs	r3, #4
 800dfd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	f023 0201 	bic.w	r2, r3, #1
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	3b04      	subs	r3, #4
 800dfe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dfe8:	4a0c      	ldr	r2, [pc, #48]	; (800e01c <pxPortInitialiseStack+0x64>)
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	3b14      	subs	r3, #20
 800dff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dff4:	687a      	ldr	r2, [r7, #4]
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	3b04      	subs	r3, #4
 800dffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f06f 0202 	mvn.w	r2, #2
 800e006:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	3b20      	subs	r3, #32
 800e00c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e00e:	68fb      	ldr	r3, [r7, #12]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3714      	adds	r7, #20
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr
 800e01c:	0800e021 	.word	0x0800e021

0800e020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e020:	b480      	push	{r7}
 800e022:	b085      	sub	sp, #20
 800e024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e026:	2300      	movs	r3, #0
 800e028:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e02a:	4b12      	ldr	r3, [pc, #72]	; (800e074 <prvTaskExitError+0x54>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e032:	d00a      	beq.n	800e04a <prvTaskExitError+0x2a>
	__asm volatile
 800e034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e038:	f383 8811 	msr	BASEPRI, r3
 800e03c:	f3bf 8f6f 	isb	sy
 800e040:	f3bf 8f4f 	dsb	sy
 800e044:	60fb      	str	r3, [r7, #12]
}
 800e046:	bf00      	nop
 800e048:	e7fe      	b.n	800e048 <prvTaskExitError+0x28>
	__asm volatile
 800e04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04e:	f383 8811 	msr	BASEPRI, r3
 800e052:	f3bf 8f6f 	isb	sy
 800e056:	f3bf 8f4f 	dsb	sy
 800e05a:	60bb      	str	r3, [r7, #8]
}
 800e05c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e05e:	bf00      	nop
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d0fc      	beq.n	800e060 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e066:	bf00      	nop
 800e068:	bf00      	nop
 800e06a:	3714      	adds	r7, #20
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr
 800e074:	20000108 	.word	0x20000108
	...

0800e080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e080:	4b07      	ldr	r3, [pc, #28]	; (800e0a0 <pxCurrentTCBConst2>)
 800e082:	6819      	ldr	r1, [r3, #0]
 800e084:	6808      	ldr	r0, [r1, #0]
 800e086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e08a:	f380 8809 	msr	PSP, r0
 800e08e:	f3bf 8f6f 	isb	sy
 800e092:	f04f 0000 	mov.w	r0, #0
 800e096:	f380 8811 	msr	BASEPRI, r0
 800e09a:	4770      	bx	lr
 800e09c:	f3af 8000 	nop.w

0800e0a0 <pxCurrentTCBConst2>:
 800e0a0:	20001524 	.word	0x20001524
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e0a4:	bf00      	nop
 800e0a6:	bf00      	nop

0800e0a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e0a8:	4808      	ldr	r0, [pc, #32]	; (800e0cc <prvPortStartFirstTask+0x24>)
 800e0aa:	6800      	ldr	r0, [r0, #0]
 800e0ac:	6800      	ldr	r0, [r0, #0]
 800e0ae:	f380 8808 	msr	MSP, r0
 800e0b2:	f04f 0000 	mov.w	r0, #0
 800e0b6:	f380 8814 	msr	CONTROL, r0
 800e0ba:	b662      	cpsie	i
 800e0bc:	b661      	cpsie	f
 800e0be:	f3bf 8f4f 	dsb	sy
 800e0c2:	f3bf 8f6f 	isb	sy
 800e0c6:	df00      	svc	0
 800e0c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e0ca:	bf00      	nop
 800e0cc:	e000ed08 	.word	0xe000ed08

0800e0d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b086      	sub	sp, #24
 800e0d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e0d6:	4b46      	ldr	r3, [pc, #280]	; (800e1f0 <xPortStartScheduler+0x120>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4a46      	ldr	r2, [pc, #280]	; (800e1f4 <xPortStartScheduler+0x124>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d10a      	bne.n	800e0f6 <xPortStartScheduler+0x26>
	__asm volatile
 800e0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e4:	f383 8811 	msr	BASEPRI, r3
 800e0e8:	f3bf 8f6f 	isb	sy
 800e0ec:	f3bf 8f4f 	dsb	sy
 800e0f0:	613b      	str	r3, [r7, #16]
}
 800e0f2:	bf00      	nop
 800e0f4:	e7fe      	b.n	800e0f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e0f6:	4b3e      	ldr	r3, [pc, #248]	; (800e1f0 <xPortStartScheduler+0x120>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	4a3f      	ldr	r2, [pc, #252]	; (800e1f8 <xPortStartScheduler+0x128>)
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d10a      	bne.n	800e116 <xPortStartScheduler+0x46>
	__asm volatile
 800e100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e104:	f383 8811 	msr	BASEPRI, r3
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	60fb      	str	r3, [r7, #12]
}
 800e112:	bf00      	nop
 800e114:	e7fe      	b.n	800e114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e116:	4b39      	ldr	r3, [pc, #228]	; (800e1fc <xPortStartScheduler+0x12c>)
 800e118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	22ff      	movs	r2, #255	; 0xff
 800e126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e130:	78fb      	ldrb	r3, [r7, #3]
 800e132:	b2db      	uxtb	r3, r3
 800e134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	4b31      	ldr	r3, [pc, #196]	; (800e200 <xPortStartScheduler+0x130>)
 800e13c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e13e:	4b31      	ldr	r3, [pc, #196]	; (800e204 <xPortStartScheduler+0x134>)
 800e140:	2207      	movs	r2, #7
 800e142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e144:	e009      	b.n	800e15a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e146:	4b2f      	ldr	r3, [pc, #188]	; (800e204 <xPortStartScheduler+0x134>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	3b01      	subs	r3, #1
 800e14c:	4a2d      	ldr	r2, [pc, #180]	; (800e204 <xPortStartScheduler+0x134>)
 800e14e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e150:	78fb      	ldrb	r3, [r7, #3]
 800e152:	b2db      	uxtb	r3, r3
 800e154:	005b      	lsls	r3, r3, #1
 800e156:	b2db      	uxtb	r3, r3
 800e158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e15a:	78fb      	ldrb	r3, [r7, #3]
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e162:	2b80      	cmp	r3, #128	; 0x80
 800e164:	d0ef      	beq.n	800e146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e166:	4b27      	ldr	r3, [pc, #156]	; (800e204 <xPortStartScheduler+0x134>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f1c3 0307 	rsb	r3, r3, #7
 800e16e:	2b04      	cmp	r3, #4
 800e170:	d00a      	beq.n	800e188 <xPortStartScheduler+0xb8>
	__asm volatile
 800e172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e176:	f383 8811 	msr	BASEPRI, r3
 800e17a:	f3bf 8f6f 	isb	sy
 800e17e:	f3bf 8f4f 	dsb	sy
 800e182:	60bb      	str	r3, [r7, #8]
}
 800e184:	bf00      	nop
 800e186:	e7fe      	b.n	800e186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e188:	4b1e      	ldr	r3, [pc, #120]	; (800e204 <xPortStartScheduler+0x134>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	021b      	lsls	r3, r3, #8
 800e18e:	4a1d      	ldr	r2, [pc, #116]	; (800e204 <xPortStartScheduler+0x134>)
 800e190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e192:	4b1c      	ldr	r3, [pc, #112]	; (800e204 <xPortStartScheduler+0x134>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e19a:	4a1a      	ldr	r2, [pc, #104]	; (800e204 <xPortStartScheduler+0x134>)
 800e19c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	b2da      	uxtb	r2, r3
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e1a6:	4b18      	ldr	r3, [pc, #96]	; (800e208 <xPortStartScheduler+0x138>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4a17      	ldr	r2, [pc, #92]	; (800e208 <xPortStartScheduler+0x138>)
 800e1ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e1b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e1b2:	4b15      	ldr	r3, [pc, #84]	; (800e208 <xPortStartScheduler+0x138>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	4a14      	ldr	r2, [pc, #80]	; (800e208 <xPortStartScheduler+0x138>)
 800e1b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e1bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e1be:	f000 f8dd 	bl	800e37c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e1c2:	4b12      	ldr	r3, [pc, #72]	; (800e20c <xPortStartScheduler+0x13c>)
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e1c8:	f000 f8fc 	bl	800e3c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e1cc:	4b10      	ldr	r3, [pc, #64]	; (800e210 <xPortStartScheduler+0x140>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4a0f      	ldr	r2, [pc, #60]	; (800e210 <xPortStartScheduler+0x140>)
 800e1d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e1d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e1d8:	f7ff ff66 	bl	800e0a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e1dc:	f7ff fa8e 	bl	800d6fc <vTaskSwitchContext>
	prvTaskExitError();
 800e1e0:	f7ff ff1e 	bl	800e020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e1e4:	2300      	movs	r3, #0
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3718      	adds	r7, #24
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	e000ed00 	.word	0xe000ed00
 800e1f4:	410fc271 	.word	0x410fc271
 800e1f8:	410fc270 	.word	0x410fc270
 800e1fc:	e000e400 	.word	0xe000e400
 800e200:	20001650 	.word	0x20001650
 800e204:	20001654 	.word	0x20001654
 800e208:	e000ed20 	.word	0xe000ed20
 800e20c:	20000108 	.word	0x20000108
 800e210:	e000ef34 	.word	0xe000ef34

0800e214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
	__asm volatile
 800e21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21e:	f383 8811 	msr	BASEPRI, r3
 800e222:	f3bf 8f6f 	isb	sy
 800e226:	f3bf 8f4f 	dsb	sy
 800e22a:	607b      	str	r3, [r7, #4]
}
 800e22c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e22e:	4b0f      	ldr	r3, [pc, #60]	; (800e26c <vPortEnterCritical+0x58>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	3301      	adds	r3, #1
 800e234:	4a0d      	ldr	r2, [pc, #52]	; (800e26c <vPortEnterCritical+0x58>)
 800e236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e238:	4b0c      	ldr	r3, [pc, #48]	; (800e26c <vPortEnterCritical+0x58>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d10f      	bne.n	800e260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e240:	4b0b      	ldr	r3, [pc, #44]	; (800e270 <vPortEnterCritical+0x5c>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	b2db      	uxtb	r3, r3
 800e246:	2b00      	cmp	r3, #0
 800e248:	d00a      	beq.n	800e260 <vPortEnterCritical+0x4c>
	__asm volatile
 800e24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24e:	f383 8811 	msr	BASEPRI, r3
 800e252:	f3bf 8f6f 	isb	sy
 800e256:	f3bf 8f4f 	dsb	sy
 800e25a:	603b      	str	r3, [r7, #0]
}
 800e25c:	bf00      	nop
 800e25e:	e7fe      	b.n	800e25e <vPortEnterCritical+0x4a>
	}
}
 800e260:	bf00      	nop
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr
 800e26c:	20000108 	.word	0x20000108
 800e270:	e000ed04 	.word	0xe000ed04

0800e274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e274:	b480      	push	{r7}
 800e276:	b083      	sub	sp, #12
 800e278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e27a:	4b12      	ldr	r3, [pc, #72]	; (800e2c4 <vPortExitCritical+0x50>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d10a      	bne.n	800e298 <vPortExitCritical+0x24>
	__asm volatile
 800e282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e286:	f383 8811 	msr	BASEPRI, r3
 800e28a:	f3bf 8f6f 	isb	sy
 800e28e:	f3bf 8f4f 	dsb	sy
 800e292:	607b      	str	r3, [r7, #4]
}
 800e294:	bf00      	nop
 800e296:	e7fe      	b.n	800e296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e298:	4b0a      	ldr	r3, [pc, #40]	; (800e2c4 <vPortExitCritical+0x50>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	3b01      	subs	r3, #1
 800e29e:	4a09      	ldr	r2, [pc, #36]	; (800e2c4 <vPortExitCritical+0x50>)
 800e2a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e2a2:	4b08      	ldr	r3, [pc, #32]	; (800e2c4 <vPortExitCritical+0x50>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d105      	bne.n	800e2b6 <vPortExitCritical+0x42>
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	f383 8811 	msr	BASEPRI, r3
}
 800e2b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e2b6:	bf00      	nop
 800e2b8:	370c      	adds	r7, #12
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr
 800e2c2:	bf00      	nop
 800e2c4:	20000108 	.word	0x20000108
	...

0800e2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e2d0:	f3ef 8009 	mrs	r0, PSP
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	4b15      	ldr	r3, [pc, #84]	; (800e330 <pxCurrentTCBConst>)
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	f01e 0f10 	tst.w	lr, #16
 800e2e0:	bf08      	it	eq
 800e2e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e2e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ea:	6010      	str	r0, [r2, #0]
 800e2ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e2f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e2f4:	f380 8811 	msr	BASEPRI, r0
 800e2f8:	f3bf 8f4f 	dsb	sy
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f7ff f9fc 	bl	800d6fc <vTaskSwitchContext>
 800e304:	f04f 0000 	mov.w	r0, #0
 800e308:	f380 8811 	msr	BASEPRI, r0
 800e30c:	bc09      	pop	{r0, r3}
 800e30e:	6819      	ldr	r1, [r3, #0]
 800e310:	6808      	ldr	r0, [r1, #0]
 800e312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e316:	f01e 0f10 	tst.w	lr, #16
 800e31a:	bf08      	it	eq
 800e31c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e320:	f380 8809 	msr	PSP, r0
 800e324:	f3bf 8f6f 	isb	sy
 800e328:	4770      	bx	lr
 800e32a:	bf00      	nop
 800e32c:	f3af 8000 	nop.w

0800e330 <pxCurrentTCBConst>:
 800e330:	20001524 	.word	0x20001524
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e334:	bf00      	nop
 800e336:	bf00      	nop

0800e338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
	__asm volatile
 800e33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	607b      	str	r3, [r7, #4]
}
 800e350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e352:	f7ff f91b 	bl	800d58c <xTaskIncrementTick>
 800e356:	4603      	mov	r3, r0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d003      	beq.n	800e364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e35c:	4b06      	ldr	r3, [pc, #24]	; (800e378 <xPortSysTickHandler+0x40>)
 800e35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e362:	601a      	str	r2, [r3, #0]
 800e364:	2300      	movs	r3, #0
 800e366:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	f383 8811 	msr	BASEPRI, r3
}
 800e36e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e370:	bf00      	nop
 800e372:	3708      	adds	r7, #8
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	e000ed04 	.word	0xe000ed04

0800e37c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e37c:	b480      	push	{r7}
 800e37e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e380:	4b0b      	ldr	r3, [pc, #44]	; (800e3b0 <vPortSetupTimerInterrupt+0x34>)
 800e382:	2200      	movs	r2, #0
 800e384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e386:	4b0b      	ldr	r3, [pc, #44]	; (800e3b4 <vPortSetupTimerInterrupt+0x38>)
 800e388:	2200      	movs	r2, #0
 800e38a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e38c:	4b0a      	ldr	r3, [pc, #40]	; (800e3b8 <vPortSetupTimerInterrupt+0x3c>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a0a      	ldr	r2, [pc, #40]	; (800e3bc <vPortSetupTimerInterrupt+0x40>)
 800e392:	fba2 2303 	umull	r2, r3, r2, r3
 800e396:	099b      	lsrs	r3, r3, #6
 800e398:	4a09      	ldr	r2, [pc, #36]	; (800e3c0 <vPortSetupTimerInterrupt+0x44>)
 800e39a:	3b01      	subs	r3, #1
 800e39c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e39e:	4b04      	ldr	r3, [pc, #16]	; (800e3b0 <vPortSetupTimerInterrupt+0x34>)
 800e3a0:	2207      	movs	r2, #7
 800e3a2:	601a      	str	r2, [r3, #0]
}
 800e3a4:	bf00      	nop
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop
 800e3b0:	e000e010 	.word	0xe000e010
 800e3b4:	e000e018 	.word	0xe000e018
 800e3b8:	20000000 	.word	0x20000000
 800e3bc:	10624dd3 	.word	0x10624dd3
 800e3c0:	e000e014 	.word	0xe000e014

0800e3c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e3c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e3d4 <vPortEnableVFP+0x10>
 800e3c8:	6801      	ldr	r1, [r0, #0]
 800e3ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e3ce:	6001      	str	r1, [r0, #0]
 800e3d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e3d2:	bf00      	nop
 800e3d4:	e000ed88 	.word	0xe000ed88

0800e3d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e3d8:	b480      	push	{r7}
 800e3da:	b085      	sub	sp, #20
 800e3dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e3de:	f3ef 8305 	mrs	r3, IPSR
 800e3e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2b0f      	cmp	r3, #15
 800e3e8:	d914      	bls.n	800e414 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e3ea:	4a17      	ldr	r2, [pc, #92]	; (800e448 <vPortValidateInterruptPriority+0x70>)
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e3f4:	4b15      	ldr	r3, [pc, #84]	; (800e44c <vPortValidateInterruptPriority+0x74>)
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	7afa      	ldrb	r2, [r7, #11]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d20a      	bcs.n	800e414 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e402:	f383 8811 	msr	BASEPRI, r3
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	607b      	str	r3, [r7, #4]
}
 800e410:	bf00      	nop
 800e412:	e7fe      	b.n	800e412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e414:	4b0e      	ldr	r3, [pc, #56]	; (800e450 <vPortValidateInterruptPriority+0x78>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e41c:	4b0d      	ldr	r3, [pc, #52]	; (800e454 <vPortValidateInterruptPriority+0x7c>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	429a      	cmp	r2, r3
 800e422:	d90a      	bls.n	800e43a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e428:	f383 8811 	msr	BASEPRI, r3
 800e42c:	f3bf 8f6f 	isb	sy
 800e430:	f3bf 8f4f 	dsb	sy
 800e434:	603b      	str	r3, [r7, #0]
}
 800e436:	bf00      	nop
 800e438:	e7fe      	b.n	800e438 <vPortValidateInterruptPriority+0x60>
	}
 800e43a:	bf00      	nop
 800e43c:	3714      	adds	r7, #20
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr
 800e446:	bf00      	nop
 800e448:	e000e3f0 	.word	0xe000e3f0
 800e44c:	20001650 	.word	0x20001650
 800e450:	e000ed0c 	.word	0xe000ed0c
 800e454:	20001654 	.word	0x20001654

0800e458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b08a      	sub	sp, #40	; 0x28
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e460:	2300      	movs	r3, #0
 800e462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e464:	f7fe ffe8 	bl	800d438 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e468:	4b5b      	ldr	r3, [pc, #364]	; (800e5d8 <pvPortMalloc+0x180>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d101      	bne.n	800e474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e470:	f000 f920 	bl	800e6b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e474:	4b59      	ldr	r3, [pc, #356]	; (800e5dc <pvPortMalloc+0x184>)
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4013      	ands	r3, r2
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f040 8093 	bne.w	800e5a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d01d      	beq.n	800e4c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e488:	2208      	movs	r2, #8
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	4413      	add	r3, r2
 800e48e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f003 0307 	and.w	r3, r3, #7
 800e496:	2b00      	cmp	r3, #0
 800e498:	d014      	beq.n	800e4c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f023 0307 	bic.w	r3, r3, #7
 800e4a0:	3308      	adds	r3, #8
 800e4a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f003 0307 	and.w	r3, r3, #7
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00a      	beq.n	800e4c4 <pvPortMalloc+0x6c>
	__asm volatile
 800e4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b2:	f383 8811 	msr	BASEPRI, r3
 800e4b6:	f3bf 8f6f 	isb	sy
 800e4ba:	f3bf 8f4f 	dsb	sy
 800e4be:	617b      	str	r3, [r7, #20]
}
 800e4c0:	bf00      	nop
 800e4c2:	e7fe      	b.n	800e4c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d06e      	beq.n	800e5a8 <pvPortMalloc+0x150>
 800e4ca:	4b45      	ldr	r3, [pc, #276]	; (800e5e0 <pvPortMalloc+0x188>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d869      	bhi.n	800e5a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e4d4:	4b43      	ldr	r3, [pc, #268]	; (800e5e4 <pvPortMalloc+0x18c>)
 800e4d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e4d8:	4b42      	ldr	r3, [pc, #264]	; (800e5e4 <pvPortMalloc+0x18c>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e4de:	e004      	b.n	800e4ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d903      	bls.n	800e4fc <pvPortMalloc+0xa4>
 800e4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1f1      	bne.n	800e4e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e4fc:	4b36      	ldr	r3, [pc, #216]	; (800e5d8 <pvPortMalloc+0x180>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e502:	429a      	cmp	r2, r3
 800e504:	d050      	beq.n	800e5a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e506:	6a3b      	ldr	r3, [r7, #32]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2208      	movs	r2, #8
 800e50c:	4413      	add	r3, r2
 800e50e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	6a3b      	ldr	r3, [r7, #32]
 800e516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51a:	685a      	ldr	r2, [r3, #4]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	1ad2      	subs	r2, r2, r3
 800e520:	2308      	movs	r3, #8
 800e522:	005b      	lsls	r3, r3, #1
 800e524:	429a      	cmp	r2, r3
 800e526:	d91f      	bls.n	800e568 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	4413      	add	r3, r2
 800e52e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	f003 0307 	and.w	r3, r3, #7
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00a      	beq.n	800e550 <pvPortMalloc+0xf8>
	__asm volatile
 800e53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53e:	f383 8811 	msr	BASEPRI, r3
 800e542:	f3bf 8f6f 	isb	sy
 800e546:	f3bf 8f4f 	dsb	sy
 800e54a:	613b      	str	r3, [r7, #16]
}
 800e54c:	bf00      	nop
 800e54e:	e7fe      	b.n	800e54e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e552:	685a      	ldr	r2, [r3, #4]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	1ad2      	subs	r2, r2, r3
 800e558:	69bb      	ldr	r3, [r7, #24]
 800e55a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e562:	69b8      	ldr	r0, [r7, #24]
 800e564:	f000 f908 	bl	800e778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e568:	4b1d      	ldr	r3, [pc, #116]	; (800e5e0 <pvPortMalloc+0x188>)
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56e:	685b      	ldr	r3, [r3, #4]
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	4a1b      	ldr	r2, [pc, #108]	; (800e5e0 <pvPortMalloc+0x188>)
 800e574:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e576:	4b1a      	ldr	r3, [pc, #104]	; (800e5e0 <pvPortMalloc+0x188>)
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	4b1b      	ldr	r3, [pc, #108]	; (800e5e8 <pvPortMalloc+0x190>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d203      	bcs.n	800e58a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e582:	4b17      	ldr	r3, [pc, #92]	; (800e5e0 <pvPortMalloc+0x188>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	4a18      	ldr	r2, [pc, #96]	; (800e5e8 <pvPortMalloc+0x190>)
 800e588:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58c:	685a      	ldr	r2, [r3, #4]
 800e58e:	4b13      	ldr	r3, [pc, #76]	; (800e5dc <pvPortMalloc+0x184>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	431a      	orrs	r2, r3
 800e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e596:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59a:	2200      	movs	r2, #0
 800e59c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e59e:	4b13      	ldr	r3, [pc, #76]	; (800e5ec <pvPortMalloc+0x194>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	4a11      	ldr	r2, [pc, #68]	; (800e5ec <pvPortMalloc+0x194>)
 800e5a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e5a8:	f7fe ff54 	bl	800d454 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	f003 0307 	and.w	r3, r3, #7
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d00a      	beq.n	800e5cc <pvPortMalloc+0x174>
	__asm volatile
 800e5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ba:	f383 8811 	msr	BASEPRI, r3
 800e5be:	f3bf 8f6f 	isb	sy
 800e5c2:	f3bf 8f4f 	dsb	sy
 800e5c6:	60fb      	str	r3, [r7, #12]
}
 800e5c8:	bf00      	nop
 800e5ca:	e7fe      	b.n	800e5ca <pvPortMalloc+0x172>
	return pvReturn;
 800e5cc:	69fb      	ldr	r3, [r7, #28]
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3728      	adds	r7, #40	; 0x28
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	bf00      	nop
 800e5d8:	20009660 	.word	0x20009660
 800e5dc:	20009674 	.word	0x20009674
 800e5e0:	20009664 	.word	0x20009664
 800e5e4:	20009658 	.word	0x20009658
 800e5e8:	20009668 	.word	0x20009668
 800e5ec:	2000966c 	.word	0x2000966c

0800e5f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b086      	sub	sp, #24
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d04d      	beq.n	800e69e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e602:	2308      	movs	r3, #8
 800e604:	425b      	negs	r3, r3
 800e606:	697a      	ldr	r2, [r7, #20]
 800e608:	4413      	add	r3, r2
 800e60a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	685a      	ldr	r2, [r3, #4]
 800e614:	4b24      	ldr	r3, [pc, #144]	; (800e6a8 <vPortFree+0xb8>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4013      	ands	r3, r2
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d10a      	bne.n	800e634 <vPortFree+0x44>
	__asm volatile
 800e61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e622:	f383 8811 	msr	BASEPRI, r3
 800e626:	f3bf 8f6f 	isb	sy
 800e62a:	f3bf 8f4f 	dsb	sy
 800e62e:	60fb      	str	r3, [r7, #12]
}
 800e630:	bf00      	nop
 800e632:	e7fe      	b.n	800e632 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00a      	beq.n	800e652 <vPortFree+0x62>
	__asm volatile
 800e63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e640:	f383 8811 	msr	BASEPRI, r3
 800e644:	f3bf 8f6f 	isb	sy
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	60bb      	str	r3, [r7, #8]
}
 800e64e:	bf00      	nop
 800e650:	e7fe      	b.n	800e650 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	685a      	ldr	r2, [r3, #4]
 800e656:	4b14      	ldr	r3, [pc, #80]	; (800e6a8 <vPortFree+0xb8>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4013      	ands	r3, r2
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d01e      	beq.n	800e69e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d11a      	bne.n	800e69e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	685a      	ldr	r2, [r3, #4]
 800e66c:	4b0e      	ldr	r3, [pc, #56]	; (800e6a8 <vPortFree+0xb8>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	43db      	mvns	r3, r3
 800e672:	401a      	ands	r2, r3
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e678:	f7fe fede 	bl	800d438 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	685a      	ldr	r2, [r3, #4]
 800e680:	4b0a      	ldr	r3, [pc, #40]	; (800e6ac <vPortFree+0xbc>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4413      	add	r3, r2
 800e686:	4a09      	ldr	r2, [pc, #36]	; (800e6ac <vPortFree+0xbc>)
 800e688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e68a:	6938      	ldr	r0, [r7, #16]
 800e68c:	f000 f874 	bl	800e778 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e690:	4b07      	ldr	r3, [pc, #28]	; (800e6b0 <vPortFree+0xc0>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	3301      	adds	r3, #1
 800e696:	4a06      	ldr	r2, [pc, #24]	; (800e6b0 <vPortFree+0xc0>)
 800e698:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e69a:	f7fe fedb 	bl	800d454 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e69e:	bf00      	nop
 800e6a0:	3718      	adds	r7, #24
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	20009674 	.word	0x20009674
 800e6ac:	20009664 	.word	0x20009664
 800e6b0:	20009670 	.word	0x20009670

0800e6b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b085      	sub	sp, #20
 800e6b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e6ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e6c0:	4b27      	ldr	r3, [pc, #156]	; (800e760 <prvHeapInit+0xac>)
 800e6c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f003 0307 	and.w	r3, r3, #7
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d00c      	beq.n	800e6e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	3307      	adds	r3, #7
 800e6d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f023 0307 	bic.w	r3, r3, #7
 800e6da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e6dc:	68ba      	ldr	r2, [r7, #8]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	1ad3      	subs	r3, r2, r3
 800e6e2:	4a1f      	ldr	r2, [pc, #124]	; (800e760 <prvHeapInit+0xac>)
 800e6e4:	4413      	add	r3, r2
 800e6e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e6ec:	4a1d      	ldr	r2, [pc, #116]	; (800e764 <prvHeapInit+0xb0>)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e6f2:	4b1c      	ldr	r3, [pc, #112]	; (800e764 <prvHeapInit+0xb0>)
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	4413      	add	r3, r2
 800e6fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e700:	2208      	movs	r2, #8
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	1a9b      	subs	r3, r3, r2
 800e706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f023 0307 	bic.w	r3, r3, #7
 800e70e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	4a15      	ldr	r2, [pc, #84]	; (800e768 <prvHeapInit+0xb4>)
 800e714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e716:	4b14      	ldr	r3, [pc, #80]	; (800e768 <prvHeapInit+0xb4>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2200      	movs	r2, #0
 800e71c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e71e:	4b12      	ldr	r3, [pc, #72]	; (800e768 <prvHeapInit+0xb4>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	2200      	movs	r2, #0
 800e724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	68fa      	ldr	r2, [r7, #12]
 800e72e:	1ad2      	subs	r2, r2, r3
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e734:	4b0c      	ldr	r3, [pc, #48]	; (800e768 <prvHeapInit+0xb4>)
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	4a0a      	ldr	r2, [pc, #40]	; (800e76c <prvHeapInit+0xb8>)
 800e742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	4a09      	ldr	r2, [pc, #36]	; (800e770 <prvHeapInit+0xbc>)
 800e74a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e74c:	4b09      	ldr	r3, [pc, #36]	; (800e774 <prvHeapInit+0xc0>)
 800e74e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e752:	601a      	str	r2, [r3, #0]
}
 800e754:	bf00      	nop
 800e756:	3714      	adds	r7, #20
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr
 800e760:	20001658 	.word	0x20001658
 800e764:	20009658 	.word	0x20009658
 800e768:	20009660 	.word	0x20009660
 800e76c:	20009668 	.word	0x20009668
 800e770:	20009664 	.word	0x20009664
 800e774:	20009674 	.word	0x20009674

0800e778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e780:	4b28      	ldr	r3, [pc, #160]	; (800e824 <prvInsertBlockIntoFreeList+0xac>)
 800e782:	60fb      	str	r3, [r7, #12]
 800e784:	e002      	b.n	800e78c <prvInsertBlockIntoFreeList+0x14>
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	60fb      	str	r3, [r7, #12]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	429a      	cmp	r2, r3
 800e794:	d8f7      	bhi.n	800e786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	68ba      	ldr	r2, [r7, #8]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d108      	bne.n	800e7ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	685a      	ldr	r2, [r3, #4]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	441a      	add	r2, r3
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	68ba      	ldr	r2, [r7, #8]
 800e7c4:	441a      	add	r2, r3
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d118      	bne.n	800e800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	4b15      	ldr	r3, [pc, #84]	; (800e828 <prvInsertBlockIntoFreeList+0xb0>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d00d      	beq.n	800e7f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	685a      	ldr	r2, [r3, #4]
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	441a      	add	r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	601a      	str	r2, [r3, #0]
 800e7f4:	e008      	b.n	800e808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e7f6:	4b0c      	ldr	r3, [pc, #48]	; (800e828 <prvInsertBlockIntoFreeList+0xb0>)
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	601a      	str	r2, [r3, #0]
 800e7fe:	e003      	b.n	800e808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d002      	beq.n	800e816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e816:	bf00      	nop
 800e818:	3714      	adds	r7, #20
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr
 800e822:	bf00      	nop
 800e824:	20009658 	.word	0x20009658
 800e828:	20009660 	.word	0x20009660

0800e82c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e830:	2200      	movs	r2, #0
 800e832:	4912      	ldr	r1, [pc, #72]	; (800e87c <MX_USB_DEVICE_Init+0x50>)
 800e834:	4812      	ldr	r0, [pc, #72]	; (800e880 <MX_USB_DEVICE_Init+0x54>)
 800e836:	f7f9 fc89 	bl	800814c <USBD_Init>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d001      	beq.n	800e844 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e840:	f7f2 f82a 	bl	8000898 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800e844:	490f      	ldr	r1, [pc, #60]	; (800e884 <MX_USB_DEVICE_Init+0x58>)
 800e846:	480e      	ldr	r0, [pc, #56]	; (800e880 <MX_USB_DEVICE_Init+0x54>)
 800e848:	f7f9 fce4 	bl	8008214 <USBD_RegisterClass>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d001      	beq.n	800e856 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e852:	f7f2 f821 	bl	8000898 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800e856:	490c      	ldr	r1, [pc, #48]	; (800e888 <MX_USB_DEVICE_Init+0x5c>)
 800e858:	4809      	ldr	r0, [pc, #36]	; (800e880 <MX_USB_DEVICE_Init+0x54>)
 800e85a:	f7f7 ff7f 	bl	800675c <USBD_MSC_RegisterStorage>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	d001      	beq.n	800e868 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e864:	f7f2 f818 	bl	8000898 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e868:	4805      	ldr	r0, [pc, #20]	; (800e880 <MX_USB_DEVICE_Init+0x54>)
 800e86a:	f7f9 fcfa 	bl	8008262 <USBD_Start>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d001      	beq.n	800e878 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e874:	f7f2 f810 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e878:	bf00      	nop
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	2000010c 	.word	0x2000010c
 800e880:	20009678 	.word	0x20009678
 800e884:	20000020 	.word	0x20000020
 800e888:	2000015c 	.word	0x2000015c

0800e88c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
 800e892:	4603      	mov	r3, r0
 800e894:	6039      	str	r1, [r7, #0]
 800e896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	2212      	movs	r2, #18
 800e89c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e89e:	4b03      	ldr	r3, [pc, #12]	; (800e8ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr
 800e8ac:	20000128 	.word	0x20000128

0800e8b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	6039      	str	r1, [r7, #0]
 800e8ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	2204      	movs	r2, #4
 800e8c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e8c2:	4b03      	ldr	r3, [pc, #12]	; (800e8d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	370c      	adds	r7, #12
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr
 800e8d0:	2000013c 	.word	0x2000013c

0800e8d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b082      	sub	sp, #8
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	4603      	mov	r3, r0
 800e8dc:	6039      	str	r1, [r7, #0]
 800e8de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e8e0:	79fb      	ldrb	r3, [r7, #7]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d105      	bne.n	800e8f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e8e6:	683a      	ldr	r2, [r7, #0]
 800e8e8:	4907      	ldr	r1, [pc, #28]	; (800e908 <USBD_FS_ProductStrDescriptor+0x34>)
 800e8ea:	4808      	ldr	r0, [pc, #32]	; (800e90c <USBD_FS_ProductStrDescriptor+0x38>)
 800e8ec:	f7fa fceb 	bl	80092c6 <USBD_GetString>
 800e8f0:	e004      	b.n	800e8fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e8f2:	683a      	ldr	r2, [r7, #0]
 800e8f4:	4904      	ldr	r1, [pc, #16]	; (800e908 <USBD_FS_ProductStrDescriptor+0x34>)
 800e8f6:	4805      	ldr	r0, [pc, #20]	; (800e90c <USBD_FS_ProductStrDescriptor+0x38>)
 800e8f8:	f7fa fce5 	bl	80092c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e8fc:	4b02      	ldr	r3, [pc, #8]	; (800e908 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3708      	adds	r7, #8
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	20009948 	.word	0x20009948
 800e90c:	0800f7e4 	.word	0x0800f7e4

0800e910 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	4603      	mov	r3, r0
 800e918:	6039      	str	r1, [r7, #0]
 800e91a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e91c:	683a      	ldr	r2, [r7, #0]
 800e91e:	4904      	ldr	r1, [pc, #16]	; (800e930 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e920:	4804      	ldr	r0, [pc, #16]	; (800e934 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e922:	f7fa fcd0 	bl	80092c6 <USBD_GetString>
  return USBD_StrDesc;
 800e926:	4b02      	ldr	r3, [pc, #8]	; (800e930 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	20009948 	.word	0x20009948
 800e934:	0800f7f8 	.word	0x0800f7f8

0800e938 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	4603      	mov	r3, r0
 800e940:	6039      	str	r1, [r7, #0]
 800e942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	221a      	movs	r2, #26
 800e948:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e94a:	f000 f843 	bl	800e9d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e94e:	4b02      	ldr	r3, [pc, #8]	; (800e958 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e950:	4618      	mov	r0, r3
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}
 800e958:	20000140 	.word	0x20000140

0800e95c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b082      	sub	sp, #8
 800e960:	af00      	add	r7, sp, #0
 800e962:	4603      	mov	r3, r0
 800e964:	6039      	str	r1, [r7, #0]
 800e966:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e968:	79fb      	ldrb	r3, [r7, #7]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d105      	bne.n	800e97a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e96e:	683a      	ldr	r2, [r7, #0]
 800e970:	4907      	ldr	r1, [pc, #28]	; (800e990 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e972:	4808      	ldr	r0, [pc, #32]	; (800e994 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e974:	f7fa fca7 	bl	80092c6 <USBD_GetString>
 800e978:	e004      	b.n	800e984 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e97a:	683a      	ldr	r2, [r7, #0]
 800e97c:	4904      	ldr	r1, [pc, #16]	; (800e990 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e97e:	4805      	ldr	r0, [pc, #20]	; (800e994 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e980:	f7fa fca1 	bl	80092c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e984:	4b02      	ldr	r3, [pc, #8]	; (800e990 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e986:	4618      	mov	r0, r3
 800e988:	3708      	adds	r7, #8
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	20009948 	.word	0x20009948
 800e994:	0800f80c 	.word	0x0800f80c

0800e998 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	4603      	mov	r3, r0
 800e9a0:	6039      	str	r1, [r7, #0]
 800e9a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e9a4:	79fb      	ldrb	r3, [r7, #7]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d105      	bne.n	800e9b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e9aa:	683a      	ldr	r2, [r7, #0]
 800e9ac:	4907      	ldr	r1, [pc, #28]	; (800e9cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e9ae:	4808      	ldr	r0, [pc, #32]	; (800e9d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e9b0:	f7fa fc89 	bl	80092c6 <USBD_GetString>
 800e9b4:	e004      	b.n	800e9c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e9b6:	683a      	ldr	r2, [r7, #0]
 800e9b8:	4904      	ldr	r1, [pc, #16]	; (800e9cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e9ba:	4805      	ldr	r0, [pc, #20]	; (800e9d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e9bc:	f7fa fc83 	bl	80092c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e9c0:	4b02      	ldr	r3, [pc, #8]	; (800e9cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	20009948 	.word	0x20009948
 800e9d0:	0800f818 	.word	0x0800f818

0800e9d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e9da:	4b0f      	ldr	r3, [pc, #60]	; (800ea18 <Get_SerialNum+0x44>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e9e0:	4b0e      	ldr	r3, [pc, #56]	; (800ea1c <Get_SerialNum+0x48>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e9e6:	4b0e      	ldr	r3, [pc, #56]	; (800ea20 <Get_SerialNum+0x4c>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d009      	beq.n	800ea0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e9fa:	2208      	movs	r2, #8
 800e9fc:	4909      	ldr	r1, [pc, #36]	; (800ea24 <Get_SerialNum+0x50>)
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f000 f814 	bl	800ea2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ea04:	2204      	movs	r2, #4
 800ea06:	4908      	ldr	r1, [pc, #32]	; (800ea28 <Get_SerialNum+0x54>)
 800ea08:	68b8      	ldr	r0, [r7, #8]
 800ea0a:	f000 f80f 	bl	800ea2c <IntToUnicode>
  }
}
 800ea0e:	bf00      	nop
 800ea10:	3710      	adds	r7, #16
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	1fff7590 	.word	0x1fff7590
 800ea1c:	1fff7594 	.word	0x1fff7594
 800ea20:	1fff7598 	.word	0x1fff7598
 800ea24:	20000142 	.word	0x20000142
 800ea28:	20000152 	.word	0x20000152

0800ea2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b087      	sub	sp, #28
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	4613      	mov	r3, r2
 800ea38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ea3e:	2300      	movs	r3, #0
 800ea40:	75fb      	strb	r3, [r7, #23]
 800ea42:	e027      	b.n	800ea94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	0f1b      	lsrs	r3, r3, #28
 800ea48:	2b09      	cmp	r3, #9
 800ea4a:	d80b      	bhi.n	800ea64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	0f1b      	lsrs	r3, r3, #28
 800ea50:	b2da      	uxtb	r2, r3
 800ea52:	7dfb      	ldrb	r3, [r7, #23]
 800ea54:	005b      	lsls	r3, r3, #1
 800ea56:	4619      	mov	r1, r3
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	440b      	add	r3, r1
 800ea5c:	3230      	adds	r2, #48	; 0x30
 800ea5e:	b2d2      	uxtb	r2, r2
 800ea60:	701a      	strb	r2, [r3, #0]
 800ea62:	e00a      	b.n	800ea7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	0f1b      	lsrs	r3, r3, #28
 800ea68:	b2da      	uxtb	r2, r3
 800ea6a:	7dfb      	ldrb	r3, [r7, #23]
 800ea6c:	005b      	lsls	r3, r3, #1
 800ea6e:	4619      	mov	r1, r3
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	440b      	add	r3, r1
 800ea74:	3237      	adds	r2, #55	; 0x37
 800ea76:	b2d2      	uxtb	r2, r2
 800ea78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	011b      	lsls	r3, r3, #4
 800ea7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ea80:	7dfb      	ldrb	r3, [r7, #23]
 800ea82:	005b      	lsls	r3, r3, #1
 800ea84:	3301      	adds	r3, #1
 800ea86:	68ba      	ldr	r2, [r7, #8]
 800ea88:	4413      	add	r3, r2
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ea8e:	7dfb      	ldrb	r3, [r7, #23]
 800ea90:	3301      	adds	r3, #1
 800ea92:	75fb      	strb	r3, [r7, #23]
 800ea94:	7dfa      	ldrb	r2, [r7, #23]
 800ea96:	79fb      	ldrb	r3, [r7, #7]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d3d3      	bcc.n	800ea44 <IntToUnicode+0x18>
  }
}
 800ea9c:	bf00      	nop
 800ea9e:	bf00      	nop
 800eaa0:	371c      	adds	r7, #28
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr
	...

0800eaac <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	4603      	mov	r3, r0
 800eab4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */

  if (BSP_QSPI_GetStatus() != QSPI_OK)
 800eab6:	f7f2 f885 	bl	8000bc4 <BSP_QSPI_GetStatus>
 800eaba:	4603      	mov	r3, r0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d009      	beq.n	800ead4 <STORAGE_Init_FS+0x28>
  {
    HAL_QSPI_Init(&hqspi);
 800eac0:	4807      	ldr	r0, [pc, #28]	; (800eae0 <STORAGE_Init_FS+0x34>)
 800eac2:	f7f4 f969 	bl	8002d98 <HAL_QSPI_Init>

    if (BSP_QSPI_Init() != QSPI_OK)
 800eac6:	f7f1 ff57 	bl	8000978 <BSP_QSPI_Init>
 800eaca:	4603      	mov	r3, r0
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d001      	beq.n	800ead4 <STORAGE_Init_FS+0x28>
    {
      return (USBD_FAIL);
 800ead0:	2303      	movs	r3, #3
 800ead2:	e000      	b.n	800ead6 <STORAGE_Init_FS+0x2a>
    }
  }

  return (USBD_OK);
 800ead4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3708      	adds	r7, #8
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	2000145c 	.word	0x2000145c

0800eae4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b08a      	sub	sp, #40	; 0x28
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	4603      	mov	r3, r0
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	607a      	str	r2, [r7, #4]
 800eaf0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  QSPI_Info info;

  BSP_QSPI_GetInfo(&info);
 800eaf2:	f107 0314 	add.w	r3, r7, #20
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7f2 f8b2 	bl	8000c60 <BSP_QSPI_GetInfo>
  *block_num = (info.FlashSize)/STORAGE_BLK_SIZ_USER;
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	0b1a      	lsrs	r2, r3, #12
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ_USER;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800eb0a:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 800eb0c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3728      	adds	r7, #40	; 0x28
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b084      	sub	sp, #16
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */

  uint8_t status = QSPI_ERROR;
 800eb20:	2301      	movs	r3, #1
 800eb22:	73bb      	strb	r3, [r7, #14]
  int8_t ret = USBD_FAIL;
 800eb24:	2303      	movs	r3, #3
 800eb26:	73fb      	strb	r3, [r7, #15]

  status = BSP_QSPI_GetStatus();
 800eb28:	f7f2 f84c 	bl	8000bc4 <BSP_QSPI_GetStatus>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	73bb      	strb	r3, [r7, #14]

  switch(status)
 800eb30:	7bbb      	ldrb	r3, [r7, #14]
 800eb32:	2b02      	cmp	r3, #2
 800eb34:	d009      	beq.n	800eb4a <STORAGE_IsReady_FS+0x34>
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	dc0d      	bgt.n	800eb56 <STORAGE_IsReady_FS+0x40>
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d002      	beq.n	800eb44 <STORAGE_IsReady_FS+0x2e>
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d006      	beq.n	800eb50 <STORAGE_IsReady_FS+0x3a>
 800eb42:	e008      	b.n	800eb56 <STORAGE_IsReady_FS+0x40>
  {
  case QSPI_OK:
    ret = USBD_OK;
 800eb44:	2300      	movs	r3, #0
 800eb46:	73fb      	strb	r3, [r7, #15]
    break;
 800eb48:	e008      	b.n	800eb5c <STORAGE_IsReady_FS+0x46>
  case QSPI_BUSY:
    ret = USBD_BUSY;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	73fb      	strb	r3, [r7, #15]
    break;
 800eb4e:	e005      	b.n	800eb5c <STORAGE_IsReady_FS+0x46>
  case QSPI_ERROR:
    ret = USBD_FAIL;
 800eb50:	2303      	movs	r3, #3
 800eb52:	73fb      	strb	r3, [r7, #15]
    break;
 800eb54:	e002      	b.n	800eb5c <STORAGE_IsReady_FS+0x46>
  default:
    ret = USBD_FAIL;
 800eb56:	2303      	movs	r3, #3
 800eb58:	73fb      	strb	r3, [r7, #15]
    break;
 800eb5a:	bf00      	nop
  }

  return ret;
 800eb5c:	f997 300f 	ldrsb.w	r3, [r7, #15]

  /* USER CODE END 4 */
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3710      	adds	r7, #16
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	4603      	mov	r3, r0
 800eb70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800eb72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	370c      	adds	r7, #12
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr

0800eb80 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b088      	sub	sp, #32
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	60b9      	str	r1, [r7, #8]
 800eb88:	607a      	str	r2, [r7, #4]
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	73fb      	strb	r3, [r7, #15]
 800eb90:	4613      	mov	r3, r2
 800eb92:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  uint32_t erasedSector = 1;
 800eb94:	2301      	movs	r3, #1
 800eb96:	61fb      	str	r3, [r7, #28]
  BSP_QSPI_Read(QSPI_ReadBuffer, blk_addr * STORAGE_BLK_SIZ_USER, blk_len * STORAGE_BLK_SIZ_USER);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	0319      	lsls	r1, r3, #12
 800eb9c:	89bb      	ldrh	r3, [r7, #12]
 800eb9e:	031b      	lsls	r3, r3, #12
 800eba0:	461a      	mov	r2, r3
 800eba2:	4820      	ldr	r0, [pc, #128]	; (800ec24 <STORAGE_Read_FS+0xa4>)
 800eba4:	f7f1 ff00 	bl	80009a8 <BSP_QSPI_Read>

  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800eba8:	2300      	movs	r3, #0
 800ebaa:	61bb      	str	r3, [r7, #24]
 800ebac:	e00b      	b.n	800ebc6 <STORAGE_Read_FS+0x46>
  {
    if (QSPI_ReadBuffer[i] != 0xFF)
 800ebae:	4a1d      	ldr	r2, [pc, #116]	; (800ec24 <STORAGE_Read_FS+0xa4>)
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	4413      	add	r3, r2
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	2bff      	cmp	r3, #255	; 0xff
 800ebb8:	d002      	beq.n	800ebc0 <STORAGE_Read_FS+0x40>
    {
      erasedSector = 0;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	61fb      	str	r3, [r7, #28]
      break;
 800ebbe:	e006      	b.n	800ebce <STORAGE_Read_FS+0x4e>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800ebc0:	69bb      	ldr	r3, [r7, #24]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	61bb      	str	r3, [r7, #24]
 800ebc6:	69bb      	ldr	r3, [r7, #24]
 800ebc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebcc:	d3ef      	bcc.n	800ebae <STORAGE_Read_FS+0x2e>
    }
  }
  if (erasedSector == 1)
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d10f      	bne.n	800ebf4 <STORAGE_Read_FS+0x74>
  {
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	617b      	str	r3, [r7, #20]
 800ebd8:	e007      	b.n	800ebea <STORAGE_Read_FS+0x6a>
    {
      buf[i] = 0x00;
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	4413      	add	r3, r2
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	617b      	str	r3, [r7, #20]
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebf0:	d3f3      	bcc.n	800ebda <STORAGE_Read_FS+0x5a>
 800ebf2:	e011      	b.n	800ec18 <STORAGE_Read_FS+0x98>
    }
  }
  else {
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	613b      	str	r3, [r7, #16]
 800ebf8:	e00a      	b.n	800ec10 <STORAGE_Read_FS+0x90>
    {
      buf[i] = QSPI_ReadBuffer[i];
 800ebfa:	68ba      	ldr	r2, [r7, #8]
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	4413      	add	r3, r2
 800ec00:	4908      	ldr	r1, [pc, #32]	; (800ec24 <STORAGE_Read_FS+0xa4>)
 800ec02:	693a      	ldr	r2, [r7, #16]
 800ec04:	440a      	add	r2, r1
 800ec06:	7812      	ldrb	r2, [r2, #0]
 800ec08:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	613b      	str	r3, [r7, #16]
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec16:	d3f0      	bcc.n	800ebfa <STORAGE_Read_FS+0x7a>
    }
  }
  return (USBD_OK);
 800ec18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3720      	adds	r7, #32
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	20009b48 	.word	0x20009b48

0800ec28 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b088      	sub	sp, #32
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60b9      	str	r1, [r7, #8]
 800ec30:	607a      	str	r2, [r7, #4]
 800ec32:	461a      	mov	r2, r3
 800ec34:	4603      	mov	r3, r0
 800ec36:	73fb      	strb	r3, [r7, #15]
 800ec38:	4613      	mov	r3, r2
 800ec3a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  uint32_t needErase = 0;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	61fb      	str	r3, [r7, #28]
  uint32_t eraseOperation = 1;
 800ec40:	2301      	movs	r3, #1
 800ec42:	61bb      	str	r3, [r7, #24]
  BSP_QSPI_Read(QSPI_ReadBuffer, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	031b      	lsls	r3, r3, #12
 800ec48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	4829      	ldr	r0, [pc, #164]	; (800ecf4 <STORAGE_Write_FS+0xcc>)
 800ec50:	f7f1 feaa 	bl	80009a8 <BSP_QSPI_Read>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800ec54:	2300      	movs	r3, #0
 800ec56:	617b      	str	r3, [r7, #20]
 800ec58:	e00b      	b.n	800ec72 <STORAGE_Write_FS+0x4a>
  {
    if (buf[i] != 0x00)
 800ec5a:	68ba      	ldr	r2, [r7, #8]
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	4413      	add	r3, r2
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d002      	beq.n	800ec6c <STORAGE_Write_FS+0x44>
    {
      eraseOperation = 0;
 800ec66:	2300      	movs	r3, #0
 800ec68:	61bb      	str	r3, [r7, #24]
      break;
 800ec6a:	e006      	b.n	800ec7a <STORAGE_Write_FS+0x52>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	617b      	str	r3, [r7, #20]
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec78:	d3ef      	bcc.n	800ec5a <STORAGE_Write_FS+0x32>
    }
  }
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	613b      	str	r3, [r7, #16]
 800ec7e:	e00b      	b.n	800ec98 <STORAGE_Write_FS+0x70>
  {
    if (QSPI_ReadBuffer[i] != 0xFF)
 800ec80:	4a1c      	ldr	r2, [pc, #112]	; (800ecf4 <STORAGE_Write_FS+0xcc>)
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	4413      	add	r3, r2
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	2bff      	cmp	r3, #255	; 0xff
 800ec8a:	d002      	beq.n	800ec92 <STORAGE_Write_FS+0x6a>
    {
      needErase = 1;
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	61fb      	str	r3, [r7, #28]
      break;
 800ec90:	e006      	b.n	800eca0 <STORAGE_Write_FS+0x78>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	3301      	adds	r3, #1
 800ec96:	613b      	str	r3, [r7, #16]
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec9e:	d3ef      	bcc.n	800ec80 <STORAGE_Write_FS+0x58>
    }
  }
  if (eraseOperation == 1)
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d108      	bne.n	800ecb8 <STORAGE_Write_FS+0x90>
  {
    if (needErase == 1)
 800eca6:	69fb      	ldr	r3, [r7, #28]
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d11e      	bne.n	800ecea <STORAGE_Write_FS+0xc2>
    {
      BSP_QSPI_Erase_Block(blk_addr * STORAGE_BLK_SIZ_USER);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	031b      	lsls	r3, r3, #12
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7f1 ff43 	bl	8000b3c <BSP_QSPI_Erase_Block>
 800ecb6:	e018      	b.n	800ecea <STORAGE_Write_FS+0xc2>
    }
  }
  else {
    if (needErase == 1)
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d10d      	bne.n	800ecda <STORAGE_Write_FS+0xb2>
    {
      BSP_QSPI_Erase_Block(blk_addr * STORAGE_BLK_SIZ_USER);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	031b      	lsls	r3, r3, #12
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7f1 ff3a 	bl	8000b3c <BSP_QSPI_Erase_Block>

      BSP_QSPI_Write(buf, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	031b      	lsls	r3, r3, #12
 800eccc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	68b8      	ldr	r0, [r7, #8]
 800ecd4:	f7f1 feaa 	bl	8000a2c <BSP_QSPI_Write>
 800ecd8:	e007      	b.n	800ecea <STORAGE_Write_FS+0xc2>
    }
    else {
      BSP_QSPI_Write(buf, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	031b      	lsls	r3, r3, #12
 800ecde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ece2:	4619      	mov	r1, r3
 800ece4:	68b8      	ldr	r0, [r7, #8]
 800ece6:	f7f1 fea1 	bl	8000a2c <BSP_QSPI_Write>
    }
  }

  return (USBD_OK);
 800ecea:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3720      	adds	r7, #32
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	20009b48 	.word	0x20009b48

0800ecf8 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800ecfc:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b0ac      	sub	sp, #176	; 0xb0
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ed14:	2200      	movs	r2, #0
 800ed16:	601a      	str	r2, [r3, #0]
 800ed18:	605a      	str	r2, [r3, #4]
 800ed1a:	609a      	str	r2, [r3, #8]
 800ed1c:	60da      	str	r2, [r3, #12]
 800ed1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ed20:	f107 0314 	add.w	r3, r7, #20
 800ed24:	2288      	movs	r2, #136	; 0x88
 800ed26:	2100      	movs	r1, #0
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f000 fceb 	bl	800f704 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ed36:	d173      	bne.n	800ee20 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ed38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed3c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800ed3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ed42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800ed46:	2301      	movs	r3, #1
 800ed48:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 800ed4e:	2330      	movs	r3, #48	; 0x30
 800ed50:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800ed52:	2307      	movs	r3, #7
 800ed54:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800ed56:	2304      	movs	r3, #4
 800ed58:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800ed5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ed62:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ed64:	f107 0314 	add.w	r3, r7, #20
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7f5 fa93 	bl	8004294 <HAL_RCCEx_PeriphCLKConfig>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d001      	beq.n	800ed78 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800ed74:	f7f1 fd90 	bl	8000898 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed78:	4b2b      	ldr	r3, [pc, #172]	; (800ee28 <HAL_PCD_MspInit+0x120>)
 800ed7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed7c:	4a2a      	ldr	r2, [pc, #168]	; (800ee28 <HAL_PCD_MspInit+0x120>)
 800ed7e:	f043 0301 	orr.w	r3, r3, #1
 800ed82:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ed84:	4b28      	ldr	r3, [pc, #160]	; (800ee28 <HAL_PCD_MspInit+0x120>)
 800ed86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed88:	f003 0301 	and.w	r3, r3, #1
 800ed8c:	613b      	str	r3, [r7, #16]
 800ed8e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800ed90:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ed94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed98:	2302      	movs	r3, #2
 800ed9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eda4:	2303      	movs	r3, #3
 800eda6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800edaa:	230a      	movs	r3, #10
 800edac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800edb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800edb4:	4619      	mov	r1, r3
 800edb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800edba:	f7f2 fb65 	bl	8001488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800edbe:	4b1a      	ldr	r3, [pc, #104]	; (800ee28 <HAL_PCD_MspInit+0x120>)
 800edc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edc2:	4a19      	ldr	r2, [pc, #100]	; (800ee28 <HAL_PCD_MspInit+0x120>)
 800edc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800edc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800edca:	4b17      	ldr	r3, [pc, #92]	; (800ee28 <HAL_PCD_MspInit+0x120>)
 800edcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800edd2:	60fb      	str	r3, [r7, #12]
 800edd4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800edd6:	4b14      	ldr	r3, [pc, #80]	; (800ee28 <HAL_PCD_MspInit+0x120>)
 800edd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d114      	bne.n	800ee0c <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ede2:	4b11      	ldr	r3, [pc, #68]	; (800ee28 <HAL_PCD_MspInit+0x120>)
 800ede4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ede6:	4a10      	ldr	r2, [pc, #64]	; (800ee28 <HAL_PCD_MspInit+0x120>)
 800ede8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800edec:	6593      	str	r3, [r2, #88]	; 0x58
 800edee:	4b0e      	ldr	r3, [pc, #56]	; (800ee28 <HAL_PCD_MspInit+0x120>)
 800edf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edf6:	60bb      	str	r3, [r7, #8]
 800edf8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800edfa:	f7f3 ffad 	bl	8002d58 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800edfe:	4b0a      	ldr	r3, [pc, #40]	; (800ee28 <HAL_PCD_MspInit+0x120>)
 800ee00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee02:	4a09      	ldr	r2, [pc, #36]	; (800ee28 <HAL_PCD_MspInit+0x120>)
 800ee04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ee08:	6593      	str	r3, [r2, #88]	; 0x58
 800ee0a:	e001      	b.n	800ee10 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ee0c:	f7f3 ffa4 	bl	8002d58 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ee10:	2200      	movs	r2, #0
 800ee12:	2105      	movs	r1, #5
 800ee14:	2043      	movs	r0, #67	; 0x43
 800ee16:	f7f2 fab4 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ee1a:	2043      	movs	r0, #67	; 0x43
 800ee1c:	f7f2 facd 	bl	80013ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ee20:	bf00      	nop
 800ee22:	37b0      	adds	r7, #176	; 0xb0
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}
 800ee28:	40021000 	.word	0x40021000

0800ee2c <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ee3c:	d12b      	bne.n	800ee96 <HAL_PCD_MspDeInit+0x6a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 800ee3e:	4b18      	ldr	r3, [pc, #96]	; (800eea0 <HAL_PCD_MspDeInit+0x74>)
 800ee40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee42:	4a17      	ldr	r2, [pc, #92]	; (800eea0 <HAL_PCD_MspDeInit+0x74>)
 800ee44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee48:	64d3      	str	r3, [r2, #76]	; 0x4c

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin);
 800ee4a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ee4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ee52:	f7f2 fcc3 	bl	80017dc <HAL_GPIO_DeInit>

    /* Disable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ee56:	4b12      	ldr	r3, [pc, #72]	; (800eea0 <HAL_PCD_MspDeInit+0x74>)
 800ee58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d114      	bne.n	800ee8c <HAL_PCD_MspDeInit+0x60>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ee62:	4b0f      	ldr	r3, [pc, #60]	; (800eea0 <HAL_PCD_MspDeInit+0x74>)
 800ee64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee66:	4a0e      	ldr	r2, [pc, #56]	; (800eea0 <HAL_PCD_MspDeInit+0x74>)
 800ee68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee6c:	6593      	str	r3, [r2, #88]	; 0x58
 800ee6e:	4b0c      	ldr	r3, [pc, #48]	; (800eea0 <HAL_PCD_MspDeInit+0x74>)
 800ee70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee76:	60fb      	str	r3, [r7, #12]
 800ee78:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_DisableVddUSB();
 800ee7a:	f7f3 ff7d 	bl	8002d78 <HAL_PWREx_DisableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ee7e:	4b08      	ldr	r3, [pc, #32]	; (800eea0 <HAL_PCD_MspDeInit+0x74>)
 800ee80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee82:	4a07      	ldr	r2, [pc, #28]	; (800eea0 <HAL_PCD_MspDeInit+0x74>)
 800ee84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ee88:	6593      	str	r3, [r2, #88]	; 0x58
 800ee8a:	e001      	b.n	800ee90 <HAL_PCD_MspDeInit+0x64>
    }
    else
    {
      HAL_PWREx_DisableVddUSB();
 800ee8c:	f7f3 ff74 	bl	8002d78 <HAL_PWREx_DisableVddUSB>
    }

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 800ee90:	2043      	movs	r0, #67	; 0x43
 800ee92:	f7f2 faa0 	bl	80013d6 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 800ee96:	bf00      	nop
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	40021000 	.word	0x40021000

0800eea4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800eeb8:	4619      	mov	r1, r3
 800eeba:	4610      	mov	r0, r2
 800eebc:	f7f9 fa1c 	bl	80082f8 <USBD_LL_SetupStage>
}
 800eec0:	bf00      	nop
 800eec2:	3708      	adds	r7, #8
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	460b      	mov	r3, r1
 800eed2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800eeda:	78fa      	ldrb	r2, [r7, #3]
 800eedc:	6879      	ldr	r1, [r7, #4]
 800eede:	4613      	mov	r3, r2
 800eee0:	00db      	lsls	r3, r3, #3
 800eee2:	1a9b      	subs	r3, r3, r2
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	440b      	add	r3, r1
 800eee8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	78fb      	ldrb	r3, [r7, #3]
 800eef0:	4619      	mov	r1, r3
 800eef2:	f7f9 fa56 	bl	80083a2 <USBD_LL_DataOutStage>
}
 800eef6:	bf00      	nop
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}

0800eefe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b082      	sub	sp, #8
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
 800ef06:	460b      	mov	r3, r1
 800ef08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ef10:	78fa      	ldrb	r2, [r7, #3]
 800ef12:	6879      	ldr	r1, [r7, #4]
 800ef14:	4613      	mov	r3, r2
 800ef16:	00db      	lsls	r3, r3, #3
 800ef18:	1a9b      	subs	r3, r3, r2
 800ef1a:	009b      	lsls	r3, r3, #2
 800ef1c:	440b      	add	r3, r1
 800ef1e:	3348      	adds	r3, #72	; 0x48
 800ef20:	681a      	ldr	r2, [r3, #0]
 800ef22:	78fb      	ldrb	r3, [r7, #3]
 800ef24:	4619      	mov	r1, r3
 800ef26:	f7f9 fa9f 	bl	8008468 <USBD_LL_DataInStage>
}
 800ef2a:	bf00      	nop
 800ef2c:	3708      	adds	r7, #8
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b082      	sub	sp, #8
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7f9 fbb3 	bl	80086ac <USBD_LL_SOF>
}
 800ef46:	bf00      	nop
 800ef48:	3708      	adds	r7, #8
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}

0800ef4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b084      	sub	sp, #16
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ef56:	2301      	movs	r3, #1
 800ef58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	2b02      	cmp	r3, #2
 800ef60:	d001      	beq.n	800ef66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ef62:	f7f1 fc99 	bl	8000898 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef6c:	7bfa      	ldrb	r2, [r7, #15]
 800ef6e:	4611      	mov	r1, r2
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7f9 fb5d 	bl	8008630 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7f9 fb09 	bl	8008594 <USBD_LL_Reset>
}
 800ef82:	bf00      	nop
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
	...

0800ef8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	6812      	ldr	r2, [r2, #0]
 800efa2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800efa6:	f043 0301 	orr.w	r3, r3, #1
 800efaa:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7f9 fb4c 	bl	8008650 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6a1b      	ldr	r3, [r3, #32]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d005      	beq.n	800efcc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800efc0:	4b04      	ldr	r3, [pc, #16]	; (800efd4 <HAL_PCD_SuspendCallback+0x48>)
 800efc2:	691b      	ldr	r3, [r3, #16]
 800efc4:	4a03      	ldr	r2, [pc, #12]	; (800efd4 <HAL_PCD_SuspendCallback+0x48>)
 800efc6:	f043 0306 	orr.w	r3, r3, #6
 800efca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800efcc:	bf00      	nop
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	e000ed00 	.word	0xe000ed00

0800efd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	6812      	ldr	r2, [r2, #0]
 800efee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eff2:	f023 0301 	bic.w	r3, r3, #1
 800eff6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6a1b      	ldr	r3, [r3, #32]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d007      	beq.n	800f010 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f000:	4b08      	ldr	r3, [pc, #32]	; (800f024 <HAL_PCD_ResumeCallback+0x4c>)
 800f002:	691b      	ldr	r3, [r3, #16]
 800f004:	4a07      	ldr	r2, [pc, #28]	; (800f024 <HAL_PCD_ResumeCallback+0x4c>)
 800f006:	f023 0306 	bic.w	r3, r3, #6
 800f00a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f00c:	f000 fb42 	bl	800f694 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f016:	4618      	mov	r0, r3
 800f018:	f7f9 fb30 	bl	800867c <USBD_LL_Resume>
}
 800f01c:	bf00      	nop
 800f01e:	3708      	adds	r7, #8
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	e000ed00 	.word	0xe000ed00

0800f028 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	460b      	mov	r3, r1
 800f032:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f03a:	78fa      	ldrb	r2, [r7, #3]
 800f03c:	4611      	mov	r1, r2
 800f03e:	4618      	mov	r0, r3
 800f040:	f7f9 fb7c 	bl	800873c <USBD_LL_IsoOUTIncomplete>
}
 800f044:	bf00      	nop
 800f046:	3708      	adds	r7, #8
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	460b      	mov	r3, r1
 800f056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f05e:	78fa      	ldrb	r2, [r7, #3]
 800f060:	4611      	mov	r1, r2
 800f062:	4618      	mov	r0, r3
 800f064:	f7f9 fb44 	bl	80086f0 <USBD_LL_IsoINIncomplete>
}
 800f068:	bf00      	nop
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f07e:	4618      	mov	r0, r3
 800f080:	f7f9 fb82 	bl	8008788 <USBD_LL_DevConnected>
}
 800f084:	bf00      	nop
 800f086:	3708      	adds	r7, #8
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}

0800f08c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7f9 fb7f 	bl	800879e <USBD_LL_DevDisconnected>
}
 800f0a0:	bf00      	nop
 800f0a2:	3708      	adds	r7, #8
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d13c      	bne.n	800f132 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f0b8:	4a20      	ldr	r2, [pc, #128]	; (800f13c <USBD_LL_Init+0x94>)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4a1e      	ldr	r2, [pc, #120]	; (800f13c <USBD_LL_Init+0x94>)
 800f0c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f0c8:	4b1c      	ldr	r3, [pc, #112]	; (800f13c <USBD_LL_Init+0x94>)
 800f0ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f0ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f0d0:	4b1a      	ldr	r3, [pc, #104]	; (800f13c <USBD_LL_Init+0x94>)
 800f0d2:	2206      	movs	r2, #6
 800f0d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f0d6:	4b19      	ldr	r3, [pc, #100]	; (800f13c <USBD_LL_Init+0x94>)
 800f0d8:	2202      	movs	r2, #2
 800f0da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f0dc:	4b17      	ldr	r3, [pc, #92]	; (800f13c <USBD_LL_Init+0x94>)
 800f0de:	2202      	movs	r2, #2
 800f0e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f0e2:	4b16      	ldr	r3, [pc, #88]	; (800f13c <USBD_LL_Init+0x94>)
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f0e8:	4b14      	ldr	r3, [pc, #80]	; (800f13c <USBD_LL_Init+0x94>)
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f0ee:	4b13      	ldr	r3, [pc, #76]	; (800f13c <USBD_LL_Init+0x94>)
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f0f4:	4b11      	ldr	r3, [pc, #68]	; (800f13c <USBD_LL_Init+0x94>)
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f0fa:	4b10      	ldr	r3, [pc, #64]	; (800f13c <USBD_LL_Init+0x94>)
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f100:	4b0e      	ldr	r3, [pc, #56]	; (800f13c <USBD_LL_Init+0x94>)
 800f102:	2200      	movs	r2, #0
 800f104:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f106:	480d      	ldr	r0, [pc, #52]	; (800f13c <USBD_LL_Init+0x94>)
 800f108:	f7f2 fc8c 	bl	8001a24 <HAL_PCD_Init>
 800f10c:	4603      	mov	r3, r0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d001      	beq.n	800f116 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f112:	f7f1 fbc1 	bl	8000898 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f116:	2180      	movs	r1, #128	; 0x80
 800f118:	4808      	ldr	r0, [pc, #32]	; (800f13c <USBD_LL_Init+0x94>)
 800f11a:	f7f3 fd68 	bl	8002bee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f11e:	2240      	movs	r2, #64	; 0x40
 800f120:	2100      	movs	r1, #0
 800f122:	4806      	ldr	r0, [pc, #24]	; (800f13c <USBD_LL_Init+0x94>)
 800f124:	f7f3 fd1c 	bl	8002b60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f128:	2280      	movs	r2, #128	; 0x80
 800f12a:	2101      	movs	r1, #1
 800f12c:	4803      	ldr	r0, [pc, #12]	; (800f13c <USBD_LL_Init+0x94>)
 800f12e:	f7f3 fd17 	bl	8002b60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f132:	2300      	movs	r3, #0
}
 800f134:	4618      	mov	r0, r3
 800f136:	3708      	adds	r7, #8
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	2000ab48 	.word	0x2000ab48

0800f140 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f148:	2300      	movs	r3, #0
 800f14a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f14c:	2300      	movs	r3, #0
 800f14e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f156:	4618      	mov	r0, r3
 800f158:	f7f2 fd88 	bl	8001c6c <HAL_PCD_DeInit>
 800f15c:	4603      	mov	r3, r0
 800f15e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f160:	7bbb      	ldrb	r3, [r7, #14]
 800f162:	2b03      	cmp	r3, #3
 800f164:	d816      	bhi.n	800f194 <USBD_LL_DeInit+0x54>
 800f166:	a201      	add	r2, pc, #4	; (adr r2, 800f16c <USBD_LL_DeInit+0x2c>)
 800f168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f16c:	0800f17d 	.word	0x0800f17d
 800f170:	0800f183 	.word	0x0800f183
 800f174:	0800f189 	.word	0x0800f189
 800f178:	0800f18f 	.word	0x0800f18f
    case HAL_OK :
      usb_status = USBD_OK;
 800f17c:	2300      	movs	r3, #0
 800f17e:	73fb      	strb	r3, [r7, #15]
    break;
 800f180:	e00b      	b.n	800f19a <USBD_LL_DeInit+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f182:	2303      	movs	r3, #3
 800f184:	73fb      	strb	r3, [r7, #15]
    break;
 800f186:	e008      	b.n	800f19a <USBD_LL_DeInit+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f188:	2301      	movs	r3, #1
 800f18a:	73fb      	strb	r3, [r7, #15]
    break;
 800f18c:	e005      	b.n	800f19a <USBD_LL_DeInit+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f18e:	2303      	movs	r3, #3
 800f190:	73fb      	strb	r3, [r7, #15]
    break;
 800f192:	e002      	b.n	800f19a <USBD_LL_DeInit+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f194:	2303      	movs	r3, #3
 800f196:	73fb      	strb	r3, [r7, #15]
    break;
 800f198:	bf00      	nop
  }
  return usb_status;
 800f19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7f2 fd79 	bl	8001cb2 <HAL_PCD_Start>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f1c4:	7bbb      	ldrb	r3, [r7, #14]
 800f1c6:	2b03      	cmp	r3, #3
 800f1c8:	d816      	bhi.n	800f1f8 <USBD_LL_Start+0x54>
 800f1ca:	a201      	add	r2, pc, #4	; (adr r2, 800f1d0 <USBD_LL_Start+0x2c>)
 800f1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1d0:	0800f1e1 	.word	0x0800f1e1
 800f1d4:	0800f1e7 	.word	0x0800f1e7
 800f1d8:	0800f1ed 	.word	0x0800f1ed
 800f1dc:	0800f1f3 	.word	0x0800f1f3
    case HAL_OK :
      usb_status = USBD_OK;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	73fb      	strb	r3, [r7, #15]
    break;
 800f1e4:	e00b      	b.n	800f1fe <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f1e6:	2303      	movs	r3, #3
 800f1e8:	73fb      	strb	r3, [r7, #15]
    break;
 800f1ea:	e008      	b.n	800f1fe <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	73fb      	strb	r3, [r7, #15]
    break;
 800f1f0:	e005      	b.n	800f1fe <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f1f2:	2303      	movs	r3, #3
 800f1f4:	73fb      	strb	r3, [r7, #15]
    break;
 800f1f6:	e002      	b.n	800f1fe <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f1f8:	2303      	movs	r3, #3
 800f1fa:	73fb      	strb	r3, [r7, #15]
    break;
 800f1fc:	bf00      	nop
  }
  return usb_status;
 800f1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f200:	4618      	mov	r0, r3
 800f202:	3710      	adds	r7, #16
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f210:	2300      	movs	r3, #0
 800f212:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f214:	2300      	movs	r3, #0
 800f216:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f21e:	4618      	mov	r0, r3
 800f220:	f7f2 fd76 	bl	8001d10 <HAL_PCD_Stop>
 800f224:	4603      	mov	r3, r0
 800f226:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f228:	7bbb      	ldrb	r3, [r7, #14]
 800f22a:	2b03      	cmp	r3, #3
 800f22c:	d816      	bhi.n	800f25c <USBD_LL_Stop+0x54>
 800f22e:	a201      	add	r2, pc, #4	; (adr r2, 800f234 <USBD_LL_Stop+0x2c>)
 800f230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f234:	0800f245 	.word	0x0800f245
 800f238:	0800f24b 	.word	0x0800f24b
 800f23c:	0800f251 	.word	0x0800f251
 800f240:	0800f257 	.word	0x0800f257
    case HAL_OK :
      usb_status = USBD_OK;
 800f244:	2300      	movs	r3, #0
 800f246:	73fb      	strb	r3, [r7, #15]
    break;
 800f248:	e00b      	b.n	800f262 <USBD_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f24a:	2303      	movs	r3, #3
 800f24c:	73fb      	strb	r3, [r7, #15]
    break;
 800f24e:	e008      	b.n	800f262 <USBD_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f250:	2301      	movs	r3, #1
 800f252:	73fb      	strb	r3, [r7, #15]
    break;
 800f254:	e005      	b.n	800f262 <USBD_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f256:	2303      	movs	r3, #3
 800f258:	73fb      	strb	r3, [r7, #15]
    break;
 800f25a:	e002      	b.n	800f262 <USBD_LL_Stop+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f25c:	2303      	movs	r3, #3
 800f25e:	73fb      	strb	r3, [r7, #15]
    break;
 800f260:	bf00      	nop
  }
  return usb_status;
 800f262:	7bfb      	ldrb	r3, [r7, #15]
}
 800f264:	4618      	mov	r0, r3
 800f266:	3710      	adds	r7, #16
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b084      	sub	sp, #16
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	4608      	mov	r0, r1
 800f276:	4611      	mov	r1, r2
 800f278:	461a      	mov	r2, r3
 800f27a:	4603      	mov	r3, r0
 800f27c:	70fb      	strb	r3, [r7, #3]
 800f27e:	460b      	mov	r3, r1
 800f280:	70bb      	strb	r3, [r7, #2]
 800f282:	4613      	mov	r3, r2
 800f284:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f286:	2300      	movs	r3, #0
 800f288:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f28a:	2300      	movs	r3, #0
 800f28c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f294:	78bb      	ldrb	r3, [r7, #2]
 800f296:	883a      	ldrh	r2, [r7, #0]
 800f298:	78f9      	ldrb	r1, [r7, #3]
 800f29a:	f7f3 f92c 	bl	80024f6 <HAL_PCD_EP_Open>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f2a2:	7bbb      	ldrb	r3, [r7, #14]
 800f2a4:	2b03      	cmp	r3, #3
 800f2a6:	d817      	bhi.n	800f2d8 <USBD_LL_OpenEP+0x6c>
 800f2a8:	a201      	add	r2, pc, #4	; (adr r2, 800f2b0 <USBD_LL_OpenEP+0x44>)
 800f2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ae:	bf00      	nop
 800f2b0:	0800f2c1 	.word	0x0800f2c1
 800f2b4:	0800f2c7 	.word	0x0800f2c7
 800f2b8:	0800f2cd 	.word	0x0800f2cd
 800f2bc:	0800f2d3 	.word	0x0800f2d3
    case HAL_OK :
      usb_status = USBD_OK;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f2c4:	e00b      	b.n	800f2de <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f2c6:	2303      	movs	r3, #3
 800f2c8:	73fb      	strb	r3, [r7, #15]
    break;
 800f2ca:	e008      	b.n	800f2de <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d0:	e005      	b.n	800f2de <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f2d2:	2303      	movs	r3, #3
 800f2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d6:	e002      	b.n	800f2de <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f2d8:	2303      	movs	r3, #3
 800f2da:	73fb      	strb	r3, [r7, #15]
    break;
 800f2dc:	bf00      	nop
  }
  return usb_status;
 800f2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3710      	adds	r7, #16
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	460b      	mov	r3, r1
 800f2f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f302:	78fa      	ldrb	r2, [r7, #3]
 800f304:	4611      	mov	r1, r2
 800f306:	4618      	mov	r0, r3
 800f308:	f7f3 f95d 	bl	80025c6 <HAL_PCD_EP_Close>
 800f30c:	4603      	mov	r3, r0
 800f30e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f310:	7bbb      	ldrb	r3, [r7, #14]
 800f312:	2b03      	cmp	r3, #3
 800f314:	d816      	bhi.n	800f344 <USBD_LL_CloseEP+0x5c>
 800f316:	a201      	add	r2, pc, #4	; (adr r2, 800f31c <USBD_LL_CloseEP+0x34>)
 800f318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f31c:	0800f32d 	.word	0x0800f32d
 800f320:	0800f333 	.word	0x0800f333
 800f324:	0800f339 	.word	0x0800f339
 800f328:	0800f33f 	.word	0x0800f33f
    case HAL_OK :
      usb_status = USBD_OK;
 800f32c:	2300      	movs	r3, #0
 800f32e:	73fb      	strb	r3, [r7, #15]
    break;
 800f330:	e00b      	b.n	800f34a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f332:	2303      	movs	r3, #3
 800f334:	73fb      	strb	r3, [r7, #15]
    break;
 800f336:	e008      	b.n	800f34a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f338:	2301      	movs	r3, #1
 800f33a:	73fb      	strb	r3, [r7, #15]
    break;
 800f33c:	e005      	b.n	800f34a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f33e:	2303      	movs	r3, #3
 800f340:	73fb      	strb	r3, [r7, #15]
    break;
 800f342:	e002      	b.n	800f34a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f344:	2303      	movs	r3, #3
 800f346:	73fb      	strb	r3, [r7, #15]
    break;
 800f348:	bf00      	nop
  }
  return usb_status;
 800f34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3710      	adds	r7, #16
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	460b      	mov	r3, r1
 800f35e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f360:	2300      	movs	r3, #0
 800f362:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f364:	2300      	movs	r3, #0
 800f366:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f36e:	78fa      	ldrb	r2, [r7, #3]
 800f370:	4611      	mov	r1, r2
 800f372:	4618      	mov	r0, r3
 800f374:	f7f3 fabc 	bl	80028f0 <HAL_PCD_EP_Flush>
 800f378:	4603      	mov	r3, r0
 800f37a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f37c:	7bbb      	ldrb	r3, [r7, #14]
 800f37e:	2b03      	cmp	r3, #3
 800f380:	d816      	bhi.n	800f3b0 <USBD_LL_FlushEP+0x5c>
 800f382:	a201      	add	r2, pc, #4	; (adr r2, 800f388 <USBD_LL_FlushEP+0x34>)
 800f384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f388:	0800f399 	.word	0x0800f399
 800f38c:	0800f39f 	.word	0x0800f39f
 800f390:	0800f3a5 	.word	0x0800f3a5
 800f394:	0800f3ab 	.word	0x0800f3ab
    case HAL_OK :
      usb_status = USBD_OK;
 800f398:	2300      	movs	r3, #0
 800f39a:	73fb      	strb	r3, [r7, #15]
    break;
 800f39c:	e00b      	b.n	800f3b6 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f39e:	2303      	movs	r3, #3
 800f3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800f3a2:	e008      	b.n	800f3b6 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800f3a8:	e005      	b.n	800f3b6 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f3aa:	2303      	movs	r3, #3
 800f3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800f3ae:	e002      	b.n	800f3b6 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f3b0:	2303      	movs	r3, #3
 800f3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800f3b4:	bf00      	nop
  }
  return usb_status;
 800f3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3710      	adds	r7, #16
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}

0800f3c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b084      	sub	sp, #16
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
 800f3c8:	460b      	mov	r3, r1
 800f3ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f3da:	78fa      	ldrb	r2, [r7, #3]
 800f3dc:	4611      	mov	r1, r2
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7f3 f9ce 	bl	8002780 <HAL_PCD_EP_SetStall>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f3e8:	7bbb      	ldrb	r3, [r7, #14]
 800f3ea:	2b03      	cmp	r3, #3
 800f3ec:	d816      	bhi.n	800f41c <USBD_LL_StallEP+0x5c>
 800f3ee:	a201      	add	r2, pc, #4	; (adr r2, 800f3f4 <USBD_LL_StallEP+0x34>)
 800f3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f4:	0800f405 	.word	0x0800f405
 800f3f8:	0800f40b 	.word	0x0800f40b
 800f3fc:	0800f411 	.word	0x0800f411
 800f400:	0800f417 	.word	0x0800f417
    case HAL_OK :
      usb_status = USBD_OK;
 800f404:	2300      	movs	r3, #0
 800f406:	73fb      	strb	r3, [r7, #15]
    break;
 800f408:	e00b      	b.n	800f422 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f40a:	2303      	movs	r3, #3
 800f40c:	73fb      	strb	r3, [r7, #15]
    break;
 800f40e:	e008      	b.n	800f422 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f410:	2301      	movs	r3, #1
 800f412:	73fb      	strb	r3, [r7, #15]
    break;
 800f414:	e005      	b.n	800f422 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f416:	2303      	movs	r3, #3
 800f418:	73fb      	strb	r3, [r7, #15]
    break;
 800f41a:	e002      	b.n	800f422 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f41c:	2303      	movs	r3, #3
 800f41e:	73fb      	strb	r3, [r7, #15]
    break;
 800f420:	bf00      	nop
  }
  return usb_status;
 800f422:	7bfb      	ldrb	r3, [r7, #15]
}
 800f424:	4618      	mov	r0, r3
 800f426:	3710      	adds	r7, #16
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	460b      	mov	r3, r1
 800f436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f438:	2300      	movs	r3, #0
 800f43a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f43c:	2300      	movs	r3, #0
 800f43e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f446:	78fa      	ldrb	r2, [r7, #3]
 800f448:	4611      	mov	r1, r2
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7f3 f9fa 	bl	8002844 <HAL_PCD_EP_ClrStall>
 800f450:	4603      	mov	r3, r0
 800f452:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f454:	7bbb      	ldrb	r3, [r7, #14]
 800f456:	2b03      	cmp	r3, #3
 800f458:	d816      	bhi.n	800f488 <USBD_LL_ClearStallEP+0x5c>
 800f45a:	a201      	add	r2, pc, #4	; (adr r2, 800f460 <USBD_LL_ClearStallEP+0x34>)
 800f45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f460:	0800f471 	.word	0x0800f471
 800f464:	0800f477 	.word	0x0800f477
 800f468:	0800f47d 	.word	0x0800f47d
 800f46c:	0800f483 	.word	0x0800f483
    case HAL_OK :
      usb_status = USBD_OK;
 800f470:	2300      	movs	r3, #0
 800f472:	73fb      	strb	r3, [r7, #15]
    break;
 800f474:	e00b      	b.n	800f48e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f476:	2303      	movs	r3, #3
 800f478:	73fb      	strb	r3, [r7, #15]
    break;
 800f47a:	e008      	b.n	800f48e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f47c:	2301      	movs	r3, #1
 800f47e:	73fb      	strb	r3, [r7, #15]
    break;
 800f480:	e005      	b.n	800f48e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f482:	2303      	movs	r3, #3
 800f484:	73fb      	strb	r3, [r7, #15]
    break;
 800f486:	e002      	b.n	800f48e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f488:	2303      	movs	r3, #3
 800f48a:	73fb      	strb	r3, [r7, #15]
    break;
 800f48c:	bf00      	nop
  }
  return usb_status;
 800f48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3710      	adds	r7, #16
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}

0800f498 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f498:	b480      	push	{r7}
 800f49a:	b085      	sub	sp, #20
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f4aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f4ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	da0b      	bge.n	800f4cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f4b4:	78fb      	ldrb	r3, [r7, #3]
 800f4b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f4ba:	68f9      	ldr	r1, [r7, #12]
 800f4bc:	4613      	mov	r3, r2
 800f4be:	00db      	lsls	r3, r3, #3
 800f4c0:	1a9b      	subs	r3, r3, r2
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	440b      	add	r3, r1
 800f4c6:	333e      	adds	r3, #62	; 0x3e
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	e00b      	b.n	800f4e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f4cc:	78fb      	ldrb	r3, [r7, #3]
 800f4ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f4d2:	68f9      	ldr	r1, [r7, #12]
 800f4d4:	4613      	mov	r3, r2
 800f4d6:	00db      	lsls	r3, r3, #3
 800f4d8:	1a9b      	subs	r3, r3, r2
 800f4da:	009b      	lsls	r3, r3, #2
 800f4dc:	440b      	add	r3, r1
 800f4de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f4e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3714      	adds	r7, #20
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr

0800f4f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f500:	2300      	movs	r3, #0
 800f502:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f50a:	78fa      	ldrb	r2, [r7, #3]
 800f50c:	4611      	mov	r1, r2
 800f50e:	4618      	mov	r0, r3
 800f510:	f7f2 ffcc 	bl	80024ac <HAL_PCD_SetAddress>
 800f514:	4603      	mov	r3, r0
 800f516:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f518:	7bbb      	ldrb	r3, [r7, #14]
 800f51a:	2b03      	cmp	r3, #3
 800f51c:	d816      	bhi.n	800f54c <USBD_LL_SetUSBAddress+0x5c>
 800f51e:	a201      	add	r2, pc, #4	; (adr r2, 800f524 <USBD_LL_SetUSBAddress+0x34>)
 800f520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f524:	0800f535 	.word	0x0800f535
 800f528:	0800f53b 	.word	0x0800f53b
 800f52c:	0800f541 	.word	0x0800f541
 800f530:	0800f547 	.word	0x0800f547
    case HAL_OK :
      usb_status = USBD_OK;
 800f534:	2300      	movs	r3, #0
 800f536:	73fb      	strb	r3, [r7, #15]
    break;
 800f538:	e00b      	b.n	800f552 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f53a:	2303      	movs	r3, #3
 800f53c:	73fb      	strb	r3, [r7, #15]
    break;
 800f53e:	e008      	b.n	800f552 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f540:	2301      	movs	r3, #1
 800f542:	73fb      	strb	r3, [r7, #15]
    break;
 800f544:	e005      	b.n	800f552 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f546:	2303      	movs	r3, #3
 800f548:	73fb      	strb	r3, [r7, #15]
    break;
 800f54a:	e002      	b.n	800f552 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800f54c:	2303      	movs	r3, #3
 800f54e:	73fb      	strb	r3, [r7, #15]
    break;
 800f550:	bf00      	nop
  }
  return usb_status;
 800f552:	7bfb      	ldrb	r3, [r7, #15]
}
 800f554:	4618      	mov	r0, r3
 800f556:	3710      	adds	r7, #16
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b086      	sub	sp, #24
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	607a      	str	r2, [r7, #4]
 800f566:	603b      	str	r3, [r7, #0]
 800f568:	460b      	mov	r3, r1
 800f56a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f56c:	2300      	movs	r3, #0
 800f56e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f570:	2300      	movs	r3, #0
 800f572:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f57a:	7af9      	ldrb	r1, [r7, #11]
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	f7f3 f8c1 	bl	8002706 <HAL_PCD_EP_Transmit>
 800f584:	4603      	mov	r3, r0
 800f586:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f588:	7dbb      	ldrb	r3, [r7, #22]
 800f58a:	2b03      	cmp	r3, #3
 800f58c:	d816      	bhi.n	800f5bc <USBD_LL_Transmit+0x60>
 800f58e:	a201      	add	r2, pc, #4	; (adr r2, 800f594 <USBD_LL_Transmit+0x38>)
 800f590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f594:	0800f5a5 	.word	0x0800f5a5
 800f598:	0800f5ab 	.word	0x0800f5ab
 800f59c:	0800f5b1 	.word	0x0800f5b1
 800f5a0:	0800f5b7 	.word	0x0800f5b7
    case HAL_OK :
      usb_status = USBD_OK;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	75fb      	strb	r3, [r7, #23]
    break;
 800f5a8:	e00b      	b.n	800f5c2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f5aa:	2303      	movs	r3, #3
 800f5ac:	75fb      	strb	r3, [r7, #23]
    break;
 800f5ae:	e008      	b.n	800f5c2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	75fb      	strb	r3, [r7, #23]
    break;
 800f5b4:	e005      	b.n	800f5c2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f5b6:	2303      	movs	r3, #3
 800f5b8:	75fb      	strb	r3, [r7, #23]
    break;
 800f5ba:	e002      	b.n	800f5c2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800f5bc:	2303      	movs	r3, #3
 800f5be:	75fb      	strb	r3, [r7, #23]
    break;
 800f5c0:	bf00      	nop
  }
  return usb_status;
 800f5c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3718      	adds	r7, #24
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b086      	sub	sp, #24
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	607a      	str	r2, [r7, #4]
 800f5d6:	603b      	str	r3, [r7, #0]
 800f5d8:	460b      	mov	r3, r1
 800f5da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f5ea:	7af9      	ldrb	r1, [r7, #11]
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	f7f3 f833 	bl	800265a <HAL_PCD_EP_Receive>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f5f8:	7dbb      	ldrb	r3, [r7, #22]
 800f5fa:	2b03      	cmp	r3, #3
 800f5fc:	d816      	bhi.n	800f62c <USBD_LL_PrepareReceive+0x60>
 800f5fe:	a201      	add	r2, pc, #4	; (adr r2, 800f604 <USBD_LL_PrepareReceive+0x38>)
 800f600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f604:	0800f615 	.word	0x0800f615
 800f608:	0800f61b 	.word	0x0800f61b
 800f60c:	0800f621 	.word	0x0800f621
 800f610:	0800f627 	.word	0x0800f627
    case HAL_OK :
      usb_status = USBD_OK;
 800f614:	2300      	movs	r3, #0
 800f616:	75fb      	strb	r3, [r7, #23]
    break;
 800f618:	e00b      	b.n	800f632 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f61a:	2303      	movs	r3, #3
 800f61c:	75fb      	strb	r3, [r7, #23]
    break;
 800f61e:	e008      	b.n	800f632 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f620:	2301      	movs	r3, #1
 800f622:	75fb      	strb	r3, [r7, #23]
    break;
 800f624:	e005      	b.n	800f632 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f626:	2303      	movs	r3, #3
 800f628:	75fb      	strb	r3, [r7, #23]
    break;
 800f62a:	e002      	b.n	800f632 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800f62c:	2303      	movs	r3, #3
 800f62e:	75fb      	strb	r3, [r7, #23]
    break;
 800f630:	bf00      	nop
  }
  return usb_status;
 800f632:	7dfb      	ldrb	r3, [r7, #23]
}
 800f634:	4618      	mov	r0, r3
 800f636:	3718      	adds	r7, #24
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	460b      	mov	r3, r1
 800f646:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f64e:	78fa      	ldrb	r2, [r7, #3]
 800f650:	4611      	mov	r1, r2
 800f652:	4618      	mov	r0, r3
 800f654:	f7f3 f83f 	bl	80026d6 <HAL_PCD_EP_GetRxCount>
 800f658:	4603      	mov	r3, r0
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
	...

0800f664 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f66c:	4b03      	ldr	r3, [pc, #12]	; (800f67c <USBD_static_malloc+0x18>)
}
 800f66e:	4618      	mov	r0, r3
 800f670:	370c      	adds	r7, #12
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr
 800f67a:	bf00      	nop
 800f67c:	2000af50 	.word	0x2000af50

0800f680 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f680:	b480      	push	{r7}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]

}
 800f688:	bf00      	nop
 800f68a:	370c      	adds	r7, #12
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f698:	f7f1 f89c 	bl	80007d4 <SystemClock_Config>
}
 800f69c:	bf00      	nop
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <__libc_init_array>:
 800f6a0:	b570      	push	{r4, r5, r6, lr}
 800f6a2:	4d0d      	ldr	r5, [pc, #52]	; (800f6d8 <__libc_init_array+0x38>)
 800f6a4:	4c0d      	ldr	r4, [pc, #52]	; (800f6dc <__libc_init_array+0x3c>)
 800f6a6:	1b64      	subs	r4, r4, r5
 800f6a8:	10a4      	asrs	r4, r4, #2
 800f6aa:	2600      	movs	r6, #0
 800f6ac:	42a6      	cmp	r6, r4
 800f6ae:	d109      	bne.n	800f6c4 <__libc_init_array+0x24>
 800f6b0:	4d0b      	ldr	r5, [pc, #44]	; (800f6e0 <__libc_init_array+0x40>)
 800f6b2:	4c0c      	ldr	r4, [pc, #48]	; (800f6e4 <__libc_init_array+0x44>)
 800f6b4:	f000 f82e 	bl	800f714 <_init>
 800f6b8:	1b64      	subs	r4, r4, r5
 800f6ba:	10a4      	asrs	r4, r4, #2
 800f6bc:	2600      	movs	r6, #0
 800f6be:	42a6      	cmp	r6, r4
 800f6c0:	d105      	bne.n	800f6ce <__libc_init_array+0x2e>
 800f6c2:	bd70      	pop	{r4, r5, r6, pc}
 800f6c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6c8:	4798      	blx	r3
 800f6ca:	3601      	adds	r6, #1
 800f6cc:	e7ee      	b.n	800f6ac <__libc_init_array+0xc>
 800f6ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6d2:	4798      	blx	r3
 800f6d4:	3601      	adds	r6, #1
 800f6d6:	e7f2      	b.n	800f6be <__libc_init_array+0x1e>
 800f6d8:	0800f90c 	.word	0x0800f90c
 800f6dc:	0800f90c 	.word	0x0800f90c
 800f6e0:	0800f90c 	.word	0x0800f90c
 800f6e4:	0800f910 	.word	0x0800f910

0800f6e8 <memcpy>:
 800f6e8:	440a      	add	r2, r1
 800f6ea:	4291      	cmp	r1, r2
 800f6ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6f0:	d100      	bne.n	800f6f4 <memcpy+0xc>
 800f6f2:	4770      	bx	lr
 800f6f4:	b510      	push	{r4, lr}
 800f6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6fe:	4291      	cmp	r1, r2
 800f700:	d1f9      	bne.n	800f6f6 <memcpy+0xe>
 800f702:	bd10      	pop	{r4, pc}

0800f704 <memset>:
 800f704:	4402      	add	r2, r0
 800f706:	4603      	mov	r3, r0
 800f708:	4293      	cmp	r3, r2
 800f70a:	d100      	bne.n	800f70e <memset+0xa>
 800f70c:	4770      	bx	lr
 800f70e:	f803 1b01 	strb.w	r1, [r3], #1
 800f712:	e7f9      	b.n	800f708 <memset+0x4>

0800f714 <_init>:
 800f714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f716:	bf00      	nop
 800f718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f71a:	bc08      	pop	{r3}
 800f71c:	469e      	mov	lr, r3
 800f71e:	4770      	bx	lr

0800f720 <_fini>:
 800f720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f722:	bf00      	nop
 800f724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f726:	bc08      	pop	{r3}
 800f728:	469e      	mov	lr, r3
 800f72a:	4770      	bx	lr
