
XD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800b570  0800b570  0001b570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b668  0800b668  00020168  2**0
                  CONTENTS
  4 .ARM          00000000  0800b668  0800b668  00020168  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b668  0800b668  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b668  0800b668  0001b668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b66c  0800b66c  0001b66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800b670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad68  20000168  0800b7d8  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000aed0  0800b7d8  0002aed0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9aa  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cf6  00000000  00000000  0003ab42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  0003f838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  00040eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c9f7  00000000  00000000  000422e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c699  00000000  00000000  0006ecdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5520  00000000  00000000  0008b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180898  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005964  00000000  00000000  001808e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b558 	.word	0x0800b558

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	0800b558 	.word	0x0800b558

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000018c 	.word	0x2000018c
 8000200:	200001e0 	.word	0x200001e0

08000204 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b08e      	sub	sp, #56	; 0x38
 8000208:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of appTask */
  osThreadDef(appTask, appTaskBody, osPriorityNormal, 0, 4096);
 800020a:	4b14      	ldr	r3, [pc, #80]	; (800025c <MX_FREERTOS_Init+0x58>)
 800020c:	f107 041c 	add.w	r4, r7, #28
 8000210:	461d      	mov	r5, r3
 8000212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000216:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800021a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  appTaskHandle = osThreadCreate(osThread(appTask), NULL);
 800021e:	f107 031c 	add.w	r3, r7, #28
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f008 ffd6 	bl	80091d6 <osThreadCreate>
 800022a:	4603      	mov	r3, r0
 800022c:	4a0c      	ldr	r2, [pc, #48]	; (8000260 <MX_FREERTOS_Init+0x5c>)
 800022e:	6013      	str	r3, [r2, #0]

  /* definition and creation of usbTask */
  osThreadDef(usbTask, usbTaskBody, osPriorityHigh, 0, 256);
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <MX_FREERTOS_Init+0x60>)
 8000232:	463c      	mov	r4, r7
 8000234:	461d      	mov	r5, r3
 8000236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800023a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800023e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usbTaskHandle = osThreadCreate(osThread(usbTask), NULL);
 8000242:	463b      	mov	r3, r7
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f008 ffc5 	bl	80091d6 <osThreadCreate>
 800024c:	4603      	mov	r3, r0
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <MX_FREERTOS_Init+0x64>)
 8000250:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
}
 8000252:	bf00      	nop
 8000254:	3738      	adds	r7, #56	; 0x38
 8000256:	46bd      	mov	sp, r7
 8000258:	bdb0      	pop	{r4, r5, r7, pc}
 800025a:	bf00      	nop
 800025c:	0800b580 	.word	0x0800b580
 8000260:	20000184 	.word	0x20000184
 8000264:	0800b59c 	.word	0x0800b59c
 8000268:	20000188 	.word	0x20000188

0800026c <appTaskBody>:

/* appTaskBody function */
void appTaskBody(void const * argument)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN appTaskBody */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000274:	2064      	movs	r0, #100	; 0x64
 8000276:	f008 fffa 	bl	800926e <osDelay>

    /* GREEN LED TOGGLE */
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800027a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027e:	4802      	ldr	r0, [pc, #8]	; (8000288 <appTaskBody+0x1c>)
 8000280:	f001 fb54 	bl	800192c <HAL_GPIO_TogglePin>
    osDelay(100);
 8000284:	e7f6      	b.n	8000274 <appTaskBody+0x8>
 8000286:	bf00      	nop
 8000288:	48001000 	.word	0x48001000

0800028c <usbTaskBody>:
  /* USER CODE END appTaskBody */
}

/* usbTaskBody function */
void usbTaskBody(void const * argument)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN usbTaskBody */
  uint32_t USB_VBUS_counter = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
    USB_VBUS_counter = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
    /* USB_VBUS availability check */
    while (USB_VBUS_counter < 5)
 800029c:	e00d      	b.n	80002ba <usbTaskBody+0x2e>
    {
      osDelay(10);
 800029e:	200a      	movs	r0, #10
 80002a0:	f008 ffe5 	bl	800926e <osDelay>
      if (HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin) != GPIO_PIN_RESET)
 80002a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002a8:	481c      	ldr	r0, [pc, #112]	; (800031c <usbTaskBody+0x90>)
 80002aa:	f001 fb0f 	bl	80018cc <HAL_GPIO_ReadPin>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d006      	beq.n	80002c2 <usbTaskBody+0x36>
      {
        USB_VBUS_counter++;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	3301      	adds	r3, #1
 80002b8:	60fb      	str	r3, [r7, #12]
    while (USB_VBUS_counter < 5)
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	2b04      	cmp	r3, #4
 80002be:	d9ee      	bls.n	800029e <usbTaskBody+0x12>
 80002c0:	e000      	b.n	80002c4 <usbTaskBody+0x38>
      }
      else {
        break;
 80002c2:	bf00      	nop
      }
    }
    if(USB_VBUS_counter >= 5)
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	2b04      	cmp	r3, #4
 80002c8:	d923      	bls.n	8000312 <usbTaskBody+0x86>
    {
      /* Initialize USB peripheral */
      MX_USB_DEVICE_Init();
 80002ca:	f00a f9df 	bl	800a68c <MX_USB_DEVICE_Init>

      /* RED LED ON */
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80002ce:	2201      	movs	r2, #1
 80002d0:	2104      	movs	r1, #4
 80002d2:	4813      	ldr	r0, [pc, #76]	; (8000320 <usbTaskBody+0x94>)
 80002d4:	f001 fb12 	bl	80018fc <HAL_GPIO_WritePin>

      /* USB_VBUS availability check */
      while (USB_VBUS_counter)
 80002d8:	e010      	b.n	80002fc <usbTaskBody+0x70>
      {
        /* Wait 100ms, then check the USB_VBUS availability */
        osDelay(100);
 80002da:	2064      	movs	r0, #100	; 0x64
 80002dc:	f008 ffc7 	bl	800926e <osDelay>

        if (HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin) == GPIO_PIN_RESET)
 80002e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002e4:	480d      	ldr	r0, [pc, #52]	; (800031c <usbTaskBody+0x90>)
 80002e6:	f001 faf1 	bl	80018cc <HAL_GPIO_ReadPin>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d103      	bne.n	80002f8 <usbTaskBody+0x6c>
        {
          USB_VBUS_counter--;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	3b01      	subs	r3, #1
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e001      	b.n	80002fc <usbTaskBody+0x70>
        }
        else {
          USB_VBUS_counter = 5;
 80002f8:	2305      	movs	r3, #5
 80002fa:	60fb      	str	r3, [r7, #12]
      while (USB_VBUS_counter)
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d1eb      	bne.n	80002da <usbTaskBody+0x4e>
        }
      }

      /* Deinitialize USB peripheral */
      USBD_DeInit(&hUsbDeviceFS);
 8000302:	4808      	ldr	r0, [pc, #32]	; (8000324 <usbTaskBody+0x98>)
 8000304:	f007 fdf8 	bl	8007ef8 <USBD_DeInit>

      /* RED LED OFF */
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <usbTaskBody+0x94>)
 800030e:	f001 faf5 	bl	80018fc <HAL_GPIO_WritePin>
    }
    /* Every 1s we will check if USB_VBUS is available */
    osDelay(1000);
 8000312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000316:	f008 ffaa 	bl	800926e <osDelay>
    USB_VBUS_counter = 0;
 800031a:	e7bd      	b.n	8000298 <usbTaskBody+0xc>
 800031c:	48000800 	.word	0x48000800
 8000320:	48000400 	.word	0x48000400
 8000324:	20008580 	.word	0x20008580

08000328 <MX_GPIO_Init>:
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
     PB9   ------> LCD_COM3
*/
void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08c      	sub	sp, #48	; 0x30
 800032c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	f107 031c 	add.w	r3, r7, #28
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800033e:	4bb7      	ldr	r3, [pc, #732]	; (800061c <MX_GPIO_Init+0x2f4>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	4ab6      	ldr	r2, [pc, #728]	; (800061c <MX_GPIO_Init+0x2f4>)
 8000344:	f043 0310 	orr.w	r3, r3, #16
 8000348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034a:	4bb4      	ldr	r3, [pc, #720]	; (800061c <MX_GPIO_Init+0x2f4>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	f003 0310 	and.w	r3, r3, #16
 8000352:	61bb      	str	r3, [r7, #24]
 8000354:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000356:	4bb1      	ldr	r3, [pc, #708]	; (800061c <MX_GPIO_Init+0x2f4>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035a:	4ab0      	ldr	r2, [pc, #704]	; (800061c <MX_GPIO_Init+0x2f4>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000362:	4bae      	ldr	r3, [pc, #696]	; (800061c <MX_GPIO_Init+0x2f4>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	f003 0304 	and.w	r3, r3, #4
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800036e:	4bab      	ldr	r3, [pc, #684]	; (800061c <MX_GPIO_Init+0x2f4>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	4aaa      	ldr	r2, [pc, #680]	; (800061c <MX_GPIO_Init+0x2f4>)
 8000374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037a:	4ba8      	ldr	r3, [pc, #672]	; (800061c <MX_GPIO_Init+0x2f4>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000382:	613b      	str	r3, [r7, #16]
 8000384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4ba5      	ldr	r3, [pc, #660]	; (800061c <MX_GPIO_Init+0x2f4>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	4aa4      	ldr	r2, [pc, #656]	; (800061c <MX_GPIO_Init+0x2f4>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000392:	4ba2      	ldr	r3, [pc, #648]	; (800061c <MX_GPIO_Init+0x2f4>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039e:	4b9f      	ldr	r3, [pc, #636]	; (800061c <MX_GPIO_Init+0x2f4>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a2:	4a9e      	ldr	r2, [pc, #632]	; (800061c <MX_GPIO_Init+0x2f4>)
 80003a4:	f043 0302 	orr.w	r3, r3, #2
 80003a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003aa:	4b9c      	ldr	r3, [pc, #624]	; (800061c <MX_GPIO_Init+0x2f4>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ae:	f003 0302 	and.w	r3, r3, #2
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b6:	4b99      	ldr	r3, [pc, #612]	; (800061c <MX_GPIO_Init+0x2f4>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ba:	4a98      	ldr	r2, [pc, #608]	; (800061c <MX_GPIO_Init+0x2f4>)
 80003bc:	f043 0308 	orr.w	r3, r3, #8
 80003c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003c2:	4b96      	ldr	r3, [pc, #600]	; (800061c <MX_GPIO_Init+0x2f4>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c6:	f003 0308 	and.w	r3, r3, #8
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LED_GREEN_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	f240 1109 	movw	r1, #265	; 0x109
 80003d4:	4892      	ldr	r0, [pc, #584]	; (8000620 <MX_GPIO_Init+0x2f8>)
 80003d6:	f001 fa91 	bl	80018fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	210c      	movs	r1, #12
 80003de:	4891      	ldr	r0, [pc, #580]	; (8000624 <MX_GPIO_Init+0x2fc>)
 80003e0:	f001 fa8c 	bl	80018fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ea:	488f      	ldr	r0, [pc, #572]	; (8000628 <MX_GPIO_Init+0x300>)
 80003ec:	f001 fa86 	bl	80018fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2180      	movs	r1, #128	; 0x80
 80003f4:	488d      	ldr	r0, [pc, #564]	; (800062c <MX_GPIO_Init+0x304>)
 80003f6:	f001 fa81 	bl	80018fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin
 80003fa:	23f4      	movs	r3, #244	; 0xf4
 80003fc:	61fb      	str	r3, [r7, #28]
                          |AUDIO_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003fe:	2302      	movs	r3, #2
 8000400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000406:	2303      	movs	r3, #3
 8000408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800040a:	230d      	movs	r3, #13
 800040c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800040e:	f107 031c 	add.w	r3, r7, #28
 8000412:	4619      	mov	r1, r3
 8000414:	4882      	ldr	r0, [pc, #520]	; (8000620 <MX_GPIO_Init+0x2f8>)
 8000416:	f000 ffbb 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 800041a:	2308      	movs	r3, #8
 800041c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041e:	2301      	movs	r3, #1
 8000420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000426:	2302      	movs	r3, #2
 8000428:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 800042a:	f107 031c 	add.w	r3, r7, #28
 800042e:	4619      	mov	r1, r3
 8000430:	487b      	ldr	r0, [pc, #492]	; (8000620 <MX_GPIO_Init+0x2f8>)
 8000432:	f000 ffad 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000436:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800043a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800043c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	4619      	mov	r1, r3
 800044c:	4876      	ldr	r0, [pc, #472]	; (8000628 <MX_GPIO_Init+0x300>)
 800044e:	f000 ff9f 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin|USB_VBUS_Pin;
 8000452:	f640 0307 	movw	r3, #2055	; 0x807
 8000456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000458:	2300      	movs	r3, #0
 800045a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000460:	f107 031c 	add.w	r3, r7, #28
 8000464:	4619      	mov	r1, r3
 8000466:	4870      	ldr	r0, [pc, #448]	; (8000628 <MX_GPIO_Init+0x300>)
 8000468:	f000 ff92 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 800046c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000470:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000472:	2302      	movs	r3, #2
 8000474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047a:	2300      	movs	r3, #0
 800047c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800047e:	230b      	movs	r3, #11
 8000480:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000482:	f107 031c 	add.w	r3, r7, #28
 8000486:	4619      	mov	r1, r3
 8000488:	4867      	ldr	r0, [pc, #412]	; (8000628 <MX_GPIO_Init+0x300>)
 800048a:	f000 ff81 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 800048e:	232f      	movs	r3, #47	; 0x2f
 8000490:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000492:	2300      	movs	r3, #0
 8000494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000496:	2302      	movs	r3, #2
 8000498:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	f107 031c 	add.w	r3, r7, #28
 800049e:	4619      	mov	r1, r3
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a4:	f000 ff74 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 80004a8:	2310      	movs	r3, #16
 80004aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004ac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80004b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	2300      	movs	r3, #0
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80004b6:	f107 031c 	add.w	r3, r7, #28
 80004ba:	4619      	mov	r1, r3
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c0:	f000 ff66 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 80004c4:	f248 73c0 	movw	r3, #34752	; 0x87c0
 80004c8:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ca:	2302      	movs	r3, #2
 80004cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	2300      	movs	r3, #0
 80004d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80004d6:	230b      	movs	r3, #11
 80004d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	f107 031c 	add.w	r3, r7, #28
 80004de:	4619      	mov	r1, r3
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e4:	f000 ff54 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 80004e8:	f24f 2333 	movw	r3, #62003	; 0xf233
 80004ec:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ee:	2302      	movs	r3, #2
 80004f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f6:	2300      	movs	r3, #0
 80004f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80004fa:	230b      	movs	r3, #11
 80004fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fe:	f107 031c 	add.w	r3, r7, #28
 8000502:	4619      	mov	r1, r3
 8000504:	4847      	ldr	r0, [pc, #284]	; (8000624 <MX_GPIO_Init+0x2fc>)
 8000506:	f000 ff43 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800050a:	2304      	movs	r3, #4
 800050c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050e:	2301      	movs	r3, #1
 8000510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000512:	2301      	movs	r3, #1
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000516:	2303      	movs	r3, #3
 8000518:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	4619      	mov	r1, r3
 8000520:	4840      	ldr	r0, [pc, #256]	; (8000624 <MX_GPIO_Init+0x2fc>)
 8000522:	f000 ff35 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800052a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000530:	2301      	movs	r3, #1
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000534:	2303      	movs	r3, #3
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000538:	f107 031c 	add.w	r3, r7, #28
 800053c:	4619      	mov	r1, r3
 800053e:	4838      	ldr	r0, [pc, #224]	; (8000620 <MX_GPIO_Init+0x2f8>)
 8000540:	f000 ff26 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8000544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054a:	2302      	movs	r3, #2
 800054c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2300      	movs	r3, #0
 8000554:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000556:	230d      	movs	r3, #13
 8000558:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	4619      	mov	r1, r3
 8000560:	482f      	ldr	r0, [pc, #188]	; (8000620 <MX_GPIO_Init+0x2f8>)
 8000562:	f000 ff15 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000566:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800056a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800056c:	2312      	movs	r3, #18
 800056e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000574:	2303      	movs	r3, #3
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000578:	2304      	movs	r3, #4
 800057a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057c:	f107 031c 	add.w	r3, r7, #28
 8000580:	4619      	mov	r1, r3
 8000582:	4828      	ldr	r0, [pc, #160]	; (8000624 <MX_GPIO_Init+0x2fc>)
 8000584:	f000 ff04 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8000588:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800058c:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058e:	2302      	movs	r3, #2
 8000590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800059a:	230b      	movs	r3, #11
 800059c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	4619      	mov	r1, r3
 80005a4:	4821      	ldr	r0, [pc, #132]	; (800062c <MX_GPIO_Init+0x304>)
 80005a6:	f000 fef3 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	4619      	mov	r1, r3
 80005c2:	4819      	ldr	r0, [pc, #100]	; (8000628 <MX_GPIO_Init+0x300>)
 80005c4:	f000 fee4 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 80005c8:	2305      	movs	r3, #5
 80005ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005cc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	4813      	ldr	r0, [pc, #76]	; (800062c <MX_GPIO_Init+0x304>)
 80005de:	f000 fed7 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 80005e2:	231a      	movs	r3, #26
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ee:	2303      	movs	r3, #3
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f2:	2305      	movs	r3, #5
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	480b      	ldr	r0, [pc, #44]	; (800062c <MX_GPIO_Init+0x304>)
 80005fe:	f000 fec7 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000602:	2360      	movs	r3, #96	; 0x60
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000606:	2302      	movs	r3, #2
 8000608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060a:	2301      	movs	r3, #1
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060e:	2303      	movs	r3, #3
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000612:	2307      	movs	r3, #7
 8000614:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	e009      	b.n	8000630 <MX_GPIO_Init+0x308>
 800061c:	40021000 	.word	0x40021000
 8000620:	48001000 	.word	0x48001000
 8000624:	48000400 	.word	0x48000400
 8000628:	48000800 	.word	0x48000800
 800062c:	48000c00 	.word	0x48000c00
 8000630:	4619      	mov	r1, r3
 8000632:	482e      	ldr	r0, [pc, #184]	; (80006ec <MX_GPIO_Init+0x3c4>)
 8000634:	f000 feac 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	4827      	ldr	r0, [pc, #156]	; (80006ec <MX_GPIO_Init+0x3c4>)
 8000650:	f000 fe9e 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000654:	2308      	movs	r3, #8
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4619      	mov	r1, r3
 800066a:	4821      	ldr	r0, [pc, #132]	; (80006f0 <MX_GPIO_Init+0x3c8>)
 800066c:	f000 fe90 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000670:	23c0      	movs	r3, #192	; 0xc0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000674:	2312      	movs	r3, #18
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067c:	2303      	movs	r3, #3
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000680:	2304      	movs	r3, #4
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	4819      	ldr	r0, [pc, #100]	; (80006f0 <MX_GPIO_Init+0x3c8>)
 800068c:	f000 fe80 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000696:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800069a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4619      	mov	r1, r3
 80006a6:	4812      	ldr	r0, [pc, #72]	; (80006f0 <MX_GPIO_Init+0x3c8>)
 80006a8:	f000 fe72 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4619      	mov	r1, r3
 80006c2:	480c      	ldr	r0, [pc, #48]	; (80006f4 <MX_GPIO_Init+0x3cc>)
 80006c4:	f000 fe64 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006cc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_GPIO_Init+0x3cc>)
 80006de:	f000 fe57 	bl	8001390 <HAL_GPIO_Init>

}
 80006e2:	bf00      	nop
 80006e4:	3730      	adds	r7, #48	; 0x30
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48000400 	.word	0x48000400
 80006f4:	48001000 	.word	0x48001000

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f000 fc26 	bl	8000f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f80a 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f7ff fe10 	bl	8000328 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000708:	f000 f86e 	bl	80007e8 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800070c:	f7ff fd7a 	bl	8000204 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000710:	f008 fd5a 	bl	80091c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000714:	e7fe      	b.n	8000714 <main+0x1c>
	...

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b096      	sub	sp, #88	; 0x58
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2244      	movs	r2, #68	; 0x44
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f00a ff0e 	bl	800b548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	463b      	mov	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800073a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800073e:	f002 fa53 	bl	8002be8 <HAL_PWREx_ControlVoltageScaling>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000748:	f000 f848 	bl	80007dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800074c:	f002 fa2e 	bl	8002bac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000750:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <SystemClock_Config+0xc0>)
 8000752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000756:	4a20      	ldr	r2, [pc, #128]	; (80007d8 <SystemClock_Config+0xc0>)
 8000758:	f023 0318 	bic.w	r3, r3, #24
 800075c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000760:	2314      	movs	r3, #20
 8000762:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000770:	2360      	movs	r3, #96	; 0x60
 8000772:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000778:	2301      	movs	r3, #1
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000780:	2328      	movs	r3, #40	; 0x28
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000784:	2307      	movs	r3, #7
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4618      	mov	r0, r3
 8000796:	f002 ff59 	bl	800364c <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007a0:	f000 f81c 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2303      	movs	r3, #3
 80007aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	2104      	movs	r1, #4
 80007bc:	4618      	mov	r0, r3
 80007be:	f003 fb2d 	bl	8003e1c <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007c8:	f000 f808 	bl	80007dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007cc:	f003 ffea 	bl	80047a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007d0:	bf00      	nop
 80007d2:	3758      	adds	r7, #88	; 0x58
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_QUADSPI_Init+0x44>)
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <MX_QUADSPI_Init+0x48>)
 80007f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_QUADSPI_Init+0x44>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_QUADSPI_Init+0x44>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_QUADSPI_Init+0x44>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 0x17;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_QUADSPI_Init+0x44>)
 8000806:	2217      	movs	r2, #23
 8000808:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_QUADSPI_Init+0x44>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_QUADSPI_Init+0x44>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_QUADSPI_Init+0x44>)
 8000818:	f002 fa5c 	bl	8002cd4 <HAL_QSPI_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000822:	f7ff ffdb 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200003e0 	.word	0x200003e0
 8000830:	a0001000 	.word	0xa0001000

08000834 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <HAL_QSPI_MspInit+0x7c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d128      	bne.n	80008a8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_QSPI_MspInit+0x80>)
 8000858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800085a:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <HAL_QSPI_MspInit+0x80>)
 800085c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000860:	6513      	str	r3, [r2, #80]	; 0x50
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_QSPI_MspInit+0x80>)
 8000864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_QSPI_MspInit+0x80>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <HAL_QSPI_MspInit+0x80>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <HAL_QSPI_MspInit+0x80>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0310 	and.w	r3, r3, #16
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|QUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000886:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800088a:	617b      	str	r3, [r7, #20]
                          |QUADSPI_BK1_IO2_Pin|QUADSPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000898:	230a      	movs	r3, #10
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <HAL_QSPI_MspInit+0x84>)
 80008a4:	f000 fd74 	bl	8001390 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	a0001000 	.word	0xa0001000
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48001000 	.word	0x48001000

080008bc <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&hqspi) != QSPI_OK)
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <BSP_QSPI_Init+0x2c>)
 80008c2:	f000 f98e 	bl	8000be2 <QSPI_ResetMemory>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <BSP_QSPI_Init+0x14>
  {
    return QSPI_NOT_SUPPORTED;
 80008cc:	2304      	movs	r3, #4
 80008ce:	e008      	b.n	80008e2 <BSP_QSPI_Init+0x26>
  }
 
  /* Configuration of the dummy cucles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != QSPI_OK)
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <BSP_QSPI_Init+0x2c>)
 80008d2:	f000 f9c8 	bl	8000c66 <QSPI_DummyCyclesCfg>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <BSP_QSPI_Init+0x24>
  {
    return QSPI_NOT_SUPPORTED;
 80008dc:	2304      	movs	r3, #4
 80008de:	e000      	b.n	80008e2 <BSP_QSPI_Init+0x26>
  }
  
  return QSPI_OK;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200003e0 	.word	0x200003e0

080008ec <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b092      	sub	sp, #72	; 0x48
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80008f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80008fe:	23eb      	movs	r3, #235	; 0xeb
 8000900:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000902:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090c:	61fb      	str	r3, [r7, #28]
  sCommand.Address           = ReadAddr;
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000912:	2300      	movs	r3, #0
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8000916:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 800091c:	230a      	movs	r3, #10
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = Size;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000928:	2300      	movs	r3, #0
 800092a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800092c:	2300      	movs	r3, #0
 800092e:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	f241 3288 	movw	r2, #5000	; 0x1388
 8000938:	4619      	mov	r1, r3
 800093a:	480c      	ldr	r0, [pc, #48]	; (800096c <BSP_QSPI_Read+0x80>)
 800093c:	f002 fa40 	bl	8002dc0 <HAL_QSPI_Command>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e00b      	b.n	8000962 <BSP_QSPI_Read+0x76>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800094a:	f241 3288 	movw	r2, #5000	; 0x1388
 800094e:	68f9      	ldr	r1, [r7, #12]
 8000950:	4806      	ldr	r0, [pc, #24]	; (800096c <BSP_QSPI_Read+0x80>)
 8000952:	f002 fb2a 	bl	8002faa <HAL_QSPI_Receive>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <BSP_QSPI_Read+0x74>
  {
    return QSPI_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	e000      	b.n	8000962 <BSP_QSPI_Read+0x76>
  }

  return QSPI_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3748      	adds	r7, #72	; 0x48
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200003e0 	.word	0x200003e0

08000970 <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b096      	sub	sp, #88	; 0x58
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	653b      	str	r3, [r7, #80]	; 0x50

  while (current_addr <= WriteAddr)
 8000980:	e003      	b.n	800098a <BSP_QSPI_Write+0x1a>
  {
    current_addr += N25Q128A_PAGE_SIZE;
 8000982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000984:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000988:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 800098a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	429a      	cmp	r2, r3
 8000990:	d9f7      	bls.n	8000982 <BSP_QSPI_Write+0x12>
  }
  current_size = current_addr - WriteAddr;
 8000992:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800099a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d901      	bls.n	80009a6 <BSP_QSPI_Write+0x36>
  {
    current_size = Size;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4413      	add	r3, r2
 80009b0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80009b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 80009b8:	2312      	movs	r3, #18
 80009ba:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 80009bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009c0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80009c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c6:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80009cc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80009da:	2300      	movs	r3, #0
 80009dc:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80009de:	2300      	movs	r3, #0
 80009e0:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 80009e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009e4:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 80009e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009e8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&hqspi) != QSPI_OK)
 80009ea:	4824      	ldr	r0, [pc, #144]	; (8000a7c <BSP_QSPI_Write+0x10c>)
 80009ec:	f000 f9b6 	bl	8000d5c <QSPI_WriteEnable>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <BSP_QSPI_Write+0x8a>
    {
      return QSPI_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e03b      	b.n	8000a72 <BSP_QSPI_Write+0x102>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a02:	4619      	mov	r1, r3
 8000a04:	481d      	ldr	r0, [pc, #116]	; (8000a7c <BSP_QSPI_Write+0x10c>)
 8000a06:	f002 f9db 	bl	8002dc0 <HAL_QSPI_Command>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <BSP_QSPI_Write+0xa4>
    {
      return QSPI_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e02e      	b.n	8000a72 <BSP_QSPI_Write+0x102>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a18:	68f9      	ldr	r1, [r7, #12]
 8000a1a:	4818      	ldr	r0, [pc, #96]	; (8000a7c <BSP_QSPI_Write+0x10c>)
 8000a1c:	f002 fa2e 	bl	8002e7c <HAL_QSPI_Transmit>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e023      	b.n	8000a72 <BSP_QSPI_Write+0x102>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8000a2a:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a2e:	4813      	ldr	r0, [pc, #76]	; (8000a7c <BSP_QSPI_Write+0x10c>)
 8000a30:	f000 f9dd 	bl	8000dee <QSPI_AutoPollingMemReady>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <BSP_QSPI_Write+0xce>
    {
      return QSPI_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e019      	b.n	8000a72 <BSP_QSPI_Write+0x102>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8000a3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a42:	4413      	add	r3, r2
 8000a44:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a4a:	4413      	add	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8000a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a50:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d203      	bcs.n	8000a62 <BSP_QSPI_Write+0xf2>
 8000a5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	e001      	b.n	8000a66 <BSP_QSPI_Write+0xf6>
 8000a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a66:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8000a68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d3b8      	bcc.n	80009e2 <BSP_QSPI_Write+0x72>
  
  return QSPI_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3758      	adds	r7, #88	; 0x58
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200003e0 	.word	0x200003e0

08000a80 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b090      	sub	sp, #64	; 0x40
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8c:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = SUBSECTOR_ERASE_CMD;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8000a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&hqspi) != QSPI_OK)
 8000aba:	4812      	ldr	r0, [pc, #72]	; (8000b04 <BSP_QSPI_Erase_Block+0x84>)
 8000abc:	f000 f94e 	bl	8000d5c <QSPI_WriteEnable>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e017      	b.n	8000afa <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480b      	ldr	r0, [pc, #44]	; (8000b04 <BSP_QSPI_Erase_Block+0x84>)
 8000ad6:	f002 f973 	bl	8002dc0 <HAL_QSPI_Command>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e00a      	b.n	8000afa <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&hqspi, N25Q128A_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8000ae4:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000ae8:	4806      	ldr	r0, [pc, #24]	; (8000b04 <BSP_QSPI_Erase_Block+0x84>)
 8000aea:	f000 f980 	bl	8000dee <QSPI_AutoPollingMemReady>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3740      	adds	r7, #64	; 0x40
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200003e0 	.word	0x200003e0

08000b08 <BSP_QSPI_GetStatus>:
/**
  * @brief  Reads current status of the QSPI memory.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetStatus(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b090      	sub	sp, #64	; 0x40
 8000b0c:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read flag status register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b12:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = READ_FLAG_STATUS_REG_CMD;
 8000b14:	2370      	movs	r3, #112	; 0x70
 8000b16:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8000b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  sCommand.NbData            = 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b42:	4619      	mov	r1, r3
 8000b44:	4816      	ldr	r0, [pc, #88]	; (8000ba0 <BSP_QSPI_GetStatus+0x98>)
 8000b46:	f002 f93b 	bl	8002dc0 <HAL_QSPI_Command>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <BSP_QSPI_GetStatus+0x4c>
  {
    return QSPI_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e020      	b.n	8000b96 <BSP_QSPI_GetStatus+0x8e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4810      	ldr	r0, [pc, #64]	; (8000ba0 <BSP_QSPI_GetStatus+0x98>)
 8000b5e:	f002 fa24 	bl	8002faa <HAL_QSPI_Receive>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <BSP_QSPI_GetStatus+0x64>
  {
    return QSPI_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e014      	b.n	8000b96 <BSP_QSPI_GetStatus+0x8e>
  }
  
  /* Check the value of the register */
  if ((reg & (N25Q128A_FSR_PRERR | N25Q128A_FSR_VPPERR | N25Q128A_FSR_PGERR | N25Q128A_FSR_ERERR)) != 0)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <BSP_QSPI_GetStatus+0x72>
  {
    return QSPI_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00d      	b.n	8000b96 <BSP_QSPI_GetStatus+0x8e>
  }
  else if ((reg & (N25Q128A_FSR_PGSUS | N25Q128A_FSR_ERSUS)) != 0)
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <BSP_QSPI_GetStatus+0x80>
  {
    return QSPI_SUSPENDED;
 8000b84:	2308      	movs	r3, #8
 8000b86:	e006      	b.n	8000b96 <BSP_QSPI_GetStatus+0x8e>
  }
  else if ((reg & N25Q128A_FSR_READY) != 0)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	da01      	bge.n	8000b94 <BSP_QSPI_GetStatus+0x8c>
  {
    return QSPI_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	e000      	b.n	8000b96 <BSP_QSPI_GetStatus+0x8e>
  }
  else
  {
    return QSPI_BUSY;
 8000b94:	2302      	movs	r3, #2
  }
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3740      	adds	r7, #64	; 0x40
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200003e0 	.word	0x200003e0

08000ba4 <BSP_QSPI_GetInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo: pointer on the configuration structure  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetInfo(QSPI_Info* pInfo)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize          = N25Q128A_FLASH_SIZE;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bb2:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = N25Q128A_SUBSECTOR_SIZE;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bba:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber = (N25Q128A_FLASH_SIZE/N25Q128A_SUBSECTOR_SIZE);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bc2:	609a      	str	r2, [r3, #8]
  pInfo->ProgPageSize       = N25Q128A_PAGE_SIZE;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bca:	60da      	str	r2, [r3, #12]
  pInfo->ProgPagesNumber    = (N25Q128A_FLASH_SIZE/N25Q128A_PAGE_SIZE);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bd2:	611a      	str	r2, [r3, #16]
  
  return QSPI_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b090      	sub	sp, #64	; 0x40
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bee:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8000bf0:	2366      	movs	r3, #102	; 0x66
 8000bf2:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c18:	4619      	mov	r1, r3
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f002 f8d0 	bl	8002dc0 <HAL_QSPI_Command>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e019      	b.n	8000c5e <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8000c2a:	2399      	movs	r3, #153	; 0x99
 8000c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c36:	4619      	mov	r1, r3
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f002 f8c1 	bl	8002dc0 <HAL_QSPI_Command>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e00a      	b.n	8000c5e <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8000c48:	f241 3188 	movw	r1, #5000	; 0x1388
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f000 f8ce 	bl	8000dee <QSPI_AutoPollingMemReady>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e000      	b.n	8000c5e <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3740      	adds	r7, #64	; 0x40
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b094      	sub	sp, #80	; 0x50
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 8000c74:	2385      	movs	r3, #133	; 0x85
 8000c76:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8000c80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c92:	2300      	movs	r3, #0
 8000c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000c96:	2300      	movs	r3, #0
 8000c98:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f002 f88b 	bl	8002dc0 <HAL_QSPI_Command>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e04f      	b.n	8000d54 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cb4:	f107 030b 	add.w	r3, r7, #11
 8000cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f002 f973 	bl	8002faa <HAL_QSPI_Receive>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e042      	b.n	8000d54 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 f844 	bl	8000d5c <QSPI_WriteEnable>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e03a      	b.n	8000d54 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8000cde:	2381      	movs	r3, #129	; 0x81
 8000ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8000ce2:	7afb      	ldrb	r3, [r7, #11]
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	b25a      	sxtb	r2, r3
 8000cec:	23f0      	movs	r3, #240	; 0xf0
 8000cee:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cf2:	fa93 f3a3 	rbit	r3, r3
 8000cf6:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <QSPI_DummyCyclesCfg+0xa0>
  {
    return 32U;
 8000d02:	2320      	movs	r3, #32
 8000d04:	e003      	b.n	8000d0e <QSPI_DummyCyclesCfg+0xa8>
  }
  return __builtin_clz(value);
 8000d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d08:	fab3 f383 	clz	r3, r3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	4619      	mov	r1, r3
 8000d10:	230a      	movs	r3, #10
 8000d12:	408b      	lsls	r3, r1
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	72fb      	strb	r3, [r7, #11]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d26:	4619      	mov	r1, r3
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f002 f849 	bl	8002dc0 <HAL_QSPI_Command>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e00d      	b.n	8000d54 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d38:	f107 030b 	add.w	r3, r7, #11
 8000d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d40:	4619      	mov	r1, r3
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f002 f89a 	bl	8002e7c <HAL_QSPI_Transmit>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e000      	b.n	8000d54 <QSPI_DummyCyclesCfg+0xee>
  }
  
  return QSPI_OK;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3750      	adds	r7, #80	; 0x50
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b096      	sub	sp, #88	; 0x58
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d82:	2300      	movs	r3, #0
 8000d84:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000d86:	2300      	movs	r3, #0
 8000d88:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d92:	4619      	mov	r1, r3
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f002 f813 	bl	8002dc0 <HAL_QSPI_Command>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e020      	b.n	8000de6 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = N25Q128A_SR_WREN;
 8000da4:	2302      	movs	r3, #2
 8000da6:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 8000da8:	2302      	movs	r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8000db4:	2310      	movs	r3, #16
 8000db6:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000db8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dbc:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8000dc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dc6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dc8:	f107 0208 	add.w	r2, r7, #8
 8000dcc:	f107 0120 	add.w	r1, r7, #32
 8000dd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f002 f98a 	bl	80030ee <HAL_QSPI_AutoPolling>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e000      	b.n	8000de6 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3758      	adds	r7, #88	; 0x58
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b096      	sub	sp, #88	; 0x58
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8000dfe:	2305      	movs	r3, #5
 8000e00:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8000e0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e0e:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8000e30:	2310      	movs	r3, #16
 8000e32:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000e34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e38:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &sCommand, &sConfig, Timeout) != HAL_OK)
 8000e3a:	f107 0208 	add.w	r2, r7, #8
 8000e3e:	f107 0120 	add.w	r1, r7, #32
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f002 f952 	bl	80030ee <HAL_QSPI_AutoPolling>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3758      	adds	r7, #88	; 0x58
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_MspInit+0x4c>)
 8000e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6a:	4a10      	ldr	r2, [pc, #64]	; (8000eac <HAL_MspInit+0x4c>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6613      	str	r3, [r2, #96]	; 0x60
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_MspInit+0x4c>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_MspInit+0x4c>)
 8000e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_MspInit+0x4c>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e88:	6593      	str	r3, [r2, #88]	; 0x58
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_MspInit+0x4c>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	210f      	movs	r1, #15
 8000e9a:	f06f 0001 	mvn.w	r0, #1
 8000e9e:	f000 f9f4 	bl	800128a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000

08000eb0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb4:	f000 f8a6 	bl	8001004 <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8000eb8:	f008 f9ed 	bl	8009296 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB OTG FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <OTG_FS_IRQHandler+0x10>)
 8000ec6:	f000 fef6 	bl	8001cb6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20009a50 	.word	0x20009a50

08000ed4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <SystemInit+0x20>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <SystemInit+0x20>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000efc:	f7ff ffea 	bl	8000ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f02:	490d      	ldr	r1, [pc, #52]	; (8000f38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <LoopForever+0xe>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f18:	4c0a      	ldr	r4, [pc, #40]	; (8000f44 <LoopForever+0x16>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f26:	f00a faeb 	bl	800b500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f2a:	f7ff fbe5 	bl	80006f8 <main>

08000f2e <LoopForever>:

LoopForever:
    b LoopForever
 8000f2e:	e7fe      	b.n	8000f2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8000f3c:	0800b670 	.word	0x0800b670
  ldr r2, =_sbss
 8000f40:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8000f44:	2000aed0 	.word	0x2000aed0

08000f48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC1_2_IRQHandler>
	...

08000f4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_Init+0x3c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_Init+0x3c>)
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f62:	2003      	movs	r0, #3
 8000f64:	f000 f986 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f68:	200f      	movs	r0, #15
 8000f6a:	f000 f80f 	bl	8000f8c <HAL_InitTick>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	e001      	b.n	8000f7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f7a:	f7ff ff71 	bl	8000e60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40022000 	.word	0x40022000

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <HAL_InitTick+0x6c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d023      	beq.n	8000fe8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <HAL_InitTick+0x70>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <HAL_InitTick+0x6c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f99f 	bl	80012fa <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10f      	bne.n	8000fe2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d809      	bhi.n	8000fdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 f95b 	bl	800128a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <HAL_InitTick+0x74>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e007      	b.n	8000fec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e004      	b.n	8000fec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e001      	b.n	8000fec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000004 	.word	0x20000004

08001004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x24>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_IncTick+0x24>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008
 8001028:	20000424 	.word	0x20000424

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000424 	.word	0x20000424

08001044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105c:	d005      	beq.n	800106a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_Delay+0x44>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800106a:	bf00      	nop
 800106c:	f7ff ffde 	bl	800102c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	429a      	cmp	r2, r3
 800107a:	d8f7      	bhi.n	800106c <HAL_Delay+0x28>
  {
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db12      	blt.n	8001164 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	490a      	ldr	r1, [pc, #40]	; (8001170 <__NVIC_DisableIRQ+0x44>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	3320      	adds	r3, #32
 8001154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001158:	f3bf 8f4f 	dsb	sy
}
 800115c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800115e:	f3bf 8f6f 	isb	sy
}
 8001162:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	; (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	; (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f7ff ff8e 	bl	8001174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff05 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff1a 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff8e 	bl	80011c8 <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5d 	bl	8001174 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff0d 	bl	80010f0 <__NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff1d 	bl	800112c <__NVIC_DisableIRQ>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff94 	bl	8001230 <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001312:	b480      	push	{r7}
 8001314:	b085      	sub	sp, #20
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d008      	beq.n	800133c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2204      	movs	r2, #4
 800132e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e022      	b.n	8001382 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 020e 	bic.w	r2, r2, #14
 800134a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001360:	f003 021c 	and.w	r2, r3, #28
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	2101      	movs	r1, #1
 800136a:	fa01 f202 	lsl.w	r2, r1, r2
 800136e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139e:	e17f      	b.n	80016a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2101      	movs	r1, #1
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	4013      	ands	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8171 	beq.w	800169a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d005      	beq.n	80013d0 <HAL_GPIO_Init+0x40>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d130      	bne.n	8001432 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001406:	2201      	movs	r2, #1
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	f003 0201 	and.w	r2, r3, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	2b03      	cmp	r3, #3
 800143c:	d118      	bne.n	8001470 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001444:	2201      	movs	r2, #1
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	08db      	lsrs	r3, r3, #3
 800145a:	f003 0201 	and.w	r2, r3, #1
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b03      	cmp	r3, #3
 800147a:	d017      	beq.n	80014ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d123      	bne.n	8001500 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	08da      	lsrs	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3208      	adds	r2, #8
 80014c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	08da      	lsrs	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3208      	adds	r2, #8
 80014fa:	6939      	ldr	r1, [r7, #16]
 80014fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0203 	and.w	r2, r3, #3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80ac 	beq.w	800169a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	4b5f      	ldr	r3, [pc, #380]	; (80016c0 <HAL_GPIO_Init+0x330>)
 8001544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001546:	4a5e      	ldr	r2, [pc, #376]	; (80016c0 <HAL_GPIO_Init+0x330>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6613      	str	r3, [r2, #96]	; 0x60
 800154e:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <HAL_GPIO_Init+0x330>)
 8001550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800155a:	4a5a      	ldr	r2, [pc, #360]	; (80016c4 <HAL_GPIO_Init+0x334>)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001584:	d025      	beq.n	80015d2 <HAL_GPIO_Init+0x242>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4f      	ldr	r2, [pc, #316]	; (80016c8 <HAL_GPIO_Init+0x338>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d01f      	beq.n	80015ce <HAL_GPIO_Init+0x23e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4e      	ldr	r2, [pc, #312]	; (80016cc <HAL_GPIO_Init+0x33c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <HAL_GPIO_Init+0x23a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4d      	ldr	r2, [pc, #308]	; (80016d0 <HAL_GPIO_Init+0x340>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0x236>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4c      	ldr	r2, [pc, #304]	; (80016d4 <HAL_GPIO_Init+0x344>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00d      	beq.n	80015c2 <HAL_GPIO_Init+0x232>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4b      	ldr	r2, [pc, #300]	; (80016d8 <HAL_GPIO_Init+0x348>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d007      	beq.n	80015be <HAL_GPIO_Init+0x22e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4a      	ldr	r2, [pc, #296]	; (80016dc <HAL_GPIO_Init+0x34c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_GPIO_Init+0x22a>
 80015b6:	2306      	movs	r3, #6
 80015b8:	e00c      	b.n	80015d4 <HAL_GPIO_Init+0x244>
 80015ba:	2307      	movs	r3, #7
 80015bc:	e00a      	b.n	80015d4 <HAL_GPIO_Init+0x244>
 80015be:	2305      	movs	r3, #5
 80015c0:	e008      	b.n	80015d4 <HAL_GPIO_Init+0x244>
 80015c2:	2304      	movs	r3, #4
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x244>
 80015c6:	2303      	movs	r3, #3
 80015c8:	e004      	b.n	80015d4 <HAL_GPIO_Init+0x244>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_Init+0x244>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x244>
 80015d2:	2300      	movs	r3, #0
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	f002 0203 	and.w	r2, r2, #3
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	4093      	lsls	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015e4:	4937      	ldr	r1, [pc, #220]	; (80016c4 <HAL_GPIO_Init+0x334>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015f2:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <HAL_GPIO_Init+0x350>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001616:	4a32      	ldr	r2, [pc, #200]	; (80016e0 <HAL_GPIO_Init+0x350>)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800161c:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <HAL_GPIO_Init+0x350>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001640:	4a27      	ldr	r2, [pc, #156]	; (80016e0 <HAL_GPIO_Init+0x350>)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <HAL_GPIO_Init+0x350>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800166a:	4a1d      	ldr	r2, [pc, #116]	; (80016e0 <HAL_GPIO_Init+0x350>)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_GPIO_Init+0x350>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001694:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <HAL_GPIO_Init+0x350>)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa22 f303 	lsr.w	r3, r2, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f47f ae78 	bne.w	80013a0 <HAL_GPIO_Init+0x10>
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	371c      	adds	r7, #28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010000 	.word	0x40010000
 80016c8:	48000400 	.word	0x48000400
 80016cc:	48000800 	.word	0x48000800
 80016d0:	48000c00 	.word	0x48000c00
 80016d4:	48001000 	.word	0x48001000
 80016d8:	48001400 	.word	0x48001400
 80016dc:	48001800 	.word	0x48001800
 80016e0:	40010400 	.word	0x40010400

080016e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80016f2:	e0cd      	b.n	8001890 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80016f4:	2201      	movs	r2, #1
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80c0 	beq.w	800188a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800170a:	4a68      	ldr	r2, [pc, #416]	; (80018ac <HAL_GPIO_DeInit+0x1c8>)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	3302      	adds	r3, #2
 8001712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001716:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	4013      	ands	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001732:	d025      	beq.n	8001780 <HAL_GPIO_DeInit+0x9c>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a5e      	ldr	r2, [pc, #376]	; (80018b0 <HAL_GPIO_DeInit+0x1cc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d01f      	beq.n	800177c <HAL_GPIO_DeInit+0x98>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a5d      	ldr	r2, [pc, #372]	; (80018b4 <HAL_GPIO_DeInit+0x1d0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d019      	beq.n	8001778 <HAL_GPIO_DeInit+0x94>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a5c      	ldr	r2, [pc, #368]	; (80018b8 <HAL_GPIO_DeInit+0x1d4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d013      	beq.n	8001774 <HAL_GPIO_DeInit+0x90>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a5b      	ldr	r2, [pc, #364]	; (80018bc <HAL_GPIO_DeInit+0x1d8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d00d      	beq.n	8001770 <HAL_GPIO_DeInit+0x8c>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a5a      	ldr	r2, [pc, #360]	; (80018c0 <HAL_GPIO_DeInit+0x1dc>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d007      	beq.n	800176c <HAL_GPIO_DeInit+0x88>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a59      	ldr	r2, [pc, #356]	; (80018c4 <HAL_GPIO_DeInit+0x1e0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d101      	bne.n	8001768 <HAL_GPIO_DeInit+0x84>
 8001764:	2306      	movs	r3, #6
 8001766:	e00c      	b.n	8001782 <HAL_GPIO_DeInit+0x9e>
 8001768:	2307      	movs	r3, #7
 800176a:	e00a      	b.n	8001782 <HAL_GPIO_DeInit+0x9e>
 800176c:	2305      	movs	r3, #5
 800176e:	e008      	b.n	8001782 <HAL_GPIO_DeInit+0x9e>
 8001770:	2304      	movs	r3, #4
 8001772:	e006      	b.n	8001782 <HAL_GPIO_DeInit+0x9e>
 8001774:	2303      	movs	r3, #3
 8001776:	e004      	b.n	8001782 <HAL_GPIO_DeInit+0x9e>
 8001778:	2302      	movs	r3, #2
 800177a:	e002      	b.n	8001782 <HAL_GPIO_DeInit+0x9e>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_GPIO_DeInit+0x9e>
 8001780:	2300      	movs	r3, #0
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	f002 0203 	and.w	r2, r2, #3
 8001788:	0092      	lsls	r2, r2, #2
 800178a:	4093      	lsls	r3, r2
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	429a      	cmp	r2, r3
 8001790:	d132      	bne.n	80017f8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001792:	4b4d      	ldr	r3, [pc, #308]	; (80018c8 <HAL_GPIO_DeInit+0x1e4>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	494b      	ldr	r1, [pc, #300]	; (80018c8 <HAL_GPIO_DeInit+0x1e4>)
 800179c:	4013      	ands	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80017a0:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <HAL_GPIO_DeInit+0x1e4>)
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	4947      	ldr	r1, [pc, #284]	; (80018c8 <HAL_GPIO_DeInit+0x1e4>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80017ae:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_GPIO_DeInit+0x1e4>)
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4944      	ldr	r1, [pc, #272]	; (80018c8 <HAL_GPIO_DeInit+0x1e4>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80017bc:	4b42      	ldr	r3, [pc, #264]	; (80018c8 <HAL_GPIO_DeInit+0x1e4>)
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	4940      	ldr	r1, [pc, #256]	; (80018c8 <HAL_GPIO_DeInit+0x1e4>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80017da:	4a34      	ldr	r2, [pc, #208]	; (80018ac <HAL_GPIO_DeInit+0x1c8>)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	43da      	mvns	r2, r3
 80017ea:	4830      	ldr	r0, [pc, #192]	; (80018ac <HAL_GPIO_DeInit+0x1c8>)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	400a      	ands	r2, r1
 80017f2:	3302      	adds	r3, #2
 80017f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	2103      	movs	r1, #3
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	08da      	lsrs	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3208      	adds	r2, #8
 8001814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	08d2      	lsrs	r2, r2, #3
 800182c:	4019      	ands	r1, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3208      	adds	r2, #8
 8001832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2103      	movs	r1, #3
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	401a      	ands	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	2101      	movs	r1, #1
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	401a      	ands	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2103      	movs	r1, #3
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	401a      	ands	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800187a:	2101      	movs	r1, #1
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	401a      	ands	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	fa22 f303 	lsr.w	r3, r2, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	f47f af2b 	bne.w	80016f4 <HAL_GPIO_DeInit+0x10>
  }
}
 800189e:	bf00      	nop
 80018a0:	bf00      	nop
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40010000 	.word	0x40010000
 80018b0:	48000400 	.word	0x48000400
 80018b4:	48000800 	.word	0x48000800
 80018b8:	48000c00 	.word	0x48000c00
 80018bc:	48001000 	.word	0x48001000
 80018c0:	48001400 	.word	0x48001400
 80018c4:	48001800 	.word	0x48001800
 80018c8:	40010400 	.word	0x40010400

080018cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	887b      	ldrh	r3, [r7, #2]
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018e4:	2301      	movs	r3, #1
 80018e6:	73fb      	strb	r3, [r7, #15]
 80018e8:	e001      	b.n	80018ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
 8001908:	4613      	mov	r3, r2
 800190a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800190c:	787b      	ldrb	r3, [r7, #1]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001918:	e002      	b.n	8001920 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4013      	ands	r3, r2
 8001944:	041a      	lsls	r2, r3, #16
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43d9      	mvns	r1, r3
 800194a:	887b      	ldrh	r3, [r7, #2]
 800194c:	400b      	ands	r3, r1
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	b08f      	sub	sp, #60	; 0x3c
 8001964:	af0a      	add	r7, sp, #40	; 0x28
 8001966:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e116      	b.n	8001ba0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d106      	bne.n	8001992 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f009 f8eb 	bl	800ab68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2203      	movs	r2, #3
 8001996:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 f9b2 	bl	8004d1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	687e      	ldr	r6, [r7, #4]
 80019be:	466d      	mov	r5, sp
 80019c0:	f106 0410 	add.w	r4, r6, #16
 80019c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80019d4:	1d33      	adds	r3, r6, #4
 80019d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d8:	6838      	ldr	r0, [r7, #0]
 80019da:	f003 f8c5 	bl	8004b68 <USB_CoreInit>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0d7      	b.n	8001ba0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 f9a0 	bl	8004d3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	e04a      	b.n	8001a98 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	333d      	adds	r3, #61	; 0x3d
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	333c      	adds	r3, #60	; 0x3c
 8001a26:	7bfa      	ldrb	r2, [r7, #15]
 8001a28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	b298      	uxth	r0, r3
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	1a9b      	subs	r3, r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3342      	adds	r3, #66	; 0x42
 8001a3e:	4602      	mov	r2, r0
 8001a40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a42:	7bfa      	ldrb	r2, [r7, #15]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	333f      	adds	r3, #63	; 0x3f
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	1a9b      	subs	r3, r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	3344      	adds	r3, #68	; 0x44
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	1a9b      	subs	r3, r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	3348      	adds	r3, #72	; 0x48
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3350      	adds	r3, #80	; 0x50
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	3301      	adds	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d3af      	bcc.n	8001a02 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	e044      	b.n	8001b32 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001abe:	7bfa      	ldrb	r2, [r7, #15]
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d3b5      	bcc.n	8001aa8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	687e      	ldr	r6, [r7, #4]
 8001b44:	466d      	mov	r5, sp
 8001b46:	f106 0410 	add.w	r4, r6, #16
 8001b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b5a:	1d33      	adds	r3, r6, #4
 8001b5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b5e:	6838      	ldr	r0, [r7, #0]
 8001b60:	f003 f938 	bl	8004dd4 <USB_DevInit>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e014      	b.n	8001ba0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d102      	bne.n	8001b94 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 ffdc 	bl	8002b4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f004 f959 	bl	8005e50 <USB_DevDisconnect>

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ba8 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e015      	b.n	8001be6 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f004 f8ac 	bl	8005d24 <USB_StopDevice>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e007      	b.n	8001be6 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f009 f858 	bl	800ac8c <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_PCD_Start+0x1c>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e01c      	b.n	8001c44 <HAL_PCD_Start+0x56>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d105      	bne.n	8001c26 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 f864 	bl	8004cf8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 f8ea 	bl	8005e0e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_PCD_Stop+0x1c>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e022      	b.n	8001cae <HAL_PCD_Stop+0x62>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 f850 	bl	8004d1a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 f8e6 	bl	8005e50 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2110      	movs	r1, #16
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 f9ee 	bl	800506c <USB_FlushTxFifo>

  if (hpcd->Init.battery_charging_enable == 1U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <HAL_PCD_Stop+0x58>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cb6:	b590      	push	{r4, r7, lr}
 8001cb8:	b08d      	sub	sp, #52	; 0x34
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f004 f973 	bl	8005fb8 <USB_GetMode>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f040 8384 	bne.w	80023e2 <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 f8d7 	bl	8005e92 <USB_ReadInterrupts>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 837a 	beq.w	80023e0 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f004 f8ce 	bl	8005e92 <USB_ReadInterrupts>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d107      	bne.n	8001d10 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f002 0202 	and.w	r2, r2, #2
 8001d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f004 f8bc 	bl	8005e92 <USB_ReadInterrupts>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b10      	cmp	r3, #16
 8001d22:	d161      	bne.n	8001de8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0210 	bic.w	r2, r2, #16
 8001d32:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	f003 020f 	and.w	r2, r3, #15
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	3304      	adds	r3, #4
 8001d52:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	0c5b      	lsrs	r3, r3, #17
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d124      	bne.n	8001daa <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d035      	beq.n	8001dd8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	6a38      	ldr	r0, [r7, #32]
 8001d80:	f003 fea4 	bl	8005acc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d90:	441a      	add	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001da2:	441a      	add	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	619a      	str	r2, [r3, #24]
 8001da8:	e016      	b.n	8001dd8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	0c5b      	lsrs	r3, r3, #17
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d110      	bne.n	8001dd8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6a38      	ldr	r0, [r7, #32]
 8001dc2:	f003 fe83 	bl	8005acc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	699a      	ldr	r2, [r3, #24]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dd2:	441a      	add	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0210 	orr.w	r2, r2, #16
 8001de6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f004 f850 	bl	8005e92 <USB_ReadInterrupts>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001df8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001dfc:	d16e      	bne.n	8001edc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f004 f856 	bl	8005eb8 <USB_ReadDevAllOutEpInterrupt>
 8001e0c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e0e:	e062      	b.n	8001ed6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d057      	beq.n	8001eca <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f004 f87b 	bl	8005f20 <USB_ReadDevOutEPInterrupt>
 8001e2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00c      	beq.n	8001e50 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e42:	461a      	mov	r2, r3
 8001e44:	2301      	movs	r3, #1
 8001e46:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fda4 	bl	8002998 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00c      	beq.n	8001e74 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	015a      	lsls	r2, r3, #5
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e66:	461a      	mov	r2, r3
 8001e68:	2308      	movs	r3, #8
 8001e6a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fde0 	bl	8002a34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d008      	beq.n	8001e90 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2310      	movs	r3, #16
 8001e8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2320      	movs	r3, #32
 8001eaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	3301      	adds	r3, #1
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d199      	bne.n	8001e10 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 ffd6 	bl	8005e92 <USB_ReadInterrupts>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ef0:	f040 808c 	bne.w	800200c <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 fff7 	bl	8005eec <USB_ReadDevAllInEpInterrupt>
 8001efe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f04:	e07e      	b.n	8002004 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d073      	beq.n	8001ff8 <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 f81e 	bl	8005f5c <USB_ReadDevInEPInterrupt>
 8001f20:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	2201      	movs	r2, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69f9      	ldr	r1, [r7, #28]
 8001f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2301      	movs	r3, #1
 8001f60:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	4619      	mov	r1, r3
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f008 fef8 	bl	800ad5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f84:	461a      	mov	r2, r3
 8001f86:	2308      	movs	r3, #8
 8001f88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2310      	movs	r3, #16
 8001fa4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2340      	movs	r3, #64	; 0x40
 8001fc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00c      	beq.n	8001fe6 <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001fcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fce:	6a38      	ldr	r0, [r7, #32]
 8001fd0:	f003 f84c 	bl	800506c <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fc47 	bl	8002886 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002000:	085b      	lsrs	r3, r3, #1
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	2b00      	cmp	r3, #0
 8002008:	f47f af7d 	bne.w	8001f06 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f003 ff3e 	bl	8005e92 <USB_ReadInterrupts>
 8002016:	4603      	mov	r3, r0
 8002018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800201c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002020:	d122      	bne.n	8002068 <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800203c:	2b01      	cmp	r3, #1
 800203e:	d108      	bne.n	8002052 <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002048:	2100      	movs	r1, #0
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fda2 	bl	8002b94 <HAL_PCDEx_LPM_Callback>
 8002050:	e002      	b.n	8002058 <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f008 fef0 	bl	800ae38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002066:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f003 ff10 	bl	8005e92 <USB_ReadInterrupts>
 8002072:	4603      	mov	r3, r0
 8002074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800207c:	d112      	bne.n	80020a4 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d102      	bne.n	8002094 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f008 feac 	bl	800adec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80020a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 fef2 	bl	8005e92 <USB_ReadInterrupts>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020b8:	d121      	bne.n	80020fe <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695a      	ldr	r2, [r3, #20]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80020c8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d111      	bne.n	80020f8 <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	f003 020f 	and.w	r2, r3, #15
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80020ee:	2101      	movs	r1, #1
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fd4f 	bl	8002b94 <HAL_PCDEx_LPM_Callback>
 80020f6:	e002      	b.n	80020fe <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f008 fe77 	bl	800adec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fec5 	bl	8005e92 <USB_ReadInterrupts>
 8002108:	4603      	mov	r3, r0
 800210a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800210e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002112:	f040 80b5 	bne.w	8002280 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2110      	movs	r1, #16
 8002130:	4618      	mov	r0, r3
 8002132:	f002 ff9b 	bl	800506c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002136:	2300      	movs	r3, #0
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800213a:	e046      	b.n	80021ca <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	4413      	add	r3, r2
 8002144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002148:	461a      	mov	r2, r3
 800214a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800214e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	4413      	add	r3, r2
 8002158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002160:	0151      	lsls	r1, r2, #5
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	440a      	add	r2, r1
 8002166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800216a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800216e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	4413      	add	r3, r2
 8002178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217c:	461a      	mov	r2, r3
 800217e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002182:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	4413      	add	r3, r2
 800218c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002194:	0151      	lsls	r1, r2, #5
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	440a      	add	r2, r1
 800219a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800219e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021b4:	0151      	lsls	r1, r2, #5
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	440a      	add	r2, r1
 80021ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c6:	3301      	adds	r3, #1
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d3b3      	bcc.n	800213c <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80021e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d016      	beq.n	800221e <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002200:	f043 030b 	orr.w	r3, r3, #11
 8002204:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002216:	f043 030b 	orr.w	r3, r3, #11
 800221a:	6453      	str	r3, [r2, #68]	; 0x44
 800221c:	e015      	b.n	800224a <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800222c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002230:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002234:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002244:	f043 030b 	orr.w	r3, r3, #11
 8002248:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002258:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800225c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002268:	4619      	mov	r1, r3
 800226a:	4610      	mov	r0, r2
 800226c:	f003 fed6 	bl	800601c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800227e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f003 fe04 	bl	8005e92 <USB_ReadInterrupts>
 800228a:	4603      	mov	r3, r0
 800228c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002294:	d124      	bne.n	80022e0 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f003 fe9a 	bl	8005fd4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 ff5a 	bl	800515e <USB_GetDevSpeed>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681c      	ldr	r4, [r3, #0]
 80022b6:	f001 ff1f 	bl	80040f8 <HAL_RCC_GetHCLKFreq>
 80022ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	4620      	mov	r0, r4
 80022c6:	f002 fc7b 	bl	8004bc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f008 fd6f 	bl	800adae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80022de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 fdd4 	bl	8005e92 <USB_ReadInterrupts>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d10a      	bne.n	800230a <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f008 fd4c 	bl	800ad92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f002 0208 	and.w	r2, r2, #8
 8002308:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f003 fdbf 	bl	8005e92 <USB_ReadInterrupts>
 8002314:	4603      	mov	r3, r0
 8002316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800231e:	d10f      	bne.n	8002340 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	b2db      	uxtb	r3, r3
 8002328:	4619      	mov	r1, r3
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f008 fdbe 	bl	800aeac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800233e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f003 fda4 	bl	8005e92 <USB_ReadInterrupts>
 800234a:	4603      	mov	r3, r0
 800234c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002350:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002354:	d10f      	bne.n	8002376 <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f008 fd91 	bl	800ae88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002374:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f003 fd89 	bl	8005e92 <USB_ReadInterrupts>
 8002380:	4603      	mov	r3, r0
 8002382:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238a:	d10a      	bne.n	80023a2 <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f008 fd9f 	bl	800aed0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 fd73 	bl	8005e92 <USB_ReadInterrupts>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d115      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f008 fd8f 	bl	800aeec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	e000      	b.n	80023e2 <HAL_PCD_IRQHandler+0x72c>
      return;
 80023e0:	bf00      	nop
    }
  }
}
 80023e2:	3734      	adds	r7, #52	; 0x34
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}

080023e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_PCD_SetAddress+0x1a>
 80023fe:	2302      	movs	r3, #2
 8002400:	e013      	b.n	800242a <HAL_PCD_SetAddress+0x42>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f003 fcd1 	bl	8005dc2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	4608      	mov	r0, r1
 800243c:	4611      	mov	r1, r2
 800243e:	461a      	mov	r2, r3
 8002440:	4603      	mov	r3, r0
 8002442:	70fb      	strb	r3, [r7, #3]
 8002444:	460b      	mov	r3, r1
 8002446:	803b      	strh	r3, [r7, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002454:	2b00      	cmp	r3, #0
 8002456:	da0f      	bge.n	8002478 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	3338      	adds	r3, #56	; 0x38
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	3304      	adds	r3, #4
 800246e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	705a      	strb	r2, [r3, #1]
 8002476:	e00f      	b.n	8002498 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	f003 020f 	and.w	r2, r3, #15
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	3304      	adds	r3, #4
 8002490:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024a4:	883a      	ldrh	r2, [r7, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	78ba      	ldrb	r2, [r7, #2]
 80024ae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	785b      	ldrb	r3, [r3, #1]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024c2:	78bb      	ldrb	r3, [r7, #2]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d102      	bne.n	80024ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_PCD_EP_Open+0xaa>
 80024d8:	2302      	movs	r3, #2
 80024da:	e00e      	b.n	80024fa <HAL_PCD_EP_Open+0xc8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68f9      	ldr	r1, [r7, #12]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f002 fe56 	bl	800519c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80024f8:	7afb      	ldrb	r3, [r7, #11]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	460b      	mov	r3, r1
 800250c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800250e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002512:	2b00      	cmp	r3, #0
 8002514:	da0f      	bge.n	8002536 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	f003 020f 	and.w	r2, r3, #15
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	3338      	adds	r3, #56	; 0x38
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	3304      	adds	r3, #4
 800252c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	705a      	strb	r2, [r3, #1]
 8002534:	e00f      	b.n	8002556 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	f003 020f 	and.w	r2, r3, #15
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4413      	add	r3, r2
 800254c:	3304      	adds	r3, #4
 800254e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	b2da      	uxtb	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_PCD_EP_Close+0x6e>
 800256c:	2302      	movs	r3, #2
 800256e:	e00e      	b.n	800258e <HAL_PCD_EP_Close+0x8c>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68f9      	ldr	r1, [r7, #12]
 800257e:	4618      	mov	r0, r3
 8002580:	f002 fe94 	bl	80052ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	460b      	mov	r3, r1
 80025a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025a6:	7afb      	ldrb	r3, [r7, #11]
 80025a8:	f003 020f 	and.w	r2, r3, #15
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4413      	add	r3, r2
 80025bc:	3304      	adds	r3, #4
 80025be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2200      	movs	r2, #0
 80025d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025d8:	7afb      	ldrb	r3, [r7, #11]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025e4:	7afb      	ldrb	r3, [r7, #11]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6979      	ldr	r1, [r7, #20]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 f911 	bl	800581c <USB_EP0StartXfer>
 80025fa:	e005      	b.n	8002608 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6979      	ldr	r1, [r7, #20]
 8002602:	4618      	mov	r0, r3
 8002604:	f002 ff2e 	bl	8005464 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	f003 020f 	and.w	r2, r3, #15
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002634:	681b      	ldr	r3, [r3, #0]
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	460b      	mov	r3, r1
 8002650:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002652:	7afb      	ldrb	r3, [r7, #11]
 8002654:	f003 020f 	and.w	r2, r3, #15
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	3338      	adds	r3, #56	; 0x38
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4413      	add	r3, r2
 8002666:	3304      	adds	r3, #4
 8002668:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2201      	movs	r2, #1
 8002680:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002682:	7afb      	ldrb	r3, [r7, #11]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	b2da      	uxtb	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800268e:	7afb      	ldrb	r3, [r7, #11]
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	2b00      	cmp	r3, #0
 8002696:	d106      	bne.n	80026a6 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6979      	ldr	r1, [r7, #20]
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 f8bc 	bl	800581c <USB_EP0StartXfer>
 80026a4:	e005      	b.n	80026b2 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6979      	ldr	r1, [r7, #20]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f002 fed9 	bl	8005464 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	f003 020f 	and.w	r2, r3, #15
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d901      	bls.n	80026da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e04e      	b.n	8002778 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	da0f      	bge.n	8002702 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	f003 020f 	and.w	r2, r3, #15
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	3338      	adds	r3, #56	; 0x38
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	3304      	adds	r3, #4
 80026f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	705a      	strb	r2, [r3, #1]
 8002700:	e00d      	b.n	800271e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	4413      	add	r3, r2
 8002714:	3304      	adds	r3, #4
 8002716:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	b2da      	uxtb	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_PCD_EP_SetStall+0x82>
 800273a:	2302      	movs	r3, #2
 800273c:	e01c      	b.n	8002778 <HAL_PCD_EP_SetStall+0xbc>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68f9      	ldr	r1, [r7, #12]
 800274c:	4618      	mov	r0, r3
 800274e:	f003 fa15 	bl	8005b7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	2b00      	cmp	r3, #0
 800275a:	d108      	bne.n	800276e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f003 fc57 	bl	800601c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	f003 020f 	and.w	r2, r3, #15
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	d901      	bls.n	800279e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e042      	b.n	8002824 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800279e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da0f      	bge.n	80027c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	f003 020f 	and.w	r2, r3, #15
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	3338      	adds	r3, #56	; 0x38
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	3304      	adds	r3, #4
 80027bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	705a      	strb	r2, [r3, #1]
 80027c4:	e00f      	b.n	80027e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	f003 020f 	and.w	r2, r3, #15
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	3304      	adds	r3, #4
 80027de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_PCD_EP_ClrStall+0x86>
 8002802:	2302      	movs	r3, #2
 8002804:	e00e      	b.n	8002824 <HAL_PCD_EP_ClrStall+0xa4>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68f9      	ldr	r1, [r7, #12]
 8002814:	4618      	mov	r0, r3
 8002816:	f003 fa1f 	bl	8005c58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_PCD_EP_Flush+0x1a>
 8002842:	2302      	movs	r3, #2
 8002844:	e01b      	b.n	800287e <HAL_PCD_EP_Flush+0x52>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800284e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002852:	2b00      	cmp	r3, #0
 8002854:	da09      	bge.n	800286a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f002 fc02 	bl	800506c <USB_FlushTxFifo>
 8002868:	e004      	b.n	8002874 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f002 fc2e 	bl	80050d0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b088      	sub	sp, #32
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	3338      	adds	r3, #56	; 0x38
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	3304      	adds	r3, #4
 80028ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d901      	bls.n	80028be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e067      	b.n	800298e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d902      	bls.n	80028da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3303      	adds	r3, #3
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028e2:	e026      	b.n	8002932 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d902      	bls.n	8002900 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	3303      	adds	r3, #3
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68d9      	ldr	r1, [r3, #12]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	b2da      	uxtb	r2, r3
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	b29b      	uxth	r3, r3
 8002914:	6978      	ldr	r0, [r7, #20]
 8002916:	f003 f89f 	bl	8005a58 <USB_WritePacket>

    ep->xfer_buff  += len;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	441a      	add	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	441a      	add	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	b29b      	uxth	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	429a      	cmp	r2, r3
 8002946:	d809      	bhi.n	800295c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	699a      	ldr	r2, [r3, #24]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002950:	429a      	cmp	r2, r3
 8002952:	d203      	bcs.n	800295c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1c3      	bne.n	80028e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	429a      	cmp	r2, r3
 8002966:	d811      	bhi.n	800298c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	2201      	movs	r2, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	43db      	mvns	r3, r3
 8002982:	6939      	ldr	r1, [r7, #16]
 8002984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002988:	4013      	ands	r3, r2
 800298a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	333c      	adds	r3, #60	; 0x3c
 80029b0:	3304      	adds	r3, #4
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <PCD_EP_OutXfrComplete_int+0x98>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d124      	bne.n	8002a18 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e4:	461a      	mov	r2, r3
 80029e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ea:	6093      	str	r3, [r2, #8]
 80029ec:	e01a      	b.n	8002a24 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a04:	461a      	mov	r2, r3
 8002a06:	2320      	movs	r3, #32
 8002a08:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f008 f989 	bl	800ad28 <HAL_PCD_DataOutStageCallback>
 8002a16:	e005      	b.n	8002a24 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f008 f982 	bl	800ad28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	4f54310a 	.word	0x4f54310a

08002a34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	333c      	adds	r3, #60	; 0x3c
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <PCD_EP_OutSetupPacket_int+0x64>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d90e      	bls.n	8002a88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d009      	beq.n	8002a88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a80:	461a      	mov	r2, r3
 8002a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f008 f93b 	bl	800ad04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	4f54300a 	.word	0x4f54300a

08002a9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	70fb      	strb	r3, [r7, #3]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d107      	bne.n	8002aca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002aba:	883b      	ldrh	r3, [r7, #0]
 8002abc:	0419      	lsls	r1, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ac8:	e028      	b.n	8002b1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	0c1b      	lsrs	r3, r3, #16
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e00d      	b.n	8002afa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	3340      	adds	r3, #64	; 0x40
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4413      	add	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	3301      	adds	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d3ec      	bcc.n	8002ade <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b04:	883b      	ldrh	r3, [r7, #0]
 8002b06:	0418      	lsls	r0, r3, #16
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6819      	ldr	r1, [r3, #0]
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	4302      	orrs	r2, r0
 8002b14:	3340      	adds	r3, #64	; 0x40
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	f043 0303 	orr.w	r3, r3, #3
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bba:	6013      	str	r3, [r2, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40007000 	.word	0x40007000

08002bcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40007000 	.word	0x40007000

08002be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf6:	d130      	bne.n	8002c5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bf8:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c04:	d038      	beq.n	8002c78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c0e:	4a1e      	ldr	r2, [pc, #120]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2232      	movs	r2, #50	; 0x32
 8002c1c:	fb02 f303 	mul.w	r3, r2, r3
 8002c20:	4a1b      	ldr	r2, [pc, #108]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0c9b      	lsrs	r3, r3, #18
 8002c28:	3301      	adds	r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c2c:	e002      	b.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c40:	d102      	bne.n	8002c48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f2      	bne.n	8002c2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c54:	d110      	bne.n	8002c78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e00f      	b.n	8002c7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c66:	d007      	beq.n	8002c78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c68:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c70:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	431bde83 	.word	0x431bde83

08002c94 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca2:	6053      	str	r3, [r2, #4]
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40007000 	.word	0x40007000

08002cb4 <HAL_PWREx_DisableVddUSB>:
/**
  * @brief Disable VDDUSB supply.
  * @retval None
  */
void HAL_PWREx_DisableVddUSB(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_PWREx_DisableVddUSB+0x1c>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <HAL_PWREx_DisableVddUSB+0x1c>)
 8002cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cc2:	6053      	str	r3, [r2, #4]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40007000 	.word	0x40007000

08002cd4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002cdc:	f7fe f9a6 	bl	800102c <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e063      	b.n	8002db4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10b      	bne.n	8002d10 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7fd fd97 	bl	8000834 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002d06:	f241 3188 	movw	r1, #5000	; 0x1388
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fad3 	bl	80032b6 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	021a      	lsls	r2, r3, #8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2120      	movs	r1, #32
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 facb 	bl	80032d2 <QSPI_WaitFlagStateUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002d40:	7afb      	ldrb	r3, [r7, #11]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d131      	bne.n	8002daa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d50:	f023 0310 	bic.w	r3, r3, #16
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6852      	ldr	r2, [r2, #4]
 8002d58:	0611      	lsls	r1, r2, #24
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68d2      	ldr	r2, [r2, #12]
 8002d5e:	4311      	orrs	r1, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <HAL_QSPI_Init+0xe8>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6912      	ldr	r2, [r2, #16]
 8002d76:	0411      	lsls	r1, r2, #16
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6952      	ldr	r2, [r2, #20]
 8002d7c:	4311      	orrs	r1, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6992      	ldr	r2, [r2, #24]
 8002d82:	4311      	orrs	r1, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002db2:	7afb      	ldrb	r3, [r7, #11]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	ffe0f8fe 	.word	0xffe0f8fe

08002dc0 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002dcc:	f7fe f92e 	bl	800102c <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_QSPI_Command+0x22>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e048      	b.n	8002e74 <HAL_QSPI_Command+0xb4>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d137      	bne.n	8002e66 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2120      	movs	r1, #32
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fa5f 	bl	80032d2 <QSPI_WaitFlagStateUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d125      	bne.n	8002e6a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fa8c 	bl	8003340 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d115      	bne.n	8002e5c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2201      	movs	r2, #1
 8002e38:	2102      	movs	r1, #2
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fa49 	bl	80032d2 <QSPI_WaitFlagStateUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10f      	bne.n	8002e6a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002e5a:	e006      	b.n	8002e6a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002e64:	e001      	b.n	8002e6a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
 8002e68:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7fe f8ce 	bl	800102c <HAL_GetTick>
 8002e90:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3320      	adds	r3, #32
 8002e98:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_QSPI_Transmit+0x2e>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e07b      	b.n	8002fa2 <HAL_QSPI_Transmit+0x126>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d16a      	bne.n	8002f94 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d05b      	beq.n	8002f82 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2212      	movs	r2, #18
 8002ece:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002efe:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002f00:	e01b      	b.n	8002f3a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f9e0 	bl	80032d2 <QSPI_WaitFlagStateUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002f16:	7ffb      	ldrb	r3, [r7, #31]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d113      	bne.n	8002f44 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	1e5a      	subs	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1df      	bne.n	8002f02 <HAL_QSPI_Transmit+0x86>
 8002f42:	e000      	b.n	8002f46 <HAL_QSPI_Transmit+0xca>
          break;
 8002f44:	bf00      	nop
      }

      if (status == HAL_OK)
 8002f46:	7ffb      	ldrb	r3, [r7, #31]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d115      	bne.n	8002f78 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	2201      	movs	r2, #1
 8002f54:	2102      	movs	r1, #2
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f9bb 	bl	80032d2 <QSPI_WaitFlagStateUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002f60:	7ffb      	ldrb	r3, [r7, #31]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f934 	bl	80031dc <HAL_QSPI_Abort>
 8002f74:	4603      	mov	r3, r0
 8002f76:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002f80:	e00a      	b.n	8002f98 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f86:	f043 0208 	orr.w	r2, r3, #8
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e001      	b.n	8002f98 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
 8002f96:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002fa0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b08a      	sub	sp, #40	; 0x28
 8002fae:	af02      	add	r7, sp, #8
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002fba:	f7fe f837 	bl	800102c <HAL_GetTick>
 8002fbe:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3320      	adds	r3, #32
 8002fce:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_QSPI_Receive+0x36>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e082      	b.n	80030e6 <HAL_QSPI_Receive+0x13c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d171      	bne.n	80030d8 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d062      	beq.n	80030c6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2222      	movs	r2, #34	; 0x22
 8003004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003038:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003042:	e01c      	b.n	800307e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2201      	movs	r2, #1
 800304c:	2106      	movs	r1, #6
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f93f 	bl	80032d2 <QSPI_WaitFlagStateUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003058:	7ffb      	ldrb	r3, [r7, #31]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d114      	bne.n	8003088 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	7812      	ldrb	r2, [r2, #0]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	1e5a      	subs	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1de      	bne.n	8003044 <HAL_QSPI_Receive+0x9a>
 8003086:	e000      	b.n	800308a <HAL_QSPI_Receive+0xe0>
          break;
 8003088:	bf00      	nop
      }

      if (status == HAL_OK)
 800308a:	7ffb      	ldrb	r3, [r7, #31]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d115      	bne.n	80030bc <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2201      	movs	r2, #1
 8003098:	2102      	movs	r1, #2
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f919 	bl	80032d2 <QSPI_WaitFlagStateUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80030a4:	7ffb      	ldrb	r3, [r7, #31]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2202      	movs	r2, #2
 80030b0:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f892 	bl	80031dc <HAL_QSPI_Abort>
 80030b8:	4603      	mov	r3, r0
 80030ba:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80030c4:	e00a      	b.n	80030dc <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	f043 0208 	orr.w	r2, r3, #8
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	77fb      	strb	r3, [r7, #31]
 80030d6:	e001      	b.n	80030dc <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
 80030da:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80030e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b088      	sub	sp, #32
 80030f2:	af02      	add	r7, sp, #8
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80030fc:	f7fd ff96 	bl	800102c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_QSPI_AutoPolling+0x24>
 800310e:	2302      	movs	r3, #2
 8003110:	e060      	b.n	80031d4 <HAL_QSPI_AutoPolling+0xe6>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d14f      	bne.n	80031c6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2242      	movs	r2, #66	; 0x42
 8003130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2200      	movs	r2, #0
 800313c:	2120      	movs	r1, #32
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f8c7 	bl	80032d2 <QSPI_WaitFlagStateUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d13d      	bne.n	80031ca <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6852      	ldr	r2, [r2, #4]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6892      	ldr	r2, [r2, #8]
 800316a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	431a      	orrs	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003184:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800318e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f8d3 	bl	8003340 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2201      	movs	r2, #1
 80031a2:	2108      	movs	r1, #8
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f894 	bl	80032d2 <QSPI_WaitFlagStateUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2208      	movs	r2, #8
 80031ba:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80031c4:	e001      	b.n	80031ca <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
 80031c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80031e8:	f7fd ff20 	bl	800102c <HAL_GetTick>
 80031ec:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d056      	beq.n	80032ac <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d017      	beq.n	8003244 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0204 	bic.w	r2, r2, #4
 8003222:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe f872 	bl	8001312 <HAL_DMA_Abort>
 800322e:	4603      	mov	r3, r0
 8003230:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	f043 0204 	orr.w	r2, r3, #4
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0202 	orr.w	r2, r2, #2
 8003252:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2201      	movs	r2, #1
 800325e:	2102      	movs	r1, #2
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f836 	bl	80032d2 <QSPI_WaitFlagStateUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10e      	bne.n	800328e <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2202      	movs	r2, #2
 8003276:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2200      	movs	r2, #0
 8003282:	2120      	movs	r1, #32
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f824 	bl	80032d2 <QSPI_WaitFlagStateUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80032a2:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	603b      	str	r3, [r7, #0]
 80032de:	4613      	mov	r3, r2
 80032e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80032e2:	e01a      	b.n	800331a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d016      	beq.n	800331a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ec:	f7fd fe9e 	bl	800102c <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d302      	bcc.n	8003302 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2204      	movs	r2, #4
 8003306:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	f043 0201 	orr.w	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e00e      	b.n	8003338 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	429a      	cmp	r2, r3
 8003334:	d1d6      	bne.n	80032e4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	2b00      	cmp	r3, #0
 8003352:	d009      	beq.n	8003368 <QSPI_Config+0x28>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800335a:	d005      	beq.n	8003368 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3a01      	subs	r2, #1
 8003366:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80b9 	beq.w	80034e4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d05f      	beq.n	800343a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	6892      	ldr	r2, [r2, #8]
 8003382:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d031      	beq.n	80033f0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	431a      	orrs	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	431a      	orrs	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	049b      	lsls	r3, r3, #18
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	ea42 0103 	orr.w	r1, r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80033e0:	f000 812e 	beq.w	8003640 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	6852      	ldr	r2, [r2, #4]
 80033ec:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80033ee:	e127      	b.n	8003640 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	431a      	orrs	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	431a      	orrs	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	431a      	orrs	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	049b      	lsls	r3, r3, #18
 800340c:	431a      	orrs	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	431a      	orrs	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	431a      	orrs	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	431a      	orrs	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	431a      	orrs	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	ea42 0103 	orr.w	r1, r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	430a      	orrs	r2, r1
 8003436:	615a      	str	r2, [r3, #20]
}
 8003438:	e102      	b.n	8003640 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d02e      	beq.n	80034a0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	431a      	orrs	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003450:	431a      	orrs	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	431a      	orrs	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	049b      	lsls	r3, r3, #18
 800345e:	431a      	orrs	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	431a      	orrs	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	431a      	orrs	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	431a      	orrs	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	431a      	orrs	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	ea42 0103 	orr.w	r1, r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	430a      	orrs	r2, r1
 8003488:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003490:	f000 80d6 	beq.w	8003640 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	6852      	ldr	r2, [r2, #4]
 800349c:	619a      	str	r2, [r3, #24]
}
 800349e:	e0cf      	b.n	8003640 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ae:	431a      	orrs	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	431a      	orrs	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	049b      	lsls	r3, r3, #18
 80034bc:	431a      	orrs	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	ea42 0103 	orr.w	r1, r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	430a      	orrs	r2, r1
 80034e0:	615a      	str	r2, [r3, #20]
}
 80034e2:	e0ad      	b.n	8003640 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d058      	beq.n	800359e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	6892      	ldr	r2, [r2, #8]
 80034f4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d02d      	beq.n	800355a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	431a      	orrs	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350c:	431a      	orrs	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	431a      	orrs	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	049b      	lsls	r3, r3, #18
 800351a:	431a      	orrs	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	431a      	orrs	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	431a      	orrs	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	431a      	orrs	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	431a      	orrs	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	ea42 0103 	orr.w	r1, r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	430a      	orrs	r2, r1
 8003544:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800354c:	d078      	beq.n	8003640 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	6852      	ldr	r2, [r2, #4]
 8003556:	619a      	str	r2, [r3, #24]
}
 8003558:	e072      	b.n	8003640 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	431a      	orrs	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	431a      	orrs	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	431a      	orrs	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	049b      	lsls	r3, r3, #18
 8003576:	431a      	orrs	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	431a      	orrs	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	431a      	orrs	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	431a      	orrs	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	ea42 0103 	orr.w	r1, r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	430a      	orrs	r2, r1
 800359a:	615a      	str	r2, [r3, #20]
}
 800359c:	e050      	b.n	8003640 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02a      	beq.n	80035fc <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	431a      	orrs	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b4:	431a      	orrs	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	431a      	orrs	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	049b      	lsls	r3, r3, #18
 80035c2:	431a      	orrs	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	431a      	orrs	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	ea42 0103 	orr.w	r1, r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80035ee:	d027      	beq.n	8003640 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	6852      	ldr	r2, [r2, #4]
 80035f8:	619a      	str	r2, [r3, #24]
}
 80035fa:	e021      	b.n	8003640 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01d      	beq.n	8003640 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	431a      	orrs	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003612:	431a      	orrs	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	431a      	orrs	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	049b      	lsls	r3, r3, #18
 8003620:	431a      	orrs	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	431a      	orrs	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	431a      	orrs	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	ea42 0103 	orr.w	r1, r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	430a      	orrs	r2, r1
 800363e:	615a      	str	r2, [r3, #20]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e3d8      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365e:	4b97      	ldr	r3, [pc, #604]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003668:	4b94      	ldr	r3, [pc, #592]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80e4 	beq.w	8003848 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <HAL_RCC_OscConfig+0x4a>
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b0c      	cmp	r3, #12
 800368a:	f040 808b 	bne.w	80037a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b01      	cmp	r3, #1
 8003692:	f040 8087 	bne.w	80037a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003696:	4b89      	ldr	r3, [pc, #548]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_RCC_OscConfig+0x62>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e3b0      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1a      	ldr	r2, [r3, #32]
 80036b2:	4b82      	ldr	r3, [pc, #520]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d004      	beq.n	80036c8 <HAL_RCC_OscConfig+0x7c>
 80036be:	4b7f      	ldr	r3, [pc, #508]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c6:	e005      	b.n	80036d4 <HAL_RCC_OscConfig+0x88>
 80036c8:	4b7c      	ldr	r3, [pc, #496]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80036ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d223      	bcs.n	8003720 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fd17 	bl	8004110 <RCC_SetFlashLatencyFromMSIRange>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e391      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ec:	4b73      	ldr	r3, [pc, #460]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a72      	ldr	r2, [pc, #456]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80036f2:	f043 0308 	orr.w	r3, r3, #8
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b70      	ldr	r3, [pc, #448]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	496d      	ldr	r1, [pc, #436]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800370a:	4b6c      	ldr	r3, [pc, #432]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	4968      	ldr	r1, [pc, #416]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
 800371e:	e025      	b.n	800376c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003720:	4b66      	ldr	r3, [pc, #408]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a65      	ldr	r2, [pc, #404]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 8003726:	f043 0308 	orr.w	r3, r3, #8
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	4960      	ldr	r1, [pc, #384]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800373e:	4b5f      	ldr	r3, [pc, #380]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	495b      	ldr	r1, [pc, #364]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fcd7 	bl	8004110 <RCC_SetFlashLatencyFromMSIRange>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e351      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800376c:	f000 fc38 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 8003770:	4602      	mov	r2, r0
 8003772:	4b52      	ldr	r3, [pc, #328]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	091b      	lsrs	r3, r3, #4
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	4950      	ldr	r1, [pc, #320]	; (80038c0 <HAL_RCC_OscConfig+0x274>)
 800377e:	5ccb      	ldrb	r3, [r1, r3]
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
 8003788:	4a4e      	ldr	r2, [pc, #312]	; (80038c4 <HAL_RCC_OscConfig+0x278>)
 800378a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800378c:	4b4e      	ldr	r3, [pc, #312]	; (80038c8 <HAL_RCC_OscConfig+0x27c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fd fbfb 	bl	8000f8c <HAL_InitTick>
 8003796:	4603      	mov	r3, r0
 8003798:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d052      	beq.n	8003846 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	e335      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d032      	beq.n	8003812 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037ac:	4b43      	ldr	r3, [pc, #268]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a42      	ldr	r2, [pc, #264]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037b8:	f7fd fc38 	bl	800102c <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037c0:	f7fd fc34 	bl	800102c <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e31e      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037d2:	4b3a      	ldr	r3, [pc, #232]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037de:	4b37      	ldr	r3, [pc, #220]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a36      	ldr	r2, [pc, #216]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80037e4:	f043 0308 	orr.w	r3, r3, #8
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b34      	ldr	r3, [pc, #208]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4931      	ldr	r1, [pc, #196]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037fc:	4b2f      	ldr	r3, [pc, #188]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	492c      	ldr	r1, [pc, #176]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
 8003810:	e01a      	b.n	8003848 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003812:	4b2a      	ldr	r3, [pc, #168]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a29      	ldr	r2, [pc, #164]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800381e:	f7fd fc05 	bl	800102c <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003826:	f7fd fc01 	bl	800102c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e2eb      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003838:	4b20      	ldr	r3, [pc, #128]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f0      	bne.n	8003826 <HAL_RCC_OscConfig+0x1da>
 8003844:	e000      	b.n	8003848 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003846:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d074      	beq.n	800393e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b08      	cmp	r3, #8
 8003858:	d005      	beq.n	8003866 <HAL_RCC_OscConfig+0x21a>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b0c      	cmp	r3, #12
 800385e:	d10e      	bne.n	800387e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b03      	cmp	r3, #3
 8003864:	d10b      	bne.n	800387e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d064      	beq.n	800393c <HAL_RCC_OscConfig+0x2f0>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d160      	bne.n	800393c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e2c8      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0x24a>
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0b      	ldr	r2, [pc, #44]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e026      	b.n	80038e4 <HAL_RCC_OscConfig+0x298>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389e:	d115      	bne.n	80038cc <HAL_RCC_OscConfig+0x280>
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a05      	ldr	r2, [pc, #20]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80038a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a02      	ldr	r2, [pc, #8]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80038b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	e014      	b.n	80038e4 <HAL_RCC_OscConfig+0x298>
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000
 80038c0:	0800b604 	.word	0x0800b604
 80038c4:	20000000 	.word	0x20000000
 80038c8:	20000004 	.word	0x20000004
 80038cc:	4ba0      	ldr	r3, [pc, #640]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a9f      	ldr	r2, [pc, #636]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b9d      	ldr	r3, [pc, #628]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a9c      	ldr	r2, [pc, #624]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 80038de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fd fb9e 	bl	800102c <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fd fb9a 	bl	800102c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e284      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003906:	4b92      	ldr	r3, [pc, #584]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x2a8>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fd fb8a 	bl	800102c <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7fd fb86 	bl	800102c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e270      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800392e:	4b88      	ldr	r3, [pc, #544]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x2d0>
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d060      	beq.n	8003a0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d005      	beq.n	800395c <HAL_RCC_OscConfig+0x310>
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2b0c      	cmp	r3, #12
 8003954:	d119      	bne.n	800398a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d116      	bne.n	800398a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800395c:	4b7c      	ldr	r3, [pc, #496]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_OscConfig+0x328>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e24d      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003974:	4b76      	ldr	r3, [pc, #472]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	4973      	ldr	r1, [pc, #460]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003988:	e040      	b.n	8003a0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d023      	beq.n	80039da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003992:	4b6f      	ldr	r3, [pc, #444]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a6e      	ldr	r2, [pc, #440]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fd fb45 	bl	800102c <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a6:	f7fd fb41 	bl	800102c <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e22b      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039b8:	4b65      	ldr	r3, [pc, #404]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c4:	4b62      	ldr	r3, [pc, #392]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	061b      	lsls	r3, r3, #24
 80039d2:	495f      	ldr	r1, [pc, #380]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
 80039d8:	e018      	b.n	8003a0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039da:	4b5d      	ldr	r3, [pc, #372]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a5c      	ldr	r2, [pc, #368]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 80039e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e6:	f7fd fb21 	bl	800102c <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ee:	f7fd fb1d 	bl	800102c <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e207      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a00:	4b53      	ldr	r3, [pc, #332]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f0      	bne.n	80039ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d03c      	beq.n	8003a92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01c      	beq.n	8003a5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a20:	4b4b      	ldr	r3, [pc, #300]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a26:	4a4a      	ldr	r2, [pc, #296]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fd fafc 	bl	800102c <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a38:	f7fd faf8 	bl	800102c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e1e2      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a4a:	4b41      	ldr	r3, [pc, #260]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ef      	beq.n	8003a38 <HAL_RCC_OscConfig+0x3ec>
 8003a58:	e01b      	b.n	8003a92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5a:	4b3d      	ldr	r3, [pc, #244]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a60:	4a3b      	ldr	r2, [pc, #236]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6a:	f7fd fadf 	bl	800102c <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a72:	f7fd fadb 	bl	800102c <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e1c5      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a84:	4b32      	ldr	r3, [pc, #200]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1ef      	bne.n	8003a72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 80a6 	beq.w	8003bec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003aa4:	4b2a      	ldr	r3, [pc, #168]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10d      	bne.n	8003acc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab0:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab4:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6593      	str	r3, [r2, #88]	; 0x58
 8003abc:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003acc:	4b21      	ldr	r3, [pc, #132]	; (8003b54 <HAL_RCC_OscConfig+0x508>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d118      	bne.n	8003b0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad8:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <HAL_RCC_OscConfig+0x508>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1d      	ldr	r2, [pc, #116]	; (8003b54 <HAL_RCC_OscConfig+0x508>)
 8003ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae4:	f7fd faa2 	bl	800102c <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aec:	f7fd fa9e 	bl	800102c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e188      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003afe:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <HAL_RCC_OscConfig+0x508>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d108      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4d8>
 8003b12:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	4a0d      	ldr	r2, [pc, #52]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b22:	e029      	b.n	8003b78 <HAL_RCC_OscConfig+0x52c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b05      	cmp	r3, #5
 8003b2a:	d115      	bne.n	8003b58 <HAL_RCC_OscConfig+0x50c>
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003b34:	f043 0304 	orr.w	r3, r3, #4
 8003b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b3c:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	4a03      	ldr	r2, [pc, #12]	; (8003b50 <HAL_RCC_OscConfig+0x504>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b4c:	e014      	b.n	8003b78 <HAL_RCC_OscConfig+0x52c>
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40007000 	.word	0x40007000
 8003b58:	4b91      	ldr	r3, [pc, #580]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	4a90      	ldr	r2, [pc, #576]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b68:	4b8d      	ldr	r3, [pc, #564]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	4a8c      	ldr	r2, [pc, #560]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003b70:	f023 0304 	bic.w	r3, r3, #4
 8003b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d016      	beq.n	8003bae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b80:	f7fd fa54 	bl	800102c <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fd fa50 	bl	800102c <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e138      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b9e:	4b80      	ldr	r3, [pc, #512]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ed      	beq.n	8003b88 <HAL_RCC_OscConfig+0x53c>
 8003bac:	e015      	b.n	8003bda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bae:	f7fd fa3d 	bl	800102c <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fd fa39 	bl	800102c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e121      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bcc:	4b74      	ldr	r3, [pc, #464]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1ed      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bda:	7ffb      	ldrb	r3, [r7, #31]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d105      	bne.n	8003bec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be0:	4b6f      	ldr	r3, [pc, #444]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	4a6e      	ldr	r2, [pc, #440]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 810c 	beq.w	8003e0e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	f040 80d4 	bne.w	8003da8 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c00:	4b67      	ldr	r3, [pc, #412]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f003 0203 	and.w	r2, r3, #3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d130      	bne.n	8003c76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d127      	bne.n	8003c76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d11f      	bne.n	8003c76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c40:	2a07      	cmp	r2, #7
 8003c42:	bf14      	ite	ne
 8003c44:	2201      	movne	r2, #1
 8003c46:	2200      	moveq	r2, #0
 8003c48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d113      	bne.n	8003c76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d109      	bne.n	8003c76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d06e      	beq.n	8003d54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2b0c      	cmp	r3, #12
 8003c7a:	d069      	beq.n	8003d50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c7c:	4b48      	ldr	r3, [pc, #288]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c88:	4b45      	ldr	r3, [pc, #276]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0bb      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c98:	4b41      	ldr	r3, [pc, #260]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a40      	ldr	r2, [pc, #256]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ca4:	f7fd f9c2 	bl	800102c <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fd f9be 	bl	800102c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0a8      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cbe:	4b38      	ldr	r3, [pc, #224]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cca:	4b35      	ldr	r3, [pc, #212]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	4b35      	ldr	r3, [pc, #212]	; (8003da4 <HAL_RCC_OscConfig+0x758>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cda:	3a01      	subs	r2, #1
 8003cdc:	0112      	lsls	r2, r2, #4
 8003cde:	4311      	orrs	r1, r2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ce4:	0212      	lsls	r2, r2, #8
 8003ce6:	4311      	orrs	r1, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cec:	0852      	lsrs	r2, r2, #1
 8003cee:	3a01      	subs	r2, #1
 8003cf0:	0552      	lsls	r2, r2, #21
 8003cf2:	4311      	orrs	r1, r2
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cf8:	0852      	lsrs	r2, r2, #1
 8003cfa:	3a01      	subs	r2, #1
 8003cfc:	0652      	lsls	r2, r2, #25
 8003cfe:	4311      	orrs	r1, r2
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d04:	0912      	lsrs	r2, r2, #4
 8003d06:	0452      	lsls	r2, r2, #17
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	4925      	ldr	r1, [pc, #148]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d10:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a22      	ldr	r2, [pc, #136]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d1c:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a1f      	ldr	r2, [pc, #124]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d28:	f7fd f980 	bl	800102c <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fd f97c 	bl	800102c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e066      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d42:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d4e:	e05e      	b.n	8003e0e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e05d      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d156      	bne.n	8003e0e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0e      	ldr	r2, [pc, #56]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a0b      	ldr	r2, [pc, #44]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d78:	f7fd f958 	bl	800102c <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fd f954 	bl	800102c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e03e      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d92:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <HAL_RCC_OscConfig+0x754>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x734>
 8003d9e:	e036      	b.n	8003e0e <HAL_RCC_OscConfig+0x7c2>
 8003da0:	40021000 	.word	0x40021000
 8003da4:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b0c      	cmp	r3, #12
 8003dac:	d02d      	beq.n	8003e0a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dae:	4b1a      	ldr	r3, [pc, #104]	; (8003e18 <HAL_RCC_OscConfig+0x7cc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a19      	ldr	r2, [pc, #100]	; (8003e18 <HAL_RCC_OscConfig+0x7cc>)
 8003db4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003dba:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <HAL_RCC_OscConfig+0x7cc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d105      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003dc6:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <HAL_RCC_OscConfig+0x7cc>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <HAL_RCC_OscConfig+0x7cc>)
 8003dcc:	f023 0303 	bic.w	r3, r3, #3
 8003dd0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003dd2:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <HAL_RCC_OscConfig+0x7cc>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	4a10      	ldr	r2, [pc, #64]	; (8003e18 <HAL_RCC_OscConfig+0x7cc>)
 8003dd8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de2:	f7fd f923 	bl	800102c <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dea:	f7fd f91f 	bl	800102c <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e009      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_RCC_OscConfig+0x7cc>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f0      	bne.n	8003dea <HAL_RCC_OscConfig+0x79e>
 8003e08:	e001      	b.n	8003e0e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3720      	adds	r7, #32
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40021000 	.word	0x40021000

08003e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0c8      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e30:	4b66      	ldr	r3, [pc, #408]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d910      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b63      	ldr	r3, [pc, #396]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 0207 	bic.w	r2, r3, #7
 8003e46:	4961      	ldr	r1, [pc, #388]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b5f      	ldr	r3, [pc, #380]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0b0      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d04c      	beq.n	8003f06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e74:	4b56      	ldr	r3, [pc, #344]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d121      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e09e      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d107      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e8c:	4b50      	ldr	r3, [pc, #320]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d115      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e092      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d107      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ea4:	4b4a      	ldr	r3, [pc, #296]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e086      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb4:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e07e      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ec4:	4b42      	ldr	r3, [pc, #264]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f023 0203 	bic.w	r2, r3, #3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	493f      	ldr	r1, [pc, #252]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed6:	f7fd f8a9 	bl	800102c <HAL_GetTick>
 8003eda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ede:	f7fd f8a5 	bl	800102c <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e066      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef4:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 020c 	and.w	r2, r3, #12
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d1eb      	bne.n	8003ede <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f12:	4b2f      	ldr	r3, [pc, #188]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	492c      	ldr	r1, [pc, #176]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f24:	4b29      	ldr	r3, [pc, #164]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d210      	bcs.n	8003f54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 0207 	bic.w	r2, r3, #7
 8003f3a:	4924      	ldr	r1, [pc, #144]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f42:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <HAL_RCC_ClockConfig+0x1b0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e036      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f60:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4918      	ldr	r1, [pc, #96]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4910      	ldr	r1, [pc, #64]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f92:	f000 f825 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	490c      	ldr	r1, [pc, #48]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	5ccb      	ldrb	r3, [r1, r3]
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	fa22 f303 	lsr.w	r3, r2, r3
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fb2:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fc ffe8 	bl	8000f8c <HAL_InitTick>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fc0:	7afb      	ldrb	r3, [r7, #11]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40022000 	.word	0x40022000
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	0800b604 	.word	0x0800b604
 8003fd8:	20000000 	.word	0x20000000
 8003fdc:	20000004 	.word	0x20000004

08003fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b089      	sub	sp, #36	; 0x24
 8003fe4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	2300      	movs	r3, #0
 8003fec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fee:	4b3e      	ldr	r3, [pc, #248]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff8:	4b3b      	ldr	r3, [pc, #236]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_GetSysClockFreq+0x34>
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2b0c      	cmp	r3, #12
 800400c:	d121      	bne.n	8004052 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d11e      	bne.n	8004052 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004014:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d107      	bne.n	8004030 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004020:	4b31      	ldr	r3, [pc, #196]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	e005      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004030:	4b2d      	ldr	r3, [pc, #180]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800403c:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004044:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10d      	bne.n	8004068 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004050:	e00a      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d102      	bne.n	800405e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	e004      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d101      	bne.n	8004068 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004064:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004066:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b0c      	cmp	r3, #12
 800406c:	d134      	bne.n	80040d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800406e:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d003      	beq.n	8004086 <HAL_RCC_GetSysClockFreq+0xa6>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d003      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0xac>
 8004084:	e005      	b.n	8004092 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004086:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004088:	617b      	str	r3, [r7, #20]
      break;
 800408a:	e005      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800408c:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800408e:	617b      	str	r3, [r7, #20]
      break;
 8004090:	e002      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	617b      	str	r3, [r7, #20]
      break;
 8004096:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004098:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	3301      	adds	r3, #1
 80040a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	0a1b      	lsrs	r3, r3, #8
 80040ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	fb03 f202 	mul.w	r2, r3, r2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	0e5b      	lsrs	r3, r3, #25
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	3301      	adds	r3, #1
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040d8:	69bb      	ldr	r3, [r7, #24]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3724      	adds	r7, #36	; 0x24
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
 80040ec:	0800b614 	.word	0x0800b614
 80040f0:	00f42400 	.word	0x00f42400
 80040f4:	007a1200 	.word	0x007a1200

080040f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <HAL_RCC_GetHCLKFreq+0x14>)
 80040fe:	681b      	ldr	r3, [r3, #0]
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20000000 	.word	0x20000000

08004110 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004118:	2300      	movs	r3, #0
 800411a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800411c:	4b2a      	ldr	r3, [pc, #168]	; (80041c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800411e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004128:	f7fe fd50 	bl	8002bcc <HAL_PWREx_GetVoltageRange>
 800412c:	6178      	str	r0, [r7, #20]
 800412e:	e014      	b.n	800415a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004130:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	4a24      	ldr	r2, [pc, #144]	; (80041c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413a:	6593      	str	r3, [r2, #88]	; 0x58
 800413c:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004148:	f7fe fd40 	bl	8002bcc <HAL_PWREx_GetVoltageRange>
 800414c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800414e:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004158:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004160:	d10b      	bne.n	800417a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b80      	cmp	r3, #128	; 0x80
 8004166:	d919      	bls.n	800419c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2ba0      	cmp	r3, #160	; 0xa0
 800416c:	d902      	bls.n	8004174 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800416e:	2302      	movs	r3, #2
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	e013      	b.n	800419c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004174:	2301      	movs	r3, #1
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	e010      	b.n	800419c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b80      	cmp	r3, #128	; 0x80
 800417e:	d902      	bls.n	8004186 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004180:	2303      	movs	r3, #3
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	e00a      	b.n	800419c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b80      	cmp	r3, #128	; 0x80
 800418a:	d102      	bne.n	8004192 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800418c:	2302      	movs	r3, #2
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	e004      	b.n	800419c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b70      	cmp	r3, #112	; 0x70
 8004196:	d101      	bne.n	800419c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004198:	2301      	movs	r3, #1
 800419a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f023 0207 	bic.w	r2, r3, #7
 80041a4:	4909      	ldr	r1, [pc, #36]	; (80041cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041ac:	4b07      	ldr	r3, [pc, #28]	; (80041cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d001      	beq.n	80041be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40022000 	.word	0x40022000

080041d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041d8:	2300      	movs	r3, #0
 80041da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041dc:	2300      	movs	r3, #0
 80041de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d041      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041f4:	d02a      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041fa:	d824      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004200:	d008      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004202:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004206:	d81e      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800420c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004210:	d010      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004212:	e018      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004214:	4b86      	ldr	r3, [pc, #536]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a85      	ldr	r2, [pc, #532]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004220:	e015      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3304      	adds	r3, #4
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f000 facb 	bl	80047c4 <RCCEx_PLLSAI1_Config>
 800422e:	4603      	mov	r3, r0
 8004230:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004232:	e00c      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3320      	adds	r3, #32
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fbb6 	bl	80049ac <RCCEx_PLLSAI2_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004244:	e003      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	74fb      	strb	r3, [r7, #19]
      break;
 800424a:	e000      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800424c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800424e:	7cfb      	ldrb	r3, [r7, #19]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004254:	4b76      	ldr	r3, [pc, #472]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004262:	4973      	ldr	r1, [pc, #460]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800426a:	e001      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d041      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004280:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004284:	d02a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004286:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800428a:	d824      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800428c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004290:	d008      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004296:	d81e      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800429c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042a0:	d010      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042a2:	e018      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042a4:	4b62      	ldr	r3, [pc, #392]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4a61      	ldr	r2, [pc, #388]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042b0:	e015      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3304      	adds	r3, #4
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fa83 	bl	80047c4 <RCCEx_PLLSAI1_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042c2:	e00c      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3320      	adds	r3, #32
 80042c8:	2100      	movs	r1, #0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fb6e 	bl	80049ac <RCCEx_PLLSAI2_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042d4:	e003      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	74fb      	strb	r3, [r7, #19]
      break;
 80042da:	e000      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80042dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042e4:	4b52      	ldr	r3, [pc, #328]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042f2:	494f      	ldr	r1, [pc, #316]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042fa:	e001      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
 80042fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80a0 	beq.w	800444e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430e:	2300      	movs	r3, #0
 8004310:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004312:	4b47      	ldr	r3, [pc, #284]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004322:	2300      	movs	r3, #0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00d      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004328:	4b41      	ldr	r3, [pc, #260]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432c:	4a40      	ldr	r2, [pc, #256]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004332:	6593      	str	r3, [r2, #88]	; 0x58
 8004334:	4b3e      	ldr	r3, [pc, #248]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004340:	2301      	movs	r3, #1
 8004342:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004344:	4b3b      	ldr	r3, [pc, #236]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a3a      	ldr	r2, [pc, #232]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800434a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004350:	f7fc fe6c 	bl	800102c <HAL_GetTick>
 8004354:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004356:	e009      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004358:	f7fc fe68 	bl	800102c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d902      	bls.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	74fb      	strb	r3, [r7, #19]
        break;
 800436a:	e005      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800436c:	4b31      	ldr	r3, [pc, #196]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0ef      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004378:	7cfb      	ldrb	r3, [r7, #19]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d15c      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800437e:	4b2c      	ldr	r3, [pc, #176]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004388:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01f      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	429a      	cmp	r2, r3
 800439a:	d019      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800439c:	4b24      	ldr	r3, [pc, #144]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043a8:	4b21      	ldr	r3, [pc, #132]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ae:	4a20      	ldr	r2, [pc, #128]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043b8:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	4a1c      	ldr	r2, [pc, #112]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043c8:	4a19      	ldr	r2, [pc, #100]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043da:	f7fc fe27 	bl	800102c <HAL_GetTick>
 80043de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e0:	e00b      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fc fe23 	bl	800102c <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d902      	bls.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	74fb      	strb	r3, [r7, #19]
            break;
 80043f8:	e006      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fa:	4b0d      	ldr	r3, [pc, #52]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ec      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10c      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800440e:	4b08      	ldr	r3, [pc, #32]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441e:	4904      	ldr	r1, [pc, #16]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004426:	e009      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004428:	7cfb      	ldrb	r3, [r7, #19]
 800442a:	74bb      	strb	r3, [r7, #18]
 800442c:	e006      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
 8004434:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800443c:	7c7b      	ldrb	r3, [r7, #17]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d105      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004442:	4b9e      	ldr	r3, [pc, #632]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	4a9d      	ldr	r2, [pc, #628]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800445a:	4b98      	ldr	r3, [pc, #608]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004460:	f023 0203 	bic.w	r2, r3, #3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	4994      	ldr	r1, [pc, #592]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800447c:	4b8f      	ldr	r3, [pc, #572]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f023 020c 	bic.w	r2, r3, #12
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	498c      	ldr	r1, [pc, #560]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800449e:	4b87      	ldr	r3, [pc, #540]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	4983      	ldr	r1, [pc, #524]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044c0:	4b7e      	ldr	r3, [pc, #504]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	497b      	ldr	r1, [pc, #492]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044e2:	4b76      	ldr	r3, [pc, #472]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f0:	4972      	ldr	r1, [pc, #456]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004504:	4b6d      	ldr	r3, [pc, #436]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004512:	496a      	ldr	r1, [pc, #424]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004526:	4b65      	ldr	r3, [pc, #404]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	4961      	ldr	r1, [pc, #388]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004548:	4b5c      	ldr	r3, [pc, #368]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004556:	4959      	ldr	r1, [pc, #356]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800456a:	4b54      	ldr	r3, [pc, #336]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004570:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004578:	4950      	ldr	r1, [pc, #320]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800458c:	4b4b      	ldr	r3, [pc, #300]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004592:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	4948      	ldr	r1, [pc, #288]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045ae:	4b43      	ldr	r3, [pc, #268]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	493f      	ldr	r1, [pc, #252]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d028      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045d0:	4b3a      	ldr	r3, [pc, #232]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045de:	4937      	ldr	r1, [pc, #220]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ee:	d106      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f0:	4b32      	ldr	r3, [pc, #200]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4a31      	ldr	r2, [pc, #196]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045fa:	60d3      	str	r3, [r2, #12]
 80045fc:	e011      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004602:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004606:	d10c      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	2101      	movs	r1, #1
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f8d8 	bl	80047c4 <RCCEx_PLLSAI1_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004618:	7cfb      	ldrb	r3, [r7, #19]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800461e:	7cfb      	ldrb	r3, [r7, #19]
 8004620:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d028      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800462e:	4b23      	ldr	r3, [pc, #140]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	491f      	ldr	r1, [pc, #124]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800464c:	d106      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800464e:	4b1b      	ldr	r3, [pc, #108]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	4a1a      	ldr	r2, [pc, #104]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004658:	60d3      	str	r3, [r2, #12]
 800465a:	e011      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004664:	d10c      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3304      	adds	r3, #4
 800466a:	2101      	movs	r1, #1
 800466c:	4618      	mov	r0, r3
 800466e:	f000 f8a9 	bl	80047c4 <RCCEx_PLLSAI1_Config>
 8004672:	4603      	mov	r3, r0
 8004674:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004676:	7cfb      	ldrb	r3, [r7, #19]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800467c:	7cfb      	ldrb	r3, [r7, #19]
 800467e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d02b      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800469a:	4908      	ldr	r1, [pc, #32]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046aa:	d109      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ac:	4b03      	ldr	r3, [pc, #12]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4a02      	ldr	r2, [pc, #8]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046b6:	60d3      	str	r3, [r2, #12]
 80046b8:	e014      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046c8:	d10c      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3304      	adds	r3, #4
 80046ce:	2101      	movs	r1, #1
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 f877 	bl	80047c4 <RCCEx_PLLSAI1_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d02f      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046f0:	4b2b      	ldr	r3, [pc, #172]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046fe:	4928      	ldr	r1, [pc, #160]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800470a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800470e:	d10d      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	2102      	movs	r1, #2
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f854 	bl	80047c4 <RCCEx_PLLSAI1_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004720:	7cfb      	ldrb	r3, [r7, #19]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d014      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004726:	7cfb      	ldrb	r3, [r7, #19]
 8004728:	74bb      	strb	r3, [r7, #18]
 800472a:	e011      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004734:	d10c      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3320      	adds	r3, #32
 800473a:	2102      	movs	r1, #2
 800473c:	4618      	mov	r0, r3
 800473e:	f000 f935 	bl	80049ac <RCCEx_PLLSAI2_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004746:	7cfb      	ldrb	r3, [r7, #19]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800474c:	7cfb      	ldrb	r3, [r7, #19]
 800474e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800475c:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800476a:	490d      	ldr	r1, [pc, #52]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00b      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800477e:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004784:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800478e:	4904      	ldr	r1, [pc, #16]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004796:	7cbb      	ldrb	r3, [r7, #18]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000

080047a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a04      	ldr	r2, [pc, #16]	; (80047c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047ae:	f043 0304 	orr.w	r3, r3, #4
 80047b2:	6013      	str	r3, [r2, #0]
}
 80047b4:	bf00      	nop
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000

080047c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047d2:	4b75      	ldr	r3, [pc, #468]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d018      	beq.n	8004810 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047de:	4b72      	ldr	r3, [pc, #456]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0203 	and.w	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d10d      	bne.n	800480a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
       ||
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047f6:	4b6c      	ldr	r3, [pc, #432]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	091b      	lsrs	r3, r3, #4
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
       ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d047      	beq.n	800489a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
 800480e:	e044      	b.n	800489a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d018      	beq.n	800484a <RCCEx_PLLSAI1_Config+0x86>
 8004818:	2b03      	cmp	r3, #3
 800481a:	d825      	bhi.n	8004868 <RCCEx_PLLSAI1_Config+0xa4>
 800481c:	2b01      	cmp	r3, #1
 800481e:	d002      	beq.n	8004826 <RCCEx_PLLSAI1_Config+0x62>
 8004820:	2b02      	cmp	r3, #2
 8004822:	d009      	beq.n	8004838 <RCCEx_PLLSAI1_Config+0x74>
 8004824:	e020      	b.n	8004868 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004826:	4b60      	ldr	r3, [pc, #384]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d11d      	bne.n	800486e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004836:	e01a      	b.n	800486e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004838:	4b5b      	ldr	r3, [pc, #364]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004840:	2b00      	cmp	r3, #0
 8004842:	d116      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004848:	e013      	b.n	8004872 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800484a:	4b57      	ldr	r3, [pc, #348]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10f      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004856:	4b54      	ldr	r3, [pc, #336]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004866:	e006      	b.n	8004876 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      break;
 800486c:	e004      	b.n	8004878 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800486e:	bf00      	nop
 8004870:	e002      	b.n	8004878 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004876:	bf00      	nop
    }

    if(status == HAL_OK)
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10d      	bne.n	800489a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800487e:	4b4a      	ldr	r3, [pc, #296]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6819      	ldr	r1, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	3b01      	subs	r3, #1
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	430b      	orrs	r3, r1
 8004894:	4944      	ldr	r1, [pc, #272]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004896:	4313      	orrs	r3, r2
 8004898:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d17d      	bne.n	800499c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048a0:	4b41      	ldr	r3, [pc, #260]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ac:	f7fc fbbe 	bl	800102c <HAL_GetTick>
 80048b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048b2:	e009      	b.n	80048c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048b4:	f7fc fbba 	bl	800102c <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d902      	bls.n	80048c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	73fb      	strb	r3, [r7, #15]
        break;
 80048c6:	e005      	b.n	80048d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048c8:	4b37      	ldr	r3, [pc, #220]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1ef      	bne.n	80048b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d160      	bne.n	800499c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d111      	bne.n	8004904 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048e0:	4b31      	ldr	r3, [pc, #196]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6892      	ldr	r2, [r2, #8]
 80048f0:	0211      	lsls	r1, r2, #8
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	68d2      	ldr	r2, [r2, #12]
 80048f6:	0912      	lsrs	r2, r2, #4
 80048f8:	0452      	lsls	r2, r2, #17
 80048fa:	430a      	orrs	r2, r1
 80048fc:	492a      	ldr	r1, [pc, #168]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	610b      	str	r3, [r1, #16]
 8004902:	e027      	b.n	8004954 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d112      	bne.n	8004930 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800490a:	4b27      	ldr	r3, [pc, #156]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004912:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6892      	ldr	r2, [r2, #8]
 800491a:	0211      	lsls	r1, r2, #8
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6912      	ldr	r2, [r2, #16]
 8004920:	0852      	lsrs	r2, r2, #1
 8004922:	3a01      	subs	r2, #1
 8004924:	0552      	lsls	r2, r2, #21
 8004926:	430a      	orrs	r2, r1
 8004928:	491f      	ldr	r1, [pc, #124]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800492a:	4313      	orrs	r3, r2
 800492c:	610b      	str	r3, [r1, #16]
 800492e:	e011      	b.n	8004954 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004930:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004938:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6892      	ldr	r2, [r2, #8]
 8004940:	0211      	lsls	r1, r2, #8
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6952      	ldr	r2, [r2, #20]
 8004946:	0852      	lsrs	r2, r2, #1
 8004948:	3a01      	subs	r2, #1
 800494a:	0652      	lsls	r2, r2, #25
 800494c:	430a      	orrs	r2, r1
 800494e:	4916      	ldr	r1, [pc, #88]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004950:	4313      	orrs	r3, r2
 8004952:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004954:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a13      	ldr	r2, [pc, #76]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800495a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800495e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7fc fb64 	bl	800102c <HAL_GetTick>
 8004964:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004966:	e009      	b.n	800497c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004968:	f7fc fb60 	bl	800102c <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d902      	bls.n	800497c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	73fb      	strb	r3, [r7, #15]
          break;
 800497a:	e005      	b.n	8004988 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0ef      	beq.n	8004968 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	4904      	ldr	r1, [pc, #16]	; (80049a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004998:	4313      	orrs	r3, r2
 800499a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800499c:	7bfb      	ldrb	r3, [r7, #15]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40021000 	.word	0x40021000

080049ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ba:	4b6a      	ldr	r3, [pc, #424]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d018      	beq.n	80049f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049c6:	4b67      	ldr	r3, [pc, #412]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0203 	and.w	r2, r3, #3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d10d      	bne.n	80049f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
       ||
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049de:	4b61      	ldr	r3, [pc, #388]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
       ||
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d047      	beq.n	8004a82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
 80049f6:	e044      	b.n	8004a82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d018      	beq.n	8004a32 <RCCEx_PLLSAI2_Config+0x86>
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d825      	bhi.n	8004a50 <RCCEx_PLLSAI2_Config+0xa4>
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d002      	beq.n	8004a0e <RCCEx_PLLSAI2_Config+0x62>
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d009      	beq.n	8004a20 <RCCEx_PLLSAI2_Config+0x74>
 8004a0c:	e020      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a0e:	4b55      	ldr	r3, [pc, #340]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11d      	bne.n	8004a56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a1e:	e01a      	b.n	8004a56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a20:	4b50      	ldr	r3, [pc, #320]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d116      	bne.n	8004a5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a30:	e013      	b.n	8004a5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a32:	4b4c      	ldr	r3, [pc, #304]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10f      	bne.n	8004a5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a3e:	4b49      	ldr	r3, [pc, #292]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a4e:	e006      	b.n	8004a5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
      break;
 8004a54:	e004      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a56:	bf00      	nop
 8004a58:	e002      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e000      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10d      	bne.n	8004a82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a66:	4b3f      	ldr	r3, [pc, #252]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6819      	ldr	r1, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	4939      	ldr	r1, [pc, #228]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d167      	bne.n	8004b58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a88:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a35      	ldr	r2, [pc, #212]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a94:	f7fc faca 	bl	800102c <HAL_GetTick>
 8004a98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a9a:	e009      	b.n	8004ab0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a9c:	f7fc fac6 	bl	800102c <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d902      	bls.n	8004ab0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	73fb      	strb	r3, [r7, #15]
        break;
 8004aae:	e005      	b.n	8004abc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ab0:	4b2c      	ldr	r3, [pc, #176]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ef      	bne.n	8004a9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d14a      	bne.n	8004b58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d111      	bne.n	8004aec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ac8:	4b26      	ldr	r3, [pc, #152]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6892      	ldr	r2, [r2, #8]
 8004ad8:	0211      	lsls	r1, r2, #8
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68d2      	ldr	r2, [r2, #12]
 8004ade:	0912      	lsrs	r2, r2, #4
 8004ae0:	0452      	lsls	r2, r2, #17
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	491f      	ldr	r1, [pc, #124]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	614b      	str	r3, [r1, #20]
 8004aea:	e011      	b.n	8004b10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004aec:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004af4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6892      	ldr	r2, [r2, #8]
 8004afc:	0211      	lsls	r1, r2, #8
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6912      	ldr	r2, [r2, #16]
 8004b02:	0852      	lsrs	r2, r2, #1
 8004b04:	3a01      	subs	r2, #1
 8004b06:	0652      	lsls	r2, r2, #25
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	4916      	ldr	r1, [pc, #88]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b10:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fc fa86 	bl	800102c <HAL_GetTick>
 8004b20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b22:	e009      	b.n	8004b38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b24:	f7fc fa82 	bl	800102c <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d902      	bls.n	8004b38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	73fb      	strb	r3, [r7, #15]
          break;
 8004b36:	e005      	b.n	8004b44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b38:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ef      	beq.n	8004b24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b4a:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	4904      	ldr	r1, [pc, #16]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000

08004b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b68:	b084      	sub	sp, #16
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	f107 001c 	add.w	r0, r7, #28
 8004b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f001 fa90 	bl	80060ac <USB_CoreReset>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ba2:	e005      	b.n	8004bb0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bbc:	b004      	add	sp, #16
 8004bbe:	4770      	bx	lr

08004bc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d165      	bne.n	8004ca0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4a3e      	ldr	r2, [pc, #248]	; (8004cd0 <USB_SetTurnaroundTime+0x110>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d906      	bls.n	8004bea <USB_SetTurnaroundTime+0x2a>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4a3d      	ldr	r2, [pc, #244]	; (8004cd4 <USB_SetTurnaroundTime+0x114>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d202      	bcs.n	8004bea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004be4:	230f      	movs	r3, #15
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	e05c      	b.n	8004ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	4a39      	ldr	r2, [pc, #228]	; (8004cd4 <USB_SetTurnaroundTime+0x114>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d306      	bcc.n	8004c00 <USB_SetTurnaroundTime+0x40>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	4a38      	ldr	r2, [pc, #224]	; (8004cd8 <USB_SetTurnaroundTime+0x118>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d202      	bcs.n	8004c00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004bfa:	230e      	movs	r3, #14
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	e051      	b.n	8004ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4a35      	ldr	r2, [pc, #212]	; (8004cd8 <USB_SetTurnaroundTime+0x118>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d306      	bcc.n	8004c16 <USB_SetTurnaroundTime+0x56>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4a34      	ldr	r2, [pc, #208]	; (8004cdc <USB_SetTurnaroundTime+0x11c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d202      	bcs.n	8004c16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c10:	230d      	movs	r3, #13
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	e046      	b.n	8004ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	4a30      	ldr	r2, [pc, #192]	; (8004cdc <USB_SetTurnaroundTime+0x11c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d306      	bcc.n	8004c2c <USB_SetTurnaroundTime+0x6c>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4a2f      	ldr	r2, [pc, #188]	; (8004ce0 <USB_SetTurnaroundTime+0x120>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d802      	bhi.n	8004c2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c26:	230c      	movs	r3, #12
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	e03b      	b.n	8004ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4a2c      	ldr	r2, [pc, #176]	; (8004ce0 <USB_SetTurnaroundTime+0x120>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d906      	bls.n	8004c42 <USB_SetTurnaroundTime+0x82>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4a2b      	ldr	r2, [pc, #172]	; (8004ce4 <USB_SetTurnaroundTime+0x124>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d802      	bhi.n	8004c42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c3c:	230b      	movs	r3, #11
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	e030      	b.n	8004ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4a27      	ldr	r2, [pc, #156]	; (8004ce4 <USB_SetTurnaroundTime+0x124>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d906      	bls.n	8004c58 <USB_SetTurnaroundTime+0x98>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4a26      	ldr	r2, [pc, #152]	; (8004ce8 <USB_SetTurnaroundTime+0x128>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d802      	bhi.n	8004c58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c52:	230a      	movs	r3, #10
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	e025      	b.n	8004ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4a23      	ldr	r2, [pc, #140]	; (8004ce8 <USB_SetTurnaroundTime+0x128>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d906      	bls.n	8004c6e <USB_SetTurnaroundTime+0xae>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4a22      	ldr	r2, [pc, #136]	; (8004cec <USB_SetTurnaroundTime+0x12c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d202      	bcs.n	8004c6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c68:	2309      	movs	r3, #9
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	e01a      	b.n	8004ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	4a1e      	ldr	r2, [pc, #120]	; (8004cec <USB_SetTurnaroundTime+0x12c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d306      	bcc.n	8004c84 <USB_SetTurnaroundTime+0xc4>
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	4a1d      	ldr	r2, [pc, #116]	; (8004cf0 <USB_SetTurnaroundTime+0x130>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d802      	bhi.n	8004c84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c7e:	2308      	movs	r3, #8
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e00f      	b.n	8004ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	4a1a      	ldr	r2, [pc, #104]	; (8004cf0 <USB_SetTurnaroundTime+0x130>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d906      	bls.n	8004c9a <USB_SetTurnaroundTime+0xda>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4a19      	ldr	r2, [pc, #100]	; (8004cf4 <USB_SetTurnaroundTime+0x134>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d202      	bcs.n	8004c9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c94:	2307      	movs	r3, #7
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	e004      	b.n	8004ca4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c9a:	2306      	movs	r3, #6
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	e001      	b.n	8004ca4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ca0:	2309      	movs	r3, #9
 8004ca2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	029b      	lsls	r3, r3, #10
 8004cb8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	371c      	adds	r7, #28
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	00d8acbf 	.word	0x00d8acbf
 8004cd4:	00e4e1c0 	.word	0x00e4e1c0
 8004cd8:	00f42400 	.word	0x00f42400
 8004cdc:	01067380 	.word	0x01067380
 8004ce0:	011a499f 	.word	0x011a499f
 8004ce4:	01312cff 	.word	0x01312cff
 8004ce8:	014ca43f 	.word	0x014ca43f
 8004cec:	016e3600 	.word	0x016e3600
 8004cf0:	01a6ab1f 	.word	0x01a6ab1f
 8004cf4:	01e84800 	.word	0x01e84800

08004cf8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f043 0201 	orr.w	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f023 0201 	bic.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d115      	bne.n	8004d8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d6a:	2001      	movs	r0, #1
 8004d6c:	f7fc f96a 	bl	8001044 <HAL_Delay>
      ms++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3301      	adds	r3, #1
 8004d74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f001 f91e 	bl	8005fb8 <USB_GetMode>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d01e      	beq.n	8004dc0 <USB_SetCurrentMode+0x84>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b31      	cmp	r3, #49	; 0x31
 8004d86:	d9f0      	bls.n	8004d6a <USB_SetCurrentMode+0x2e>
 8004d88:	e01a      	b.n	8004dc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d115      	bne.n	8004dbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	f7fc f951 	bl	8001044 <HAL_Delay>
      ms++;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3301      	adds	r3, #1
 8004da6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f001 f905 	bl	8005fb8 <USB_GetMode>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <USB_SetCurrentMode+0x84>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b31      	cmp	r3, #49	; 0x31
 8004db8:	d9f0      	bls.n	8004d9c <USB_SetCurrentMode+0x60>
 8004dba:	e001      	b.n	8004dc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e005      	b.n	8004dcc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b32      	cmp	r3, #50	; 0x32
 8004dc4:	d101      	bne.n	8004dca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b086      	sub	sp, #24
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	e009      	b.n	8004e08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	3340      	adds	r3, #64	; 0x40
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	2200      	movs	r2, #0
 8004e00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	3301      	adds	r3, #1
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b0e      	cmp	r3, #14
 8004e0c:	d9f2      	bls.n	8004df4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d11c      	bne.n	8004e4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e22:	f043 0302 	orr.w	r3, r3, #2
 8004e26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	e005      	b.n	8004e5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e60:	461a      	mov	r2, r3
 8004e62:	2300      	movs	r3, #0
 8004e64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e74:	461a      	mov	r2, r3
 8004e76:	680b      	ldr	r3, [r1, #0]
 8004e78:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e7a:	2103      	movs	r1, #3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f955 	bl	800512c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e82:	2110      	movs	r1, #16
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f8f1 	bl	800506c <USB_FlushTxFifo>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f91b 	bl	80050d0 <USB_FlushRxFifo>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2300      	movs	r3, #0
 8004eae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ec8:	2300      	movs	r3, #0
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	e043      	b.n	8004f56 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ee4:	d118      	bne.n	8004f18 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	e013      	b.n	8004f2a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e008      	b.n	8004f2a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	461a      	mov	r2, r3
 8004f26:	2300      	movs	r3, #0
 8004f28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f36:	461a      	mov	r2, r3
 8004f38:	2300      	movs	r3, #0
 8004f3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	3301      	adds	r3, #1
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d3b7      	bcc.n	8004ece <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f5e:	2300      	movs	r3, #0
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	e043      	b.n	8004fec <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f7a:	d118      	bne.n	8004fae <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	e013      	b.n	8004fc0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	e008      	b.n	8004fc0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fcc:	461a      	mov	r2, r3
 8004fce:	2300      	movs	r3, #0
 8004fd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fe4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d3b7      	bcc.n	8004f64 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005006:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005014:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f043 0210 	orr.w	r2, r3, #16
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	4b10      	ldr	r3, [pc, #64]	; (8005068 <USB_DevInit+0x294>)
 8005028:	4313      	orrs	r3, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	f043 0208 	orr.w	r2, r3, #8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d107      	bne.n	8005056 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800504e:	f043 0304 	orr.w	r3, r3, #4
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005056:	7dfb      	ldrb	r3, [r7, #23]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005062:	b004      	add	sp, #16
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	803c3800 	.word	0x803c3800

0800506c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3301      	adds	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	4a12      	ldr	r2, [pc, #72]	; (80050cc <USB_FlushTxFifo+0x60>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e01a      	b.n	80050c0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	daf3      	bge.n	800507a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	019b      	lsls	r3, r3, #6
 800509a:	f043 0220 	orr.w	r2, r3, #32
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3301      	adds	r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	4a08      	ldr	r2, [pc, #32]	; (80050cc <USB_FlushTxFifo+0x60>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e006      	b.n	80050c0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d0f1      	beq.n	80050a2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	00030d40 	.word	0x00030d40

080050d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3301      	adds	r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	4a11      	ldr	r2, [pc, #68]	; (8005128 <USB_FlushRxFifo+0x58>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d901      	bls.n	80050ec <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e017      	b.n	800511c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	daf3      	bge.n	80050dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2210      	movs	r2, #16
 80050fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3301      	adds	r3, #1
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	4a08      	ldr	r2, [pc, #32]	; (8005128 <USB_FlushRxFifo+0x58>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e006      	b.n	800511c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b10      	cmp	r3, #16
 8005118:	d0f1      	beq.n	80050fe <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	00030d40 	.word	0x00030d40

0800512c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	68f9      	ldr	r1, [r7, #12]
 8005148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800514c:	4313      	orrs	r3, r2
 800514e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800515e:	b480      	push	{r7}
 8005160:	b087      	sub	sp, #28
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 0306 	and.w	r3, r3, #6
 8005176:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d002      	beq.n	8005184 <USB_GetDevSpeed+0x26>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b06      	cmp	r3, #6
 8005182:	d102      	bne.n	800518a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005184:	2302      	movs	r3, #2
 8005186:	75fb      	strb	r3, [r7, #23]
 8005188:	e001      	b.n	800518e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800518a:	230f      	movs	r3, #15
 800518c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005190:	4618      	mov	r0, r3
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d13a      	bne.n	800522e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	2101      	movs	r1, #1
 80051ca:	fa01 f303 	lsl.w	r3, r1, r3
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	68f9      	ldr	r1, [r7, #12]
 80051d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d155      	bne.n	800529c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	78db      	ldrb	r3, [r3, #3]
 800520a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800520c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	059b      	lsls	r3, r3, #22
 8005212:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005214:	4313      	orrs	r3, r2
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	e036      	b.n	800529c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005234:	69da      	ldr	r2, [r3, #28]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	2101      	movs	r1, #1
 8005240:	fa01 f303 	lsl.w	r3, r1, r3
 8005244:	041b      	lsls	r3, r3, #16
 8005246:	68f9      	ldr	r1, [r7, #12]
 8005248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800524c:	4313      	orrs	r3, r2
 800524e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d11a      	bne.n	800529c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	78db      	ldrb	r3, [r3, #3]
 8005280:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005282:	430b      	orrs	r3, r1
 8005284:	4313      	orrs	r3, r2
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	440a      	add	r2, r1
 800528e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
	...

080052ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d161      	bne.n	800538c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052de:	d11f      	bne.n	8005320 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800531e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	2101      	movs	r1, #1
 8005332:	fa01 f303 	lsl.w	r3, r1, r3
 8005336:	b29b      	uxth	r3, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	68f9      	ldr	r1, [r7, #12]
 800533c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005340:	4013      	ands	r3, r2
 8005342:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	2101      	movs	r1, #1
 8005356:	fa01 f303 	lsl.w	r3, r1, r3
 800535a:	b29b      	uxth	r3, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005364:	4013      	ands	r3, r2
 8005366:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	0159      	lsls	r1, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	440b      	add	r3, r1
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	4619      	mov	r1, r3
 8005384:	4b35      	ldr	r3, [pc, #212]	; (800545c <USB_DeactivateEndpoint+0x1b0>)
 8005386:	4013      	ands	r3, r2
 8005388:	600b      	str	r3, [r1, #0]
 800538a:	e060      	b.n	800544e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800539e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a2:	d11f      	bne.n	80053e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	2101      	movs	r1, #1
 80053f6:	fa01 f303 	lsl.w	r3, r1, r3
 80053fa:	041b      	lsls	r3, r3, #16
 80053fc:	43db      	mvns	r3, r3
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005404:	4013      	ands	r3, r2
 8005406:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	2101      	movs	r1, #1
 800541a:	fa01 f303 	lsl.w	r3, r1, r3
 800541e:	041b      	lsls	r3, r3, #16
 8005420:	43db      	mvns	r3, r3
 8005422:	68f9      	ldr	r1, [r7, #12]
 8005424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005428:	4013      	ands	r3, r2
 800542a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	0159      	lsls	r1, r3, #5
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	440b      	add	r3, r1
 8005442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005446:	4619      	mov	r1, r3
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <USB_DeactivateEndpoint+0x1b4>)
 800544a:	4013      	ands	r3, r2
 800544c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	ec337800 	.word	0xec337800
 8005460:	eff37800 	.word	0xeff37800

08005464 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	785b      	ldrb	r3, [r3, #1]
 800547c:	2b01      	cmp	r3, #1
 800547e:	f040 810a 	bne.w	8005696 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d132      	bne.n	80054f0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e8:	0cdb      	lsrs	r3, r3, #19
 80054ea:	04db      	lsls	r3, r3, #19
 80054ec:	6113      	str	r3, [r2, #16]
 80054ee:	e074      	b.n	80055da <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	440a      	add	r2, r1
 8005506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550a:	0cdb      	lsrs	r3, r3, #19
 800550c:	04db      	lsls	r3, r3, #19
 800550e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	440a      	add	r2, r1
 8005526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800552e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005532:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6959      	ldr	r1, [r3, #20]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	440b      	add	r3, r1
 800554c:	1e59      	subs	r1, r3, #1
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	fbb1 f3f3 	udiv	r3, r1, r3
 8005556:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005558:	4baf      	ldr	r3, [pc, #700]	; (8005818 <USB_EPStartXfer+0x3b4>)
 800555a:	400b      	ands	r3, r1
 800555c:	6939      	ldr	r1, [r7, #16]
 800555e:	0148      	lsls	r0, r1, #5
 8005560:	6979      	ldr	r1, [r7, #20]
 8005562:	4401      	add	r1, r0
 8005564:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005568:	4313      	orrs	r3, r2
 800556a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005578:	691a      	ldr	r2, [r3, #16]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005582:	6939      	ldr	r1, [r7, #16]
 8005584:	0148      	lsls	r0, r1, #5
 8005586:	6979      	ldr	r1, [r7, #20]
 8005588:	4401      	add	r1, r0
 800558a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800558e:	4313      	orrs	r3, r2
 8005590:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	78db      	ldrb	r3, [r3, #3]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d11f      	bne.n	80055da <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	0151      	lsls	r1, r2, #5
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	440a      	add	r2, r1
 80055b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80055b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	0151      	lsls	r1, r2, #5
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	440a      	add	r2, r1
 80055d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055d8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055f8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	78db      	ldrb	r3, [r3, #3]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d015      	beq.n	800562e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 8100 	beq.w	800580c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	2101      	movs	r1, #1
 800561e:	fa01 f303 	lsl.w	r3, r1, r3
 8005622:	6979      	ldr	r1, [r7, #20]
 8005624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005628:	4313      	orrs	r3, r2
 800562a:	634b      	str	r3, [r1, #52]	; 0x34
 800562c:	e0ee      	b.n	800580c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563a:	2b00      	cmp	r3, #0
 800563c:	d110      	bne.n	8005660 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	0151      	lsls	r1, r2, #5
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	440a      	add	r2, r1
 8005654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005658:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	e00f      	b.n	8005680 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	0151      	lsls	r1, r2, #5
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	440a      	add	r2, r1
 8005676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	68d9      	ldr	r1, [r3, #12]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	781a      	ldrb	r2, [r3, #0]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	b29b      	uxth	r3, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f9e2 	bl	8005a58 <USB_WritePacket>
 8005694:	e0ba      	b.n	800580c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	0151      	lsls	r1, r2, #5
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	440a      	add	r2, r1
 80056ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b0:	0cdb      	lsrs	r3, r3, #19
 80056b2:	04db      	lsls	r3, r3, #19
 80056b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	0151      	lsls	r1, r2, #5
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	440a      	add	r2, r1
 80056cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d123      	bne.n	800572a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056f8:	6939      	ldr	r1, [r7, #16]
 80056fa:	0148      	lsls	r0, r1, #5
 80056fc:	6979      	ldr	r1, [r7, #20]
 80056fe:	4401      	add	r1, r0
 8005700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005704:	4313      	orrs	r3, r2
 8005706:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005726:	6113      	str	r3, [r2, #16]
 8005728:	e033      	b.n	8005792 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	695a      	ldr	r2, [r3, #20]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	4413      	add	r3, r2
 8005734:	1e5a      	subs	r2, r3, #1
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	fbb2 f3f3 	udiv	r3, r2, r3
 800573e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	89fb      	ldrh	r3, [r7, #14]
 8005750:	04d9      	lsls	r1, r3, #19
 8005752:	4b31      	ldr	r3, [pc, #196]	; (8005818 <USB_EPStartXfer+0x3b4>)
 8005754:	400b      	ands	r3, r1
 8005756:	6939      	ldr	r1, [r7, #16]
 8005758:	0148      	lsls	r0, r1, #5
 800575a:	6979      	ldr	r1, [r7, #20]
 800575c:	4401      	add	r1, r0
 800575e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005762:	4313      	orrs	r3, r2
 8005764:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005772:	691a      	ldr	r2, [r3, #16]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	89f9      	ldrh	r1, [r7, #14]
 800577a:	fb01 f303 	mul.w	r3, r1, r3
 800577e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005782:	6939      	ldr	r1, [r7, #16]
 8005784:	0148      	lsls	r0, r1, #5
 8005786:	6979      	ldr	r1, [r7, #20]
 8005788:	4401      	add	r1, r0
 800578a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800578e:	4313      	orrs	r3, r2
 8005790:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	78db      	ldrb	r3, [r3, #3]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d128      	bne.n	80057ec <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d110      	bne.n	80057cc <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e00f      	b.n	80057ec <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	440a      	add	r2, r1
 8005802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005806:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800580a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	1ff80000 	.word	0x1ff80000

0800581c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	2b01      	cmp	r3, #1
 8005836:	f040 80ab 	bne.w	8005990 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d132      	bne.n	80058a8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	440a      	add	r2, r1
 8005858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005860:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	440a      	add	r2, r1
 800587c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005884:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a0:	0cdb      	lsrs	r3, r3, #19
 80058a2:	04db      	lsls	r3, r3, #19
 80058a4:	6113      	str	r3, [r2, #16]
 80058a6:	e04e      	b.n	8005946 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c2:	0cdb      	lsrs	r3, r3, #19
 80058c4:	04db      	lsls	r3, r3, #19
 80058c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	0151      	lsls	r1, r2, #5
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	440a      	add	r2, r1
 80058de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	695a      	ldr	r2, [r3, #20]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d903      	bls.n	8005900 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800591e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	0148      	lsls	r0, r1, #5
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	4401      	add	r1, r0
 800593e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005942:	4313      	orrs	r3, r2
 8005944:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	0151      	lsls	r1, r2, #5
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	440a      	add	r2, r1
 800595c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005960:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005964:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d06d      	beq.n	8005a4a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	2101      	movs	r1, #1
 8005980:	fa01 f303 	lsl.w	r3, r1, r3
 8005984:	68f9      	ldr	r1, [r7, #12]
 8005986:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800598a:	4313      	orrs	r3, r2
 800598c:	634b      	str	r3, [r1, #52]	; 0x34
 800598e:	e05c      	b.n	8005a4a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	0151      	lsls	r1, r2, #5
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	440a      	add	r2, r1
 80059a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059aa:	0cdb      	lsrs	r3, r3, #19
 80059ac:	04db      	lsls	r3, r3, #19
 80059ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059d2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a10:	691a      	ldr	r2, [r3, #16]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	0148      	lsls	r0, r1, #5
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	4401      	add	r1, r0
 8005a22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a26:	4313      	orrs	r3, r2
 8005a28:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	0151      	lsls	r1, r2, #5
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	440a      	add	r2, r1
 8005a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b089      	sub	sp, #36	; 0x24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	4611      	mov	r1, r2
 8005a64:	461a      	mov	r2, r3
 8005a66:	460b      	mov	r3, r1
 8005a68:	71fb      	strb	r3, [r7, #7]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005a76:	88bb      	ldrh	r3, [r7, #4]
 8005a78:	3303      	adds	r3, #3
 8005a7a:	089b      	lsrs	r3, r3, #2
 8005a7c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	e018      	b.n	8005ab6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	031a      	lsls	r2, r3, #12
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a90:	461a      	mov	r2, r3
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	3301      	adds	r3, #1
 8005aae:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d3e2      	bcc.n	8005a84 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3724      	adds	r7, #36	; 0x24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b08b      	sub	sp, #44	; 0x2c
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	089b      	lsrs	r3, r3, #2
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005aea:	88fb      	ldrh	r3, [r7, #6]
 8005aec:	f003 0303 	and.w	r3, r3, #3
 8005af0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005af2:	2300      	movs	r3, #0
 8005af4:	623b      	str	r3, [r7, #32]
 8005af6:	e014      	b.n	8005b22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	3301      	adds	r3, #1
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	3301      	adds	r3, #1
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	3301      	adds	r3, #1
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	623b      	str	r3, [r7, #32]
 8005b22:	6a3a      	ldr	r2, [r7, #32]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d3e6      	bcc.n	8005af8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b2a:	8bfb      	ldrh	r3, [r7, #30]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01e      	beq.n	8005b6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f107 0310 	add.w	r3, r7, #16
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	701a      	strb	r2, [r3, #0]
      i++;
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	3301      	adds	r3, #1
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b62:	8bfb      	ldrh	r3, [r7, #30]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b68:	8bfb      	ldrh	r3, [r7, #30]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1ea      	bne.n	8005b44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	372c      	adds	r7, #44	; 0x2c
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d12c      	bne.n	8005bf2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	db12      	blt.n	8005bd0 <USB_EPSetStall+0x54>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00f      	beq.n	8005bd0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	e02b      	b.n	8005c4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	db12      	blt.n	8005c2a <USB_EPSetStall+0xae>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00f      	beq.n	8005c2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d128      	bne.n	8005cc6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	78db      	ldrb	r3, [r3, #3]
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d003      	beq.n	8005ca4 <USB_EPClearStall+0x4c>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	78db      	ldrb	r3, [r3, #3]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d138      	bne.n	8005d16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	0151      	lsls	r1, r2, #5
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	440a      	add	r2, r1
 8005cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	e027      	b.n	8005d16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ce4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	78db      	ldrb	r3, [r3, #3]
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d003      	beq.n	8005cf6 <USB_EPClearStall+0x9e>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	78db      	ldrb	r3, [r3, #3]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d10f      	bne.n	8005d16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	e016      	b.n	8005d64 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d42:	461a      	mov	r2, r3
 8005d44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d48:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d56:	461a      	mov	r2, r3
 8005d58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	3301      	adds	r3, #1
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	2b0e      	cmp	r3, #14
 8005d68:	d9e5      	bls.n	8005d36 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d70:	461a      	mov	r2, r3
 8005d72:	2300      	movs	r3, #0
 8005d74:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d88:	461a      	mov	r2, r3
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff f99e 	bl	80050d0 <USB_FlushRxFifo>
 8005d94:	4603      	mov	r3, r0
 8005d96:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <USB_StopDevice+0x7e>
  {
    return ret;
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	e00b      	b.n	8005dba <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 8005da2:	2110      	movs	r1, #16
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff f961 	bl	800506c <USB_FlushTxFifo>
 8005daa:	4603      	mov	r3, r0
 8005dac:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <USB_StopDevice+0x94>
  {
    return ret;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	e000      	b.n	8005dba <USB_StopDevice+0x96>
  }

  return ret;
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005de0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005de4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005df6:	68f9      	ldr	r1, [r7, #12]
 8005df8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e28:	f023 0303 	bic.w	r3, r3, #3
 8005e2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e3c:	f023 0302 	bic.w	r3, r3, #2
 8005e40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e7e:	f043 0302 	orr.w	r3, r3, #2
 8005e82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	0c1b      	lsrs	r3, r3, #16
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	b29b      	uxth	r3, r3
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8c:	01db      	lsls	r3, r3, #7
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005faa:	68bb      	ldr	r3, [r7, #8]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	371c      	adds	r7, #28
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ff2:	f023 0307 	bic.w	r3, r3, #7
 8005ff6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800600a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
	...

0800601c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	333c      	adds	r3, #60	; 0x3c
 800602e:	3304      	adds	r3, #4
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	4a1c      	ldr	r2, [pc, #112]	; (80060a8 <USB_EP0_OutStart+0x8c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d90a      	bls.n	8006052 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800604c:	d101      	bne.n	8006052 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	e024      	b.n	800609c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006058:	461a      	mov	r2, r3
 800605a:	2300      	movs	r3, #0
 800605c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800606c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006070:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006080:	f043 0318 	orr.w	r3, r3, #24
 8006084:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006094:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006098:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	4f54300a 	.word	0x4f54300a

080060ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	4a13      	ldr	r2, [pc, #76]	; (800610c <USB_CoreReset+0x60>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d901      	bls.n	80060c8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e01a      	b.n	80060fe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	daf3      	bge.n	80060b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f043 0201 	orr.w	r2, r3, #1
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3301      	adds	r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	4a09      	ldr	r2, [pc, #36]	; (800610c <USB_CoreReset+0x60>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d901      	bls.n	80060f0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e006      	b.n	80060fe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d0f1      	beq.n	80060e0 <USB_CoreReset+0x34>

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	00030d40 	.word	0x00030d40

08006110 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800611c:	f241 0074 	movw	r0, #4212	; 0x1074
 8006120:	f005 f9d0 	bl	800b4c4 <USBD_static_malloc>
 8006124:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d105      	bne.n	8006138 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006134:	2302      	movs	r3, #2
 8006136:	e034      	b.n	80061a2 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	7c1b      	ldrb	r3, [r3, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d115      	bne.n	8006174 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800614c:	2202      	movs	r2, #2
 800614e:	2101      	movs	r1, #1
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f004 ffbb 	bl	800b0cc <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800615e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006162:	2202      	movs	r2, #2
 8006164:	2181      	movs	r1, #129	; 0x81
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f004 ffb0 	bl	800b0cc <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	871a      	strh	r2, [r3, #56]	; 0x38
 8006172:	e012      	b.n	800619a <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006174:	2340      	movs	r3, #64	; 0x40
 8006176:	2202      	movs	r2, #2
 8006178:	2101      	movs	r1, #1
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f004 ffa6 	bl	800b0cc <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006188:	2340      	movs	r3, #64	; 0x40
 800618a:	2202      	movs	r2, #2
 800618c:	2181      	movs	r1, #129	; 0x81
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f004 ff9c 	bl	800b0cc <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f999 	bl	80064d2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	460b      	mov	r3, r1
 80061b4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80061b6:	2101      	movs	r1, #1
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f004 ffc5 	bl	800b148 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80061c6:	2181      	movs	r1, #129	; 0x81
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f004 ffbd 	bl	800b148 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00c      	beq.n	80061f8 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f9dd 	bl	800659e <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ea:	4618      	mov	r0, r3
 80061ec:	f005 f978 	bl	800b4e0 <USBD_static_free>
    pdev->pClassData = NULL;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006214:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006224:	2303      	movs	r3, #3
 8006226:	e0db      	b.n	80063e0 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006230:	2b00      	cmp	r3, #0
 8006232:	d04e      	beq.n	80062d2 <USBD_MSC_Setup+0xce>
 8006234:	2b20      	cmp	r3, #32
 8006236:	f040 80cb 	bne.w	80063d0 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	785b      	ldrb	r3, [r3, #1]
 800623e:	2bfe      	cmp	r3, #254	; 0xfe
 8006240:	d002      	beq.n	8006248 <USBD_MSC_Setup+0x44>
 8006242:	2bff      	cmp	r3, #255	; 0xff
 8006244:	d025      	beq.n	8006292 <USBD_MSC_Setup+0x8e>
 8006246:	e03c      	b.n	80062c2 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	885b      	ldrh	r3, [r3, #2]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d119      	bne.n	8006284 <USBD_MSC_Setup+0x80>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	88db      	ldrh	r3, [r3, #6]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d115      	bne.n	8006284 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800625e:	2b00      	cmp	r3, #0
 8006260:	da10      	bge.n	8006284 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	4798      	blx	r3
 800626c:	4603      	mov	r3, r0
 800626e:	461a      	mov	r2, r3
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2201      	movs	r2, #1
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f002 ff29 	bl	80090d2 <USBD_CtlSendData>
 8006280:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006282:	e025      	b.n	80062d0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f002 feb2 	bl	8008ff0 <USBD_CtlError>
            ret = USBD_FAIL;
 800628c:	2303      	movs	r3, #3
 800628e:	75fb      	strb	r3, [r7, #23]
          break;
 8006290:	e01e      	b.n	80062d0 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	885b      	ldrh	r3, [r3, #2]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10c      	bne.n	80062b4 <USBD_MSC_Setup+0xb0>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	88db      	ldrh	r3, [r3, #6]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d108      	bne.n	80062b4 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	db03      	blt.n	80062b4 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f94f 	bl	8006550 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062b2:	e00d      	b.n	80062d0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f002 fe9a 	bl	8008ff0 <USBD_CtlError>
            ret = USBD_FAIL;
 80062bc:	2303      	movs	r3, #3
 80062be:	75fb      	strb	r3, [r7, #23]
          break;
 80062c0:	e006      	b.n	80062d0 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f002 fe93 	bl	8008ff0 <USBD_CtlError>
          ret = USBD_FAIL;
 80062ca:	2303      	movs	r3, #3
 80062cc:	75fb      	strb	r3, [r7, #23]
          break;
 80062ce:	bf00      	nop
      }
      break;
 80062d0:	e085      	b.n	80063de <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	785b      	ldrb	r3, [r3, #1]
 80062d6:	2b0b      	cmp	r3, #11
 80062d8:	d871      	bhi.n	80063be <USBD_MSC_Setup+0x1ba>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <USBD_MSC_Setup+0xdc>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	08006311 	.word	0x08006311
 80062e4:	0800638d 	.word	0x0800638d
 80062e8:	080063bf 	.word	0x080063bf
 80062ec:	080063bf 	.word	0x080063bf
 80062f0:	080063bf 	.word	0x080063bf
 80062f4:	080063bf 	.word	0x080063bf
 80062f8:	080063bf 	.word	0x080063bf
 80062fc:	080063bf 	.word	0x080063bf
 8006300:	080063bf 	.word	0x080063bf
 8006304:	080063bf 	.word	0x080063bf
 8006308:	0800633b 	.word	0x0800633b
 800630c:	08006365 	.word	0x08006365
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b03      	cmp	r3, #3
 800631a:	d107      	bne.n	800632c <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800631c:	f107 030e 	add.w	r3, r7, #14
 8006320:	2202      	movs	r2, #2
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f002 fed4 	bl	80090d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800632a:	e050      	b.n	80063ce <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f002 fe5e 	bl	8008ff0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006334:	2303      	movs	r3, #3
 8006336:	75fb      	strb	r3, [r7, #23]
          break;
 8006338:	e049      	b.n	80063ce <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b03      	cmp	r3, #3
 8006344:	d107      	bne.n	8006356 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	3304      	adds	r3, #4
 800634a:	2201      	movs	r2, #1
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f002 febf 	bl	80090d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006354:	e03b      	b.n	80063ce <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f002 fe49 	bl	8008ff0 <USBD_CtlError>
            ret = USBD_FAIL;
 800635e:	2303      	movs	r3, #3
 8006360:	75fb      	strb	r3, [r7, #23]
          break;
 8006362:	e034      	b.n	80063ce <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b03      	cmp	r3, #3
 800636e:	d106      	bne.n	800637e <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	885b      	ldrh	r3, [r3, #2]
 8006374:	b2db      	uxtb	r3, r3
 8006376:	461a      	mov	r2, r3
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800637c:	e027      	b.n	80063ce <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f002 fe35 	bl	8008ff0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006386:	2303      	movs	r3, #3
 8006388:	75fb      	strb	r3, [r7, #23]
          break;
 800638a:	e020      	b.n	80063ce <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b03      	cmp	r3, #3
 8006396:	d119      	bne.n	80063cc <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	885b      	ldrh	r3, [r3, #2]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d115      	bne.n	80063cc <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	889b      	ldrh	r3, [r3, #4]
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f004 ff03 	bl	800b1b4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	889b      	ldrh	r3, [r3, #4]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 faa6 	bl	8006908 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80063bc:	e006      	b.n	80063cc <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f002 fe15 	bl	8008ff0 <USBD_CtlError>
          ret = USBD_FAIL;
 80063c6:	2303      	movs	r3, #3
 80063c8:	75fb      	strb	r3, [r7, #23]
          break;
 80063ca:	e000      	b.n	80063ce <USBD_MSC_Setup+0x1ca>
          break;
 80063cc:	bf00      	nop
      }
      break;
 80063ce:	e006      	b.n	80063de <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f002 fe0c 	bl	8008ff0 <USBD_CtlError>
      ret = USBD_FAIL;
 80063d8:	2303      	movs	r3, #3
 80063da:	75fb      	strb	r3, [r7, #23]
      break;
 80063dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80063de:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f8e4 	bl	80065c6 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f90c 	bl	8006636 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2220      	movs	r2, #32
 8006434:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006436:	4b03      	ldr	r3, [pc, #12]	; (8006444 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	20000044 	.word	0x20000044

08006448 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006456:	4b03      	ldr	r3, [pc, #12]	; (8006464 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	20000064 	.word	0x20000064

08006468 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2220      	movs	r2, #32
 8006474:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006476:	4b03      	ldr	r3, [pc, #12]	; (8006484 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	20000084 	.word	0x20000084

08006488 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	220a      	movs	r2, #10
 8006494:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006496:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	200000a4 	.word	0x200000a4

080064a8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e004      	b.n	80064c6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064e0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d02f      	beq.n	8006548 <MSC_BOT_Init+0x76>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2000      	movs	r0, #0
 8006522:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006524:	2101      	movs	r1, #1
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f004 fe44 	bl	800b1b4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800652c:	2181      	movs	r1, #129	; 0x81
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f004 fe40 	bl	800b1b4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800653a:	3210      	adds	r2, #16
 800653c:	231f      	movs	r3, #31
 800653e:	2101      	movs	r1, #1
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f004 ff73 	bl	800b42c <USBD_LL_PrepareReceive>
 8006546:	e000      	b.n	800654a <MSC_BOT_Init+0x78>
    return;
 8006548:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800655e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d017      	beq.n	8006596 <MSC_BOT_Reset+0x46>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2201      	movs	r2, #1
 8006570:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8006572:	2181      	movs	r1, #129	; 0x81
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f004 fe89 	bl	800b28c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800657a:	2101      	movs	r1, #1
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f004 fe85 	bl	800b28c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8006588:	3210      	adds	r2, #16
 800658a:	231f      	movs	r3, #31
 800658c:	2101      	movs	r1, #1
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f004 ff4c 	bl	800b42c <USBD_LL_PrepareReceive>
 8006594:	e000      	b.n	8006598 <MSC_BOT_Reset+0x48>
    return;
 8006596:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800659e:	b480      	push	{r7}
 80065a0:	b085      	sub	sp, #20
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065ac:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	721a      	strb	r2, [r3, #8]
  }
}
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	460b      	mov	r3, r1
 80065d0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065d8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d022      	beq.n	8006626 <MSC_BOT_DataIn+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	7a1b      	ldrb	r3, [r3, #8]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d005      	beq.n	80065f4 <MSC_BOT_DataIn+0x2e>
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	db1e      	blt.n	800662a <MSC_BOT_DataIn+0x64>
 80065ec:	3b03      	subs	r3, #3
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d81b      	bhi.n	800662a <MSC_BOT_DataIn+0x64>
 80065f2:	e013      	b.n	800661c <MSC_BOT_DataIn+0x56>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fa:	7f59      	ldrb	r1, [r3, #29]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006602:	331f      	adds	r3, #31
 8006604:	461a      	mov	r2, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f9ac 	bl	8006964 <SCSI_ProcessCmd>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	da0d      	bge.n	800662e <MSC_BOT_DataIn+0x68>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006612:	2101      	movs	r1, #1
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f90d 	bl	8006834 <MSC_BOT_SendCSW>
      }
      break;
 800661a:	e008      	b.n	800662e <MSC_BOT_DataIn+0x68>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800661c:	2100      	movs	r1, #0
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f908 	bl	8006834 <MSC_BOT_SendCSW>
      break;
 8006624:	e004      	b.n	8006630 <MSC_BOT_DataIn+0x6a>
    return;
 8006626:	bf00      	nop
 8006628:	e002      	b.n	8006630 <MSC_BOT_DataIn+0x6a>

    default:
      break;
 800662a:	bf00      	nop
 800662c:	e000      	b.n	8006630 <MSC_BOT_DataIn+0x6a>
      break;
 800662e:	bf00      	nop
  }
}
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	460b      	mov	r3, r1
 8006640:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006648:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01e      	beq.n	800668e <MSC_BOT_DataOut+0x58>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	7a1b      	ldrb	r3, [r3, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <MSC_BOT_DataOut+0x28>
 8006658:	2b01      	cmp	r3, #1
 800665a:	d004      	beq.n	8006666 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800665c:	e01a      	b.n	8006694 <MSC_BOT_DataOut+0x5e>
      MSC_BOT_CBW_Decode(pdev);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f81c 	bl	800669c <MSC_BOT_CBW_Decode>
      break;
 8006664:	e016      	b.n	8006694 <MSC_BOT_DataOut+0x5e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800666c:	7f59      	ldrb	r1, [r3, #29]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006674:	331f      	adds	r3, #31
 8006676:	461a      	mov	r2, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f973 	bl	8006964 <SCSI_ProcessCmd>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	da06      	bge.n	8006692 <MSC_BOT_DataOut+0x5c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006684:	2101      	movs	r1, #1
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f8d4 	bl	8006834 <MSC_BOT_SendCSW>
      break;
 800668c:	e001      	b.n	8006692 <MSC_BOT_DataOut+0x5c>
    return;
 800668e:	bf00      	nop
 8006690:	e000      	b.n	8006694 <MSC_BOT_DataOut+0x5e>
      break;
 8006692:	bf00      	nop
  }
}
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066aa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 8083 	beq.w	80067ba <MSC_BOT_CBW_Decode+0x11e>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066c2:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066d2:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80066d4:	2101      	movs	r1, #1
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f004 fee0 	bl	800b49c <USBD_LL_GetRxDataSize>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b1f      	cmp	r3, #31
 80066e0:	d118      	bne.n	8006714 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e8:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80066ea:	4a37      	ldr	r2, [pc, #220]	; (80067c8 <MSC_BOT_CBW_Decode+0x12c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d111      	bne.n	8006714 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f6:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d80b      	bhi.n	8006714 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006702:	7f9b      	ldrb	r3, [r3, #30]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bCBLength > 16U))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800670e:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006710:	2b10      	cmp	r3, #16
 8006712:	d90f      	bls.n	8006734 <MSC_BOT_CBW_Decode+0x98>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671a:	7f59      	ldrb	r1, [r3, #29]
 800671c:	2320      	movs	r3, #32
 800671e:	2205      	movs	r2, #5
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fe0d 	bl	8007340 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2202      	movs	r2, #2
 800672a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f8b7 	bl	80068a0 <MSC_BOT_Abort>
 8006732:	e045      	b.n	80067c0 <MSC_BOT_CBW_Decode+0x124>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800673a:	7f59      	ldrb	r1, [r3, #29]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006742:	331f      	adds	r3, #31
 8006744:	461a      	mov	r2, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f90c 	bl	8006964 <SCSI_ProcessCmd>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	da0c      	bge.n	800676c <MSC_BOT_CBW_Decode+0xd0>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	7a1b      	ldrb	r3, [r3, #8]
 8006756:	2b05      	cmp	r3, #5
 8006758:	d104      	bne.n	8006764 <MSC_BOT_CBW_Decode+0xc8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800675a:	2101      	movs	r1, #1
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f869 	bl	8006834 <MSC_BOT_SendCSW>
 8006762:	e02d      	b.n	80067c0 <MSC_BOT_CBW_Decode+0x124>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f89b 	bl	80068a0 <MSC_BOT_Abort>
 800676a:	e029      	b.n	80067c0 <MSC_BOT_CBW_Decode+0x124>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	7a1b      	ldrb	r3, [r3, #8]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d024      	beq.n	80067be <MSC_BOT_CBW_Decode+0x122>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006778:	2b01      	cmp	r3, #1
 800677a:	d020      	beq.n	80067be <MSC_BOT_CBW_Decode+0x122>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006780:	2b03      	cmp	r3, #3
 8006782:	d01c      	beq.n	80067be <MSC_BOT_CBW_Decode+0x122>
    {
      if (hmsc->bot_data_length > 0U)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d009      	beq.n	80067a0 <MSC_BOT_CBW_Decode+0x104>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f103 0110 	add.w	r1, r3, #16
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	461a      	mov	r2, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f817 	bl	80067cc <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800679e:	e00f      	b.n	80067c0 <MSC_BOT_CBW_Decode+0x124>
      }
      else if (hmsc->bot_data_length == 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d104      	bne.n	80067b2 <MSC_BOT_CBW_Decode+0x116>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80067a8:	2100      	movs	r1, #0
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f842 	bl	8006834 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80067b0:	e006      	b.n	80067c0 <MSC_BOT_CBW_Decode+0x124>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f874 	bl	80068a0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80067b8:	e002      	b.n	80067c0 <MSC_BOT_CBW_Decode+0x124>
    return;
 80067ba:	bf00      	nop
 80067bc:	e000      	b.n	80067c0 <MSC_BOT_CBW_Decode+0x124>
      }
    }
    else
    {
      return;
 80067be:	bf00      	nop
    }
  }
}
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	43425355 	.word	0x43425355

080067cc <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067de:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	4293      	cmp	r3, r2
 80067ec:	bf28      	it	cs
 80067ee:	4613      	movcs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d019      	beq.n	800682c <MSC_BOT_SendData+0x60>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800680a:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2204      	movs	r2, #4
 800681c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	2181      	movs	r1, #129	; 0x81
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f004 fdc9 	bl	800b3bc <USBD_LL_Transmit>
 800682a:	e000      	b.n	800682e <MSC_BOT_SendData+0x62>
    return;
 800682c:	bf00      	nop
}
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006846:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d022      	beq.n	8006894 <MSC_BOT_SendCSW+0x60>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006854:	461a      	mov	r2, r3
 8006856:	4b11      	ldr	r3, [pc, #68]	; (800689c <MSC_BOT_SendCSW+0x68>)
 8006858:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006860:	461a      	mov	r2, r3
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8006874:	3210      	adds	r2, #16
 8006876:	230d      	movs	r3, #13
 8006878:	2181      	movs	r1, #129	; 0x81
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f004 fd9e 	bl	800b3bc <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8006886:	3210      	adds	r2, #16
 8006888:	231f      	movs	r3, #31
 800688a:	2101      	movs	r1, #1
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f004 fdcd 	bl	800b42c <USBD_LL_PrepareReceive>
 8006892:	e000      	b.n	8006896 <MSC_BOT_SendCSW+0x62>
    return;
 8006894:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	53425355 	.word	0x53425355

080068a0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ae:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d024      	beq.n	8006900 <MSC_BOT_Abort+0x60>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068bc:	7f1b      	ldrb	r3, [r3, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10d      	bne.n	80068de <MSC_BOT_Abort+0x3e>
      (hmsc->cbw.dDataLength != 0U) &&
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c8:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d007      	beq.n	80068de <MSC_BOT_Abort+0x3e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d103      	bne.n	80068de <MSC_BOT_Abort+0x3e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80068d6:	2101      	movs	r1, #1
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f004 fca1 	bl	800b220 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80068de:	2181      	movs	r1, #129	; 0x81
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f004 fc9d 	bl	800b220 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	7a5b      	ldrb	r3, [r3, #9]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d109      	bne.n	8006902 <MSC_BOT_Abort+0x62>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80068ee:	2181      	movs	r1, #129	; 0x81
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f004 fc95 	bl	800b220 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80068f6:	2101      	movs	r1, #1
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f004 fc91 	bl	800b220 <USBD_LL_StallEP>
 80068fe:	e000      	b.n	8006902 <MSC_BOT_Abort+0x62>
    return;
 8006900:	bf00      	nop
  }
}
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800691a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d019      	beq.n	8006956 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	7a5b      	ldrb	r3, [r3, #9]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d108      	bne.n	800693c <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800692a:	2181      	movs	r1, #129	; 0x81
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f004 fc77 	bl	800b220 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006932:	2101      	movs	r1, #1
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f004 fc73 	bl	800b220 <USBD_LL_StallEP>
 800693a:	e00f      	b.n	800695c <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800693c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006940:	2b00      	cmp	r3, #0
 8006942:	da0a      	bge.n	800695a <MSC_BOT_CplClrFeature+0x52>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	7a5b      	ldrb	r3, [r3, #9]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d006      	beq.n	800695a <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800694c:	2101      	movs	r1, #1
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff ff70 	bl	8006834 <MSC_BOT_SendCSW>
 8006954:	e002      	b.n	800695c <MSC_BOT_CplClrFeature+0x54>
    return;
 8006956:	bf00      	nop
 8006958:	e000      	b.n	800695c <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 800695a:	bf00      	nop
  }
}
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
	...

08006964 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	460b      	mov	r3, r1
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006978:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8006980:	f04f 33ff 	mov.w	r3, #4294967295
 8006984:	e168      	b.n	8006c58 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2baa      	cmp	r3, #170	; 0xaa
 800698c:	f000 8144 	beq.w	8006c18 <SCSI_ProcessCmd+0x2b4>
 8006990:	2baa      	cmp	r3, #170	; 0xaa
 8006992:	f300 8153 	bgt.w	8006c3c <SCSI_ProcessCmd+0x2d8>
 8006996:	2ba8      	cmp	r3, #168	; 0xa8
 8006998:	f000 812c 	beq.w	8006bf4 <SCSI_ProcessCmd+0x290>
 800699c:	2ba8      	cmp	r3, #168	; 0xa8
 800699e:	f300 814d 	bgt.w	8006c3c <SCSI_ProcessCmd+0x2d8>
 80069a2:	2b5a      	cmp	r3, #90	; 0x5a
 80069a4:	f300 80c0 	bgt.w	8006b28 <SCSI_ProcessCmd+0x1c4>
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f2c0 8147 	blt.w	8006c3c <SCSI_ProcessCmd+0x2d8>
 80069ae:	2b5a      	cmp	r3, #90	; 0x5a
 80069b0:	f200 8144 	bhi.w	8006c3c <SCSI_ProcessCmd+0x2d8>
 80069b4:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <SCSI_ProcessCmd+0x58>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	08006b2f 	.word	0x08006b2f
 80069c0:	08006c3d 	.word	0x08006c3d
 80069c4:	08006c3d 	.word	0x08006c3d
 80069c8:	08006b41 	.word	0x08006b41
 80069cc:	08006c3d 	.word	0x08006c3d
 80069d0:	08006c3d 	.word	0x08006c3d
 80069d4:	08006c3d 	.word	0x08006c3d
 80069d8:	08006c3d 	.word	0x08006c3d
 80069dc:	08006c3d 	.word	0x08006c3d
 80069e0:	08006c3d 	.word	0x08006c3d
 80069e4:	08006c3d 	.word	0x08006c3d
 80069e8:	08006c3d 	.word	0x08006c3d
 80069ec:	08006c3d 	.word	0x08006c3d
 80069f0:	08006c3d 	.word	0x08006c3d
 80069f4:	08006c3d 	.word	0x08006c3d
 80069f8:	08006c3d 	.word	0x08006c3d
 80069fc:	08006c3d 	.word	0x08006c3d
 8006a00:	08006c3d 	.word	0x08006c3d
 8006a04:	08006b53 	.word	0x08006b53
 8006a08:	08006c3d 	.word	0x08006c3d
 8006a0c:	08006c3d 	.word	0x08006c3d
 8006a10:	08006c3d 	.word	0x08006c3d
 8006a14:	08006c3d 	.word	0x08006c3d
 8006a18:	08006c3d 	.word	0x08006c3d
 8006a1c:	08006c3d 	.word	0x08006c3d
 8006a20:	08006c3d 	.word	0x08006c3d
 8006a24:	08006b89 	.word	0x08006b89
 8006a28:	08006b65 	.word	0x08006b65
 8006a2c:	08006c3d 	.word	0x08006c3d
 8006a30:	08006c3d 	.word	0x08006c3d
 8006a34:	08006b77 	.word	0x08006b77
 8006a38:	08006c3d 	.word	0x08006c3d
 8006a3c:	08006c3d 	.word	0x08006c3d
 8006a40:	08006c3d 	.word	0x08006c3d
 8006a44:	08006c3d 	.word	0x08006c3d
 8006a48:	08006bad 	.word	0x08006bad
 8006a4c:	08006c3d 	.word	0x08006c3d
 8006a50:	08006bbf 	.word	0x08006bbf
 8006a54:	08006c3d 	.word	0x08006c3d
 8006a58:	08006c3d 	.word	0x08006c3d
 8006a5c:	08006be3 	.word	0x08006be3
 8006a60:	08006c3d 	.word	0x08006c3d
 8006a64:	08006c07 	.word	0x08006c07
 8006a68:	08006c3d 	.word	0x08006c3d
 8006a6c:	08006c3d 	.word	0x08006c3d
 8006a70:	08006c3d 	.word	0x08006c3d
 8006a74:	08006c3d 	.word	0x08006c3d
 8006a78:	08006c2b 	.word	0x08006c2b
 8006a7c:	08006c3d 	.word	0x08006c3d
 8006a80:	08006c3d 	.word	0x08006c3d
 8006a84:	08006c3d 	.word	0x08006c3d
 8006a88:	08006c3d 	.word	0x08006c3d
 8006a8c:	08006c3d 	.word	0x08006c3d
 8006a90:	08006c3d 	.word	0x08006c3d
 8006a94:	08006c3d 	.word	0x08006c3d
 8006a98:	08006c3d 	.word	0x08006c3d
 8006a9c:	08006c3d 	.word	0x08006c3d
 8006aa0:	08006c3d 	.word	0x08006c3d
 8006aa4:	08006c3d 	.word	0x08006c3d
 8006aa8:	08006c3d 	.word	0x08006c3d
 8006aac:	08006c3d 	.word	0x08006c3d
 8006ab0:	08006c3d 	.word	0x08006c3d
 8006ab4:	08006c3d 	.word	0x08006c3d
 8006ab8:	08006c3d 	.word	0x08006c3d
 8006abc:	08006c3d 	.word	0x08006c3d
 8006ac0:	08006c3d 	.word	0x08006c3d
 8006ac4:	08006c3d 	.word	0x08006c3d
 8006ac8:	08006c3d 	.word	0x08006c3d
 8006acc:	08006c3d 	.word	0x08006c3d
 8006ad0:	08006c3d 	.word	0x08006c3d
 8006ad4:	08006c3d 	.word	0x08006c3d
 8006ad8:	08006c3d 	.word	0x08006c3d
 8006adc:	08006c3d 	.word	0x08006c3d
 8006ae0:	08006c3d 	.word	0x08006c3d
 8006ae4:	08006c3d 	.word	0x08006c3d
 8006ae8:	08006c3d 	.word	0x08006c3d
 8006aec:	08006c3d 	.word	0x08006c3d
 8006af0:	08006c3d 	.word	0x08006c3d
 8006af4:	08006c3d 	.word	0x08006c3d
 8006af8:	08006c3d 	.word	0x08006c3d
 8006afc:	08006c3d 	.word	0x08006c3d
 8006b00:	08006c3d 	.word	0x08006c3d
 8006b04:	08006c3d 	.word	0x08006c3d
 8006b08:	08006c3d 	.word	0x08006c3d
 8006b0c:	08006c3d 	.word	0x08006c3d
 8006b10:	08006c3d 	.word	0x08006c3d
 8006b14:	08006c3d 	.word	0x08006c3d
 8006b18:	08006c3d 	.word	0x08006c3d
 8006b1c:	08006c3d 	.word	0x08006c3d
 8006b20:	08006c3d 	.word	0x08006c3d
 8006b24:	08006b9b 	.word	0x08006b9b
 8006b28:	2b9e      	cmp	r3, #158	; 0x9e
 8006b2a:	d051      	beq.n	8006bd0 <SCSI_ProcessCmd+0x26c>
 8006b2c:	e086      	b.n	8006c3c <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8006b2e:	7afb      	ldrb	r3, [r7, #11]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	4619      	mov	r1, r3
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 f893 	bl	8006c60 <SCSI_TestUnitReady>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b3e:	e089      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8006b40:	7afb      	ldrb	r3, [r7, #11]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	4619      	mov	r1, r3
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 fb64 	bl	8007214 <SCSI_RequestSense>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b50:	e080      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8006b52:	7afb      	ldrb	r3, [r7, #11]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	4619      	mov	r1, r3
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f8d5 	bl	8006d08 <SCSI_Inquiry>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	75fb      	strb	r3, [r7, #23]
      break;
 8006b62:	e077      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8006b64:	7afb      	ldrb	r3, [r7, #11]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 fc40 	bl	80073f0 <SCSI_StartStopUnit>
 8006b70:	4603      	mov	r3, r0
 8006b72:	75fb      	strb	r3, [r7, #23]
      break;
 8006b74:	e06e      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8006b76:	7afb      	ldrb	r3, [r7, #11]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fc90 	bl	80074a2 <SCSI_AllowPreventRemovable>
 8006b82:	4603      	mov	r3, r0
 8006b84:	75fb      	strb	r3, [r7, #23]
      break;
 8006b86:	e065      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8006b88:	7afb      	ldrb	r3, [r7, #11]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fae8 	bl	8007164 <SCSI_ModeSense6>
 8006b94:	4603      	mov	r3, r0
 8006b96:	75fb      	strb	r3, [r7, #23]
      break;
 8006b98:	e05c      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8006b9a:	7afb      	ldrb	r3, [r7, #11]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fb0b 	bl	80071bc <SCSI_ModeSense10>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8006baa:	e053      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006bac:	7afb      	ldrb	r3, [r7, #11]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 fa61 	bl	800707a <SCSI_ReadFormatCapacity>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75fb      	strb	r3, [r7, #23]
      break;
 8006bbc:	e04a      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8006bbe:	7afb      	ldrb	r3, [r7, #11]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f917 	bl	8006df8 <SCSI_ReadCapacity10>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bce:	e041      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8006bd0:	7afb      	ldrb	r3, [r7, #11]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 f994 	bl	8006f04 <SCSI_ReadCapacity16>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	75fb      	strb	r3, [r7, #23]
      break;
 8006be0:	e038      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8006be2:	7afb      	ldrb	r3, [r7, #11]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4619      	mov	r1, r3
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fc87 	bl	80074fc <SCSI_Read10>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf2:	e02f      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8006bf4:	7afb      	ldrb	r3, [r7, #11]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 fd2c 	bl	8007658 <SCSI_Read12>
 8006c00:	4603      	mov	r3, r0
 8006c02:	75fb      	strb	r3, [r7, #23]
      break;
 8006c04:	e026      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fddb 	bl	80077c8 <SCSI_Write10>
 8006c12:	4603      	mov	r3, r0
 8006c14:	75fb      	strb	r3, [r7, #23]
      break;
 8006c16:	e01d      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8006c18:	7afb      	ldrb	r3, [r7, #11]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 fea4 	bl	800796c <SCSI_Write12>
 8006c24:	4603      	mov	r3, r0
 8006c26:	75fb      	strb	r3, [r7, #23]
      break;
 8006c28:	e014      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8006c2a:	7afb      	ldrb	r3, [r7, #11]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 ff7d 	bl	8007b30 <SCSI_Verify10>
 8006c36:	4603      	mov	r3, r0
 8006c38:	75fb      	strb	r3, [r7, #23]
      break;
 8006c3a:	e00b      	b.n	8006c54 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006c3c:	7af9      	ldrb	r1, [r7, #11]
 8006c3e:	2320      	movs	r3, #32
 8006c40:	2205      	movs	r2, #5
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 fb7c 	bl	8007340 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8006c4e:	23ff      	movs	r3, #255	; 0xff
 8006c50:	75fb      	strb	r3, [r7, #23]
      break;
 8006c52:	bf00      	nop
  }

  return ret;
 8006c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3718      	adds	r7, #24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c74:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d102      	bne.n	8006c82 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8006c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c80:	e03e      	b.n	8006d00 <SCSI_TestUnitReady+0xa0>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00b      	beq.n	8006ca6 <SCSI_TestUnitReady+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c94:	7f59      	ldrb	r1, [r3, #29]
 8006c96:	2320      	movs	r3, #32
 8006c98:	2205      	movs	r2, #5
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 fb50 	bl	8007340 <SCSI_SenseCode>

    return -1;
 8006ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca4:	e02c      	b.n	8006d00 <SCSI_TestUnitReady+0xa0>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cac:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d10b      	bne.n	8006ccc <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006cb4:	7af9      	ldrb	r1, [r7, #11]
 8006cb6:	233a      	movs	r3, #58	; 0x3a
 8006cb8:	2202      	movs	r2, #2
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 fb40 	bl	8007340 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	2205      	movs	r2, #5
 8006cc4:	721a      	strb	r2, [r3, #8]
    return -1;
 8006cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cca:	e019      	b.n	8006d00 <SCSI_TestUnitReady+0xa0>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	7afa      	ldrb	r2, [r7, #11]
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	4798      	blx	r3
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <SCSI_TestUnitReady+0x98>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006ce0:	7af9      	ldrb	r1, [r7, #11]
 8006ce2:	233a      	movs	r3, #58	; 0x3a
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 fb2a 	bl	8007340 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2205      	movs	r2, #5
 8006cf0:	721a      	strb	r2, [r3, #8]

    return -1;
 8006cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf6:	e003      	b.n	8006d00 <SCSI_TestUnitReady+0xa0>
  }
  hmsc->bot_data_length = 0U;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	60da      	str	r2, [r3, #12]

  return 0;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	460b      	mov	r3, r1
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d1c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <SCSI_Inquiry+0x22>
  {
    return -1;
 8006d24:	f04f 33ff 	mov.w	r3, #4294967295
 8006d28:	e05d      	b.n	8006de6 <SCSI_Inquiry+0xde>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10b      	bne.n	8006d4e <SCSI_Inquiry+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d3c:	7f59      	ldrb	r1, [r3, #29]
 8006d3e:	2320      	movs	r3, #32
 8006d40:	2205      	movs	r2, #5
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fafc 	bl	8007340 <SCSI_SenseCode>
    return -1;
 8006d48:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4c:	e04b      	b.n	8006de6 <SCSI_Inquiry+0xde>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3301      	adds	r3, #1
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d021      	beq.n	8006da0 <SCSI_Inquiry+0x98>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3302      	adds	r3, #2
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d105      	bne.n	8006d72 <SCSI_Inquiry+0x6a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8006d66:	2206      	movs	r2, #6
 8006d68:	4921      	ldr	r1, [pc, #132]	; (8006df0 <SCSI_Inquiry+0xe8>)
 8006d6a:	69b8      	ldr	r0, [r7, #24]
 8006d6c:	f001 f86b 	bl	8007e46 <SCSI_UpdateBotData>
 8006d70:	e038      	b.n	8006de4 <SCSI_Inquiry+0xdc>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3302      	adds	r3, #2
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	2b80      	cmp	r3, #128	; 0x80
 8006d7a:	d105      	bne.n	8006d88 <SCSI_Inquiry+0x80>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	491d      	ldr	r1, [pc, #116]	; (8006df4 <SCSI_Inquiry+0xec>)
 8006d80:	69b8      	ldr	r0, [r7, #24]
 8006d82:	f001 f860 	bl	8007e46 <SCSI_UpdateBotData>
 8006d86:	e02d      	b.n	8006de4 <SCSI_Inquiry+0xdc>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d8e:	7f59      	ldrb	r1, [r3, #29]
 8006d90:	2324      	movs	r3, #36	; 0x24
 8006d92:	2205      	movs	r2, #5
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 fad3 	bl	8007340 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8006d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9e:	e022      	b.n	8006de6 <SCSI_Inquiry+0xde>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006da6:	69d9      	ldr	r1, [r3, #28]
 8006da8:	7afa      	ldrb	r2, [r7, #11]
 8006daa:	4613      	mov	r3, r2
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	440b      	add	r3, r1
 8006db4:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	3304      	adds	r3, #4
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	3305      	adds	r3, #5
 8006dc0:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	8bfa      	ldrh	r2, [r7, #30]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d303      	bcc.n	8006dd8 <SCSI_Inquiry+0xd0>
    {
      len = params[4];
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8006dd8:	8bfb      	ldrh	r3, [r7, #30]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	6979      	ldr	r1, [r7, #20]
 8006dde:	69b8      	ldr	r0, [r7, #24]
 8006de0:	f001 f831 	bl	8007e46 <SCSI_UpdateBotData>
  }

  return 0;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3720      	adds	r7, #32
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	200000b0 	.word	0x200000b0
 8006df4:	200000b8 	.word	0x200000b8

08006df8 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006df8:	b590      	push	{r4, r7, lr}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	460b      	mov	r3, r1
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e0c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8006e14:	f04f 33ff 	mov.w	r3, #4294967295
 8006e18:	e070      	b.n	8006efc <SCSI_ReadCapacity10+0x104>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e20:	685c      	ldr	r4, [r3, #4]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8006e28:	3308      	adds	r3, #8
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8006e30:	3204      	adds	r2, #4
 8006e32:	7af8      	ldrb	r0, [r7, #11]
 8006e34:	4619      	mov	r1, r3
 8006e36:	47a0      	blx	r4
 8006e38:	4603      	mov	r3, r0
 8006e3a:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006e3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d106      	bne.n	8006e52 <SCSI_ReadCapacity10+0x5a>
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e4a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d108      	bne.n	8006e64 <SCSI_ReadCapacity10+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006e52:	7af9      	ldrb	r1, [r7, #11]
 8006e54:	233a      	movs	r3, #58	; 0x3a
 8006e56:	2202      	movs	r2, #2
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 fa71 	bl	8007340 <SCSI_SenseCode>
    return -1;
 8006e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e62:	e04b      	b.n	8006efc <SCSI_ReadCapacity10+0x104>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	0e1b      	lsrs	r3, r3, #24
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	0c1b      	lsrs	r3, r3, #16
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e90:	3b01      	subs	r3, #1
 8006e92:	0a1b      	lsrs	r3, r3, #8
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006eb6:	161b      	asrs	r3, r3, #24
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006ec8:	141b      	asrs	r3, r3, #16
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ed6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006eda:	0a1b      	lsrs	r3, r3, #8
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	60da      	str	r2, [r3, #12]

  return 0;
 8006efa:	2300      	movs	r3, #0

}
 8006efc:	4618      	mov	r0, r3
 8006efe:	371c      	adds	r7, #28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd90      	pop	{r4, r7, pc}

08006f04 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006f04:	b590      	push	{r4, r7, lr}
 8006f06:	b089      	sub	sp, #36	; 0x24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f18:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d102      	bne.n	8006f26 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8006f20:	f04f 33ff 	mov.w	r3, #4294967295
 8006f24:	e0a5      	b.n	8007072 <SCSI_ReadCapacity16+0x16e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f2c:	685c      	ldr	r4, [r3, #4]
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8006f34:	3308      	adds	r3, #8
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8006f3c:	3204      	adds	r2, #4
 8006f3e:	7af8      	ldrb	r0, [r7, #11]
 8006f40:	4619      	mov	r1, r3
 8006f42:	47a0      	blx	r4
 8006f44:	4603      	mov	r3, r0
 8006f46:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006f48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <SCSI_ReadCapacity16+0x5a>
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f56:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d108      	bne.n	8006f70 <SCSI_ReadCapacity16+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006f5e:	7af9      	ldrb	r1, [r7, #11]
 8006f60:	233a      	movs	r3, #58	; 0x3a
 8006f62:	2202      	movs	r2, #2
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f9eb 	bl	8007340 <SCSI_SenseCode>
    return -1;
 8006f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f6e:	e080      	b.n	8007072 <SCSI_ReadCapacity16+0x16e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	330a      	adds	r3, #10
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	330b      	adds	r3, #11
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006f80:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	330c      	adds	r3, #12
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006f8a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	320d      	adds	r2, #13
 8006f90:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8006f92:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006f98:	2300      	movs	r3, #0
 8006f9a:	77fb      	strb	r3, [r7, #31]
 8006f9c:	e007      	b.n	8006fae <SCSI_ReadCapacity16+0xaa>
  {
    hmsc->bot_data[idx] = 0U;
 8006f9e:	7ffb      	ldrb	r3, [r7, #31]
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006fa8:	7ffb      	ldrb	r3, [r7, #31]
 8006faa:	3301      	adds	r3, #1
 8006fac:	77fb      	strb	r3, [r7, #31]
 8006fae:	7ffa      	ldrb	r2, [r7, #31]
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d3f2      	bcc.n	8006f9e <SCSI_ReadCapacity16+0x9a>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	0e1b      	lsrs	r3, r3, #24
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	0c1b      	lsrs	r3, r3, #16
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	0a1b      	lsrs	r3, r3, #8
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007006:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800700a:	161b      	asrs	r3, r3, #24
 800700c:	b2da      	uxtb	r2, r3
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007018:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800701c:	141b      	asrs	r3, r3, #16
 800701e:	b2da      	uxtb	r2, r3
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800702a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800702e:	0a1b      	lsrs	r3, r3, #8
 8007030:	b29b      	uxth	r3, r3
 8007032:	b2da      	uxtb	r2, r3
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800703e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007042:	b2da      	uxtb	r2, r3
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	330a      	adds	r3, #10
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	330b      	adds	r3, #11
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007058:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	330c      	adds	r3, #12
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007062:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	320d      	adds	r2, #13
 8007068:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800706a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	60da      	str	r2, [r3, #12]

  return 0;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3724      	adds	r7, #36	; 0x24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd90      	pop	{r4, r7, pc}

0800707a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b088      	sub	sp, #32
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	460b      	mov	r3, r1
 8007084:	607a      	str	r2, [r7, #4]
 8007086:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800708e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d102      	bne.n	800709c <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8007096:	f04f 33ff 	mov.w	r3, #4294967295
 800709a:	e05e      	b.n	800715a <SCSI_ReadFormatCapacity+0xe0>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f107 0214 	add.w	r2, r7, #20
 80070a8:	f107 0110 	add.w	r1, r7, #16
 80070ac:	7af8      	ldrb	r0, [r7, #11]
 80070ae:	4798      	blx	r3
 80070b0:	4603      	mov	r3, r0
 80070b2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80070b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d106      	bne.n	80070ca <SCSI_ReadFormatCapacity+0x50>
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d108      	bne.n	80070dc <SCSI_ReadFormatCapacity+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80070ca:	7af9      	ldrb	r1, [r7, #11]
 80070cc:	233a      	movs	r3, #58	; 0x3a
 80070ce:	2202      	movs	r2, #2
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f935 	bl	8007340 <SCSI_SenseCode>
    return -1;
 80070d6:	f04f 33ff 	mov.w	r3, #4294967295
 80070da:	e03e      	b.n	800715a <SCSI_ReadFormatCapacity+0xe0>
  }

  for (i = 0U; i < 12U ; i++)
 80070dc:	2300      	movs	r3, #0
 80070de:	83fb      	strh	r3, [r7, #30]
 80070e0:	e007      	b.n	80070f2 <SCSI_ReadFormatCapacity+0x78>
  {
    hmsc->bot_data[i] = 0U;
 80070e2:	8bfb      	ldrh	r3, [r7, #30]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	4413      	add	r3, r2
 80070e8:	2200      	movs	r2, #0
 80070ea:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80070ec:	8bfb      	ldrh	r3, [r7, #30]
 80070ee:	3301      	adds	r3, #1
 80070f0:	83fb      	strh	r3, [r7, #30]
 80070f2:	8bfb      	ldrh	r3, [r7, #30]
 80070f4:	2b0b      	cmp	r3, #11
 80070f6:	d9f4      	bls.n	80070e2 <SCSI_ReadFormatCapacity+0x68>
  }

  hmsc->bot_data[3] = 0x08U;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	2208      	movs	r2, #8
 80070fc:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	3b01      	subs	r3, #1
 8007102:	0e1b      	lsrs	r3, r3, #24
 8007104:	b2da      	uxtb	r2, r3
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	3b01      	subs	r3, #1
 800710e:	0c1b      	lsrs	r3, r3, #16
 8007110:	b2da      	uxtb	r2, r3
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	3b01      	subs	r3, #1
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	b2da      	uxtb	r2, r3
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	b2db      	uxtb	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	b2da      	uxtb	r2, r3
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2202      	movs	r2, #2
 8007132:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007134:	8abb      	ldrh	r3, [r7, #20]
 8007136:	141b      	asrs	r3, r3, #16
 8007138:	b2da      	uxtb	r2, r3
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800713e:	8abb      	ldrh	r3, [r7, #20]
 8007140:	0a1b      	lsrs	r3, r3, #8
 8007142:	b29b      	uxth	r3, r3
 8007144:	b2da      	uxtb	r2, r3
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800714a:	8abb      	ldrh	r3, [r7, #20]
 800714c:	b2da      	uxtb	r2, r3
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	220c      	movs	r2, #12
 8007156:	60da      	str	r2, [r3, #12]

  return 0;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3720      	adds	r7, #32
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	460b      	mov	r3, r1
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007178:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800717a:	2317      	movs	r3, #23
 800717c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d102      	bne.n	800718a <SCSI_ModeSense6+0x26>
  {
    return -1;
 8007184:	f04f 33ff 	mov.w	r3, #4294967295
 8007188:	e011      	b.n	80071ae <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3304      	adds	r3, #4
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	8afa      	ldrh	r2, [r7, #22]
 8007194:	429a      	cmp	r2, r3
 8007196:	d303      	bcc.n	80071a0 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3304      	adds	r3, #4
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80071a0:	8afb      	ldrh	r3, [r7, #22]
 80071a2:	461a      	mov	r2, r3
 80071a4:	4904      	ldr	r1, [pc, #16]	; (80071b8 <SCSI_ModeSense6+0x54>)
 80071a6:	6938      	ldr	r0, [r7, #16]
 80071a8:	f000 fe4d 	bl	8007e46 <SCSI_UpdateBotData>

  return 0;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200000c0 	.word	0x200000c0

080071bc <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	460b      	mov	r3, r1
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071d0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80071d2:	231b      	movs	r3, #27
 80071d4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d102      	bne.n	80071e2 <SCSI_ModeSense10+0x26>
  {
    return -1;
 80071dc:	f04f 33ff 	mov.w	r3, #4294967295
 80071e0:	e011      	b.n	8007206 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3308      	adds	r3, #8
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	8afa      	ldrh	r2, [r7, #22]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d303      	bcc.n	80071f8 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3308      	adds	r3, #8
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80071f8:	8afb      	ldrh	r3, [r7, #22]
 80071fa:	461a      	mov	r2, r3
 80071fc:	4904      	ldr	r1, [pc, #16]	; (8007210 <SCSI_ModeSense10+0x54>)
 80071fe:	6938      	ldr	r0, [r7, #16]
 8007200:	f000 fe21 	bl	8007e46 <SCSI_UpdateBotData>

  return 0;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	200000d8 	.word	0x200000d8

08007214 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	460b      	mov	r3, r1
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007228:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d102      	bne.n	8007236 <SCSI_RequestSense+0x22>
  {
    return -1;
 8007230:	f04f 33ff 	mov.w	r3, #4294967295
 8007234:	e080      	b.n	8007338 <SCSI_RequestSense+0x124>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10b      	bne.n	800725a <SCSI_RequestSense+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007248:	7f59      	ldrb	r1, [r3, #29]
 800724a:	2320      	movs	r3, #32
 800724c:	2205      	movs	r2, #5
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f876 	bl	8007340 <SCSI_SenseCode>
    return -1;
 8007254:	f04f 33ff 	mov.w	r3, #4294967295
 8007258:	e06e      	b.n	8007338 <SCSI_RequestSense+0x124>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800725a:	2300      	movs	r3, #0
 800725c:	75fb      	strb	r3, [r7, #23]
 800725e:	e007      	b.n	8007270 <SCSI_RequestSense+0x5c>
  {
    hmsc->bot_data[i] = 0U;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	4413      	add	r3, r2
 8007266:	2200      	movs	r2, #0
 8007268:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	3301      	adds	r3, #1
 800726e:	75fb      	strb	r3, [r7, #23]
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	2b11      	cmp	r3, #17
 8007274:	d9f4      	bls.n	8007260 <SCSI_RequestSense+0x4c>
  }

  hmsc->bot_data[0] = 0x70U;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	2270      	movs	r2, #112	; 0x70
 800727a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	220c      	movs	r2, #12
 8007280:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007288:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007292:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007296:	429a      	cmp	r2, r3
 8007298:	d03f      	beq.n	800731a <SCSI_RequestSense+0x106>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80072a4:	461a      	mov	r2, r3
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f502 7202 	add.w	r2, r2, #520	; 0x208
 80072ac:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ba:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	4413      	add	r3, r2
 80072c8:	791a      	ldrb	r2, [r3, #4]
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	4413      	add	r3, r2
 80072e2:	795a      	ldrb	r2, [r3, #5]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ee:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80072f2:	3301      	adds	r3, #1
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007306:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800730a:	2b04      	cmp	r3, #4
 800730c:	d105      	bne.n	800731a <SCSI_RequestSense+0x106>
    {
      hmsc->scsi_sense_head = 0U;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2212      	movs	r2, #18
 800731e:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3304      	adds	r3, #4
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b12      	cmp	r3, #18
 8007328:	d805      	bhi.n	8007336 <SCSI_RequestSense+0x122>
  {
    hmsc->bot_data_length = params[4];
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3304      	adds	r3, #4
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	461a      	mov	r2, r3
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	4608      	mov	r0, r1
 800734a:	4611      	mov	r1, r2
 800734c:	461a      	mov	r2, r3
 800734e:	4603      	mov	r3, r0
 8007350:	70fb      	strb	r3, [r7, #3]
 8007352:	460b      	mov	r3, r1
 8007354:	70bb      	strb	r3, [r7, #2]
 8007356:	4613      	mov	r3, r2
 8007358:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007360:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d03d      	beq.n	80073e4 <SCSI_SenseCode+0xa4>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800736e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007372:	461a      	mov	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800737a:	78b9      	ldrb	r1, [r7, #2]
 800737c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007386:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	4413      	add	r3, r2
 8007394:	787a      	ldrb	r2, [r7, #1]
 8007396:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800739e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	4413      	add	r3, r2
 80073ac:	2200      	movs	r2, #0
 80073ae:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80073ba:	3301      	adds	r3, #1
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ce:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d107      	bne.n	80073e6 <SCSI_SenseCode+0xa6>
  {
    hmsc->scsi_sense_tail = 0U;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80073e2:	e000      	b.n	80073e6 <SCSI_SenseCode+0xa6>
    return;
 80073e4:	bf00      	nop
  }
}
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	460b      	mov	r3, r1
 80073fa:	607a      	str	r2, [r7, #4]
 80073fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007404:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d102      	bne.n	8007412 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 800740c:	f04f 33ff 	mov.w	r3, #4294967295
 8007410:	e043      	b.n	800749a <SCSI_StartStopUnit+0xaa>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007418:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800741c:	2b01      	cmp	r3, #1
 800741e:	d10f      	bne.n	8007440 <SCSI_StartStopUnit+0x50>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3304      	adds	r3, #4
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d108      	bne.n	8007440 <SCSI_StartStopUnit+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800742e:	7af9      	ldrb	r1, [r7, #11]
 8007430:	2324      	movs	r3, #36	; 0x24
 8007432:	2205      	movs	r2, #5
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f7ff ff83 	bl	8007340 <SCSI_SenseCode>

    return -1;
 800743a:	f04f 33ff 	mov.w	r3, #4294967295
 800743e:	e02c      	b.n	800749a <SCSI_StartStopUnit+0xaa>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3304      	adds	r3, #4
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b01      	cmp	r3, #1
 800744c:	d106      	bne.n	800745c <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800745a:	e01a      	b.n	8007492 <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3304      	adds	r3, #4
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	f003 0303 	and.w	r3, r3, #3
 8007466:	2b02      	cmp	r3, #2
 8007468:	d106      	bne.n	8007478 <SCSI_StartStopUnit+0x88>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007470:	2202      	movs	r2, #2
 8007472:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8007476:	e00c      	b.n	8007492 <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3304      	adds	r3, #4
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	2b03      	cmp	r3, #3
 8007484:	d105      	bne.n	8007492 <SCSI_StartStopUnit+0xa2>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2200      	movs	r2, #0
 8007496:	60da      	str	r2, [r3, #12]

  return 0;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b087      	sub	sp, #28
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	460b      	mov	r3, r1
 80074ac:	607a      	str	r2, [r7, #4]
 80074ae:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074b6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d102      	bne.n	80074c4 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 80074be:	f04f 33ff 	mov.w	r3, #4294967295
 80074c2:	e015      	b.n	80074f0 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3304      	adds	r3, #4
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <SCSI_AllowPreventRemovable+0x3a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80074da:	e005      	b.n	80074e8 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2200      	movs	r2, #0
 80074ec:	60da      	str	r2, [r3, #12]

  return 0;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	371c      	adds	r7, #28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	460b      	mov	r3, r1
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007510:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <SCSI_Read10+0x22>
  {
    return -1;
 8007518:	f04f 33ff 	mov.w	r3, #4294967295
 800751c:	e098      	b.n	8007650 <SCSI_Read10+0x154>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	7a1b      	ldrb	r3, [r3, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f040 808a 	bne.w	800763c <SCSI_Read10+0x140>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800752e:	7f1b      	ldrb	r3, [r3, #28]
 8007530:	b25b      	sxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	db0b      	blt.n	800754e <SCSI_Read10+0x52>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753c:	7f59      	ldrb	r1, [r3, #29]
 800753e:	2320      	movs	r3, #32
 8007540:	2205      	movs	r2, #5
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f7ff fefc 	bl	8007340 <SCSI_SenseCode>
      return -1;
 8007548:	f04f 33ff 	mov.w	r3, #4294967295
 800754c:	e080      	b.n	8007650 <SCSI_Read10+0x154>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007554:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007558:	2b02      	cmp	r3, #2
 800755a:	d108      	bne.n	800756e <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800755c:	7af9      	ldrb	r1, [r7, #11]
 800755e:	233a      	movs	r3, #58	; 0x3a
 8007560:	2202      	movs	r2, #2
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f7ff feec 	bl	8007340 <SCSI_SenseCode>

      return -1;
 8007568:	f04f 33ff 	mov.w	r3, #4294967295
 800756c:	e070      	b.n	8007650 <SCSI_Read10+0x154>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	7afa      	ldrb	r2, [r7, #11]
 8007578:	4610      	mov	r0, r2
 800757a:	4798      	blx	r3
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d008      	beq.n	8007594 <SCSI_Read10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007582:	7af9      	ldrb	r1, [r7, #11]
 8007584:	233a      	movs	r3, #58	; 0x3a
 8007586:	2202      	movs	r2, #2
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f7ff fed9 	bl	8007340 <SCSI_SenseCode>
      return -1;
 800758e:	f04f 33ff 	mov.w	r3, #4294967295
 8007592:	e05d      	b.n	8007650 <SCSI_Read10+0x154>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3302      	adds	r3, #2
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3303      	adds	r3, #3
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80075a4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3304      	adds	r3, #4
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80075ae:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	3205      	adds	r2, #5
 80075b4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80075b6:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075be:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3307      	adds	r3, #7
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	3208      	adds	r2, #8
 80075cc:	7812      	ldrb	r2, [r2, #0]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075d6:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e8:	7af9      	ldrb	r1, [r7, #11]
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 fadb 	bl	8007ba6 <SCSI_CheckAddressRange>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	da02      	bge.n	80075fc <SCSI_Read10+0x100>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80075f6:	f04f 33ff 	mov.w	r3, #4294967295
 80075fa:	e029      	b.n	8007650 <SCSI_Read10+0x154>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007602:	699a      	ldr	r2, [r3, #24]
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760c:	6979      	ldr	r1, [r7, #20]
 800760e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007612:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 8007616:	fb01 f303 	mul.w	r3, r1, r3
 800761a:	429a      	cmp	r2, r3
 800761c:	d00b      	beq.n	8007636 <SCSI_Read10+0x13a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007624:	7f59      	ldrb	r1, [r3, #29]
 8007626:	2320      	movs	r3, #32
 8007628:	2205      	movs	r2, #5
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f7ff fe88 	bl	8007340 <SCSI_SenseCode>
      return -1;
 8007630:	f04f 33ff 	mov.w	r3, #4294967295
 8007634:	e00c      	b.n	8007650 <SCSI_Read10+0x154>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2202      	movs	r2, #2
 800763a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007642:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007644:	7afb      	ldrb	r3, [r7, #11]
 8007646:	4619      	mov	r1, r3
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 fad5 	bl	8007bf8 <SCSI_ProcessRead>
 800764e:	4603      	mov	r3, r0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	460b      	mov	r3, r1
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800766c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <SCSI_Read12+0x22>
  {
    return -1;
 8007674:	f04f 33ff 	mov.w	r3, #4294967295
 8007678:	e0a2      	b.n	80077c0 <SCSI_Read12+0x168>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	7a1b      	ldrb	r3, [r3, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f040 8094 	bne.w	80077ac <SCSI_Read12+0x154>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800768a:	7f1b      	ldrb	r3, [r3, #28]
 800768c:	b25b      	sxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	db0b      	blt.n	80076aa <SCSI_Read12+0x52>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007698:	7f59      	ldrb	r1, [r3, #29]
 800769a:	2320      	movs	r3, #32
 800769c:	2205      	movs	r2, #5
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff fe4e 	bl	8007340 <SCSI_SenseCode>
      return -1;
 80076a4:	f04f 33ff 	mov.w	r3, #4294967295
 80076a8:	e08a      	b.n	80077c0 <SCSI_Read12+0x168>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d108      	bne.n	80076ca <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80076b8:	7af9      	ldrb	r1, [r7, #11]
 80076ba:	233a      	movs	r3, #58	; 0x3a
 80076bc:	2202      	movs	r2, #2
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f7ff fe3e 	bl	8007340 <SCSI_SenseCode>
      return -1;
 80076c4:	f04f 33ff 	mov.w	r3, #4294967295
 80076c8:	e07a      	b.n	80077c0 <SCSI_Read12+0x168>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	7afa      	ldrb	r2, [r7, #11]
 80076d4:	4610      	mov	r0, r2
 80076d6:	4798      	blx	r3
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d008      	beq.n	80076f0 <SCSI_Read12+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80076de:	7af9      	ldrb	r1, [r7, #11]
 80076e0:	233a      	movs	r3, #58	; 0x3a
 80076e2:	2202      	movs	r2, #2
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f7ff fe2b 	bl	8007340 <SCSI_SenseCode>
      return -1;
 80076ea:	f04f 33ff 	mov.w	r3, #4294967295
 80076ee:	e067      	b.n	80077c0 <SCSI_Read12+0x168>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3302      	adds	r3, #2
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3303      	adds	r3, #3
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007700:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3304      	adds	r3, #4
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800770a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	3205      	adds	r2, #5
 8007710:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007712:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800771a:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3306      	adds	r3, #6
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3307      	adds	r3, #7
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800772c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	3308      	adds	r3, #8
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007736:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	3209      	adds	r2, #9
 800773c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800773e:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007746:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800774e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007758:	7af9      	ldrb	r1, [r7, #11]
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 fa23 	bl	8007ba6 <SCSI_CheckAddressRange>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	da02      	bge.n	800776c <SCSI_Read12+0x114>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007766:	f04f 33ff 	mov.w	r3, #4294967295
 800776a:	e029      	b.n	80077c0 <SCSI_Read12+0x168>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007772:	699a      	ldr	r2, [r3, #24]
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800777a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777c:	6979      	ldr	r1, [r7, #20]
 800777e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007782:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 8007786:	fb01 f303 	mul.w	r3, r1, r3
 800778a:	429a      	cmp	r2, r3
 800778c:	d00b      	beq.n	80077a6 <SCSI_Read12+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007794:	7f59      	ldrb	r1, [r3, #29]
 8007796:	2320      	movs	r3, #32
 8007798:	2205      	movs	r2, #5
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f7ff fdd0 	bl	8007340 <SCSI_SenseCode>
      return -1;
 80077a0:	f04f 33ff 	mov.w	r3, #4294967295
 80077a4:	e00c      	b.n	80077c0 <SCSI_Read12+0x168>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2202      	movs	r2, #2
 80077aa:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80077b2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80077b4:	7afb      	ldrb	r3, [r7, #11]
 80077b6:	4619      	mov	r1, r3
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 fa1d 	bl	8007bf8 <SCSI_ProcessRead>
 80077be:	4603      	mov	r3, r0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	460b      	mov	r3, r1
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077dc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d102      	bne.n	80077ea <SCSI_Write10+0x22>
  {
    return -1;
 80077e4:	f04f 33ff 	mov.w	r3, #4294967295
 80077e8:	e0bc      	b.n	8007964 <SCSI_Write10+0x19c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	7a1b      	ldrb	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f040 80b2 	bne.w	8007958 <SCSI_Write10+0x190>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10b      	bne.n	8007818 <SCSI_Write10+0x50>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007806:	7f59      	ldrb	r1, [r3, #29]
 8007808:	2320      	movs	r3, #32
 800780a:	2205      	movs	r2, #5
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f7ff fd97 	bl	8007340 <SCSI_SenseCode>
      return -1;
 8007812:	f04f 33ff 	mov.w	r3, #4294967295
 8007816:	e0a5      	b.n	8007964 <SCSI_Write10+0x19c>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800781e:	7f1b      	ldrb	r3, [r3, #28]
 8007820:	b25b      	sxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	da0b      	bge.n	800783e <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800782c:	7f59      	ldrb	r1, [r3, #29]
 800782e:	2320      	movs	r3, #32
 8007830:	2205      	movs	r2, #5
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7ff fd84 	bl	8007340 <SCSI_SenseCode>
      return -1;
 8007838:	f04f 33ff 	mov.w	r3, #4294967295
 800783c:	e092      	b.n	8007964 <SCSI_Write10+0x19c>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	7afa      	ldrb	r2, [r7, #11]
 8007848:	4610      	mov	r0, r2
 800784a:	4798      	blx	r3
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d008      	beq.n	8007864 <SCSI_Write10+0x9c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007852:	7af9      	ldrb	r1, [r7, #11]
 8007854:	233a      	movs	r3, #58	; 0x3a
 8007856:	2202      	movs	r2, #2
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f7ff fd71 	bl	8007340 <SCSI_SenseCode>
      return -1;
 800785e:	f04f 33ff 	mov.w	r3, #4294967295
 8007862:	e07f      	b.n	8007964 <SCSI_Write10+0x19c>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	7afa      	ldrb	r2, [r7, #11]
 800786e:	4610      	mov	r0, r2
 8007870:	4798      	blx	r3
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d008      	beq.n	800788a <SCSI_Write10+0xc2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007878:	7af9      	ldrb	r1, [r7, #11]
 800787a:	2327      	movs	r3, #39	; 0x27
 800787c:	2202      	movs	r2, #2
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f7ff fd5e 	bl	8007340 <SCSI_SenseCode>
      return -1;
 8007884:	f04f 33ff 	mov.w	r3, #4294967295
 8007888:	e06c      	b.n	8007964 <SCSI_Write10+0x19c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	3302      	adds	r3, #2
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3303      	adds	r3, #3
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800789a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3304      	adds	r3, #4
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80078a4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	3205      	adds	r2, #5
 80078aa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80078ac:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078b4:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3307      	adds	r3, #7
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	3208      	adds	r2, #8
 80078c2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80078c4:	4313      	orrs	r3, r2
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078cc:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078de:	7af9      	ldrb	r1, [r7, #11]
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f960 	bl	8007ba6 <SCSI_CheckAddressRange>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	da02      	bge.n	80078f2 <SCSI_Write10+0x12a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80078ec:	f04f 33ff 	mov.w	r3, #4294967295
 80078f0:	e038      	b.n	8007964 <SCSI_Write10+0x19c>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007900:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8007904:	fb02 f303 	mul.w	r3, r2, r3
 8007908:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	429a      	cmp	r2, r3
 8007916:	d00b      	beq.n	8007930 <SCSI_Write10+0x168>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800791e:	7f59      	ldrb	r1, [r3, #29]
 8007920:	2320      	movs	r3, #32
 8007922:	2205      	movs	r2, #5
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7ff fd0b 	bl	8007340 <SCSI_SenseCode>
      return -1;
 800792a:	f04f 33ff 	mov.w	r3, #4294967295
 800792e:	e019      	b.n	8007964 <SCSI_Write10+0x19c>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007936:	bf28      	it	cs
 8007938:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800793c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2201      	movs	r2, #1
 8007942:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f103 0210 	add.w	r2, r3, #16
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	2101      	movs	r1, #1
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f003 fd6c 	bl	800b42c <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007954:	2300      	movs	r3, #0
 8007956:	e005      	b.n	8007964 <SCSI_Write10+0x19c>
    return SCSI_ProcessWrite(pdev, lun);
 8007958:	7afb      	ldrb	r3, [r7, #11]
 800795a:	4619      	mov	r1, r3
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 f9d5 	bl	8007d0c <SCSI_ProcessWrite>
 8007962:	4603      	mov	r3, r0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	460b      	mov	r3, r1
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007980:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d102      	bne.n	800798e <SCSI_Write12+0x22>
  {
    return -1;
 8007988:	f04f 33ff 	mov.w	r3, #4294967295
 800798c:	e0cc      	b.n	8007b28 <SCSI_Write12+0x1bc>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	7a1b      	ldrb	r3, [r3, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	f040 80c2 	bne.w	8007b1c <SCSI_Write12+0x1b0>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10b      	bne.n	80079bc <SCSI_Write12+0x50>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079aa:	7f59      	ldrb	r1, [r3, #29]
 80079ac:	2320      	movs	r3, #32
 80079ae:	2205      	movs	r2, #5
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f7ff fcc5 	bl	8007340 <SCSI_SenseCode>
      return -1;
 80079b6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ba:	e0b5      	b.n	8007b28 <SCSI_Write12+0x1bc>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c2:	7f1b      	ldrb	r3, [r3, #28]
 80079c4:	b25b      	sxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	da0b      	bge.n	80079e2 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d0:	7f59      	ldrb	r1, [r3, #29]
 80079d2:	2320      	movs	r3, #32
 80079d4:	2205      	movs	r2, #5
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7ff fcb2 	bl	8007340 <SCSI_SenseCode>
      return -1;
 80079dc:	f04f 33ff 	mov.w	r3, #4294967295
 80079e0:	e0a2      	b.n	8007b28 <SCSI_Write12+0x1bc>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	7afa      	ldrb	r2, [r7, #11]
 80079ec:	4610      	mov	r0, r2
 80079ee:	4798      	blx	r3
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00b      	beq.n	8007a0e <SCSI_Write12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80079f6:	7af9      	ldrb	r1, [r7, #11]
 80079f8:	233a      	movs	r3, #58	; 0x3a
 80079fa:	2202      	movs	r2, #2
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f7ff fc9f 	bl	8007340 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2205      	movs	r2, #5
 8007a06:	721a      	strb	r2, [r3, #8]
      return -1;
 8007a08:	f04f 33ff 	mov.w	r3, #4294967295
 8007a0c:	e08c      	b.n	8007b28 <SCSI_Write12+0x1bc>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	7afa      	ldrb	r2, [r7, #11]
 8007a18:	4610      	mov	r0, r2
 8007a1a:	4798      	blx	r3
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <SCSI_Write12+0xce>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007a22:	7af9      	ldrb	r1, [r7, #11]
 8007a24:	2327      	movs	r3, #39	; 0x27
 8007a26:	2202      	movs	r2, #2
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f7ff fc89 	bl	8007340 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2205      	movs	r2, #5
 8007a32:	721a      	strb	r2, [r3, #8]
      return -1;
 8007a34:	f04f 33ff 	mov.w	r3, #4294967295
 8007a38:	e076      	b.n	8007b28 <SCSI_Write12+0x1bc>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3302      	adds	r3, #2
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3303      	adds	r3, #3
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a4a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007a54:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	3205      	adds	r2, #5
 8007a5a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007a5c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a64:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	3306      	adds	r3, #6
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3307      	adds	r3, #7
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007a76:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007a80:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	3209      	adds	r2, #9
 8007a86:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007a88:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a90:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa2:	7af9      	ldrb	r1, [r7, #11]
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 f87e 	bl	8007ba6 <SCSI_CheckAddressRange>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	da02      	bge.n	8007ab6 <SCSI_Write12+0x14a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab4:	e038      	b.n	8007b28 <SCSI_Write12+0x1bc>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ac4:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8007ac8:	fb02 f303 	mul.w	r3, r2, r3
 8007acc:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d00b      	beq.n	8007af4 <SCSI_Write12+0x188>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae2:	7f59      	ldrb	r1, [r3, #29]
 8007ae4:	2320      	movs	r3, #32
 8007ae6:	2205      	movs	r2, #5
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f7ff fc29 	bl	8007340 <SCSI_SenseCode>
      return -1;
 8007aee:	f04f 33ff 	mov.w	r3, #4294967295
 8007af2:	e019      	b.n	8007b28 <SCSI_Write12+0x1bc>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afa:	bf28      	it	cs
 8007afc:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8007b00:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2201      	movs	r2, #1
 8007b06:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f103 0210 	add.w	r2, r3, #16
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2101      	movs	r1, #1
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f003 fc8a 	bl	800b42c <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e005      	b.n	8007b28 <SCSI_Write12+0x1bc>
    return SCSI_ProcessWrite(pdev, lun);
 8007b1c:	7afb      	ldrb	r3, [r7, #11]
 8007b1e:	4619      	mov	r1, r3
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 f8f3 	bl	8007d0c <SCSI_ProcessWrite>
 8007b26:	4603      	mov	r3, r0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b44:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d102      	bne.n	8007b52 <SCSI_Verify10+0x22>
  {
    return -1;
 8007b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b50:	e025      	b.n	8007b9e <SCSI_Verify10+0x6e>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3301      	adds	r3, #1
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007b60:	7af9      	ldrb	r1, [r7, #11]
 8007b62:	2324      	movs	r3, #36	; 0x24
 8007b64:	2205      	movs	r2, #5
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f7ff fbea 	bl	8007340 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b70:	e015      	b.n	8007b9e <SCSI_Verify10+0x6e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b82:	7af9      	ldrb	r1, [r7, #11]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 f80e 	bl	8007ba6 <SCSI_CheckAddressRange>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	da02      	bge.n	8007b96 <SCSI_Verify10+0x66>
  {
    return -1; /* error */
 8007b90:	f04f 33ff 	mov.w	r3, #4294967295
 8007b94:	e003      	b.n	8007b9e <SCSI_Verify10+0x6e>
  }

  hmsc->bot_data_length = 0U;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	60da      	str	r2, [r3, #12]

  return 0;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b086      	sub	sp, #24
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	60f8      	str	r0, [r7, #12]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bbc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d102      	bne.n	8007bca <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8007bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc8:	e012      	b.n	8007bf0 <SCSI_CheckAddressRange+0x4a>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	441a      	add	r2, r3
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d908      	bls.n	8007bee <SCSI_CheckAddressRange+0x48>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007bdc:	7af9      	ldrb	r1, [r7, #11]
 8007bde:	2321      	movs	r3, #33	; 0x21
 8007be0:	2205      	movs	r2, #5
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f7ff fbac 	bl	8007340 <SCSI_SenseCode>
    return -1;
 8007be8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bec:	e000      	b.n	8007bf0 <SCSI_CheckAddressRange+0x4a>
  }

  return 0;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007bf8:	b590      	push	{r4, r7, lr}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c0a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c1a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
 8007c22:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d102      	bne.n	8007c30 <SCSI_ProcessRead+0x38>
  {
    return -1;
 8007c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2e:	e069      	b.n	8007d04 <SCSI_ProcessRead+0x10c>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c36:	bf28      	it	cs
 8007c38:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8007c3c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c44:	691c      	ldr	r4, [r3, #16]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f103 0110 	add.w	r1, r3, #16
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007c5e:	4618      	mov	r0, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	78f8      	ldrb	r0, [r7, #3]
 8007c6a:	47a0      	blx	r4
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	da08      	bge.n	8007c84 <SCSI_ProcessRead+0x8c>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007c72:	78f9      	ldrb	r1, [r7, #3]
 8007c74:	2311      	movs	r3, #17
 8007c76:	2204      	movs	r2, #4
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7ff fb61 	bl	8007340 <SCSI_SenseCode>
    return -1;
 8007c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c82:	e03f      	b.n	8007d04 <SCSI_ProcessRead+0x10c>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f103 0210 	add.w	r2, r3, #16
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2181      	movs	r1, #129	; 0x81
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f003 fb94 	bl	800b3bc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c9a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cae:	4413      	add	r3, r2
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007cb6:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007cca:	4619      	mov	r1, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007cda:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007cee:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d102      	bne.n	8007d02 <SCSI_ProcessRead+0x10a>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2203      	movs	r2, #3
 8007d00:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd90      	pop	{r4, r7, pc}

08007d0c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007d0c:	b590      	push	{r4, r7, lr}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d1e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d2e:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8007d32:	fb02 f303 	mul.w	r3, r2, r3
 8007d36:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d102      	bne.n	8007d44 <SCSI_ProcessWrite+0x38>
  {
    return -1;
 8007d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d42:	e07c      	b.n	8007e3e <SCSI_ProcessWrite+0x132>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d4a:	bf28      	it	cs
 8007d4c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8007d50:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d58:	695c      	ldr	r4, [r3, #20]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f103 0110 	add.w	r1, r3, #16
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007d72:	4618      	mov	r0, r3
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	78f8      	ldrb	r0, [r7, #3]
 8007d7e:	47a0      	blx	r4
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	da08      	bge.n	8007d98 <SCSI_ProcessWrite+0x8c>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007d86:	78f9      	ldrb	r1, [r7, #3]
 8007d88:	2303      	movs	r3, #3
 8007d8a:	2204      	movs	r2, #4
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff fad7 	bl	8007340 <SCSI_SenseCode>
    return -1;
 8007d92:	f04f 33ff 	mov.w	r3, #4294967295
 8007d96:	e052      	b.n	8007e3e <SCSI_ProcessWrite+0x132>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d9e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007da6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007daa:	4619      	mov	r1, r3
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8007db2:	4413      	add	r3, r2
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007dba:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007dce:	4619      	mov	r1, r3
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007dde:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007df2:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d104      	bne.n	8007e0a <SCSI_ProcessWrite+0xfe>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007e00:	2100      	movs	r1, #0
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7fe fd16 	bl	8006834 <MSC_BOT_SendCSW>
 8007e08:	e018      	b.n	8007e3c <SCSI_ProcessWrite+0x130>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e18:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8007e1c:	fb02 f303 	mul.w	r3, r2, r3
 8007e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e24:	bf28      	it	cs
 8007e26:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8007e2a:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f103 0210 	add.w	r2, r3, #16
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2101      	movs	r1, #1
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f003 faf8 	bl	800b42c <USBD_LL_PrepareReceive>
  }

  return 0;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd90      	pop	{r4, r7, pc}

08007e46 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b087      	sub	sp, #28
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	4613      	mov	r3, r2
 8007e52:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d102      	bne.n	8007e64 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8007e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e62:	e013      	b.n	8007e8c <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8007e64:	8afa      	ldrh	r2, [r7, #22]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8007e6a:	e00b      	b.n	8007e84 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8007e6c:	8afb      	ldrh	r3, [r7, #22]
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8007e72:	8afb      	ldrh	r3, [r7, #22]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	441a      	add	r2, r3
 8007e78:	8afb      	ldrh	r3, [r7, #22]
 8007e7a:	7811      	ldrb	r1, [r2, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4413      	add	r3, r2
 8007e80:	460a      	mov	r2, r1
 8007e82:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8007e84:	8afb      	ldrh	r3, [r7, #22]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1f0      	bne.n	8007e6c <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	371c      	adds	r7, #28
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e01f      	b.n	8007ef0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	79fa      	ldrb	r2, [r7, #7]
 8007ee2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f003 f80f 	bl	800af08 <USBD_LL_Init>
 8007eea:	4603      	mov	r3, r0
 8007eec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f003 f8b1 	bl	800b068 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d011      	beq.n	8007f3c <USBD_DeInit+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	6852      	ldr	r2, [r2, #4]
 8007f24:	b2d2      	uxtb	r2, r2
 8007f26:	4611      	mov	r1, r2
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	4798      	blx	r3
    pdev->pClass = NULL;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    pdev->pUserData = NULL;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  }

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f003 f827 	bl	800afa0 <USBD_LL_DeInit>
 8007f52:	4603      	mov	r3, r0
 8007f54:	73fb      	strb	r3, [r7, #15]

  return ret;
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e016      	b.n	8007fa6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00b      	beq.n	8007fa4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	f107 020e 	add.w	r2, r7, #14
 8007f98:	4610      	mov	r0, r2
 8007f9a:	4798      	blx	r3
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f003 f824 	bl	800b004 <USBD_LL_Start>
 8007fbc:	4603      	mov	r3, r0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d009      	beq.n	800800a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	78fa      	ldrb	r2, [r7, #3]
 8008000:	4611      	mov	r1, r2
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
 8008006:	4603      	mov	r3, r0
 8008008:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800800a:	7bfb      	ldrb	r3, [r7, #15]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d007      	beq.n	800803a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	78fa      	ldrb	r2, [r7, #3]
 8008034:	4611      	mov	r1, r2
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	4798      	blx	r3
  }

  return USBD_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	4618      	mov	r0, r3
 8008058:	f000 ff90 	bl	8008f7c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800806a:	461a      	mov	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008078:	f003 031f 	and.w	r3, r3, #31
 800807c:	2b02      	cmp	r3, #2
 800807e:	d01a      	beq.n	80080b6 <USBD_LL_SetupStage+0x72>
 8008080:	2b02      	cmp	r3, #2
 8008082:	d822      	bhi.n	80080ca <USBD_LL_SetupStage+0x86>
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <USBD_LL_SetupStage+0x4a>
 8008088:	2b01      	cmp	r3, #1
 800808a:	d00a      	beq.n	80080a2 <USBD_LL_SetupStage+0x5e>
 800808c:	e01d      	b.n	80080ca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fa62 	bl	8008560 <USBD_StdDevReq>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]
      break;
 80080a0:	e020      	b.n	80080e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fac6 	bl	800863c <USBD_StdItfReq>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73fb      	strb	r3, [r7, #15]
      break;
 80080b4:	e016      	b.n	80080e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fb05 	bl	80086ce <USBD_StdEPReq>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]
      break;
 80080c8:	e00c      	b.n	80080e4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f003 f8a1 	bl	800b220 <USBD_LL_StallEP>
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]
      break;
 80080e2:	bf00      	nop
  }

  return ret;
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b086      	sub	sp, #24
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	460b      	mov	r3, r1
 80080f8:	607a      	str	r2, [r7, #4]
 80080fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080fc:	7afb      	ldrb	r3, [r7, #11]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d138      	bne.n	8008174 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008108:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008110:	2b03      	cmp	r3, #3
 8008112:	d14a      	bne.n	80081aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	429a      	cmp	r2, r3
 800811e:	d913      	bls.n	8008148 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	1ad2      	subs	r2, r2, r3
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	4293      	cmp	r3, r2
 8008138:	bf28      	it	cs
 800813a:	4613      	movcs	r3, r2
 800813c:	461a      	mov	r2, r3
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f000 fff2 	bl	800912a <USBD_CtlContinueRx>
 8008146:	e030      	b.n	80081aa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b03      	cmp	r3, #3
 8008152:	d10b      	bne.n	800816c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 ffed 	bl	800914c <USBD_CtlSendStatus>
 8008172:	e01a      	b.n	80081aa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b03      	cmp	r3, #3
 800817e:	d114      	bne.n	80081aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00e      	beq.n	80081aa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	7afa      	ldrb	r2, [r7, #11]
 8008196:	4611      	mov	r1, r2
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	4798      	blx	r3
 800819c:	4603      	mov	r3, r0
 800819e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80081a6:	7dfb      	ldrb	r3, [r7, #23]
 80081a8:	e000      	b.n	80081ac <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	460b      	mov	r3, r1
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80081c2:	7afb      	ldrb	r3, [r7, #11]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d16b      	bne.n	80082a0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3314      	adds	r3, #20
 80081cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d156      	bne.n	8008286 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d914      	bls.n	800820e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	1ad2      	subs	r2, r2, r3
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	461a      	mov	r2, r3
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 ff84 	bl	8009108 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008200:	2300      	movs	r3, #0
 8008202:	2200      	movs	r2, #0
 8008204:	2100      	movs	r1, #0
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f003 f910 	bl	800b42c <USBD_LL_PrepareReceive>
 800820c:	e03b      	b.n	8008286 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	429a      	cmp	r2, r3
 8008218:	d11c      	bne.n	8008254 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008222:	429a      	cmp	r2, r3
 8008224:	d316      	bcc.n	8008254 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008230:	429a      	cmp	r2, r3
 8008232:	d20f      	bcs.n	8008254 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008234:	2200      	movs	r2, #0
 8008236:	2100      	movs	r1, #0
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 ff65 	bl	8009108 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008246:	2300      	movs	r3, #0
 8008248:	2200      	movs	r2, #0
 800824a:	2100      	movs	r1, #0
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f003 f8ed 	bl	800b42c <USBD_LL_PrepareReceive>
 8008252:	e018      	b.n	8008286 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b03      	cmp	r3, #3
 800825e:	d10b      	bne.n	8008278 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008278:	2180      	movs	r1, #128	; 0x80
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f002 ffd0 	bl	800b220 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 ff76 	bl	8009172 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800828c:	2b01      	cmp	r3, #1
 800828e:	d122      	bne.n	80082d6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f7ff fe98 	bl	8007fc6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800829e:	e01a      	b.n	80082d6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	d114      	bne.n	80082d6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b2:	695b      	ldr	r3, [r3, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00e      	beq.n	80082d6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	7afa      	ldrb	r2, [r7, #11]
 80082c2:	4611      	mov	r1, r2
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	4798      	blx	r3
 80082c8:	4603      	mov	r3, r0
 80082ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	e000      	b.n	80082d8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3718      	adds	r7, #24
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008310:	2303      	movs	r3, #3
 8008312:	e02f      	b.n	8008374 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00f      	beq.n	800833e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d009      	beq.n	800833e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	6852      	ldr	r2, [r2, #4]
 8008336:	b2d2      	uxtb	r2, r2
 8008338:	4611      	mov	r1, r2
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800833e:	2340      	movs	r3, #64	; 0x40
 8008340:	2200      	movs	r2, #0
 8008342:	2100      	movs	r1, #0
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f002 fec1 	bl	800b0cc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2240      	movs	r2, #64	; 0x40
 8008356:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800835a:	2340      	movs	r3, #64	; 0x40
 800835c:	2200      	movs	r2, #0
 800835e:	2180      	movs	r1, #128	; 0x80
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f002 feb3 	bl	800b0cc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2240      	movs	r2, #64	; 0x40
 8008370:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	78fa      	ldrb	r2, [r7, #3]
 800838c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2204      	movs	r2, #4
 80083b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d106      	bne.n	80083ea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800840a:	2303      	movs	r3, #3
 800840c:	e012      	b.n	8008434 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b03      	cmp	r3, #3
 8008418:	d10b      	bne.n	8008432 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d005      	beq.n	8008432 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008452:	2303      	movs	r3, #3
 8008454:	e014      	b.n	8008480 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b03      	cmp	r3, #3
 8008460:	d10d      	bne.n	800847e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d007      	beq.n	800847e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	78fa      	ldrb	r2, [r7, #3]
 8008478:	4611      	mov	r1, r2
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800849e:	2303      	movs	r3, #3
 80084a0:	e014      	b.n	80084cc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d10d      	bne.n	80084ca <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d007      	beq.n	80084ca <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	78fa      	ldrb	r2, [r7, #3]
 80084c4:	4611      	mov	r1, r2
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b082      	sub	sp, #8
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008500:	2b00      	cmp	r3, #0
 8008502:	d009      	beq.n	8008518 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	6852      	ldr	r2, [r2, #4]
 8008510:	b2d2      	uxtb	r2, r2
 8008512:	4611      	mov	r1, r2
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	4798      	blx	r3
  }

  return USBD_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008522:	b480      	push	{r7}
 8008524:	b087      	sub	sp, #28
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	3301      	adds	r3, #1
 8008538:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008540:	8a3b      	ldrh	r3, [r7, #16]
 8008542:	021b      	lsls	r3, r3, #8
 8008544:	b21a      	sxth	r2, r3
 8008546:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800854a:	4313      	orrs	r3, r2
 800854c:	b21b      	sxth	r3, r3
 800854e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008550:	89fb      	ldrh	r3, [r7, #14]
}
 8008552:	4618      	mov	r0, r3
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
	...

08008560 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008576:	2b40      	cmp	r3, #64	; 0x40
 8008578:	d005      	beq.n	8008586 <USBD_StdDevReq+0x26>
 800857a:	2b40      	cmp	r3, #64	; 0x40
 800857c:	d853      	bhi.n	8008626 <USBD_StdDevReq+0xc6>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00b      	beq.n	800859a <USBD_StdDevReq+0x3a>
 8008582:	2b20      	cmp	r3, #32
 8008584:	d14f      	bne.n	8008626 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	4798      	blx	r3
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]
      break;
 8008598:	e04a      	b.n	8008630 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	785b      	ldrb	r3, [r3, #1]
 800859e:	2b09      	cmp	r3, #9
 80085a0:	d83b      	bhi.n	800861a <USBD_StdDevReq+0xba>
 80085a2:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <USBD_StdDevReq+0x48>)
 80085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a8:	080085fd 	.word	0x080085fd
 80085ac:	08008611 	.word	0x08008611
 80085b0:	0800861b 	.word	0x0800861b
 80085b4:	08008607 	.word	0x08008607
 80085b8:	0800861b 	.word	0x0800861b
 80085bc:	080085db 	.word	0x080085db
 80085c0:	080085d1 	.word	0x080085d1
 80085c4:	0800861b 	.word	0x0800861b
 80085c8:	080085f3 	.word	0x080085f3
 80085cc:	080085e5 	.word	0x080085e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f9de 	bl	8008994 <USBD_GetDescriptor>
          break;
 80085d8:	e024      	b.n	8008624 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fb43 	bl	8008c68 <USBD_SetAddress>
          break;
 80085e2:	e01f      	b.n	8008624 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fb82 	bl	8008cf0 <USBD_SetConfig>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73fb      	strb	r3, [r7, #15]
          break;
 80085f0:	e018      	b.n	8008624 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fc21 	bl	8008e3c <USBD_GetConfig>
          break;
 80085fa:	e013      	b.n	8008624 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fc52 	bl	8008ea8 <USBD_GetStatus>
          break;
 8008604:	e00e      	b.n	8008624 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fc81 	bl	8008f10 <USBD_SetFeature>
          break;
 800860e:	e009      	b.n	8008624 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fc90 	bl	8008f38 <USBD_ClrFeature>
          break;
 8008618:	e004      	b.n	8008624 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fce7 	bl	8008ff0 <USBD_CtlError>
          break;
 8008622:	bf00      	nop
      }
      break;
 8008624:	e004      	b.n	8008630 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fce1 	bl	8008ff0 <USBD_CtlError>
      break;
 800862e:	bf00      	nop
  }

  return ret;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop

0800863c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008652:	2b40      	cmp	r3, #64	; 0x40
 8008654:	d005      	beq.n	8008662 <USBD_StdItfReq+0x26>
 8008656:	2b40      	cmp	r3, #64	; 0x40
 8008658:	d82f      	bhi.n	80086ba <USBD_StdItfReq+0x7e>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <USBD_StdItfReq+0x26>
 800865e:	2b20      	cmp	r3, #32
 8008660:	d12b      	bne.n	80086ba <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008668:	b2db      	uxtb	r3, r3
 800866a:	3b01      	subs	r3, #1
 800866c:	2b02      	cmp	r3, #2
 800866e:	d81d      	bhi.n	80086ac <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	889b      	ldrh	r3, [r3, #4]
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b01      	cmp	r3, #1
 8008678:	d813      	bhi.n	80086a2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	4798      	blx	r3
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	88db      	ldrh	r3, [r3, #6]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d110      	bne.n	80086b6 <USBD_StdItfReq+0x7a>
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10d      	bne.n	80086b6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fd56 	bl	800914c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80086a0:	e009      	b.n	80086b6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fca3 	bl	8008ff0 <USBD_CtlError>
          break;
 80086aa:	e004      	b.n	80086b6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fc9e 	bl	8008ff0 <USBD_CtlError>
          break;
 80086b4:	e000      	b.n	80086b8 <USBD_StdItfReq+0x7c>
          break;
 80086b6:	bf00      	nop
      }
      break;
 80086b8:	e004      	b.n	80086c4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fc97 	bl	8008ff0 <USBD_CtlError>
      break;
 80086c2:	bf00      	nop
  }

  return ret;
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	889b      	ldrh	r3, [r3, #4]
 80086e0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086ea:	2b40      	cmp	r3, #64	; 0x40
 80086ec:	d007      	beq.n	80086fe <USBD_StdEPReq+0x30>
 80086ee:	2b40      	cmp	r3, #64	; 0x40
 80086f0:	f200 8145 	bhi.w	800897e <USBD_StdEPReq+0x2b0>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00c      	beq.n	8008712 <USBD_StdEPReq+0x44>
 80086f8:	2b20      	cmp	r3, #32
 80086fa:	f040 8140 	bne.w	800897e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	4798      	blx	r3
 800870c:	4603      	mov	r3, r0
 800870e:	73fb      	strb	r3, [r7, #15]
      break;
 8008710:	e13a      	b.n	8008988 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	785b      	ldrb	r3, [r3, #1]
 8008716:	2b03      	cmp	r3, #3
 8008718:	d007      	beq.n	800872a <USBD_StdEPReq+0x5c>
 800871a:	2b03      	cmp	r3, #3
 800871c:	f300 8129 	bgt.w	8008972 <USBD_StdEPReq+0x2a4>
 8008720:	2b00      	cmp	r3, #0
 8008722:	d07f      	beq.n	8008824 <USBD_StdEPReq+0x156>
 8008724:	2b01      	cmp	r3, #1
 8008726:	d03c      	beq.n	80087a2 <USBD_StdEPReq+0xd4>
 8008728:	e123      	b.n	8008972 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b02      	cmp	r3, #2
 8008734:	d002      	beq.n	800873c <USBD_StdEPReq+0x6e>
 8008736:	2b03      	cmp	r3, #3
 8008738:	d016      	beq.n	8008768 <USBD_StdEPReq+0x9a>
 800873a:	e02c      	b.n	8008796 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800873c:	7bbb      	ldrb	r3, [r7, #14]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00d      	beq.n	800875e <USBD_StdEPReq+0x90>
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	2b80      	cmp	r3, #128	; 0x80
 8008746:	d00a      	beq.n	800875e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008748:	7bbb      	ldrb	r3, [r7, #14]
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f002 fd67 	bl	800b220 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008752:	2180      	movs	r1, #128	; 0x80
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f002 fd63 	bl	800b220 <USBD_LL_StallEP>
 800875a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800875c:	e020      	b.n	80087a0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fc45 	bl	8008ff0 <USBD_CtlError>
              break;
 8008766:	e01b      	b.n	80087a0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	885b      	ldrh	r3, [r3, #2]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10e      	bne.n	800878e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00b      	beq.n	800878e <USBD_StdEPReq+0xc0>
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	2b80      	cmp	r3, #128	; 0x80
 800877a:	d008      	beq.n	800878e <USBD_StdEPReq+0xc0>
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	88db      	ldrh	r3, [r3, #6]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f002 fd49 	bl	800b220 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fcdc 	bl	800914c <USBD_CtlSendStatus>

              break;
 8008794:	e004      	b.n	80087a0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fc29 	bl	8008ff0 <USBD_CtlError>
              break;
 800879e:	bf00      	nop
          }
          break;
 80087a0:	e0ec      	b.n	800897c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d002      	beq.n	80087b4 <USBD_StdEPReq+0xe6>
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d016      	beq.n	80087e0 <USBD_StdEPReq+0x112>
 80087b2:	e030      	b.n	8008816 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00d      	beq.n	80087d6 <USBD_StdEPReq+0x108>
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	2b80      	cmp	r3, #128	; 0x80
 80087be:	d00a      	beq.n	80087d6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f002 fd2b 	bl	800b220 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80087ca:	2180      	movs	r1, #128	; 0x80
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f002 fd27 	bl	800b220 <USBD_LL_StallEP>
 80087d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087d4:	e025      	b.n	8008822 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fc09 	bl	8008ff0 <USBD_CtlError>
              break;
 80087de:	e020      	b.n	8008822 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	885b      	ldrh	r3, [r3, #2]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d11b      	bne.n	8008820 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80087e8:	7bbb      	ldrb	r3, [r7, #14]
 80087ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d004      	beq.n	80087fc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f002 fd48 	bl	800b28c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fca5 	bl	800914c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008814:	e004      	b.n	8008820 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fbe9 	bl	8008ff0 <USBD_CtlError>
              break;
 800881e:	e000      	b.n	8008822 <USBD_StdEPReq+0x154>
              break;
 8008820:	bf00      	nop
          }
          break;
 8008822:	e0ab      	b.n	800897c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b02      	cmp	r3, #2
 800882e:	d002      	beq.n	8008836 <USBD_StdEPReq+0x168>
 8008830:	2b03      	cmp	r3, #3
 8008832:	d032      	beq.n	800889a <USBD_StdEPReq+0x1cc>
 8008834:	e097      	b.n	8008966 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d007      	beq.n	800884c <USBD_StdEPReq+0x17e>
 800883c:	7bbb      	ldrb	r3, [r7, #14]
 800883e:	2b80      	cmp	r3, #128	; 0x80
 8008840:	d004      	beq.n	800884c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fbd3 	bl	8008ff0 <USBD_CtlError>
                break;
 800884a:	e091      	b.n	8008970 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800884c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008850:	2b00      	cmp	r3, #0
 8008852:	da0b      	bge.n	800886c <USBD_StdEPReq+0x19e>
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800885a:	4613      	mov	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	3310      	adds	r3, #16
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	4413      	add	r3, r2
 8008868:	3304      	adds	r3, #4
 800886a:	e00b      	b.n	8008884 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008872:	4613      	mov	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	4413      	add	r3, r2
 8008882:	3304      	adds	r3, #4
 8008884:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2202      	movs	r2, #2
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fc1d 	bl	80090d2 <USBD_CtlSendData>
              break;
 8008898:	e06a      	b.n	8008970 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800889a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	da11      	bge.n	80088c6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	f003 020f 	and.w	r2, r3, #15
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	3324      	adds	r3, #36	; 0x24
 80088b6:	881b      	ldrh	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d117      	bne.n	80088ec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fb96 	bl	8008ff0 <USBD_CtlError>
                  break;
 80088c4:	e054      	b.n	8008970 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	f003 020f 	and.w	r2, r3, #15
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	440b      	add	r3, r1
 80088d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d104      	bne.n	80088ec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fb83 	bl	8008ff0 <USBD_CtlError>
                  break;
 80088ea:	e041      	b.n	8008970 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	da0b      	bge.n	800890c <USBD_StdEPReq+0x23e>
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
 80088f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	3310      	adds	r3, #16
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	4413      	add	r3, r2
 8008908:	3304      	adds	r3, #4
 800890a:	e00b      	b.n	8008924 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008912:	4613      	mov	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	4413      	add	r3, r2
 8008922:	3304      	adds	r3, #4
 8008924:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <USBD_StdEPReq+0x264>
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b80      	cmp	r3, #128	; 0x80
 8008930:	d103      	bne.n	800893a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	e00e      	b.n	8008958 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f002 fcda 	bl	800b2f8 <USBD_LL_IsStallEP>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	2201      	movs	r2, #1
 800894e:	601a      	str	r2, [r3, #0]
 8008950:	e002      	b.n	8008958 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2202      	movs	r2, #2
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fbb7 	bl	80090d2 <USBD_CtlSendData>
              break;
 8008964:	e004      	b.n	8008970 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fb41 	bl	8008ff0 <USBD_CtlError>
              break;
 800896e:	bf00      	nop
          }
          break;
 8008970:	e004      	b.n	800897c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fb3b 	bl	8008ff0 <USBD_CtlError>
          break;
 800897a:	bf00      	nop
      }
      break;
 800897c:	e004      	b.n	8008988 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fb35 	bl	8008ff0 <USBD_CtlError>
      break;
 8008986:	bf00      	nop
  }

  return ret;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
	...

08008994 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80089a2:	2300      	movs	r3, #0
 80089a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	885b      	ldrh	r3, [r3, #2]
 80089ae:	0a1b      	lsrs	r3, r3, #8
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	3b01      	subs	r3, #1
 80089b4:	2b06      	cmp	r3, #6
 80089b6:	f200 8128 	bhi.w	8008c0a <USBD_GetDescriptor+0x276>
 80089ba:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <USBD_GetDescriptor+0x2c>)
 80089bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c0:	080089dd 	.word	0x080089dd
 80089c4:	080089f5 	.word	0x080089f5
 80089c8:	08008a35 	.word	0x08008a35
 80089cc:	08008c0b 	.word	0x08008c0b
 80089d0:	08008c0b 	.word	0x08008c0b
 80089d4:	08008bab 	.word	0x08008bab
 80089d8:	08008bd7 	.word	0x08008bd7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7c12      	ldrb	r2, [r2, #16]
 80089e8:	f107 0108 	add.w	r1, r7, #8
 80089ec:	4610      	mov	r0, r2
 80089ee:	4798      	blx	r3
 80089f0:	60f8      	str	r0, [r7, #12]
      break;
 80089f2:	e112      	b.n	8008c1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	7c1b      	ldrb	r3, [r3, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10d      	bne.n	8008a18 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a04:	f107 0208 	add.w	r2, r7, #8
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
 8008a0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3301      	adds	r3, #1
 8008a12:	2202      	movs	r2, #2
 8008a14:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a16:	e100      	b.n	8008c1a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a20:	f107 0208 	add.w	r2, r7, #8
 8008a24:	4610      	mov	r0, r2
 8008a26:	4798      	blx	r3
 8008a28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	2202      	movs	r2, #2
 8008a30:	701a      	strb	r2, [r3, #0]
      break;
 8008a32:	e0f2      	b.n	8008c1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	885b      	ldrh	r3, [r3, #2]
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b05      	cmp	r3, #5
 8008a3c:	f200 80ac 	bhi.w	8008b98 <USBD_GetDescriptor+0x204>
 8008a40:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <USBD_GetDescriptor+0xb4>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008a61 	.word	0x08008a61
 8008a4c:	08008a95 	.word	0x08008a95
 8008a50:	08008ac9 	.word	0x08008ac9
 8008a54:	08008afd 	.word	0x08008afd
 8008a58:	08008b31 	.word	0x08008b31
 8008a5c:	08008b65 	.word	0x08008b65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00b      	beq.n	8008a84 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	7c12      	ldrb	r2, [r2, #16]
 8008a78:	f107 0108 	add.w	r1, r7, #8
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4798      	blx	r3
 8008a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a82:	e091      	b.n	8008ba8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fab2 	bl	8008ff0 <USBD_CtlError>
            err++;
 8008a8c:	7afb      	ldrb	r3, [r7, #11]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	72fb      	strb	r3, [r7, #11]
          break;
 8008a92:	e089      	b.n	8008ba8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00b      	beq.n	8008ab8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	7c12      	ldrb	r2, [r2, #16]
 8008aac:	f107 0108 	add.w	r1, r7, #8
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4798      	blx	r3
 8008ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ab6:	e077      	b.n	8008ba8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fa98 	bl	8008ff0 <USBD_CtlError>
            err++;
 8008ac0:	7afb      	ldrb	r3, [r7, #11]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ac6:	e06f      	b.n	8008ba8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00b      	beq.n	8008aec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	7c12      	ldrb	r2, [r2, #16]
 8008ae0:	f107 0108 	add.w	r1, r7, #8
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4798      	blx	r3
 8008ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aea:	e05d      	b.n	8008ba8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fa7e 	bl	8008ff0 <USBD_CtlError>
            err++;
 8008af4:	7afb      	ldrb	r3, [r7, #11]
 8008af6:	3301      	adds	r3, #1
 8008af8:	72fb      	strb	r3, [r7, #11]
          break;
 8008afa:	e055      	b.n	8008ba8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00b      	beq.n	8008b20 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	7c12      	ldrb	r2, [r2, #16]
 8008b14:	f107 0108 	add.w	r1, r7, #8
 8008b18:	4610      	mov	r0, r2
 8008b1a:	4798      	blx	r3
 8008b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b1e:	e043      	b.n	8008ba8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fa64 	bl	8008ff0 <USBD_CtlError>
            err++;
 8008b28:	7afb      	ldrb	r3, [r7, #11]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b2e:	e03b      	b.n	8008ba8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00b      	beq.n	8008b54 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	7c12      	ldrb	r2, [r2, #16]
 8008b48:	f107 0108 	add.w	r1, r7, #8
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	4798      	blx	r3
 8008b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b52:	e029      	b.n	8008ba8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fa4a 	bl	8008ff0 <USBD_CtlError>
            err++;
 8008b5c:	7afb      	ldrb	r3, [r7, #11]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	72fb      	strb	r3, [r7, #11]
          break;
 8008b62:	e021      	b.n	8008ba8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00b      	beq.n	8008b88 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	7c12      	ldrb	r2, [r2, #16]
 8008b7c:	f107 0108 	add.w	r1, r7, #8
 8008b80:	4610      	mov	r0, r2
 8008b82:	4798      	blx	r3
 8008b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b86:	e00f      	b.n	8008ba8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fa30 	bl	8008ff0 <USBD_CtlError>
            err++;
 8008b90:	7afb      	ldrb	r3, [r7, #11]
 8008b92:	3301      	adds	r3, #1
 8008b94:	72fb      	strb	r3, [r7, #11]
          break;
 8008b96:	e007      	b.n	8008ba8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fa28 	bl	8008ff0 <USBD_CtlError>
          err++;
 8008ba0:	7afb      	ldrb	r3, [r7, #11]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008ba6:	bf00      	nop
      }
      break;
 8008ba8:	e037      	b.n	8008c1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	7c1b      	ldrb	r3, [r3, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d109      	bne.n	8008bc6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bba:	f107 0208 	add.w	r2, r7, #8
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	4798      	blx	r3
 8008bc2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bc4:	e029      	b.n	8008c1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fa11 	bl	8008ff0 <USBD_CtlError>
        err++;
 8008bce:	7afb      	ldrb	r3, [r7, #11]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	72fb      	strb	r3, [r7, #11]
      break;
 8008bd4:	e021      	b.n	8008c1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	7c1b      	ldrb	r3, [r3, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10d      	bne.n	8008bfa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be6:	f107 0208 	add.w	r2, r7, #8
 8008bea:	4610      	mov	r0, r2
 8008bec:	4798      	blx	r3
 8008bee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	2207      	movs	r2, #7
 8008bf6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bf8:	e00f      	b.n	8008c1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f9f7 	bl	8008ff0 <USBD_CtlError>
        err++;
 8008c02:	7afb      	ldrb	r3, [r7, #11]
 8008c04:	3301      	adds	r3, #1
 8008c06:	72fb      	strb	r3, [r7, #11]
      break;
 8008c08:	e007      	b.n	8008c1a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f9ef 	bl	8008ff0 <USBD_CtlError>
      err++;
 8008c12:	7afb      	ldrb	r3, [r7, #11]
 8008c14:	3301      	adds	r3, #1
 8008c16:	72fb      	strb	r3, [r7, #11]
      break;
 8008c18:	bf00      	nop
  }

  if (err != 0U)
 8008c1a:	7afb      	ldrb	r3, [r7, #11]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d11e      	bne.n	8008c5e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	88db      	ldrh	r3, [r3, #6]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d016      	beq.n	8008c56 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008c28:	893b      	ldrh	r3, [r7, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00e      	beq.n	8008c4c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	88da      	ldrh	r2, [r3, #6]
 8008c32:	893b      	ldrh	r3, [r7, #8]
 8008c34:	4293      	cmp	r3, r2
 8008c36:	bf28      	it	cs
 8008c38:	4613      	movcs	r3, r2
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c3e:	893b      	ldrh	r3, [r7, #8]
 8008c40:	461a      	mov	r2, r3
 8008c42:	68f9      	ldr	r1, [r7, #12]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fa44 	bl	80090d2 <USBD_CtlSendData>
 8008c4a:	e009      	b.n	8008c60 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f9ce 	bl	8008ff0 <USBD_CtlError>
 8008c54:	e004      	b.n	8008c60 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fa78 	bl	800914c <USBD_CtlSendStatus>
 8008c5c:	e000      	b.n	8008c60 <USBD_GetDescriptor+0x2cc>
    return;
 8008c5e:	bf00      	nop
  }
}
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop

08008c68 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	889b      	ldrh	r3, [r3, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d131      	bne.n	8008cde <USBD_SetAddress+0x76>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	88db      	ldrh	r3, [r3, #6]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d12d      	bne.n	8008cde <USBD_SetAddress+0x76>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	885b      	ldrh	r3, [r3, #2]
 8008c86:	2b7f      	cmp	r3, #127	; 0x7f
 8008c88:	d829      	bhi.n	8008cde <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	885b      	ldrh	r3, [r3, #2]
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	d104      	bne.n	8008cac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f9a3 	bl	8008ff0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008caa:	e01d      	b.n	8008ce8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	7bfa      	ldrb	r2, [r7, #15]
 8008cb0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f002 fb49 	bl	800b350 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fa44 	bl	800914c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d004      	beq.n	8008cd4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2202      	movs	r2, #2
 8008cce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cd2:	e009      	b.n	8008ce8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cdc:	e004      	b.n	8008ce8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f985 	bl	8008ff0 <USBD_CtlError>
  }
}
 8008ce6:	bf00      	nop
 8008ce8:	bf00      	nop
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	885b      	ldrh	r3, [r3, #2]
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	4b4c      	ldr	r3, [pc, #304]	; (8008e38 <USBD_SetConfig+0x148>)
 8008d06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d08:	4b4b      	ldr	r3, [pc, #300]	; (8008e38 <USBD_SetConfig+0x148>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d905      	bls.n	8008d1c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f96c 	bl	8008ff0 <USBD_CtlError>
    return USBD_FAIL;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e088      	b.n	8008e2e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d002      	beq.n	8008d2e <USBD_SetConfig+0x3e>
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d025      	beq.n	8008d78 <USBD_SetConfig+0x88>
 8008d2c:	e071      	b.n	8008e12 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008d2e:	4b42      	ldr	r3, [pc, #264]	; (8008e38 <USBD_SetConfig+0x148>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d01c      	beq.n	8008d70 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008d36:	4b40      	ldr	r3, [pc, #256]	; (8008e38 <USBD_SetConfig+0x148>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d40:	4b3d      	ldr	r3, [pc, #244]	; (8008e38 <USBD_SetConfig+0x148>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7ff f948 	bl	8007fdc <USBD_SetClassConfig>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d004      	beq.n	8008d60 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f949 	bl	8008ff0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d5e:	e065      	b.n	8008e2c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f9f3 	bl	800914c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2203      	movs	r2, #3
 8008d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d6e:	e05d      	b.n	8008e2c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f9eb 	bl	800914c <USBD_CtlSendStatus>
      break;
 8008d76:	e059      	b.n	8008e2c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d78:	4b2f      	ldr	r3, [pc, #188]	; (8008e38 <USBD_SetConfig+0x148>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d112      	bne.n	8008da6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2202      	movs	r2, #2
 8008d84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008d88:	4b2b      	ldr	r3, [pc, #172]	; (8008e38 <USBD_SetConfig+0x148>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d92:	4b29      	ldr	r3, [pc, #164]	; (8008e38 <USBD_SetConfig+0x148>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff f93b 	bl	8008014 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f9d4 	bl	800914c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008da4:	e042      	b.n	8008e2c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008da6:	4b24      	ldr	r3, [pc, #144]	; (8008e38 <USBD_SetConfig+0x148>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d02a      	beq.n	8008e0a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff f929 	bl	8008014 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008dc2:	4b1d      	ldr	r3, [pc, #116]	; (8008e38 <USBD_SetConfig+0x148>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008dcc:	4b1a      	ldr	r3, [pc, #104]	; (8008e38 <USBD_SetConfig+0x148>)
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff f902 	bl	8007fdc <USBD_SetClassConfig>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00f      	beq.n	8008e02 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f903 	bl	8008ff0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff f90e 	bl	8008014 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008e00:	e014      	b.n	8008e2c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f9a2 	bl	800914c <USBD_CtlSendStatus>
      break;
 8008e08:	e010      	b.n	8008e2c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f99e 	bl	800914c <USBD_CtlSendStatus>
      break;
 8008e10:	e00c      	b.n	8008e2c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f8eb 	bl	8008ff0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e1a:	4b07      	ldr	r3, [pc, #28]	; (8008e38 <USBD_SetConfig+0x148>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff f8f7 	bl	8008014 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008e26:	2303      	movs	r3, #3
 8008e28:	73fb      	strb	r3, [r7, #15]
      break;
 8008e2a:	bf00      	nop
  }

  return ret;
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20000428 	.word	0x20000428

08008e3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	88db      	ldrh	r3, [r3, #6]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d004      	beq.n	8008e58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f8cd 	bl	8008ff0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e56:	e023      	b.n	8008ea0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	dc02      	bgt.n	8008e6a <USBD_GetConfig+0x2e>
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	dc03      	bgt.n	8008e70 <USBD_GetConfig+0x34>
 8008e68:	e015      	b.n	8008e96 <USBD_GetConfig+0x5a>
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d00b      	beq.n	8008e86 <USBD_GetConfig+0x4a>
 8008e6e:	e012      	b.n	8008e96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	3308      	adds	r3, #8
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f927 	bl	80090d2 <USBD_CtlSendData>
        break;
 8008e84:	e00c      	b.n	8008ea0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	3304      	adds	r3, #4
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f91f 	bl	80090d2 <USBD_CtlSendData>
        break;
 8008e94:	e004      	b.n	8008ea0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f8a9 	bl	8008ff0 <USBD_CtlError>
        break;
 8008e9e:	bf00      	nop
}
 8008ea0:	bf00      	nop
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d81e      	bhi.n	8008efe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	88db      	ldrh	r3, [r3, #6]
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d004      	beq.n	8008ed2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f890 	bl	8008ff0 <USBD_CtlError>
        break;
 8008ed0:	e01a      	b.n	8008f08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d005      	beq.n	8008eee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	f043 0202 	orr.w	r2, r3, #2
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	330c      	adds	r3, #12
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f8eb 	bl	80090d2 <USBD_CtlSendData>
      break;
 8008efc:	e004      	b.n	8008f08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 f875 	bl	8008ff0 <USBD_CtlError>
      break;
 8008f06:	bf00      	nop
  }
}
 8008f08:	bf00      	nop
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	885b      	ldrh	r3, [r3, #2]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d106      	bne.n	8008f30 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f90e 	bl	800914c <USBD_CtlSendStatus>
  }
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d80b      	bhi.n	8008f68 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	885b      	ldrh	r3, [r3, #2]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d10c      	bne.n	8008f72 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f8f3 	bl	800914c <USBD_CtlSendStatus>
      }
      break;
 8008f66:	e004      	b.n	8008f72 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f840 	bl	8008ff0 <USBD_CtlError>
      break;
 8008f70:	e000      	b.n	8008f74 <USBD_ClrFeature+0x3c>
      break;
 8008f72:	bf00      	nop
  }
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	781a      	ldrb	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3301      	adds	r3, #1
 8008f96:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	781a      	ldrb	r2, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f7ff fabb 	bl	8008522 <SWAPBYTE>
 8008fac:	4603      	mov	r3, r0
 8008fae:	461a      	mov	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f7ff faae 	bl	8008522 <SWAPBYTE>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	461a      	mov	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f7ff faa1 	bl	8008522 <SWAPBYTE>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	80da      	strh	r2, [r3, #6]
}
 8008fe8:	bf00      	nop
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ffa:	2180      	movs	r1, #128	; 0x80
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f002 f90f 	bl	800b220 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009002:	2100      	movs	r1, #0
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f002 f90b 	bl	800b220 <USBD_LL_StallEP>
}
 800900a:	bf00      	nop
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b086      	sub	sp, #24
 8009016:	af00      	add	r7, sp, #0
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d036      	beq.n	8009096 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800902c:	6938      	ldr	r0, [r7, #16]
 800902e:	f000 f836 	bl	800909e <USBD_GetLen>
 8009032:	4603      	mov	r3, r0
 8009034:	3301      	adds	r3, #1
 8009036:	b29b      	uxth	r3, r3
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	b29a      	uxth	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009040:	7dfb      	ldrb	r3, [r7, #23]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	4413      	add	r3, r2
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	7812      	ldrb	r2, [r2, #0]
 800904a:	701a      	strb	r2, [r3, #0]
  idx++;
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	3301      	adds	r3, #1
 8009050:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	4413      	add	r3, r2
 8009058:	2203      	movs	r2, #3
 800905a:	701a      	strb	r2, [r3, #0]
  idx++;
 800905c:	7dfb      	ldrb	r3, [r7, #23]
 800905e:	3301      	adds	r3, #1
 8009060:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009062:	e013      	b.n	800908c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009064:	7dfb      	ldrb	r3, [r7, #23]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	4413      	add	r3, r2
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	7812      	ldrb	r2, [r2, #0]
 800906e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	3301      	adds	r3, #1
 8009074:	613b      	str	r3, [r7, #16]
    idx++;
 8009076:	7dfb      	ldrb	r3, [r7, #23]
 8009078:	3301      	adds	r3, #1
 800907a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800907c:	7dfb      	ldrb	r3, [r7, #23]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	4413      	add	r3, r2
 8009082:	2200      	movs	r2, #0
 8009084:	701a      	strb	r2, [r3, #0]
    idx++;
 8009086:	7dfb      	ldrb	r3, [r7, #23]
 8009088:	3301      	adds	r3, #1
 800908a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e7      	bne.n	8009064 <USBD_GetString+0x52>
 8009094:	e000      	b.n	8009098 <USBD_GetString+0x86>
    return;
 8009096:	bf00      	nop
  }
}
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800909e:	b480      	push	{r7}
 80090a0:	b085      	sub	sp, #20
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80090ae:	e005      	b.n	80090bc <USBD_GetLen+0x1e>
  {
    len++;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
 80090b2:	3301      	adds	r3, #1
 80090b4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	3301      	adds	r3, #1
 80090ba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1f5      	bne.n	80090b0 <USBD_GetLen+0x12>
  }

  return len;
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	60b9      	str	r1, [r7, #8]
 80090dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2202      	movs	r2, #2
 80090e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	2100      	movs	r1, #0
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f002 f95f 	bl	800b3bc <USBD_LL_Transmit>

  return USBD_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	2100      	movs	r1, #0
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f002 f94e 	bl	800b3bc <USBD_LL_Transmit>

  return USBD_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	60f8      	str	r0, [r7, #12]
 8009132:	60b9      	str	r1, [r7, #8]
 8009134:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	2100      	movs	r1, #0
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f002 f975 	bl	800b42c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2204      	movs	r2, #4
 8009158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800915c:	2300      	movs	r3, #0
 800915e:	2200      	movs	r2, #0
 8009160:	2100      	movs	r1, #0
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f002 f92a 	bl	800b3bc <USBD_LL_Transmit>

  return USBD_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2205      	movs	r2, #5
 800917e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009182:	2300      	movs	r3, #0
 8009184:	2200      	movs	r2, #0
 8009186:	2100      	movs	r1, #0
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f002 f94f 	bl	800b42c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80091a2:	2300      	movs	r3, #0
 80091a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80091a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091aa:	2b84      	cmp	r3, #132	; 0x84
 80091ac:	d005      	beq.n	80091ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80091ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4413      	add	r3, r2
 80091b6:	3303      	adds	r3, #3
 80091b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80091ba:	68fb      	ldr	r3, [r7, #12]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80091cc:	f000 faea 	bl	80097a4 <vTaskStartScheduler>
  
  return osOK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80091d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091d8:	b089      	sub	sp, #36	; 0x24
 80091da:	af04      	add	r7, sp, #16
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d020      	beq.n	800922a <osThreadCreate+0x54>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01c      	beq.n	800922a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685c      	ldr	r4, [r3, #4]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681d      	ldr	r5, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	691e      	ldr	r6, [r3, #16]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff ffc8 	bl	8009198 <makeFreeRtosPriority>
 8009208:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009212:	9202      	str	r2, [sp, #8]
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	9100      	str	r1, [sp, #0]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	4632      	mov	r2, r6
 800921c:	4629      	mov	r1, r5
 800921e:	4620      	mov	r0, r4
 8009220:	f000 f8f8 	bl	8009414 <xTaskCreateStatic>
 8009224:	4603      	mov	r3, r0
 8009226:	60fb      	str	r3, [r7, #12]
 8009228:	e01c      	b.n	8009264 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685c      	ldr	r4, [r3, #4]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009236:	b29e      	uxth	r6, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff ffaa 	bl	8009198 <makeFreeRtosPriority>
 8009244:	4602      	mov	r2, r0
 8009246:	f107 030c 	add.w	r3, r7, #12
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	9200      	str	r2, [sp, #0]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	4632      	mov	r2, r6
 8009252:	4629      	mov	r1, r5
 8009254:	4620      	mov	r0, r4
 8009256:	f000 f93a 	bl	80094ce <xTaskCreate>
 800925a:	4603      	mov	r3, r0
 800925c:	2b01      	cmp	r3, #1
 800925e:	d001      	beq.n	8009264 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009260:	2300      	movs	r3, #0
 8009262:	e000      	b.n	8009266 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009264:	68fb      	ldr	r3, [r7, #12]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800926e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <osDelay+0x16>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	e000      	b.n	8009286 <osDelay+0x18>
 8009284:	2301      	movs	r3, #1
 8009286:	4618      	mov	r0, r3
 8009288:	f000 fa58 	bl	800973c <vTaskDelay>
  
  return osOK;
 800928c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800929a:	f000 fd77 	bl	8009d8c <xTaskGetSchedulerState>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d001      	beq.n	80092a8 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80092a4:	f000 ffb8 	bl	800a218 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80092a8:	bf00      	nop
 80092aa:	bd80      	pop	{r7, pc}

080092ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f103 0208 	add.w	r2, r3, #8
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f04f 32ff 	mov.w	r2, #4294967295
 80092c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f103 0208 	add.w	r2, r3, #8
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f103 0208 	add.w	r2, r3, #8
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80092fa:	bf00      	nop
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009306:	b480      	push	{r7}
 8009308:	b085      	sub	sp, #20
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	689a      	ldr	r2, [r3, #8]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	1c5a      	adds	r2, r3, #1
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	601a      	str	r2, [r3, #0]
}
 8009342:	bf00      	nop
 8009344:	3714      	adds	r7, #20
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800934e:	b480      	push	{r7}
 8009350:	b085      	sub	sp, #20
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009364:	d103      	bne.n	800936e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	e00c      	b.n	8009388 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	3308      	adds	r3, #8
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	e002      	b.n	800937c <vListInsert+0x2e>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	429a      	cmp	r2, r3
 8009386:	d2f6      	bcs.n	8009376 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	683a      	ldr	r2, [r7, #0]
 8009396:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	1c5a      	adds	r2, r3, #1
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	601a      	str	r2, [r3, #0]
}
 80093b4:	bf00      	nop
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	6892      	ldr	r2, [r2, #8]
 80093d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	6852      	ldr	r2, [r2, #4]
 80093e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d103      	bne.n	80093f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	689a      	ldr	r2, [r3, #8]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	1e5a      	subs	r2, r3, #1
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08e      	sub	sp, #56	; 0x38
 8009418:	af04      	add	r7, sp, #16
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10a      	bne.n	800943e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800943a:	bf00      	nop
 800943c:	e7fe      	b.n	800943c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10a      	bne.n	800945a <xTaskCreateStatic+0x46>
	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	61fb      	str	r3, [r7, #28]
}
 8009456:	bf00      	nop
 8009458:	e7fe      	b.n	8009458 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800945a:	2354      	movs	r3, #84	; 0x54
 800945c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	2b54      	cmp	r3, #84	; 0x54
 8009462:	d00a      	beq.n	800947a <xTaskCreateStatic+0x66>
	__asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	61bb      	str	r3, [r7, #24]
}
 8009476:	bf00      	nop
 8009478:	e7fe      	b.n	8009478 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800947a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	2b00      	cmp	r3, #0
 8009480:	d01e      	beq.n	80094c0 <xTaskCreateStatic+0xac>
 8009482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009484:	2b00      	cmp	r3, #0
 8009486:	d01b      	beq.n	80094c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009490:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	2202      	movs	r2, #2
 8009496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800949a:	2300      	movs	r3, #0
 800949c:	9303      	str	r3, [sp, #12]
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	9302      	str	r3, [sp, #8]
 80094a2:	f107 0314 	add.w	r3, r7, #20
 80094a6:	9301      	str	r3, [sp, #4]
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	68b9      	ldr	r1, [r7, #8]
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 f850 	bl	8009558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094ba:	f000 f8d5 	bl	8009668 <prvAddNewTaskToReadyList>
 80094be:	e001      	b.n	80094c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80094c0:	2300      	movs	r3, #0
 80094c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80094c4:	697b      	ldr	r3, [r7, #20]
	}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3728      	adds	r7, #40	; 0x28
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b08c      	sub	sp, #48	; 0x30
 80094d2:	af04      	add	r7, sp, #16
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	603b      	str	r3, [r7, #0]
 80094da:	4613      	mov	r3, r2
 80094dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80094de:	88fb      	ldrh	r3, [r7, #6]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 fee8 	bl	800a2b8 <pvPortMalloc>
 80094e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00e      	beq.n	800950e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80094f0:	2054      	movs	r0, #84	; 0x54
 80094f2:	f000 fee1 	bl	800a2b8 <pvPortMalloc>
 80094f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	631a      	str	r2, [r3, #48]	; 0x30
 8009504:	e005      	b.n	8009512 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009506:	6978      	ldr	r0, [r7, #20]
 8009508:	f000 ffa2 	bl	800a450 <vPortFree>
 800950c:	e001      	b.n	8009512 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800950e:	2300      	movs	r3, #0
 8009510:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d017      	beq.n	8009548 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009520:	88fa      	ldrh	r2, [r7, #6]
 8009522:	2300      	movs	r3, #0
 8009524:	9303      	str	r3, [sp, #12]
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	9302      	str	r3, [sp, #8]
 800952a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952c:	9301      	str	r3, [sp, #4]
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	68b9      	ldr	r1, [r7, #8]
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 f80e 	bl	8009558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800953c:	69f8      	ldr	r0, [r7, #28]
 800953e:	f000 f893 	bl	8009668 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009542:	2301      	movs	r3, #1
 8009544:	61bb      	str	r3, [r7, #24]
 8009546:	e002      	b.n	800954e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009548:	f04f 33ff 	mov.w	r3, #4294967295
 800954c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800954e:	69bb      	ldr	r3, [r7, #24]
	}
 8009550:	4618      	mov	r0, r3
 8009552:	3720      	adds	r7, #32
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
 8009564:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009570:	3b01      	subs	r3, #1
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	f023 0307 	bic.w	r3, r3, #7
 800957e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	617b      	str	r3, [r7, #20]
}
 800959c:	bf00      	nop
 800959e:	e7fe      	b.n	800959e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d01f      	beq.n	80095e6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095a6:	2300      	movs	r3, #0
 80095a8:	61fb      	str	r3, [r7, #28]
 80095aa:	e012      	b.n	80095d2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	4413      	add	r3, r2
 80095b2:	7819      	ldrb	r1, [r3, #0]
 80095b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	4413      	add	r3, r2
 80095ba:	3334      	adds	r3, #52	; 0x34
 80095bc:	460a      	mov	r2, r1
 80095be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	4413      	add	r3, r2
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d006      	beq.n	80095da <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	3301      	adds	r3, #1
 80095d0:	61fb      	str	r3, [r7, #28]
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	2b0f      	cmp	r3, #15
 80095d6:	d9e9      	bls.n	80095ac <prvInitialiseNewTask+0x54>
 80095d8:	e000      	b.n	80095dc <prvInitialiseNewTask+0x84>
			{
				break;
 80095da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095e4:	e003      	b.n	80095ee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80095ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f0:	2b06      	cmp	r3, #6
 80095f2:	d901      	bls.n	80095f8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80095f4:	2306      	movs	r3, #6
 80095f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80095f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009602:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009606:	2200      	movs	r2, #0
 8009608:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800960a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960c:	3304      	adds	r3, #4
 800960e:	4618      	mov	r0, r3
 8009610:	f7ff fe6c 	bl	80092ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	3318      	adds	r3, #24
 8009618:	4618      	mov	r0, r3
 800961a:	f7ff fe67 	bl	80092ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800961e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009622:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	f1c3 0207 	rsb	r2, r3, #7
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009632:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009636:	2200      	movs	r2, #0
 8009638:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800963a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	68f9      	ldr	r1, [r7, #12]
 8009646:	69b8      	ldr	r0, [r7, #24]
 8009648:	f000 fc24 	bl	8009e94 <pxPortInitialiseStack>
 800964c:	4602      	mov	r2, r0
 800964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009650:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800965c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800965e:	bf00      	nop
 8009660:	3720      	adds	r7, #32
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
	...

08009668 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009670:	f000 fd40 	bl	800a0f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009674:	4b2a      	ldr	r3, [pc, #168]	; (8009720 <prvAddNewTaskToReadyList+0xb8>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3301      	adds	r3, #1
 800967a:	4a29      	ldr	r2, [pc, #164]	; (8009720 <prvAddNewTaskToReadyList+0xb8>)
 800967c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800967e:	4b29      	ldr	r3, [pc, #164]	; (8009724 <prvAddNewTaskToReadyList+0xbc>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d109      	bne.n	800969a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009686:	4a27      	ldr	r2, [pc, #156]	; (8009724 <prvAddNewTaskToReadyList+0xbc>)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800968c:	4b24      	ldr	r3, [pc, #144]	; (8009720 <prvAddNewTaskToReadyList+0xb8>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d110      	bne.n	80096b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009694:	f000 fabc 	bl	8009c10 <prvInitialiseTaskLists>
 8009698:	e00d      	b.n	80096b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800969a:	4b23      	ldr	r3, [pc, #140]	; (8009728 <prvAddNewTaskToReadyList+0xc0>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d109      	bne.n	80096b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80096a2:	4b20      	ldr	r3, [pc, #128]	; (8009724 <prvAddNewTaskToReadyList+0xbc>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d802      	bhi.n	80096b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80096b0:	4a1c      	ldr	r2, [pc, #112]	; (8009724 <prvAddNewTaskToReadyList+0xbc>)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80096b6:	4b1d      	ldr	r3, [pc, #116]	; (800972c <prvAddNewTaskToReadyList+0xc4>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	3301      	adds	r3, #1
 80096bc:	4a1b      	ldr	r2, [pc, #108]	; (800972c <prvAddNewTaskToReadyList+0xc4>)
 80096be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c4:	2201      	movs	r2, #1
 80096c6:	409a      	lsls	r2, r3
 80096c8:	4b19      	ldr	r3, [pc, #100]	; (8009730 <prvAddNewTaskToReadyList+0xc8>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	4a18      	ldr	r2, [pc, #96]	; (8009730 <prvAddNewTaskToReadyList+0xc8>)
 80096d0:	6013      	str	r3, [r2, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4a15      	ldr	r2, [pc, #84]	; (8009734 <prvAddNewTaskToReadyList+0xcc>)
 80096e0:	441a      	add	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3304      	adds	r3, #4
 80096e6:	4619      	mov	r1, r3
 80096e8:	4610      	mov	r0, r2
 80096ea:	f7ff fe0c 	bl	8009306 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80096ee:	f000 fd31 	bl	800a154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80096f2:	4b0d      	ldr	r3, [pc, #52]	; (8009728 <prvAddNewTaskToReadyList+0xc0>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00e      	beq.n	8009718 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096fa:	4b0a      	ldr	r3, [pc, #40]	; (8009724 <prvAddNewTaskToReadyList+0xbc>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	429a      	cmp	r2, r3
 8009706:	d207      	bcs.n	8009718 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009708:	4b0b      	ldr	r3, [pc, #44]	; (8009738 <prvAddNewTaskToReadyList+0xd0>)
 800970a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800970e:	601a      	str	r2, [r3, #0]
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009718:	bf00      	nop
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	2000052c 	.word	0x2000052c
 8009724:	2000042c 	.word	0x2000042c
 8009728:	20000538 	.word	0x20000538
 800972c:	20000548 	.word	0x20000548
 8009730:	20000534 	.word	0x20000534
 8009734:	20000430 	.word	0x20000430
 8009738:	e000ed04 	.word	0xe000ed04

0800973c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009744:	2300      	movs	r3, #0
 8009746:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d017      	beq.n	800977e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800974e:	4b13      	ldr	r3, [pc, #76]	; (800979c <vTaskDelay+0x60>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00a      	beq.n	800976c <vTaskDelay+0x30>
	__asm volatile
 8009756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	60bb      	str	r3, [r7, #8]
}
 8009768:	bf00      	nop
 800976a:	e7fe      	b.n	800976a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800976c:	f000 f87a 	bl	8009864 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009770:	2100      	movs	r1, #0
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fb28 	bl	8009dc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009778:	f000 f882 	bl	8009880 <xTaskResumeAll>
 800977c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d107      	bne.n	8009794 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009784:	4b06      	ldr	r3, [pc, #24]	; (80097a0 <vTaskDelay+0x64>)
 8009786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800978a:	601a      	str	r2, [r3, #0]
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009794:	bf00      	nop
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	20000554 	.word	0x20000554
 80097a0:	e000ed04 	.word	0xe000ed04

080097a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b08a      	sub	sp, #40	; 0x28
 80097a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80097ae:	2300      	movs	r3, #0
 80097b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80097b2:	463a      	mov	r2, r7
 80097b4:	1d39      	adds	r1, r7, #4
 80097b6:	f107 0308 	add.w	r3, r7, #8
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7f6 fd08 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	9202      	str	r2, [sp, #8]
 80097c8:	9301      	str	r3, [sp, #4]
 80097ca:	2300      	movs	r3, #0
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	2300      	movs	r3, #0
 80097d0:	460a      	mov	r2, r1
 80097d2:	491e      	ldr	r1, [pc, #120]	; (800984c <vTaskStartScheduler+0xa8>)
 80097d4:	481e      	ldr	r0, [pc, #120]	; (8009850 <vTaskStartScheduler+0xac>)
 80097d6:	f7ff fe1d 	bl	8009414 <xTaskCreateStatic>
 80097da:	4603      	mov	r3, r0
 80097dc:	4a1d      	ldr	r2, [pc, #116]	; (8009854 <vTaskStartScheduler+0xb0>)
 80097de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80097e0:	4b1c      	ldr	r3, [pc, #112]	; (8009854 <vTaskStartScheduler+0xb0>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80097e8:	2301      	movs	r3, #1
 80097ea:	617b      	str	r3, [r7, #20]
 80097ec:	e001      	b.n	80097f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80097ee:	2300      	movs	r3, #0
 80097f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d116      	bne.n	8009826 <vTaskStartScheduler+0x82>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	613b      	str	r3, [r7, #16]
}
 800980a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800980c:	4b12      	ldr	r3, [pc, #72]	; (8009858 <vTaskStartScheduler+0xb4>)
 800980e:	f04f 32ff 	mov.w	r2, #4294967295
 8009812:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009814:	4b11      	ldr	r3, [pc, #68]	; (800985c <vTaskStartScheduler+0xb8>)
 8009816:	2201      	movs	r2, #1
 8009818:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800981a:	4b11      	ldr	r3, [pc, #68]	; (8009860 <vTaskStartScheduler+0xbc>)
 800981c:	2200      	movs	r2, #0
 800981e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009820:	f000 fbc6 	bl	8009fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009824:	e00e      	b.n	8009844 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982c:	d10a      	bne.n	8009844 <vTaskStartScheduler+0xa0>
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	60fb      	str	r3, [r7, #12]
}
 8009840:	bf00      	nop
 8009842:	e7fe      	b.n	8009842 <vTaskStartScheduler+0x9e>
}
 8009844:	bf00      	nop
 8009846:	3718      	adds	r7, #24
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	0800b5b8 	.word	0x0800b5b8
 8009850:	08009be1 	.word	0x08009be1
 8009854:	20000550 	.word	0x20000550
 8009858:	2000054c 	.word	0x2000054c
 800985c:	20000538 	.word	0x20000538
 8009860:	20000530 	.word	0x20000530

08009864 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009864:	b480      	push	{r7}
 8009866:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009868:	4b04      	ldr	r3, [pc, #16]	; (800987c <vTaskSuspendAll+0x18>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	3301      	adds	r3, #1
 800986e:	4a03      	ldr	r2, [pc, #12]	; (800987c <vTaskSuspendAll+0x18>)
 8009870:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009872:	bf00      	nop
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr
 800987c:	20000554 	.word	0x20000554

08009880 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009886:	2300      	movs	r3, #0
 8009888:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800988a:	2300      	movs	r3, #0
 800988c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800988e:	4b41      	ldr	r3, [pc, #260]	; (8009994 <xTaskResumeAll+0x114>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10a      	bne.n	80098ac <xTaskResumeAll+0x2c>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	603b      	str	r3, [r7, #0]
}
 80098a8:	bf00      	nop
 80098aa:	e7fe      	b.n	80098aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80098ac:	f000 fc22 	bl	800a0f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80098b0:	4b38      	ldr	r3, [pc, #224]	; (8009994 <xTaskResumeAll+0x114>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	4a37      	ldr	r2, [pc, #220]	; (8009994 <xTaskResumeAll+0x114>)
 80098b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098ba:	4b36      	ldr	r3, [pc, #216]	; (8009994 <xTaskResumeAll+0x114>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d161      	bne.n	8009986 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80098c2:	4b35      	ldr	r3, [pc, #212]	; (8009998 <xTaskResumeAll+0x118>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d05d      	beq.n	8009986 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098ca:	e02e      	b.n	800992a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098cc:	4b33      	ldr	r3, [pc, #204]	; (800999c <xTaskResumeAll+0x11c>)
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	3318      	adds	r3, #24
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff fd71 	bl	80093c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	3304      	adds	r3, #4
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7ff fd6c 	bl	80093c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ec:	2201      	movs	r2, #1
 80098ee:	409a      	lsls	r2, r3
 80098f0:	4b2b      	ldr	r3, [pc, #172]	; (80099a0 <xTaskResumeAll+0x120>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	4a2a      	ldr	r2, [pc, #168]	; (80099a0 <xTaskResumeAll+0x120>)
 80098f8:	6013      	str	r3, [r2, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098fe:	4613      	mov	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4a27      	ldr	r2, [pc, #156]	; (80099a4 <xTaskResumeAll+0x124>)
 8009908:	441a      	add	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3304      	adds	r3, #4
 800990e:	4619      	mov	r1, r3
 8009910:	4610      	mov	r0, r2
 8009912:	f7ff fcf8 	bl	8009306 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800991a:	4b23      	ldr	r3, [pc, #140]	; (80099a8 <xTaskResumeAll+0x128>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009920:	429a      	cmp	r2, r3
 8009922:	d302      	bcc.n	800992a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009924:	4b21      	ldr	r3, [pc, #132]	; (80099ac <xTaskResumeAll+0x12c>)
 8009926:	2201      	movs	r2, #1
 8009928:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800992a:	4b1c      	ldr	r3, [pc, #112]	; (800999c <xTaskResumeAll+0x11c>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1cc      	bne.n	80098cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009938:	f000 fa08 	bl	8009d4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800993c:	4b1c      	ldr	r3, [pc, #112]	; (80099b0 <xTaskResumeAll+0x130>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d010      	beq.n	800996a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009948:	f000 f836 	bl	80099b8 <xTaskIncrementTick>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009952:	4b16      	ldr	r3, [pc, #88]	; (80099ac <xTaskResumeAll+0x12c>)
 8009954:	2201      	movs	r2, #1
 8009956:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3b01      	subs	r3, #1
 800995c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1f1      	bne.n	8009948 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009964:	4b12      	ldr	r3, [pc, #72]	; (80099b0 <xTaskResumeAll+0x130>)
 8009966:	2200      	movs	r2, #0
 8009968:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800996a:	4b10      	ldr	r3, [pc, #64]	; (80099ac <xTaskResumeAll+0x12c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d009      	beq.n	8009986 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009972:	2301      	movs	r3, #1
 8009974:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009976:	4b0f      	ldr	r3, [pc, #60]	; (80099b4 <xTaskResumeAll+0x134>)
 8009978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009986:	f000 fbe5 	bl	800a154 <vPortExitCritical>

	return xAlreadyYielded;
 800998a:	68bb      	ldr	r3, [r7, #8]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	20000554 	.word	0x20000554
 8009998:	2000052c 	.word	0x2000052c
 800999c:	200004ec 	.word	0x200004ec
 80099a0:	20000534 	.word	0x20000534
 80099a4:	20000430 	.word	0x20000430
 80099a8:	2000042c 	.word	0x2000042c
 80099ac:	20000540 	.word	0x20000540
 80099b0:	2000053c 	.word	0x2000053c
 80099b4:	e000ed04 	.word	0xe000ed04

080099b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80099be:	2300      	movs	r3, #0
 80099c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099c2:	4b4e      	ldr	r3, [pc, #312]	; (8009afc <xTaskIncrementTick+0x144>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f040 808e 	bne.w	8009ae8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099cc:	4b4c      	ldr	r3, [pc, #304]	; (8009b00 <xTaskIncrementTick+0x148>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	3301      	adds	r3, #1
 80099d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80099d4:	4a4a      	ldr	r2, [pc, #296]	; (8009b00 <xTaskIncrementTick+0x148>)
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d120      	bne.n	8009a22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80099e0:	4b48      	ldr	r3, [pc, #288]	; (8009b04 <xTaskIncrementTick+0x14c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00a      	beq.n	8009a00 <xTaskIncrementTick+0x48>
	__asm volatile
 80099ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	603b      	str	r3, [r7, #0]
}
 80099fc:	bf00      	nop
 80099fe:	e7fe      	b.n	80099fe <xTaskIncrementTick+0x46>
 8009a00:	4b40      	ldr	r3, [pc, #256]	; (8009b04 <xTaskIncrementTick+0x14c>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	60fb      	str	r3, [r7, #12]
 8009a06:	4b40      	ldr	r3, [pc, #256]	; (8009b08 <xTaskIncrementTick+0x150>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a3e      	ldr	r2, [pc, #248]	; (8009b04 <xTaskIncrementTick+0x14c>)
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	4a3e      	ldr	r2, [pc, #248]	; (8009b08 <xTaskIncrementTick+0x150>)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	4b3d      	ldr	r3, [pc, #244]	; (8009b0c <xTaskIncrementTick+0x154>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	4a3c      	ldr	r2, [pc, #240]	; (8009b0c <xTaskIncrementTick+0x154>)
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	f000 f995 	bl	8009d4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a22:	4b3b      	ldr	r3, [pc, #236]	; (8009b10 <xTaskIncrementTick+0x158>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d348      	bcc.n	8009abe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a2c:	4b35      	ldr	r3, [pc, #212]	; (8009b04 <xTaskIncrementTick+0x14c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d104      	bne.n	8009a40 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a36:	4b36      	ldr	r3, [pc, #216]	; (8009b10 <xTaskIncrementTick+0x158>)
 8009a38:	f04f 32ff 	mov.w	r2, #4294967295
 8009a3c:	601a      	str	r2, [r3, #0]
					break;
 8009a3e:	e03e      	b.n	8009abe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a40:	4b30      	ldr	r3, [pc, #192]	; (8009b04 <xTaskIncrementTick+0x14c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d203      	bcs.n	8009a60 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a58:	4a2d      	ldr	r2, [pc, #180]	; (8009b10 <xTaskIncrementTick+0x158>)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a5e:	e02e      	b.n	8009abe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	3304      	adds	r3, #4
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7ff fcab 	bl	80093c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d004      	beq.n	8009a7c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	3318      	adds	r3, #24
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7ff fca2 	bl	80093c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	2201      	movs	r2, #1
 8009a82:	409a      	lsls	r2, r3
 8009a84:	4b23      	ldr	r3, [pc, #140]	; (8009b14 <xTaskIncrementTick+0x15c>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	4a22      	ldr	r2, [pc, #136]	; (8009b14 <xTaskIncrementTick+0x15c>)
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a92:	4613      	mov	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4a1f      	ldr	r2, [pc, #124]	; (8009b18 <xTaskIncrementTick+0x160>)
 8009a9c:	441a      	add	r2, r3
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f7ff fc2e 	bl	8009306 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aae:	4b1b      	ldr	r3, [pc, #108]	; (8009b1c <xTaskIncrementTick+0x164>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d3b9      	bcc.n	8009a2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009abc:	e7b6      	b.n	8009a2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009abe:	4b17      	ldr	r3, [pc, #92]	; (8009b1c <xTaskIncrementTick+0x164>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac4:	4914      	ldr	r1, [pc, #80]	; (8009b18 <xTaskIncrementTick+0x160>)
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	440b      	add	r3, r1
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d901      	bls.n	8009ada <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ada:	4b11      	ldr	r3, [pc, #68]	; (8009b20 <xTaskIncrementTick+0x168>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d007      	beq.n	8009af2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	617b      	str	r3, [r7, #20]
 8009ae6:	e004      	b.n	8009af2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ae8:	4b0e      	ldr	r3, [pc, #56]	; (8009b24 <xTaskIncrementTick+0x16c>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3301      	adds	r3, #1
 8009aee:	4a0d      	ldr	r2, [pc, #52]	; (8009b24 <xTaskIncrementTick+0x16c>)
 8009af0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009af2:	697b      	ldr	r3, [r7, #20]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	20000554 	.word	0x20000554
 8009b00:	20000530 	.word	0x20000530
 8009b04:	200004e4 	.word	0x200004e4
 8009b08:	200004e8 	.word	0x200004e8
 8009b0c:	20000544 	.word	0x20000544
 8009b10:	2000054c 	.word	0x2000054c
 8009b14:	20000534 	.word	0x20000534
 8009b18:	20000430 	.word	0x20000430
 8009b1c:	2000042c 	.word	0x2000042c
 8009b20:	20000540 	.word	0x20000540
 8009b24:	2000053c 	.word	0x2000053c

08009b28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b2e:	4b27      	ldr	r3, [pc, #156]	; (8009bcc <vTaskSwitchContext+0xa4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b36:	4b26      	ldr	r3, [pc, #152]	; (8009bd0 <vTaskSwitchContext+0xa8>)
 8009b38:	2201      	movs	r2, #1
 8009b3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b3c:	e03f      	b.n	8009bbe <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009b3e:	4b24      	ldr	r3, [pc, #144]	; (8009bd0 <vTaskSwitchContext+0xa8>)
 8009b40:	2200      	movs	r2, #0
 8009b42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b44:	4b23      	ldr	r3, [pc, #140]	; (8009bd4 <vTaskSwitchContext+0xac>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	fab3 f383 	clz	r3, r3
 8009b50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009b52:	7afb      	ldrb	r3, [r7, #11]
 8009b54:	f1c3 031f 	rsb	r3, r3, #31
 8009b58:	617b      	str	r3, [r7, #20]
 8009b5a:	491f      	ldr	r1, [pc, #124]	; (8009bd8 <vTaskSwitchContext+0xb0>)
 8009b5c:	697a      	ldr	r2, [r7, #20]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	440b      	add	r3, r1
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10a      	bne.n	8009b84 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	607b      	str	r3, [r7, #4]
}
 8009b80:	bf00      	nop
 8009b82:	e7fe      	b.n	8009b82 <vTaskSwitchContext+0x5a>
 8009b84:	697a      	ldr	r2, [r7, #20]
 8009b86:	4613      	mov	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4a12      	ldr	r2, [pc, #72]	; (8009bd8 <vTaskSwitchContext+0xb0>)
 8009b90:	4413      	add	r3, r2
 8009b92:	613b      	str	r3, [r7, #16]
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	685a      	ldr	r2, [r3, #4]
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	605a      	str	r2, [r3, #4]
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	685a      	ldr	r2, [r3, #4]
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	3308      	adds	r3, #8
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d104      	bne.n	8009bb4 <vTaskSwitchContext+0x8c>
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	605a      	str	r2, [r3, #4]
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	4a08      	ldr	r2, [pc, #32]	; (8009bdc <vTaskSwitchContext+0xb4>)
 8009bbc:	6013      	str	r3, [r2, #0]
}
 8009bbe:	bf00      	nop
 8009bc0:	371c      	adds	r7, #28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	20000554 	.word	0x20000554
 8009bd0:	20000540 	.word	0x20000540
 8009bd4:	20000534 	.word	0x20000534
 8009bd8:	20000430 	.word	0x20000430
 8009bdc:	2000042c 	.word	0x2000042c

08009be0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009be8:	f000 f852 	bl	8009c90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bec:	4b06      	ldr	r3, [pc, #24]	; (8009c08 <prvIdleTask+0x28>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d9f9      	bls.n	8009be8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009bf4:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <prvIdleTask+0x2c>)
 8009bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c04:	e7f0      	b.n	8009be8 <prvIdleTask+0x8>
 8009c06:	bf00      	nop
 8009c08:	20000430 	.word	0x20000430
 8009c0c:	e000ed04 	.word	0xe000ed04

08009c10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c16:	2300      	movs	r3, #0
 8009c18:	607b      	str	r3, [r7, #4]
 8009c1a:	e00c      	b.n	8009c36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4a12      	ldr	r2, [pc, #72]	; (8009c70 <prvInitialiseTaskLists+0x60>)
 8009c28:	4413      	add	r3, r2
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7ff fb3e 	bl	80092ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3301      	adds	r3, #1
 8009c34:	607b      	str	r3, [r7, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b06      	cmp	r3, #6
 8009c3a:	d9ef      	bls.n	8009c1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c3c:	480d      	ldr	r0, [pc, #52]	; (8009c74 <prvInitialiseTaskLists+0x64>)
 8009c3e:	f7ff fb35 	bl	80092ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c42:	480d      	ldr	r0, [pc, #52]	; (8009c78 <prvInitialiseTaskLists+0x68>)
 8009c44:	f7ff fb32 	bl	80092ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c48:	480c      	ldr	r0, [pc, #48]	; (8009c7c <prvInitialiseTaskLists+0x6c>)
 8009c4a:	f7ff fb2f 	bl	80092ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c4e:	480c      	ldr	r0, [pc, #48]	; (8009c80 <prvInitialiseTaskLists+0x70>)
 8009c50:	f7ff fb2c 	bl	80092ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c54:	480b      	ldr	r0, [pc, #44]	; (8009c84 <prvInitialiseTaskLists+0x74>)
 8009c56:	f7ff fb29 	bl	80092ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c5a:	4b0b      	ldr	r3, [pc, #44]	; (8009c88 <prvInitialiseTaskLists+0x78>)
 8009c5c:	4a05      	ldr	r2, [pc, #20]	; (8009c74 <prvInitialiseTaskLists+0x64>)
 8009c5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c60:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <prvInitialiseTaskLists+0x7c>)
 8009c62:	4a05      	ldr	r2, [pc, #20]	; (8009c78 <prvInitialiseTaskLists+0x68>)
 8009c64:	601a      	str	r2, [r3, #0]
}
 8009c66:	bf00      	nop
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20000430 	.word	0x20000430
 8009c74:	200004bc 	.word	0x200004bc
 8009c78:	200004d0 	.word	0x200004d0
 8009c7c:	200004ec 	.word	0x200004ec
 8009c80:	20000500 	.word	0x20000500
 8009c84:	20000518 	.word	0x20000518
 8009c88:	200004e4 	.word	0x200004e4
 8009c8c:	200004e8 	.word	0x200004e8

08009c90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c96:	e019      	b.n	8009ccc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c98:	f000 fa2c 	bl	800a0f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c9c:	4b10      	ldr	r3, [pc, #64]	; (8009ce0 <prvCheckTasksWaitingTermination+0x50>)
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff fb89 	bl	80093c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cae:	4b0d      	ldr	r3, [pc, #52]	; (8009ce4 <prvCheckTasksWaitingTermination+0x54>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	4a0b      	ldr	r2, [pc, #44]	; (8009ce4 <prvCheckTasksWaitingTermination+0x54>)
 8009cb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cb8:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <prvCheckTasksWaitingTermination+0x58>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	4a0a      	ldr	r2, [pc, #40]	; (8009ce8 <prvCheckTasksWaitingTermination+0x58>)
 8009cc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cc2:	f000 fa47 	bl	800a154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f810 	bl	8009cec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ccc:	4b06      	ldr	r3, [pc, #24]	; (8009ce8 <prvCheckTasksWaitingTermination+0x58>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1e1      	bne.n	8009c98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	20000500 	.word	0x20000500
 8009ce4:	2000052c 	.word	0x2000052c
 8009ce8:	20000514 	.word	0x20000514

08009cec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d108      	bne.n	8009d10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 fba4 	bl	800a450 <vPortFree>
				vPortFree( pxTCB );
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fba1 	bl	800a450 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d0e:	e018      	b.n	8009d42 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d103      	bne.n	8009d22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fb98 	bl	800a450 <vPortFree>
	}
 8009d20:	e00f      	b.n	8009d42 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d00a      	beq.n	8009d42 <prvDeleteTCB+0x56>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	60fb      	str	r3, [r7, #12]
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <prvDeleteTCB+0x54>
	}
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
	...

08009d4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d52:	4b0c      	ldr	r3, [pc, #48]	; (8009d84 <prvResetNextTaskUnblockTime+0x38>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d104      	bne.n	8009d66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d5c:	4b0a      	ldr	r3, [pc, #40]	; (8009d88 <prvResetNextTaskUnblockTime+0x3c>)
 8009d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d64:	e008      	b.n	8009d78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d66:	4b07      	ldr	r3, [pc, #28]	; (8009d84 <prvResetNextTaskUnblockTime+0x38>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	4a04      	ldr	r2, [pc, #16]	; (8009d88 <prvResetNextTaskUnblockTime+0x3c>)
 8009d76:	6013      	str	r3, [r2, #0]
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	200004e4 	.word	0x200004e4
 8009d88:	2000054c 	.word	0x2000054c

08009d8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d92:	4b0b      	ldr	r3, [pc, #44]	; (8009dc0 <xTaskGetSchedulerState+0x34>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d102      	bne.n	8009da0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	607b      	str	r3, [r7, #4]
 8009d9e:	e008      	b.n	8009db2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009da0:	4b08      	ldr	r3, [pc, #32]	; (8009dc4 <xTaskGetSchedulerState+0x38>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d102      	bne.n	8009dae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009da8:	2302      	movs	r3, #2
 8009daa:	607b      	str	r3, [r7, #4]
 8009dac:	e001      	b.n	8009db2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009dae:	2300      	movs	r3, #0
 8009db0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009db2:	687b      	ldr	r3, [r7, #4]
	}
 8009db4:	4618      	mov	r0, r3
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	20000538 	.word	0x20000538
 8009dc4:	20000554 	.word	0x20000554

08009dc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009dd2:	4b29      	ldr	r3, [pc, #164]	; (8009e78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dd8:	4b28      	ldr	r3, [pc, #160]	; (8009e7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7ff faee 	bl	80093c0 <uxListRemove>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10b      	bne.n	8009e02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009dea:	4b24      	ldr	r3, [pc, #144]	; (8009e7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df0:	2201      	movs	r2, #1
 8009df2:	fa02 f303 	lsl.w	r3, r2, r3
 8009df6:	43da      	mvns	r2, r3
 8009df8:	4b21      	ldr	r3, [pc, #132]	; (8009e80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	4a20      	ldr	r2, [pc, #128]	; (8009e80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e08:	d10a      	bne.n	8009e20 <prvAddCurrentTaskToDelayedList+0x58>
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d007      	beq.n	8009e20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e10:	4b1a      	ldr	r3, [pc, #104]	; (8009e7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3304      	adds	r3, #4
 8009e16:	4619      	mov	r1, r3
 8009e18:	481a      	ldr	r0, [pc, #104]	; (8009e84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009e1a:	f7ff fa74 	bl	8009306 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e1e:	e026      	b.n	8009e6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4413      	add	r3, r2
 8009e26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e28:	4b14      	ldr	r3, [pc, #80]	; (8009e7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d209      	bcs.n	8009e4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e38:	4b13      	ldr	r3, [pc, #76]	; (8009e88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	4b0f      	ldr	r3, [pc, #60]	; (8009e7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	3304      	adds	r3, #4
 8009e42:	4619      	mov	r1, r3
 8009e44:	4610      	mov	r0, r2
 8009e46:	f7ff fa82 	bl	800934e <vListInsert>
}
 8009e4a:	e010      	b.n	8009e6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e4c:	4b0f      	ldr	r3, [pc, #60]	; (8009e8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	4b0a      	ldr	r3, [pc, #40]	; (8009e7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3304      	adds	r3, #4
 8009e56:	4619      	mov	r1, r3
 8009e58:	4610      	mov	r0, r2
 8009e5a:	f7ff fa78 	bl	800934e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e5e:	4b0c      	ldr	r3, [pc, #48]	; (8009e90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d202      	bcs.n	8009e6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009e68:	4a09      	ldr	r2, [pc, #36]	; (8009e90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	6013      	str	r3, [r2, #0]
}
 8009e6e:	bf00      	nop
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	20000530 	.word	0x20000530
 8009e7c:	2000042c 	.word	0x2000042c
 8009e80:	20000534 	.word	0x20000534
 8009e84:	20000518 	.word	0x20000518
 8009e88:	200004e8 	.word	0x200004e8
 8009e8c:	200004e4 	.word	0x200004e4
 8009e90:	2000054c 	.word	0x2000054c

08009e94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	3b04      	subs	r3, #4
 8009ea4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3b04      	subs	r3, #4
 8009eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	f023 0201 	bic.w	r2, r3, #1
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3b04      	subs	r3, #4
 8009ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ec4:	4a0c      	ldr	r2, [pc, #48]	; (8009ef8 <pxPortInitialiseStack+0x64>)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3b14      	subs	r3, #20
 8009ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3b04      	subs	r3, #4
 8009eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f06f 0202 	mvn.w	r2, #2
 8009ee2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	3b20      	subs	r3, #32
 8009ee8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009eea:	68fb      	ldr	r3, [r7, #12]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3714      	adds	r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	08009efd 	.word	0x08009efd

08009efc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f02:	2300      	movs	r3, #0
 8009f04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f06:	4b12      	ldr	r3, [pc, #72]	; (8009f50 <prvTaskExitError+0x54>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0e:	d00a      	beq.n	8009f26 <prvTaskExitError+0x2a>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	60fb      	str	r3, [r7, #12]
}
 8009f22:	bf00      	nop
 8009f24:	e7fe      	b.n	8009f24 <prvTaskExitError+0x28>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	60bb      	str	r3, [r7, #8]
}
 8009f38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f3a:	bf00      	nop
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d0fc      	beq.n	8009f3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f42:	bf00      	nop
 8009f44:	bf00      	nop
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	200000f4 	.word	0x200000f4
	...

08009f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f60:	4b07      	ldr	r3, [pc, #28]	; (8009f80 <pxCurrentTCBConst2>)
 8009f62:	6819      	ldr	r1, [r3, #0]
 8009f64:	6808      	ldr	r0, [r1, #0]
 8009f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6a:	f380 8809 	msr	PSP, r0
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f04f 0000 	mov.w	r0, #0
 8009f76:	f380 8811 	msr	BASEPRI, r0
 8009f7a:	4770      	bx	lr
 8009f7c:	f3af 8000 	nop.w

08009f80 <pxCurrentTCBConst2>:
 8009f80:	2000042c 	.word	0x2000042c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop

08009f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f88:	4808      	ldr	r0, [pc, #32]	; (8009fac <prvPortStartFirstTask+0x24>)
 8009f8a:	6800      	ldr	r0, [r0, #0]
 8009f8c:	6800      	ldr	r0, [r0, #0]
 8009f8e:	f380 8808 	msr	MSP, r0
 8009f92:	f04f 0000 	mov.w	r0, #0
 8009f96:	f380 8814 	msr	CONTROL, r0
 8009f9a:	b662      	cpsie	i
 8009f9c:	b661      	cpsie	f
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	df00      	svc	0
 8009fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009faa:	bf00      	nop
 8009fac:	e000ed08 	.word	0xe000ed08

08009fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009fb6:	4b46      	ldr	r3, [pc, #280]	; (800a0d0 <xPortStartScheduler+0x120>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a46      	ldr	r2, [pc, #280]	; (800a0d4 <xPortStartScheduler+0x124>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d10a      	bne.n	8009fd6 <xPortStartScheduler+0x26>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	613b      	str	r3, [r7, #16]
}
 8009fd2:	bf00      	nop
 8009fd4:	e7fe      	b.n	8009fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009fd6:	4b3e      	ldr	r3, [pc, #248]	; (800a0d0 <xPortStartScheduler+0x120>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a3f      	ldr	r2, [pc, #252]	; (800a0d8 <xPortStartScheduler+0x128>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d10a      	bne.n	8009ff6 <xPortStartScheduler+0x46>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	60fb      	str	r3, [r7, #12]
}
 8009ff2:	bf00      	nop
 8009ff4:	e7fe      	b.n	8009ff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ff6:	4b39      	ldr	r3, [pc, #228]	; (800a0dc <xPortStartScheduler+0x12c>)
 8009ff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	22ff      	movs	r2, #255	; 0xff
 800a006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a010:	78fb      	ldrb	r3, [r7, #3]
 800a012:	b2db      	uxtb	r3, r3
 800a014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	4b31      	ldr	r3, [pc, #196]	; (800a0e0 <xPortStartScheduler+0x130>)
 800a01c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a01e:	4b31      	ldr	r3, [pc, #196]	; (800a0e4 <xPortStartScheduler+0x134>)
 800a020:	2207      	movs	r2, #7
 800a022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a024:	e009      	b.n	800a03a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a026:	4b2f      	ldr	r3, [pc, #188]	; (800a0e4 <xPortStartScheduler+0x134>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3b01      	subs	r3, #1
 800a02c:	4a2d      	ldr	r2, [pc, #180]	; (800a0e4 <xPortStartScheduler+0x134>)
 800a02e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a030:	78fb      	ldrb	r3, [r7, #3]
 800a032:	b2db      	uxtb	r3, r3
 800a034:	005b      	lsls	r3, r3, #1
 800a036:	b2db      	uxtb	r3, r3
 800a038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a03a:	78fb      	ldrb	r3, [r7, #3]
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a042:	2b80      	cmp	r3, #128	; 0x80
 800a044:	d0ef      	beq.n	800a026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a046:	4b27      	ldr	r3, [pc, #156]	; (800a0e4 <xPortStartScheduler+0x134>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f1c3 0307 	rsb	r3, r3, #7
 800a04e:	2b04      	cmp	r3, #4
 800a050:	d00a      	beq.n	800a068 <xPortStartScheduler+0xb8>
	__asm volatile
 800a052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	60bb      	str	r3, [r7, #8]
}
 800a064:	bf00      	nop
 800a066:	e7fe      	b.n	800a066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a068:	4b1e      	ldr	r3, [pc, #120]	; (800a0e4 <xPortStartScheduler+0x134>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	021b      	lsls	r3, r3, #8
 800a06e:	4a1d      	ldr	r2, [pc, #116]	; (800a0e4 <xPortStartScheduler+0x134>)
 800a070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a072:	4b1c      	ldr	r3, [pc, #112]	; (800a0e4 <xPortStartScheduler+0x134>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a07a:	4a1a      	ldr	r2, [pc, #104]	; (800a0e4 <xPortStartScheduler+0x134>)
 800a07c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	b2da      	uxtb	r2, r3
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a086:	4b18      	ldr	r3, [pc, #96]	; (800a0e8 <xPortStartScheduler+0x138>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a17      	ldr	r2, [pc, #92]	; (800a0e8 <xPortStartScheduler+0x138>)
 800a08c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a092:	4b15      	ldr	r3, [pc, #84]	; (800a0e8 <xPortStartScheduler+0x138>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a14      	ldr	r2, [pc, #80]	; (800a0e8 <xPortStartScheduler+0x138>)
 800a098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a09c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a09e:	f000 f8dd 	bl	800a25c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0a2:	4b12      	ldr	r3, [pc, #72]	; (800a0ec <xPortStartScheduler+0x13c>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0a8:	f000 f8fc 	bl	800a2a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0ac:	4b10      	ldr	r3, [pc, #64]	; (800a0f0 <xPortStartScheduler+0x140>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a0f      	ldr	r2, [pc, #60]	; (800a0f0 <xPortStartScheduler+0x140>)
 800a0b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a0b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0b8:	f7ff ff66 	bl	8009f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a0bc:	f7ff fd34 	bl	8009b28 <vTaskSwitchContext>
	prvTaskExitError();
 800a0c0:	f7ff ff1c 	bl	8009efc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3718      	adds	r7, #24
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	e000ed00 	.word	0xe000ed00
 800a0d4:	410fc271 	.word	0x410fc271
 800a0d8:	410fc270 	.word	0x410fc270
 800a0dc:	e000e400 	.word	0xe000e400
 800a0e0:	20000558 	.word	0x20000558
 800a0e4:	2000055c 	.word	0x2000055c
 800a0e8:	e000ed20 	.word	0xe000ed20
 800a0ec:	200000f4 	.word	0x200000f4
 800a0f0:	e000ef34 	.word	0xe000ef34

0800a0f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
	__asm volatile
 800a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	607b      	str	r3, [r7, #4]
}
 800a10c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a10e:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <vPortEnterCritical+0x58>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3301      	adds	r3, #1
 800a114:	4a0d      	ldr	r2, [pc, #52]	; (800a14c <vPortEnterCritical+0x58>)
 800a116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a118:	4b0c      	ldr	r3, [pc, #48]	; (800a14c <vPortEnterCritical+0x58>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d10f      	bne.n	800a140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a120:	4b0b      	ldr	r3, [pc, #44]	; (800a150 <vPortEnterCritical+0x5c>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00a      	beq.n	800a140 <vPortEnterCritical+0x4c>
	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	603b      	str	r3, [r7, #0]
}
 800a13c:	bf00      	nop
 800a13e:	e7fe      	b.n	800a13e <vPortEnterCritical+0x4a>
	}
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr
 800a14c:	200000f4 	.word	0x200000f4
 800a150:	e000ed04 	.word	0xe000ed04

0800a154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a15a:	4b12      	ldr	r3, [pc, #72]	; (800a1a4 <vPortExitCritical+0x50>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10a      	bne.n	800a178 <vPortExitCritical+0x24>
	__asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	f383 8811 	msr	BASEPRI, r3
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	607b      	str	r3, [r7, #4]
}
 800a174:	bf00      	nop
 800a176:	e7fe      	b.n	800a176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a178:	4b0a      	ldr	r3, [pc, #40]	; (800a1a4 <vPortExitCritical+0x50>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3b01      	subs	r3, #1
 800a17e:	4a09      	ldr	r2, [pc, #36]	; (800a1a4 <vPortExitCritical+0x50>)
 800a180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a182:	4b08      	ldr	r3, [pc, #32]	; (800a1a4 <vPortExitCritical+0x50>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d105      	bne.n	800a196 <vPortExitCritical+0x42>
 800a18a:	2300      	movs	r3, #0
 800a18c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a196:	bf00      	nop
 800a198:	370c      	adds	r7, #12
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	200000f4 	.word	0x200000f4
	...

0800a1b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a1b0:	f3ef 8009 	mrs	r0, PSP
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	4b15      	ldr	r3, [pc, #84]	; (800a210 <pxCurrentTCBConst>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	f01e 0f10 	tst.w	lr, #16
 800a1c0:	bf08      	it	eq
 800a1c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ca:	6010      	str	r0, [r2, #0]
 800a1cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a1d4:	f380 8811 	msr	BASEPRI, r0
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f7ff fca2 	bl	8009b28 <vTaskSwitchContext>
 800a1e4:	f04f 0000 	mov.w	r0, #0
 800a1e8:	f380 8811 	msr	BASEPRI, r0
 800a1ec:	bc09      	pop	{r0, r3}
 800a1ee:	6819      	ldr	r1, [r3, #0]
 800a1f0:	6808      	ldr	r0, [r1, #0]
 800a1f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f6:	f01e 0f10 	tst.w	lr, #16
 800a1fa:	bf08      	it	eq
 800a1fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a200:	f380 8809 	msr	PSP, r0
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop
 800a20c:	f3af 8000 	nop.w

0800a210 <pxCurrentTCBConst>:
 800a210:	2000042c 	.word	0x2000042c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a214:	bf00      	nop
 800a216:	bf00      	nop

0800a218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	607b      	str	r3, [r7, #4]
}
 800a230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a232:	f7ff fbc1 	bl	80099b8 <xTaskIncrementTick>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d003      	beq.n	800a244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a23c:	4b06      	ldr	r3, [pc, #24]	; (800a258 <xPortSysTickHandler+0x40>)
 800a23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	2300      	movs	r3, #0
 800a246:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	f383 8811 	msr	BASEPRI, r3
}
 800a24e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a250:	bf00      	nop
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	e000ed04 	.word	0xe000ed04

0800a25c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a25c:	b480      	push	{r7}
 800a25e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a260:	4b0b      	ldr	r3, [pc, #44]	; (800a290 <vPortSetupTimerInterrupt+0x34>)
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a266:	4b0b      	ldr	r3, [pc, #44]	; (800a294 <vPortSetupTimerInterrupt+0x38>)
 800a268:	2200      	movs	r2, #0
 800a26a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a26c:	4b0a      	ldr	r3, [pc, #40]	; (800a298 <vPortSetupTimerInterrupt+0x3c>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a0a      	ldr	r2, [pc, #40]	; (800a29c <vPortSetupTimerInterrupt+0x40>)
 800a272:	fba2 2303 	umull	r2, r3, r2, r3
 800a276:	099b      	lsrs	r3, r3, #6
 800a278:	4a09      	ldr	r2, [pc, #36]	; (800a2a0 <vPortSetupTimerInterrupt+0x44>)
 800a27a:	3b01      	subs	r3, #1
 800a27c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a27e:	4b04      	ldr	r3, [pc, #16]	; (800a290 <vPortSetupTimerInterrupt+0x34>)
 800a280:	2207      	movs	r2, #7
 800a282:	601a      	str	r2, [r3, #0]
}
 800a284:	bf00      	nop
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	e000e010 	.word	0xe000e010
 800a294:	e000e018 	.word	0xe000e018
 800a298:	20000000 	.word	0x20000000
 800a29c:	10624dd3 	.word	0x10624dd3
 800a2a0:	e000e014 	.word	0xe000e014

0800a2a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a2b4 <vPortEnableVFP+0x10>
 800a2a8:	6801      	ldr	r1, [r0, #0]
 800a2aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a2ae:	6001      	str	r1, [r0, #0]
 800a2b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a2b2:	bf00      	nop
 800a2b4:	e000ed88 	.word	0xe000ed88

0800a2b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08a      	sub	sp, #40	; 0x28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2c4:	f7ff face 	bl	8009864 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2c8:	4b5b      	ldr	r3, [pc, #364]	; (800a438 <pvPortMalloc+0x180>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2d0:	f000 f920 	bl	800a514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2d4:	4b59      	ldr	r3, [pc, #356]	; (800a43c <pvPortMalloc+0x184>)
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4013      	ands	r3, r2
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f040 8093 	bne.w	800a408 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d01d      	beq.n	800a324 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a2e8:	2208      	movs	r2, #8
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f003 0307 	and.w	r3, r3, #7
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d014      	beq.n	800a324 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f023 0307 	bic.w	r3, r3, #7
 800a300:	3308      	adds	r3, #8
 800a302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f003 0307 	and.w	r3, r3, #7
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00a      	beq.n	800a324 <pvPortMalloc+0x6c>
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	617b      	str	r3, [r7, #20]
}
 800a320:	bf00      	nop
 800a322:	e7fe      	b.n	800a322 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d06e      	beq.n	800a408 <pvPortMalloc+0x150>
 800a32a:	4b45      	ldr	r3, [pc, #276]	; (800a440 <pvPortMalloc+0x188>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	429a      	cmp	r2, r3
 800a332:	d869      	bhi.n	800a408 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a334:	4b43      	ldr	r3, [pc, #268]	; (800a444 <pvPortMalloc+0x18c>)
 800a336:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a338:	4b42      	ldr	r3, [pc, #264]	; (800a444 <pvPortMalloc+0x18c>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a33e:	e004      	b.n	800a34a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	429a      	cmp	r2, r3
 800a352:	d903      	bls.n	800a35c <pvPortMalloc+0xa4>
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1f1      	bne.n	800a340 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a35c:	4b36      	ldr	r3, [pc, #216]	; (800a438 <pvPortMalloc+0x180>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a362:	429a      	cmp	r2, r3
 800a364:	d050      	beq.n	800a408 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2208      	movs	r2, #8
 800a36c:	4413      	add	r3, r2
 800a36e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	1ad2      	subs	r2, r2, r3
 800a380:	2308      	movs	r3, #8
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	429a      	cmp	r2, r3
 800a386:	d91f      	bls.n	800a3c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4413      	add	r3, r2
 800a38e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00a      	beq.n	800a3b0 <pvPortMalloc+0xf8>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	613b      	str	r3, [r7, #16]
}
 800a3ac:	bf00      	nop
 800a3ae:	e7fe      	b.n	800a3ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	1ad2      	subs	r2, r2, r3
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3c2:	69b8      	ldr	r0, [r7, #24]
 800a3c4:	f000 f908 	bl	800a5d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3c8:	4b1d      	ldr	r3, [pc, #116]	; (800a440 <pvPortMalloc+0x188>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	4a1b      	ldr	r2, [pc, #108]	; (800a440 <pvPortMalloc+0x188>)
 800a3d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3d6:	4b1a      	ldr	r3, [pc, #104]	; (800a440 <pvPortMalloc+0x188>)
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	4b1b      	ldr	r3, [pc, #108]	; (800a448 <pvPortMalloc+0x190>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d203      	bcs.n	800a3ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3e2:	4b17      	ldr	r3, [pc, #92]	; (800a440 <pvPortMalloc+0x188>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a18      	ldr	r2, [pc, #96]	; (800a448 <pvPortMalloc+0x190>)
 800a3e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	4b13      	ldr	r3, [pc, #76]	; (800a43c <pvPortMalloc+0x184>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	431a      	orrs	r2, r3
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a3fe:	4b13      	ldr	r3, [pc, #76]	; (800a44c <pvPortMalloc+0x194>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	4a11      	ldr	r2, [pc, #68]	; (800a44c <pvPortMalloc+0x194>)
 800a406:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a408:	f7ff fa3a 	bl	8009880 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	f003 0307 	and.w	r3, r3, #7
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00a      	beq.n	800a42c <pvPortMalloc+0x174>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	60fb      	str	r3, [r7, #12]
}
 800a428:	bf00      	nop
 800a42a:	e7fe      	b.n	800a42a <pvPortMalloc+0x172>
	return pvReturn;
 800a42c:	69fb      	ldr	r3, [r7, #28]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3728      	adds	r7, #40	; 0x28
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20008568 	.word	0x20008568
 800a43c:	2000857c 	.word	0x2000857c
 800a440:	2000856c 	.word	0x2000856c
 800a444:	20008560 	.word	0x20008560
 800a448:	20008570 	.word	0x20008570
 800a44c:	20008574 	.word	0x20008574

0800a450 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d04d      	beq.n	800a4fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a462:	2308      	movs	r3, #8
 800a464:	425b      	negs	r3, r3
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	4413      	add	r3, r2
 800a46a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	4b24      	ldr	r3, [pc, #144]	; (800a508 <vPortFree+0xb8>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4013      	ands	r3, r2
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10a      	bne.n	800a494 <vPortFree+0x44>
	__asm volatile
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	60fb      	str	r3, [r7, #12]
}
 800a490:	bf00      	nop
 800a492:	e7fe      	b.n	800a492 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00a      	beq.n	800a4b2 <vPortFree+0x62>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	60bb      	str	r3, [r7, #8]
}
 800a4ae:	bf00      	nop
 800a4b0:	e7fe      	b.n	800a4b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	4b14      	ldr	r3, [pc, #80]	; (800a508 <vPortFree+0xb8>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d01e      	beq.n	800a4fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d11a      	bne.n	800a4fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	4b0e      	ldr	r3, [pc, #56]	; (800a508 <vPortFree+0xb8>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	43db      	mvns	r3, r3
 800a4d2:	401a      	ands	r2, r3
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4d8:	f7ff f9c4 	bl	8009864 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	4b0a      	ldr	r3, [pc, #40]	; (800a50c <vPortFree+0xbc>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	4a09      	ldr	r2, [pc, #36]	; (800a50c <vPortFree+0xbc>)
 800a4e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4ea:	6938      	ldr	r0, [r7, #16]
 800a4ec:	f000 f874 	bl	800a5d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4f0:	4b07      	ldr	r3, [pc, #28]	; (800a510 <vPortFree+0xc0>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	4a06      	ldr	r2, [pc, #24]	; (800a510 <vPortFree+0xc0>)
 800a4f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a4fa:	f7ff f9c1 	bl	8009880 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4fe:	bf00      	nop
 800a500:	3718      	adds	r7, #24
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	2000857c 	.word	0x2000857c
 800a50c:	2000856c 	.word	0x2000856c
 800a510:	20008578 	.word	0x20008578

0800a514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a51a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a51e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a520:	4b27      	ldr	r3, [pc, #156]	; (800a5c0 <prvHeapInit+0xac>)
 800a522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f003 0307 	and.w	r3, r3, #7
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00c      	beq.n	800a548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3307      	adds	r3, #7
 800a532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f023 0307 	bic.w	r3, r3, #7
 800a53a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	4a1f      	ldr	r2, [pc, #124]	; (800a5c0 <prvHeapInit+0xac>)
 800a544:	4413      	add	r3, r2
 800a546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a54c:	4a1d      	ldr	r2, [pc, #116]	; (800a5c4 <prvHeapInit+0xb0>)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a552:	4b1c      	ldr	r3, [pc, #112]	; (800a5c4 <prvHeapInit+0xb0>)
 800a554:	2200      	movs	r2, #0
 800a556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	4413      	add	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a560:	2208      	movs	r2, #8
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	1a9b      	subs	r3, r3, r2
 800a566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f023 0307 	bic.w	r3, r3, #7
 800a56e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	4a15      	ldr	r2, [pc, #84]	; (800a5c8 <prvHeapInit+0xb4>)
 800a574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a576:	4b14      	ldr	r3, [pc, #80]	; (800a5c8 <prvHeapInit+0xb4>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2200      	movs	r2, #0
 800a57c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a57e:	4b12      	ldr	r3, [pc, #72]	; (800a5c8 <prvHeapInit+0xb4>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2200      	movs	r2, #0
 800a584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	1ad2      	subs	r2, r2, r3
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a594:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <prvHeapInit+0xb4>)
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	4a0a      	ldr	r2, [pc, #40]	; (800a5cc <prvHeapInit+0xb8>)
 800a5a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	4a09      	ldr	r2, [pc, #36]	; (800a5d0 <prvHeapInit+0xbc>)
 800a5aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5ac:	4b09      	ldr	r3, [pc, #36]	; (800a5d4 <prvHeapInit+0xc0>)
 800a5ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a5b2:	601a      	str	r2, [r3, #0]
}
 800a5b4:	bf00      	nop
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	20000560 	.word	0x20000560
 800a5c4:	20008560 	.word	0x20008560
 800a5c8:	20008568 	.word	0x20008568
 800a5cc:	20008570 	.word	0x20008570
 800a5d0:	2000856c 	.word	0x2000856c
 800a5d4:	2000857c 	.word	0x2000857c

0800a5d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5e0:	4b28      	ldr	r3, [pc, #160]	; (800a684 <prvInsertBlockIntoFreeList+0xac>)
 800a5e2:	60fb      	str	r3, [r7, #12]
 800a5e4:	e002      	b.n	800a5ec <prvInsertBlockIntoFreeList+0x14>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	60fb      	str	r3, [r7, #12]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d8f7      	bhi.n	800a5e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	4413      	add	r3, r2
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	429a      	cmp	r2, r3
 800a606:	d108      	bne.n	800a61a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	441a      	add	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	441a      	add	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d118      	bne.n	800a660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	4b15      	ldr	r3, [pc, #84]	; (800a688 <prvInsertBlockIntoFreeList+0xb0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	429a      	cmp	r2, r3
 800a638:	d00d      	beq.n	800a656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	441a      	add	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	e008      	b.n	800a668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a656:	4b0c      	ldr	r3, [pc, #48]	; (800a688 <prvInsertBlockIntoFreeList+0xb0>)
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	601a      	str	r2, [r3, #0]
 800a65e:	e003      	b.n	800a668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d002      	beq.n	800a676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a676:	bf00      	nop
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	20008560 	.word	0x20008560
 800a688:	20008568 	.word	0x20008568

0800a68c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a690:	2200      	movs	r2, #0
 800a692:	4912      	ldr	r1, [pc, #72]	; (800a6dc <MX_USB_DEVICE_Init+0x50>)
 800a694:	4812      	ldr	r0, [pc, #72]	; (800a6e0 <MX_USB_DEVICE_Init+0x54>)
 800a696:	f7fd fbff 	bl	8007e98 <USBD_Init>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a6a0:	f7f6 f89c 	bl	80007dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800a6a4:	490f      	ldr	r1, [pc, #60]	; (800a6e4 <MX_USB_DEVICE_Init+0x58>)
 800a6a6:	480e      	ldr	r0, [pc, #56]	; (800a6e0 <MX_USB_DEVICE_Init+0x54>)
 800a6a8:	f7fd fc5a 	bl	8007f60 <USBD_RegisterClass>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a6b2:	f7f6 f893 	bl	80007dc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800a6b6:	490c      	ldr	r1, [pc, #48]	; (800a6e8 <MX_USB_DEVICE_Init+0x5c>)
 800a6b8:	4809      	ldr	r0, [pc, #36]	; (800a6e0 <MX_USB_DEVICE_Init+0x54>)
 800a6ba:	f7fb fef5 	bl	80064a8 <USBD_MSC_RegisterStorage>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a6c4:	f7f6 f88a 	bl	80007dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a6c8:	4805      	ldr	r0, [pc, #20]	; (800a6e0 <MX_USB_DEVICE_Init+0x54>)
 800a6ca:	f7fd fc70 	bl	8007fae <USBD_Start>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a6d4:	f7f6 f882 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a6d8:	bf00      	nop
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	200000f8 	.word	0x200000f8
 800a6e0:	20008580 	.word	0x20008580
 800a6e4:	2000000c 	.word	0x2000000c
 800a6e8:	20000148 	.word	0x20000148

0800a6ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	6039      	str	r1, [r7, #0]
 800a6f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	2212      	movs	r2, #18
 800a6fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a6fe:	4b03      	ldr	r3, [pc, #12]	; (800a70c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a700:	4618      	mov	r0, r3
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	20000114 	.word	0x20000114

0800a710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	4603      	mov	r3, r0
 800a718:	6039      	str	r1, [r7, #0]
 800a71a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2204      	movs	r2, #4
 800a720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a722:	4b03      	ldr	r3, [pc, #12]	; (800a730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a724:	4618      	mov	r0, r3
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr
 800a730:	20000128 	.word	0x20000128

0800a734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4603      	mov	r3, r0
 800a73c:	6039      	str	r1, [r7, #0]
 800a73e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a740:	79fb      	ldrb	r3, [r7, #7]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d105      	bne.n	800a752 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	4907      	ldr	r1, [pc, #28]	; (800a768 <USBD_FS_ProductStrDescriptor+0x34>)
 800a74a:	4808      	ldr	r0, [pc, #32]	; (800a76c <USBD_FS_ProductStrDescriptor+0x38>)
 800a74c:	f7fe fc61 	bl	8009012 <USBD_GetString>
 800a750:	e004      	b.n	800a75c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	4904      	ldr	r1, [pc, #16]	; (800a768 <USBD_FS_ProductStrDescriptor+0x34>)
 800a756:	4805      	ldr	r0, [pc, #20]	; (800a76c <USBD_FS_ProductStrDescriptor+0x38>)
 800a758:	f7fe fc5b 	bl	8009012 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a75c:	4b02      	ldr	r3, [pc, #8]	; (800a768 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	20008850 	.word	0x20008850
 800a76c:	0800b5c0 	.word	0x0800b5c0

0800a770 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	6039      	str	r1, [r7, #0]
 800a77a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a77c:	683a      	ldr	r2, [r7, #0]
 800a77e:	4904      	ldr	r1, [pc, #16]	; (800a790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a780:	4804      	ldr	r0, [pc, #16]	; (800a794 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a782:	f7fe fc46 	bl	8009012 <USBD_GetString>
  return USBD_StrDesc;
 800a786:	4b02      	ldr	r3, [pc, #8]	; (800a790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	20008850 	.word	0x20008850
 800a794:	0800b5d4 	.word	0x0800b5d4

0800a798 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	6039      	str	r1, [r7, #0]
 800a7a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	221a      	movs	r2, #26
 800a7a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a7aa:	f000 f843 	bl	800a834 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a7ae:	4b02      	ldr	r3, [pc, #8]	; (800a7b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	2000012c 	.word	0x2000012c

0800a7bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	6039      	str	r1, [r7, #0]
 800a7c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a7c8:	79fb      	ldrb	r3, [r7, #7]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d105      	bne.n	800a7da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	4907      	ldr	r1, [pc, #28]	; (800a7f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7d2:	4808      	ldr	r0, [pc, #32]	; (800a7f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7d4:	f7fe fc1d 	bl	8009012 <USBD_GetString>
 800a7d8:	e004      	b.n	800a7e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	4904      	ldr	r1, [pc, #16]	; (800a7f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7de:	4805      	ldr	r0, [pc, #20]	; (800a7f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7e0:	f7fe fc17 	bl	8009012 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7e4:	4b02      	ldr	r3, [pc, #8]	; (800a7f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	20008850 	.word	0x20008850
 800a7f4:	0800b5e8 	.word	0x0800b5e8

0800a7f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	4603      	mov	r3, r0
 800a800:	6039      	str	r1, [r7, #0]
 800a802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a804:	79fb      	ldrb	r3, [r7, #7]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d105      	bne.n	800a816 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	4907      	ldr	r1, [pc, #28]	; (800a82c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a80e:	4808      	ldr	r0, [pc, #32]	; (800a830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a810:	f7fe fbff 	bl	8009012 <USBD_GetString>
 800a814:	e004      	b.n	800a820 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	4904      	ldr	r1, [pc, #16]	; (800a82c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a81a:	4805      	ldr	r0, [pc, #20]	; (800a830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a81c:	f7fe fbf9 	bl	8009012 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a820:	4b02      	ldr	r3, [pc, #8]	; (800a82c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20008850 	.word	0x20008850
 800a830:	0800b5f4 	.word	0x0800b5f4

0800a834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a83a:	4b0f      	ldr	r3, [pc, #60]	; (800a878 <Get_SerialNum+0x44>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a840:	4b0e      	ldr	r3, [pc, #56]	; (800a87c <Get_SerialNum+0x48>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a846:	4b0e      	ldr	r3, [pc, #56]	; (800a880 <Get_SerialNum+0x4c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4413      	add	r3, r2
 800a852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d009      	beq.n	800a86e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a85a:	2208      	movs	r2, #8
 800a85c:	4909      	ldr	r1, [pc, #36]	; (800a884 <Get_SerialNum+0x50>)
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f000 f814 	bl	800a88c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a864:	2204      	movs	r2, #4
 800a866:	4908      	ldr	r1, [pc, #32]	; (800a888 <Get_SerialNum+0x54>)
 800a868:	68b8      	ldr	r0, [r7, #8]
 800a86a:	f000 f80f 	bl	800a88c <IntToUnicode>
  }
}
 800a86e:	bf00      	nop
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	1fff7590 	.word	0x1fff7590
 800a87c:	1fff7594 	.word	0x1fff7594
 800a880:	1fff7598 	.word	0x1fff7598
 800a884:	2000012e 	.word	0x2000012e
 800a888:	2000013e 	.word	0x2000013e

0800a88c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b087      	sub	sp, #28
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	4613      	mov	r3, r2
 800a898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a89e:	2300      	movs	r3, #0
 800a8a0:	75fb      	strb	r3, [r7, #23]
 800a8a2:	e027      	b.n	800a8f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	0f1b      	lsrs	r3, r3, #28
 800a8a8:	2b09      	cmp	r3, #9
 800a8aa:	d80b      	bhi.n	800a8c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	0f1b      	lsrs	r3, r3, #28
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
 800a8b4:	005b      	lsls	r3, r3, #1
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	440b      	add	r3, r1
 800a8bc:	3230      	adds	r2, #48	; 0x30
 800a8be:	b2d2      	uxtb	r2, r2
 800a8c0:	701a      	strb	r2, [r3, #0]
 800a8c2:	e00a      	b.n	800a8da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	0f1b      	lsrs	r3, r3, #28
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	7dfb      	ldrb	r3, [r7, #23]
 800a8cc:	005b      	lsls	r3, r3, #1
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	440b      	add	r3, r1
 800a8d4:	3237      	adds	r2, #55	; 0x37
 800a8d6:	b2d2      	uxtb	r2, r2
 800a8d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	011b      	lsls	r3, r3, #4
 800a8de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a8e0:	7dfb      	ldrb	r3, [r7, #23]
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a8ee:	7dfb      	ldrb	r3, [r7, #23]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	75fb      	strb	r3, [r7, #23]
 800a8f4:	7dfa      	ldrb	r2, [r7, #23]
 800a8f6:	79fb      	ldrb	r3, [r7, #7]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d3d3      	bcc.n	800a8a4 <IntToUnicode+0x18>
  }
}
 800a8fc:	bf00      	nop
 800a8fe:	bf00      	nop
 800a900:	371c      	adds	r7, #28
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
	...

0800a90c <STORAGE_Init_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_Init_FS (uint8_t lun)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	4603      	mov	r3, r0
 800a914:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */

  if (BSP_QSPI_GetStatus() != QSPI_OK)
 800a916:	f7f6 f8f7 	bl	8000b08 <BSP_QSPI_GetStatus>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d009      	beq.n	800a934 <STORAGE_Init_FS+0x28>
  {
    HAL_QSPI_Init(&hqspi);
 800a920:	4807      	ldr	r0, [pc, #28]	; (800a940 <STORAGE_Init_FS+0x34>)
 800a922:	f7f8 f9d7 	bl	8002cd4 <HAL_QSPI_Init>

    if (BSP_QSPI_Init() != QSPI_OK)
 800a926:	f7f5 ffc9 	bl	80008bc <BSP_QSPI_Init>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d001      	beq.n	800a934 <STORAGE_Init_FS+0x28>
    {
      return (USBD_FAIL);
 800a930:	2303      	movs	r3, #3
 800a932:	e000      	b.n	800a936 <STORAGE_Init_FS+0x2a>
    }
  }

  return (USBD_OK);
 800a934:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	200003e0 	.word	0x200003e0

0800a944 <STORAGE_GetCapacity_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetCapacity_FS (uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b08a      	sub	sp, #40	; 0x28
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
 800a950:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  QSPI_Info info;

  BSP_QSPI_GetInfo(&info);
 800a952:	f107 0314 	add.w	r3, r7, #20
 800a956:	4618      	mov	r0, r3
 800a958:	f7f6 f924 	bl	8000ba4 <BSP_QSPI_GetInfo>
  *block_num = (info.FlashSize)/STORAGE_BLK_SIZ_USER;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	0b1a      	lsrs	r2, r3, #12
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ_USER;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a96a:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 800a96c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3728      	adds	r7, #40	; 0x28
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <STORAGE_IsReady_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsReady_FS (uint8_t lun)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b084      	sub	sp, #16
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	4603      	mov	r3, r0
 800a97e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */

  uint8_t status = QSPI_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	73bb      	strb	r3, [r7, #14]
  int8_t ret = USBD_FAIL;
 800a984:	2303      	movs	r3, #3
 800a986:	73fb      	strb	r3, [r7, #15]

  status = BSP_QSPI_GetStatus();
 800a988:	f7f6 f8be 	bl	8000b08 <BSP_QSPI_GetStatus>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73bb      	strb	r3, [r7, #14]

  switch(status)
 800a990:	7bbb      	ldrb	r3, [r7, #14]
 800a992:	2b02      	cmp	r3, #2
 800a994:	d009      	beq.n	800a9aa <STORAGE_IsReady_FS+0x34>
 800a996:	2b02      	cmp	r3, #2
 800a998:	dc0d      	bgt.n	800a9b6 <STORAGE_IsReady_FS+0x40>
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d002      	beq.n	800a9a4 <STORAGE_IsReady_FS+0x2e>
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d006      	beq.n	800a9b0 <STORAGE_IsReady_FS+0x3a>
 800a9a2:	e008      	b.n	800a9b6 <STORAGE_IsReady_FS+0x40>
  {
  case QSPI_OK:
    ret = USBD_OK;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9a8:	e008      	b.n	800a9bc <STORAGE_IsReady_FS+0x46>
  case QSPI_BUSY:
    ret = USBD_BUSY;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ae:	e005      	b.n	800a9bc <STORAGE_IsReady_FS+0x46>
  case QSPI_ERROR:
    ret = USBD_FAIL;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9b4:	e002      	b.n	800a9bc <STORAGE_IsReady_FS+0x46>
  default:
    ret = USBD_FAIL;
 800a9b6:	2303      	movs	r3, #3
 800a9b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ba:	bf00      	nop
  }

  return ret;
 800a9bc:	f997 300f 	ldrsb.w	r3, [r7, #15]

  /* USER CODE END 4 */
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <STORAGE_IsWriteProtected_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsWriteProtected_FS (uint8_t lun)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a9d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <STORAGE_Read_FS>:
*******************************************************************************/
int8_t STORAGE_Read_FS (uint8_t lun,
                        uint8_t *buf,
                        uint32_t blk_addr,
                        uint16_t blk_len)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b088      	sub	sp, #32
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60b9      	str	r1, [r7, #8]
 800a9e8:	607a      	str	r2, [r7, #4]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	73fb      	strb	r3, [r7, #15]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  uint32_t erasedSector = 1;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	61fb      	str	r3, [r7, #28]
  BSP_QSPI_Read(QSPI_ReadBuffer, blk_addr * STORAGE_BLK_SIZ_USER, blk_len * STORAGE_BLK_SIZ_USER);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	0319      	lsls	r1, r3, #12
 800a9fc:	89bb      	ldrh	r3, [r7, #12]
 800a9fe:	031b      	lsls	r3, r3, #12
 800aa00:	461a      	mov	r2, r3
 800aa02:	4820      	ldr	r0, [pc, #128]	; (800aa84 <STORAGE_Read_FS+0xa4>)
 800aa04:	f7f5 ff72 	bl	80008ec <BSP_QSPI_Read>

  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800aa08:	2300      	movs	r3, #0
 800aa0a:	61bb      	str	r3, [r7, #24]
 800aa0c:	e00b      	b.n	800aa26 <STORAGE_Read_FS+0x46>
  {
    if (QSPI_ReadBuffer[i] != 0xFF)
 800aa0e:	4a1d      	ldr	r2, [pc, #116]	; (800aa84 <STORAGE_Read_FS+0xa4>)
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	4413      	add	r3, r2
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	2bff      	cmp	r3, #255	; 0xff
 800aa18:	d002      	beq.n	800aa20 <STORAGE_Read_FS+0x40>
    {
      erasedSector = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	61fb      	str	r3, [r7, #28]
      break;
 800aa1e:	e006      	b.n	800aa2e <STORAGE_Read_FS+0x4e>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	3301      	adds	r3, #1
 800aa24:	61bb      	str	r3, [r7, #24]
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa2c:	d3ef      	bcc.n	800aa0e <STORAGE_Read_FS+0x2e>
    }
  }
  if (erasedSector == 1)
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d10f      	bne.n	800aa54 <STORAGE_Read_FS+0x74>
  {
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800aa34:	2300      	movs	r3, #0
 800aa36:	617b      	str	r3, [r7, #20]
 800aa38:	e007      	b.n	800aa4a <STORAGE_Read_FS+0x6a>
    {
      buf[i] = 0x00;
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	4413      	add	r3, r2
 800aa40:	2200      	movs	r2, #0
 800aa42:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	3301      	adds	r3, #1
 800aa48:	617b      	str	r3, [r7, #20]
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa50:	d3f3      	bcc.n	800aa3a <STORAGE_Read_FS+0x5a>
 800aa52:	e011      	b.n	800aa78 <STORAGE_Read_FS+0x98>
    }
  }
  else {
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800aa54:	2300      	movs	r3, #0
 800aa56:	613b      	str	r3, [r7, #16]
 800aa58:	e00a      	b.n	800aa70 <STORAGE_Read_FS+0x90>
    {
      buf[i] = QSPI_ReadBuffer[i];
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	4413      	add	r3, r2
 800aa60:	4908      	ldr	r1, [pc, #32]	; (800aa84 <STORAGE_Read_FS+0xa4>)
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	440a      	add	r2, r1
 800aa66:	7812      	ldrb	r2, [r2, #0]
 800aa68:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	613b      	str	r3, [r7, #16]
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa76:	d3f0      	bcc.n	800aa5a <STORAGE_Read_FS+0x7a>
    }
  }
  return (USBD_OK);
 800aa78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3720      	adds	r7, #32
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	20008a50 	.word	0x20008a50

0800aa88 <STORAGE_Write_FS>:
*******************************************************************************/
int8_t STORAGE_Write_FS (uint8_t lun,
                         uint8_t *buf,
                         uint32_t blk_addr,
                         uint16_t blk_len)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b088      	sub	sp, #32
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60b9      	str	r1, [r7, #8]
 800aa90:	607a      	str	r2, [r7, #4]
 800aa92:	461a      	mov	r2, r3
 800aa94:	4603      	mov	r3, r0
 800aa96:	73fb      	strb	r3, [r7, #15]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  uint32_t needErase = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	61fb      	str	r3, [r7, #28]
  uint32_t eraseOperation = 1;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	61bb      	str	r3, [r7, #24]
  BSP_QSPI_Read(QSPI_ReadBuffer, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	031b      	lsls	r3, r3, #12
 800aaa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aaac:	4619      	mov	r1, r3
 800aaae:	4829      	ldr	r0, [pc, #164]	; (800ab54 <STORAGE_Write_FS+0xcc>)
 800aab0:	f7f5 ff1c 	bl	80008ec <BSP_QSPI_Read>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800aab4:	2300      	movs	r3, #0
 800aab6:	617b      	str	r3, [r7, #20]
 800aab8:	e00b      	b.n	800aad2 <STORAGE_Write_FS+0x4a>
  {
    if (buf[i] != 0x00)
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	4413      	add	r3, r2
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d002      	beq.n	800aacc <STORAGE_Write_FS+0x44>
    {
      eraseOperation = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	61bb      	str	r3, [r7, #24]
      break;
 800aaca:	e006      	b.n	800aada <STORAGE_Write_FS+0x52>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	3301      	adds	r3, #1
 800aad0:	617b      	str	r3, [r7, #20]
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad8:	d3ef      	bcc.n	800aaba <STORAGE_Write_FS+0x32>
    }
  }
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800aada:	2300      	movs	r3, #0
 800aadc:	613b      	str	r3, [r7, #16]
 800aade:	e00b      	b.n	800aaf8 <STORAGE_Write_FS+0x70>
  {
    if (QSPI_ReadBuffer[i] != 0xFF)
 800aae0:	4a1c      	ldr	r2, [pc, #112]	; (800ab54 <STORAGE_Write_FS+0xcc>)
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	4413      	add	r3, r2
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	2bff      	cmp	r3, #255	; 0xff
 800aaea:	d002      	beq.n	800aaf2 <STORAGE_Write_FS+0x6a>
    {
      needErase = 1;
 800aaec:	2301      	movs	r3, #1
 800aaee:	61fb      	str	r3, [r7, #28]
      break;
 800aaf0:	e006      	b.n	800ab00 <STORAGE_Write_FS+0x78>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	613b      	str	r3, [r7, #16]
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aafe:	d3ef      	bcc.n	800aae0 <STORAGE_Write_FS+0x58>
    }
  }
  if (eraseOperation == 1)
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d108      	bne.n	800ab18 <STORAGE_Write_FS+0x90>
  {
    if (needErase == 1)
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d11e      	bne.n	800ab4a <STORAGE_Write_FS+0xc2>
    {
      BSP_QSPI_Erase_Block(blk_addr * STORAGE_BLK_SIZ_USER);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	031b      	lsls	r3, r3, #12
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7f5 ffb5 	bl	8000a80 <BSP_QSPI_Erase_Block>
 800ab16:	e018      	b.n	800ab4a <STORAGE_Write_FS+0xc2>
    }
  }
  else {
    if (needErase == 1)
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d10d      	bne.n	800ab3a <STORAGE_Write_FS+0xb2>
    {
      BSP_QSPI_Erase_Block(blk_addr * STORAGE_BLK_SIZ_USER);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	031b      	lsls	r3, r3, #12
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7f5 ffac 	bl	8000a80 <BSP_QSPI_Erase_Block>

      BSP_QSPI_Write(buf, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	031b      	lsls	r3, r3, #12
 800ab2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ab30:	4619      	mov	r1, r3
 800ab32:	68b8      	ldr	r0, [r7, #8]
 800ab34:	f7f5 ff1c 	bl	8000970 <BSP_QSPI_Write>
 800ab38:	e007      	b.n	800ab4a <STORAGE_Write_FS+0xc2>
    }
    else {
      BSP_QSPI_Write(buf, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	031b      	lsls	r3, r3, #12
 800ab3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ab42:	4619      	mov	r1, r3
 800ab44:	68b8      	ldr	r0, [r7, #8]
 800ab46:	f7f5 ff13 	bl	8000970 <BSP_QSPI_Write>
    }
  }

  return (USBD_OK);
 800ab4a:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3720      	adds	r7, #32
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	20008a50 	.word	0x20008a50

0800ab58 <STORAGE_GetMaxLun_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetMaxLun_FS (void)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800ab5c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b0ac      	sub	sp, #176	; 0xb0
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ab74:	2200      	movs	r2, #0
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	605a      	str	r2, [r3, #4]
 800ab7a:	609a      	str	r2, [r3, #8]
 800ab7c:	60da      	str	r2, [r3, #12]
 800ab7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ab80:	f107 0314 	add.w	r3, r7, #20
 800ab84:	2288      	movs	r2, #136	; 0x88
 800ab86:	2100      	movs	r1, #0
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 fcdd 	bl	800b548 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab96:	d173      	bne.n	800ac80 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ab98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab9c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800ab9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800aba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800aba6:	2301      	movs	r3, #1
 800aba8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800abaa:	2301      	movs	r3, #1
 800abac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 800abae:	2330      	movs	r3, #48	; 0x30
 800abb0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800abb2:	2307      	movs	r3, #7
 800abb4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800abb6:	2304      	movs	r3, #4
 800abb8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800abba:	2302      	movs	r3, #2
 800abbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800abbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800abc2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800abc4:	f107 0314 	add.w	r3, r7, #20
 800abc8:	4618      	mov	r0, r3
 800abca:	f7f9 fb01 	bl	80041d0 <HAL_RCCEx_PeriphCLKConfig>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d001      	beq.n	800abd8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800abd4:	f7f5 fe02 	bl	80007dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abd8:	4b2b      	ldr	r3, [pc, #172]	; (800ac88 <HAL_PCD_MspInit+0x120>)
 800abda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abdc:	4a2a      	ldr	r2, [pc, #168]	; (800ac88 <HAL_PCD_MspInit+0x120>)
 800abde:	f043 0301 	orr.w	r3, r3, #1
 800abe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abe4:	4b28      	ldr	r3, [pc, #160]	; (800ac88 <HAL_PCD_MspInit+0x120>)
 800abe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abe8:	f003 0301 	and.w	r3, r3, #1
 800abec:	613b      	str	r3, [r7, #16]
 800abee:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800abf0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800abf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abf8:	2302      	movs	r3, #2
 800abfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abfe:	2300      	movs	r3, #0
 800ac00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac04:	2303      	movs	r3, #3
 800ac06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac0a:	230a      	movs	r3, #10
 800ac0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ac14:	4619      	mov	r1, r3
 800ac16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac1a:	f7f6 fbb9 	bl	8001390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac1e:	4b1a      	ldr	r3, [pc, #104]	; (800ac88 <HAL_PCD_MspInit+0x120>)
 800ac20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac22:	4a19      	ldr	r2, [pc, #100]	; (800ac88 <HAL_PCD_MspInit+0x120>)
 800ac24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac28:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac2a:	4b17      	ldr	r3, [pc, #92]	; (800ac88 <HAL_PCD_MspInit+0x120>)
 800ac2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac32:	60fb      	str	r3, [r7, #12]
 800ac34:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac36:	4b14      	ldr	r3, [pc, #80]	; (800ac88 <HAL_PCD_MspInit+0x120>)
 800ac38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d114      	bne.n	800ac6c <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac42:	4b11      	ldr	r3, [pc, #68]	; (800ac88 <HAL_PCD_MspInit+0x120>)
 800ac44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac46:	4a10      	ldr	r2, [pc, #64]	; (800ac88 <HAL_PCD_MspInit+0x120>)
 800ac48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac4c:	6593      	str	r3, [r2, #88]	; 0x58
 800ac4e:	4b0e      	ldr	r3, [pc, #56]	; (800ac88 <HAL_PCD_MspInit+0x120>)
 800ac50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac56:	60bb      	str	r3, [r7, #8]
 800ac58:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800ac5a:	f7f8 f81b 	bl	8002c94 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac5e:	4b0a      	ldr	r3, [pc, #40]	; (800ac88 <HAL_PCD_MspInit+0x120>)
 800ac60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac62:	4a09      	ldr	r2, [pc, #36]	; (800ac88 <HAL_PCD_MspInit+0x120>)
 800ac64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac68:	6593      	str	r3, [r2, #88]	; 0x58
 800ac6a:	e001      	b.n	800ac70 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ac6c:	f7f8 f812 	bl	8002c94 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ac70:	2200      	movs	r2, #0
 800ac72:	2105      	movs	r1, #5
 800ac74:	2043      	movs	r0, #67	; 0x43
 800ac76:	f7f6 fb08 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac7a:	2043      	movs	r0, #67	; 0x43
 800ac7c:	f7f6 fb21 	bl	80012c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac80:	bf00      	nop
 800ac82:	37b0      	adds	r7, #176	; 0xb0
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	40021000 	.word	0x40021000

0800ac8c <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac9c:	d12b      	bne.n	800acf6 <HAL_PCD_MspDeInit+0x6a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 800ac9e:	4b18      	ldr	r3, [pc, #96]	; (800ad00 <HAL_PCD_MspDeInit+0x74>)
 800aca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aca2:	4a17      	ldr	r2, [pc, #92]	; (800ad00 <HAL_PCD_MspDeInit+0x74>)
 800aca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aca8:	64d3      	str	r3, [r2, #76]	; 0x4c

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin);
 800acaa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800acae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800acb2:	f7f6 fd17 	bl	80016e4 <HAL_GPIO_DeInit>

    /* Disable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800acb6:	4b12      	ldr	r3, [pc, #72]	; (800ad00 <HAL_PCD_MspDeInit+0x74>)
 800acb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d114      	bne.n	800acec <HAL_PCD_MspDeInit+0x60>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800acc2:	4b0f      	ldr	r3, [pc, #60]	; (800ad00 <HAL_PCD_MspDeInit+0x74>)
 800acc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acc6:	4a0e      	ldr	r2, [pc, #56]	; (800ad00 <HAL_PCD_MspDeInit+0x74>)
 800acc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800accc:	6593      	str	r3, [r2, #88]	; 0x58
 800acce:	4b0c      	ldr	r3, [pc, #48]	; (800ad00 <HAL_PCD_MspDeInit+0x74>)
 800acd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acd6:	60fb      	str	r3, [r7, #12]
 800acd8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_DisableVddUSB();
 800acda:	f7f7 ffeb 	bl	8002cb4 <HAL_PWREx_DisableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800acde:	4b08      	ldr	r3, [pc, #32]	; (800ad00 <HAL_PCD_MspDeInit+0x74>)
 800ace0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ace2:	4a07      	ldr	r2, [pc, #28]	; (800ad00 <HAL_PCD_MspDeInit+0x74>)
 800ace4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ace8:	6593      	str	r3, [r2, #88]	; 0x58
 800acea:	e001      	b.n	800acf0 <HAL_PCD_MspDeInit+0x64>
    }
    else
    {
      HAL_PWREx_DisableVddUSB();
 800acec:	f7f7 ffe2 	bl	8002cb4 <HAL_PWREx_DisableVddUSB>
    }

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 800acf0:	2043      	movs	r0, #67	; 0x43
 800acf2:	f7f6 faf4 	bl	80012de <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 800acf6:	bf00      	nop
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	40021000 	.word	0x40021000

0800ad04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f7fd f992 	bl	8008044 <USBD_LL_SetupStage>
}
 800ad20:	bf00      	nop
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ad3a:	78fa      	ldrb	r2, [r7, #3]
 800ad3c:	6879      	ldr	r1, [r7, #4]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	00db      	lsls	r3, r3, #3
 800ad42:	1a9b      	subs	r3, r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	440b      	add	r3, r1
 800ad48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	78fb      	ldrb	r3, [r7, #3]
 800ad50:	4619      	mov	r1, r3
 800ad52:	f7fd f9cc 	bl	80080ee <USBD_LL_DataOutStage>
}
 800ad56:	bf00      	nop
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b082      	sub	sp, #8
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	460b      	mov	r3, r1
 800ad68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ad70:	78fa      	ldrb	r2, [r7, #3]
 800ad72:	6879      	ldr	r1, [r7, #4]
 800ad74:	4613      	mov	r3, r2
 800ad76:	00db      	lsls	r3, r3, #3
 800ad78:	1a9b      	subs	r3, r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	440b      	add	r3, r1
 800ad7e:	3348      	adds	r3, #72	; 0x48
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	78fb      	ldrb	r3, [r7, #3]
 800ad84:	4619      	mov	r1, r3
 800ad86:	f7fd fa15 	bl	80081b4 <USBD_LL_DataInStage>
}
 800ad8a:	bf00      	nop
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b082      	sub	sp, #8
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fd fb29 	bl	80083f8 <USBD_LL_SOF>
}
 800ada6:	bf00      	nop
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800adb6:	2301      	movs	r3, #1
 800adb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d001      	beq.n	800adc6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800adc2:	f7f5 fd0b 	bl	80007dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800adcc:	7bfa      	ldrb	r2, [r7, #15]
 800adce:	4611      	mov	r1, r2
 800add0:	4618      	mov	r0, r3
 800add2:	f7fd fad3 	bl	800837c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800addc:	4618      	mov	r0, r3
 800adde:	f7fd fa7f 	bl	80082e0 <USBD_LL_Reset>
}
 800ade2:	bf00      	nop
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	6812      	ldr	r2, [r2, #0]
 800ae02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae06:	f043 0301 	orr.w	r3, r3, #1
 800ae0a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fd fac2 	bl	800839c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d005      	beq.n	800ae2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae20:	4b04      	ldr	r3, [pc, #16]	; (800ae34 <HAL_PCD_SuspendCallback+0x48>)
 800ae22:	691b      	ldr	r3, [r3, #16]
 800ae24:	4a03      	ldr	r2, [pc, #12]	; (800ae34 <HAL_PCD_SuspendCallback+0x48>)
 800ae26:	f043 0306 	orr.w	r3, r3, #6
 800ae2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae2c:	bf00      	nop
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	e000ed00 	.word	0xe000ed00

0800ae38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	6812      	ldr	r2, [r2, #0]
 800ae4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae52:	f023 0301 	bic.w	r3, r3, #1
 800ae56:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a1b      	ldr	r3, [r3, #32]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d007      	beq.n	800ae70 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae60:	4b08      	ldr	r3, [pc, #32]	; (800ae84 <HAL_PCD_ResumeCallback+0x4c>)
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	4a07      	ldr	r2, [pc, #28]	; (800ae84 <HAL_PCD_ResumeCallback+0x4c>)
 800ae66:	f023 0306 	bic.w	r3, r3, #6
 800ae6a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ae6c:	f000 fb42 	bl	800b4f4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fd faa6 	bl	80083c8 <USBD_LL_Resume>
}
 800ae7c:	bf00      	nop
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	e000ed00 	.word	0xe000ed00

0800ae88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	460b      	mov	r3, r1
 800ae92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae9a:	78fa      	ldrb	r2, [r7, #3]
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fd faf2 	bl	8008488 <USBD_LL_IsoOUTIncomplete>
}
 800aea4:	bf00      	nop
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aebe:	78fa      	ldrb	r2, [r7, #3]
 800aec0:	4611      	mov	r1, r2
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fd faba 	bl	800843c <USBD_LL_IsoINIncomplete>
}
 800aec8:	bf00      	nop
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aede:	4618      	mov	r0, r3
 800aee0:	f7fd faf8 	bl	80084d4 <USBD_LL_DevConnected>
}
 800aee4:	bf00      	nop
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fd faf5 	bl	80084ea <USBD_LL_DevDisconnected>
}
 800af00:	bf00      	nop
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d13c      	bne.n	800af92 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af18:	4a20      	ldr	r2, [pc, #128]	; (800af9c <USBD_LL_Init+0x94>)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a1e      	ldr	r2, [pc, #120]	; (800af9c <USBD_LL_Init+0x94>)
 800af24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af28:	4b1c      	ldr	r3, [pc, #112]	; (800af9c <USBD_LL_Init+0x94>)
 800af2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800af30:	4b1a      	ldr	r3, [pc, #104]	; (800af9c <USBD_LL_Init+0x94>)
 800af32:	2206      	movs	r2, #6
 800af34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af36:	4b19      	ldr	r3, [pc, #100]	; (800af9c <USBD_LL_Init+0x94>)
 800af38:	2202      	movs	r2, #2
 800af3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af3c:	4b17      	ldr	r3, [pc, #92]	; (800af9c <USBD_LL_Init+0x94>)
 800af3e:	2202      	movs	r2, #2
 800af40:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af42:	4b16      	ldr	r3, [pc, #88]	; (800af9c <USBD_LL_Init+0x94>)
 800af44:	2200      	movs	r2, #0
 800af46:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af48:	4b14      	ldr	r3, [pc, #80]	; (800af9c <USBD_LL_Init+0x94>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <USBD_LL_Init+0x94>)
 800af50:	2200      	movs	r2, #0
 800af52:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800af54:	4b11      	ldr	r3, [pc, #68]	; (800af9c <USBD_LL_Init+0x94>)
 800af56:	2200      	movs	r2, #0
 800af58:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af5a:	4b10      	ldr	r3, [pc, #64]	; (800af9c <USBD_LL_Init+0x94>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800af60:	4b0e      	ldr	r3, [pc, #56]	; (800af9c <USBD_LL_Init+0x94>)
 800af62:	2200      	movs	r2, #0
 800af64:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af66:	480d      	ldr	r0, [pc, #52]	; (800af9c <USBD_LL_Init+0x94>)
 800af68:	f7f6 fcfa 	bl	8001960 <HAL_PCD_Init>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800af72:	f7f5 fc33 	bl	80007dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800af76:	2180      	movs	r1, #128	; 0x80
 800af78:	4808      	ldr	r0, [pc, #32]	; (800af9c <USBD_LL_Init+0x94>)
 800af7a:	f7f7 fdd6 	bl	8002b2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800af7e:	2240      	movs	r2, #64	; 0x40
 800af80:	2100      	movs	r1, #0
 800af82:	4806      	ldr	r0, [pc, #24]	; (800af9c <USBD_LL_Init+0x94>)
 800af84:	f7f7 fd8a 	bl	8002a9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af88:	2280      	movs	r2, #128	; 0x80
 800af8a:	2101      	movs	r1, #1
 800af8c:	4803      	ldr	r0, [pc, #12]	; (800af9c <USBD_LL_Init+0x94>)
 800af8e:	f7f7 fd85 	bl	8002a9c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	20009a50 	.word	0x20009a50

0800afa0 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7f6 fdf6 	bl	8001ba8 <HAL_PCD_DeInit>
 800afbc:	4603      	mov	r3, r0
 800afbe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d816      	bhi.n	800aff4 <USBD_LL_DeInit+0x54>
 800afc6:	a201      	add	r2, pc, #4	; (adr r2, 800afcc <USBD_LL_DeInit+0x2c>)
 800afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afcc:	0800afdd 	.word	0x0800afdd
 800afd0:	0800afe3 	.word	0x0800afe3
 800afd4:	0800afe9 	.word	0x0800afe9
 800afd8:	0800afef 	.word	0x0800afef
    case HAL_OK :
      usb_status = USBD_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	73fb      	strb	r3, [r7, #15]
    break;
 800afe0:	e00b      	b.n	800affa <USBD_LL_DeInit+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afe2:	2303      	movs	r3, #3
 800afe4:	73fb      	strb	r3, [r7, #15]
    break;
 800afe6:	e008      	b.n	800affa <USBD_LL_DeInit+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afe8:	2301      	movs	r3, #1
 800afea:	73fb      	strb	r3, [r7, #15]
    break;
 800afec:	e005      	b.n	800affa <USBD_LL_DeInit+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afee:	2303      	movs	r3, #3
 800aff0:	73fb      	strb	r3, [r7, #15]
    break;
 800aff2:	e002      	b.n	800affa <USBD_LL_DeInit+0x5a>
    default :
      usb_status = USBD_FAIL;
 800aff4:	2303      	movs	r3, #3
 800aff6:	73fb      	strb	r3, [r7, #15]
    break;
 800aff8:	bf00      	nop
  }
  return usb_status;
 800affa:	7bfb      	ldrb	r3, [r7, #15]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b00c:	2300      	movs	r3, #0
 800b00e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b010:	2300      	movs	r3, #0
 800b012:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7f6 fde7 	bl	8001bee <HAL_PCD_Start>
 800b020:	4603      	mov	r3, r0
 800b022:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b024:	7bbb      	ldrb	r3, [r7, #14]
 800b026:	2b03      	cmp	r3, #3
 800b028:	d816      	bhi.n	800b058 <USBD_LL_Start+0x54>
 800b02a:	a201      	add	r2, pc, #4	; (adr r2, 800b030 <USBD_LL_Start+0x2c>)
 800b02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b030:	0800b041 	.word	0x0800b041
 800b034:	0800b047 	.word	0x0800b047
 800b038:	0800b04d 	.word	0x0800b04d
 800b03c:	0800b053 	.word	0x0800b053
    case HAL_OK :
      usb_status = USBD_OK;
 800b040:	2300      	movs	r3, #0
 800b042:	73fb      	strb	r3, [r7, #15]
    break;
 800b044:	e00b      	b.n	800b05e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b046:	2303      	movs	r3, #3
 800b048:	73fb      	strb	r3, [r7, #15]
    break;
 800b04a:	e008      	b.n	800b05e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b04c:	2301      	movs	r3, #1
 800b04e:	73fb      	strb	r3, [r7, #15]
    break;
 800b050:	e005      	b.n	800b05e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b052:	2303      	movs	r3, #3
 800b054:	73fb      	strb	r3, [r7, #15]
    break;
 800b056:	e002      	b.n	800b05e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b058:	2303      	movs	r3, #3
 800b05a:	73fb      	strb	r3, [r7, #15]
    break;
 800b05c:	bf00      	nop
  }
  return usb_status;
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b07e:	4618      	mov	r0, r3
 800b080:	f7f6 fde4 	bl	8001c4c <HAL_PCD_Stop>
 800b084:	4603      	mov	r3, r0
 800b086:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b088:	7bbb      	ldrb	r3, [r7, #14]
 800b08a:	2b03      	cmp	r3, #3
 800b08c:	d816      	bhi.n	800b0bc <USBD_LL_Stop+0x54>
 800b08e:	a201      	add	r2, pc, #4	; (adr r2, 800b094 <USBD_LL_Stop+0x2c>)
 800b090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b094:	0800b0a5 	.word	0x0800b0a5
 800b098:	0800b0ab 	.word	0x0800b0ab
 800b09c:	0800b0b1 	.word	0x0800b0b1
 800b0a0:	0800b0b7 	.word	0x0800b0b7
    case HAL_OK :
      usb_status = USBD_OK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b0a8:	e00b      	b.n	800b0c2 <USBD_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ae:	e008      	b.n	800b0c2 <USBD_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b0b4:	e005      	b.n	800b0c2 <USBD_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ba:	e002      	b.n	800b0c2 <USBD_LL_Stop+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	73fb      	strb	r3, [r7, #15]
    break;
 800b0c0:	bf00      	nop
  }
  return usb_status;
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	4608      	mov	r0, r1
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	461a      	mov	r2, r3
 800b0da:	4603      	mov	r3, r0
 800b0dc:	70fb      	strb	r3, [r7, #3]
 800b0de:	460b      	mov	r3, r1
 800b0e0:	70bb      	strb	r3, [r7, #2]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b0f4:	78bb      	ldrb	r3, [r7, #2]
 800b0f6:	883a      	ldrh	r2, [r7, #0]
 800b0f8:	78f9      	ldrb	r1, [r7, #3]
 800b0fa:	f7f7 f99a 	bl	8002432 <HAL_PCD_EP_Open>
 800b0fe:	4603      	mov	r3, r0
 800b100:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b102:	7bbb      	ldrb	r3, [r7, #14]
 800b104:	2b03      	cmp	r3, #3
 800b106:	d817      	bhi.n	800b138 <USBD_LL_OpenEP+0x6c>
 800b108:	a201      	add	r2, pc, #4	; (adr r2, 800b110 <USBD_LL_OpenEP+0x44>)
 800b10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10e:	bf00      	nop
 800b110:	0800b121 	.word	0x0800b121
 800b114:	0800b127 	.word	0x0800b127
 800b118:	0800b12d 	.word	0x0800b12d
 800b11c:	0800b133 	.word	0x0800b133
    case HAL_OK :
      usb_status = USBD_OK;
 800b120:	2300      	movs	r3, #0
 800b122:	73fb      	strb	r3, [r7, #15]
    break;
 800b124:	e00b      	b.n	800b13e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b126:	2303      	movs	r3, #3
 800b128:	73fb      	strb	r3, [r7, #15]
    break;
 800b12a:	e008      	b.n	800b13e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b12c:	2301      	movs	r3, #1
 800b12e:	73fb      	strb	r3, [r7, #15]
    break;
 800b130:	e005      	b.n	800b13e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b132:	2303      	movs	r3, #3
 800b134:	73fb      	strb	r3, [r7, #15]
    break;
 800b136:	e002      	b.n	800b13e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b138:	2303      	movs	r3, #3
 800b13a:	73fb      	strb	r3, [r7, #15]
    break;
 800b13c:	bf00      	nop
  }
  return usb_status;
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	460b      	mov	r3, r1
 800b152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b162:	78fa      	ldrb	r2, [r7, #3]
 800b164:	4611      	mov	r1, r2
 800b166:	4618      	mov	r0, r3
 800b168:	f7f7 f9cb 	bl	8002502 <HAL_PCD_EP_Close>
 800b16c:	4603      	mov	r3, r0
 800b16e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b170:	7bbb      	ldrb	r3, [r7, #14]
 800b172:	2b03      	cmp	r3, #3
 800b174:	d816      	bhi.n	800b1a4 <USBD_LL_CloseEP+0x5c>
 800b176:	a201      	add	r2, pc, #4	; (adr r2, 800b17c <USBD_LL_CloseEP+0x34>)
 800b178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b17c:	0800b18d 	.word	0x0800b18d
 800b180:	0800b193 	.word	0x0800b193
 800b184:	0800b199 	.word	0x0800b199
 800b188:	0800b19f 	.word	0x0800b19f
    case HAL_OK :
      usb_status = USBD_OK;
 800b18c:	2300      	movs	r3, #0
 800b18e:	73fb      	strb	r3, [r7, #15]
    break;
 800b190:	e00b      	b.n	800b1aa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b192:	2303      	movs	r3, #3
 800b194:	73fb      	strb	r3, [r7, #15]
    break;
 800b196:	e008      	b.n	800b1aa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b198:	2301      	movs	r3, #1
 800b19a:	73fb      	strb	r3, [r7, #15]
    break;
 800b19c:	e005      	b.n	800b1aa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a2:	e002      	b.n	800b1aa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a8:	bf00      	nop
  }
  return usb_status;
 800b1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1ce:	78fa      	ldrb	r2, [r7, #3]
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7f7 fb2a 	bl	800282c <HAL_PCD_EP_Flush>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b1dc:	7bbb      	ldrb	r3, [r7, #14]
 800b1de:	2b03      	cmp	r3, #3
 800b1e0:	d816      	bhi.n	800b210 <USBD_LL_FlushEP+0x5c>
 800b1e2:	a201      	add	r2, pc, #4	; (adr r2, 800b1e8 <USBD_LL_FlushEP+0x34>)
 800b1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e8:	0800b1f9 	.word	0x0800b1f9
 800b1ec:	0800b1ff 	.word	0x0800b1ff
 800b1f0:	0800b205 	.word	0x0800b205
 800b1f4:	0800b20b 	.word	0x0800b20b
    case HAL_OK :
      usb_status = USBD_OK;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b1fc:	e00b      	b.n	800b216 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1fe:	2303      	movs	r3, #3
 800b200:	73fb      	strb	r3, [r7, #15]
    break;
 800b202:	e008      	b.n	800b216 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b204:	2301      	movs	r3, #1
 800b206:	73fb      	strb	r3, [r7, #15]
    break;
 800b208:	e005      	b.n	800b216 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b20a:	2303      	movs	r3, #3
 800b20c:	73fb      	strb	r3, [r7, #15]
    break;
 800b20e:	e002      	b.n	800b216 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b210:	2303      	movs	r3, #3
 800b212:	73fb      	strb	r3, [r7, #15]
    break;
 800b214:	bf00      	nop
  }
  return usb_status;
 800b216:	7bfb      	ldrb	r3, [r7, #15]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	460b      	mov	r3, r1
 800b22a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b230:	2300      	movs	r3, #0
 800b232:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b23a:	78fa      	ldrb	r2, [r7, #3]
 800b23c:	4611      	mov	r1, r2
 800b23e:	4618      	mov	r0, r3
 800b240:	f7f7 fa3c 	bl	80026bc <HAL_PCD_EP_SetStall>
 800b244:	4603      	mov	r3, r0
 800b246:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b248:	7bbb      	ldrb	r3, [r7, #14]
 800b24a:	2b03      	cmp	r3, #3
 800b24c:	d816      	bhi.n	800b27c <USBD_LL_StallEP+0x5c>
 800b24e:	a201      	add	r2, pc, #4	; (adr r2, 800b254 <USBD_LL_StallEP+0x34>)
 800b250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b254:	0800b265 	.word	0x0800b265
 800b258:	0800b26b 	.word	0x0800b26b
 800b25c:	0800b271 	.word	0x0800b271
 800b260:	0800b277 	.word	0x0800b277
    case HAL_OK :
      usb_status = USBD_OK;
 800b264:	2300      	movs	r3, #0
 800b266:	73fb      	strb	r3, [r7, #15]
    break;
 800b268:	e00b      	b.n	800b282 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b26a:	2303      	movs	r3, #3
 800b26c:	73fb      	strb	r3, [r7, #15]
    break;
 800b26e:	e008      	b.n	800b282 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b270:	2301      	movs	r3, #1
 800b272:	73fb      	strb	r3, [r7, #15]
    break;
 800b274:	e005      	b.n	800b282 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b276:	2303      	movs	r3, #3
 800b278:	73fb      	strb	r3, [r7, #15]
    break;
 800b27a:	e002      	b.n	800b282 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b27c:	2303      	movs	r3, #3
 800b27e:	73fb      	strb	r3, [r7, #15]
    break;
 800b280:	bf00      	nop
  }
  return usb_status;
 800b282:	7bfb      	ldrb	r3, [r7, #15]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3710      	adds	r7, #16
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	460b      	mov	r3, r1
 800b296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2a6:	78fa      	ldrb	r2, [r7, #3]
 800b2a8:	4611      	mov	r1, r2
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7f7 fa68 	bl	8002780 <HAL_PCD_EP_ClrStall>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b2b4:	7bbb      	ldrb	r3, [r7, #14]
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d816      	bhi.n	800b2e8 <USBD_LL_ClearStallEP+0x5c>
 800b2ba:	a201      	add	r2, pc, #4	; (adr r2, 800b2c0 <USBD_LL_ClearStallEP+0x34>)
 800b2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c0:	0800b2d1 	.word	0x0800b2d1
 800b2c4:	0800b2d7 	.word	0x0800b2d7
 800b2c8:	0800b2dd 	.word	0x0800b2dd
 800b2cc:	0800b2e3 	.word	0x0800b2e3
    case HAL_OK :
      usb_status = USBD_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d4:	e00b      	b.n	800b2ee <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b2da:	e008      	b.n	800b2ee <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	73fb      	strb	r3, [r7, #15]
    break;
 800b2e0:	e005      	b.n	800b2ee <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b2e6:	e002      	b.n	800b2ee <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ec:	bf00      	nop
  }
  return usb_status;
 800b2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	460b      	mov	r3, r1
 800b302:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b30a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b30c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b310:	2b00      	cmp	r3, #0
 800b312:	da0b      	bge.n	800b32c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b314:	78fb      	ldrb	r3, [r7, #3]
 800b316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b31a:	68f9      	ldr	r1, [r7, #12]
 800b31c:	4613      	mov	r3, r2
 800b31e:	00db      	lsls	r3, r3, #3
 800b320:	1a9b      	subs	r3, r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	440b      	add	r3, r1
 800b326:	333e      	adds	r3, #62	; 0x3e
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	e00b      	b.n	800b344 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b32c:	78fb      	ldrb	r3, [r7, #3]
 800b32e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b332:	68f9      	ldr	r1, [r7, #12]
 800b334:	4613      	mov	r3, r2
 800b336:	00db      	lsls	r3, r3, #3
 800b338:	1a9b      	subs	r3, r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	440b      	add	r3, r1
 800b33e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b342:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b344:	4618      	mov	r0, r3
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	460b      	mov	r3, r1
 800b35a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b36a:	78fa      	ldrb	r2, [r7, #3]
 800b36c:	4611      	mov	r1, r2
 800b36e:	4618      	mov	r0, r3
 800b370:	f7f7 f83a 	bl	80023e8 <HAL_PCD_SetAddress>
 800b374:	4603      	mov	r3, r0
 800b376:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b378:	7bbb      	ldrb	r3, [r7, #14]
 800b37a:	2b03      	cmp	r3, #3
 800b37c:	d816      	bhi.n	800b3ac <USBD_LL_SetUSBAddress+0x5c>
 800b37e:	a201      	add	r2, pc, #4	; (adr r2, 800b384 <USBD_LL_SetUSBAddress+0x34>)
 800b380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b384:	0800b395 	.word	0x0800b395
 800b388:	0800b39b 	.word	0x0800b39b
 800b38c:	0800b3a1 	.word	0x0800b3a1
 800b390:	0800b3a7 	.word	0x0800b3a7
    case HAL_OK :
      usb_status = USBD_OK;
 800b394:	2300      	movs	r3, #0
 800b396:	73fb      	strb	r3, [r7, #15]
    break;
 800b398:	e00b      	b.n	800b3b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b39a:	2303      	movs	r3, #3
 800b39c:	73fb      	strb	r3, [r7, #15]
    break;
 800b39e:	e008      	b.n	800b3b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a4:	e005      	b.n	800b3b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3aa:	e002      	b.n	800b3b2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b0:	bf00      	nop
  }
  return usb_status;
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3710      	adds	r7, #16
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	607a      	str	r2, [r7, #4]
 800b3c6:	603b      	str	r3, [r7, #0]
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b3da:	7af9      	ldrb	r1, [r7, #11]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	f7f7 f92f 	bl	8002642 <HAL_PCD_EP_Transmit>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b3e8:	7dbb      	ldrb	r3, [r7, #22]
 800b3ea:	2b03      	cmp	r3, #3
 800b3ec:	d816      	bhi.n	800b41c <USBD_LL_Transmit+0x60>
 800b3ee:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <USBD_LL_Transmit+0x38>)
 800b3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f4:	0800b405 	.word	0x0800b405
 800b3f8:	0800b40b 	.word	0x0800b40b
 800b3fc:	0800b411 	.word	0x0800b411
 800b400:	0800b417 	.word	0x0800b417
    case HAL_OK :
      usb_status = USBD_OK;
 800b404:	2300      	movs	r3, #0
 800b406:	75fb      	strb	r3, [r7, #23]
    break;
 800b408:	e00b      	b.n	800b422 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b40a:	2303      	movs	r3, #3
 800b40c:	75fb      	strb	r3, [r7, #23]
    break;
 800b40e:	e008      	b.n	800b422 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b410:	2301      	movs	r3, #1
 800b412:	75fb      	strb	r3, [r7, #23]
    break;
 800b414:	e005      	b.n	800b422 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b416:	2303      	movs	r3, #3
 800b418:	75fb      	strb	r3, [r7, #23]
    break;
 800b41a:	e002      	b.n	800b422 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b41c:	2303      	movs	r3, #3
 800b41e:	75fb      	strb	r3, [r7, #23]
    break;
 800b420:	bf00      	nop
  }
  return usb_status;
 800b422:	7dfb      	ldrb	r3, [r7, #23]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	607a      	str	r2, [r7, #4]
 800b436:	603b      	str	r3, [r7, #0]
 800b438:	460b      	mov	r3, r1
 800b43a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b44a:	7af9      	ldrb	r1, [r7, #11]
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	f7f7 f8a1 	bl	8002596 <HAL_PCD_EP_Receive>
 800b454:	4603      	mov	r3, r0
 800b456:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b458:	7dbb      	ldrb	r3, [r7, #22]
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d816      	bhi.n	800b48c <USBD_LL_PrepareReceive+0x60>
 800b45e:	a201      	add	r2, pc, #4	; (adr r2, 800b464 <USBD_LL_PrepareReceive+0x38>)
 800b460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b464:	0800b475 	.word	0x0800b475
 800b468:	0800b47b 	.word	0x0800b47b
 800b46c:	0800b481 	.word	0x0800b481
 800b470:	0800b487 	.word	0x0800b487
    case HAL_OK :
      usb_status = USBD_OK;
 800b474:	2300      	movs	r3, #0
 800b476:	75fb      	strb	r3, [r7, #23]
    break;
 800b478:	e00b      	b.n	800b492 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b47a:	2303      	movs	r3, #3
 800b47c:	75fb      	strb	r3, [r7, #23]
    break;
 800b47e:	e008      	b.n	800b492 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b480:	2301      	movs	r3, #1
 800b482:	75fb      	strb	r3, [r7, #23]
    break;
 800b484:	e005      	b.n	800b492 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b486:	2303      	movs	r3, #3
 800b488:	75fb      	strb	r3, [r7, #23]
    break;
 800b48a:	e002      	b.n	800b492 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b48c:	2303      	movs	r3, #3
 800b48e:	75fb      	strb	r3, [r7, #23]
    break;
 800b490:	bf00      	nop
  }
  return usb_status;
 800b492:	7dfb      	ldrb	r3, [r7, #23]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3718      	adds	r7, #24
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b4ae:	78fa      	ldrb	r2, [r7, #3]
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7f7 f8ad 	bl	8002612 <HAL_PCD_EP_GetRxCount>
 800b4b8:	4603      	mov	r3, r0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
	...

0800b4c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b4cc:	4b03      	ldr	r3, [pc, #12]	; (800b4dc <USBD_static_malloc+0x18>)
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	370c      	adds	r7, #12
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	20009e58 	.word	0x20009e58

0800b4e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]

}
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b4f8:	f7f5 f90e 	bl	8000718 <SystemClock_Config>
}
 800b4fc:	bf00      	nop
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <__libc_init_array>:
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	4d0d      	ldr	r5, [pc, #52]	; (800b538 <__libc_init_array+0x38>)
 800b504:	4c0d      	ldr	r4, [pc, #52]	; (800b53c <__libc_init_array+0x3c>)
 800b506:	1b64      	subs	r4, r4, r5
 800b508:	10a4      	asrs	r4, r4, #2
 800b50a:	2600      	movs	r6, #0
 800b50c:	42a6      	cmp	r6, r4
 800b50e:	d109      	bne.n	800b524 <__libc_init_array+0x24>
 800b510:	4d0b      	ldr	r5, [pc, #44]	; (800b540 <__libc_init_array+0x40>)
 800b512:	4c0c      	ldr	r4, [pc, #48]	; (800b544 <__libc_init_array+0x44>)
 800b514:	f000 f820 	bl	800b558 <_init>
 800b518:	1b64      	subs	r4, r4, r5
 800b51a:	10a4      	asrs	r4, r4, #2
 800b51c:	2600      	movs	r6, #0
 800b51e:	42a6      	cmp	r6, r4
 800b520:	d105      	bne.n	800b52e <__libc_init_array+0x2e>
 800b522:	bd70      	pop	{r4, r5, r6, pc}
 800b524:	f855 3b04 	ldr.w	r3, [r5], #4
 800b528:	4798      	blx	r3
 800b52a:	3601      	adds	r6, #1
 800b52c:	e7ee      	b.n	800b50c <__libc_init_array+0xc>
 800b52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b532:	4798      	blx	r3
 800b534:	3601      	adds	r6, #1
 800b536:	e7f2      	b.n	800b51e <__libc_init_array+0x1e>
 800b538:	0800b668 	.word	0x0800b668
 800b53c:	0800b668 	.word	0x0800b668
 800b540:	0800b668 	.word	0x0800b668
 800b544:	0800b66c 	.word	0x0800b66c

0800b548 <memset>:
 800b548:	4402      	add	r2, r0
 800b54a:	4603      	mov	r3, r0
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d100      	bne.n	800b552 <memset+0xa>
 800b550:	4770      	bx	lr
 800b552:	f803 1b01 	strb.w	r1, [r3], #1
 800b556:	e7f9      	b.n	800b54c <memset+0x4>

0800b558 <_init>:
 800b558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55a:	bf00      	nop
 800b55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b55e:	bc08      	pop	{r3}
 800b560:	469e      	mov	lr, r3
 800b562:	4770      	bx	lr

0800b564 <_fini>:
 800b564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b566:	bf00      	nop
 800b568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56a:	bc08      	pop	{r3}
 800b56c:	469e      	mov	lr, r3
 800b56e:	4770      	bx	lr
