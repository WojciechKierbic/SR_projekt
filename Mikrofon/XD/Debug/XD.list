
XD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800d0bc  0800d0bc  0001d0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d170  0800d170  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d170  0800d170  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d170  0800d170  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d170  0800d170  0001d170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d174  0800d174  0001d174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800d178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bdc  200001a4  0800d31c  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d80  0800d31c  00022d80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001efe3  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f2c  00000000  00000000  0003f1b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  000440e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001878  00000000  00000000  00045ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf6b  00000000  00000000  00047420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000214c6  00000000  00000000  0007438b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5a4f  00000000  00000000  00095851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018b2a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d08  00000000  00000000  0018b2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001a4 	.word	0x200001a4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d0a4 	.word	0x0800d0a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001a8 	.word	0x200001a8
 80001c4:	0800d0a4 	.word	0x0800d0a4

080001c8 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	607b      	str	r3, [r7, #4]
 80001d0:	4603      	mov	r3, r0
 80001d2:	81fb      	strh	r3, [r7, #14]
 80001d4:	460b      	mov	r3, r1
 80001d6:	81bb      	strh	r3, [r7, #12]
 80001d8:	4613      	mov	r3, r2
 80001da:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	617b      	str	r3, [r7, #20]

  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80001e0:	f001 fd52 	bl	8001c88 <AUDIO_IO_Init>

  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 80001e4:	89fb      	ldrh	r3, [r7, #14]
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	2201      	movs	r2, #1
 80001ea:	2102      	movs	r1, #2
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 fb01 	bl	80007f4 <CODEC_IO_Write>
 80001f2:	4603      	mov	r3, r0
 80001f4:	461a      	mov	r2, r3
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	4413      	add	r3, r2
 80001fa:	617b      	str	r3, [r7, #20]

  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80001fc:	89bb      	ldrh	r3, [r7, #12]
 80001fe:	3b01      	subs	r3, #1
 8000200:	2b03      	cmp	r3, #3
 8000202:	d81b      	bhi.n	800023c <cs43l22_Init+0x74>
 8000204:	a201      	add	r2, pc, #4	; (adr r2, 800020c <cs43l22_Init+0x44>)
 8000206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020a:	bf00      	nop
 800020c:	0800021d 	.word	0x0800021d
 8000210:	08000225 	.word	0x08000225
 8000214:	0800022d 	.word	0x0800022d
 8000218:	08000235 	.word	0x08000235
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 800021c:	4b5b      	ldr	r3, [pc, #364]	; (800038c <cs43l22_Init+0x1c4>)
 800021e:	22fa      	movs	r2, #250	; 0xfa
 8000220:	701a      	strb	r2, [r3, #0]
    break;
 8000222:	e00f      	b.n	8000244 <cs43l22_Init+0x7c>

  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000224:	4b59      	ldr	r3, [pc, #356]	; (800038c <cs43l22_Init+0x1c4>)
 8000226:	22af      	movs	r2, #175	; 0xaf
 8000228:	701a      	strb	r2, [r3, #0]
    break;
 800022a:	e00b      	b.n	8000244 <cs43l22_Init+0x7c>

  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 800022c:	4b57      	ldr	r3, [pc, #348]	; (800038c <cs43l22_Init+0x1c4>)
 800022e:	22aa      	movs	r2, #170	; 0xaa
 8000230:	701a      	strb	r2, [r3, #0]
    break;
 8000232:	e007      	b.n	8000244 <cs43l22_Init+0x7c>

  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000234:	4b55      	ldr	r3, [pc, #340]	; (800038c <cs43l22_Init+0x1c4>)
 8000236:	2205      	movs	r2, #5
 8000238:	701a      	strb	r2, [r3, #0]
    break;
 800023a:	e003      	b.n	8000244 <cs43l22_Init+0x7c>

  default:
    OutputDev = 0x05;
 800023c:	4b53      	ldr	r3, [pc, #332]	; (800038c <cs43l22_Init+0x1c4>)
 800023e:	2205      	movs	r2, #5
 8000240:	701a      	strb	r2, [r3, #0]
    break;
 8000242:	bf00      	nop
  }

  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000244:	89fb      	ldrh	r3, [r7, #14]
 8000246:	b2db      	uxtb	r3, r3
 8000248:	4a50      	ldr	r2, [pc, #320]	; (800038c <cs43l22_Init+0x1c4>)
 800024a:	7812      	ldrb	r2, [r2, #0]
 800024c:	b2d2      	uxtb	r2, r2
 800024e:	2104      	movs	r1, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 facf 	bl	80007f4 <CODEC_IO_Write>
 8000256:	4603      	mov	r3, r0
 8000258:	461a      	mov	r2, r3
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	4413      	add	r3, r2
 800025e:	617b      	str	r3, [r7, #20]

  /* Clock configuration: Auto detection */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000260:	89fb      	ldrh	r3, [r7, #14]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	2281      	movs	r2, #129	; 0x81
 8000266:	2105      	movs	r1, #5
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fac3 	bl	80007f4 <CODEC_IO_Write>
 800026e:	4603      	mov	r3, r0
 8000270:	461a      	mov	r2, r3
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	4413      	add	r3, r2
 8000276:	617b      	str	r3, [r7, #20]

  /* Set the Slave Mode and the audio Standard */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000278:	89fb      	ldrh	r3, [r7, #14]
 800027a:	b2db      	uxtb	r3, r3
 800027c:	2204      	movs	r2, #4
 800027e:	2106      	movs	r1, #6
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fab7 	bl	80007f4 <CODEC_IO_Write>
 8000286:	4603      	mov	r3, r0
 8000288:	461a      	mov	r2, r3
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	4413      	add	r3, r2
 800028e:	617b      	str	r3, [r7, #20]

  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000290:	7afa      	ldrb	r2, [r7, #11]
 8000292:	89fb      	ldrh	r3, [r7, #14]
 8000294:	4611      	mov	r1, r2
 8000296:	4618      	mov	r0, r3
 8000298:	f000 f964 	bl	8000564 <cs43l22_SetVolume>
 800029c:	4602      	mov	r2, r0
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	4413      	add	r3, r2
 80002a2:	617b      	str	r3, [r7, #20]

  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80002a4:	89bb      	ldrh	r3, [r7, #12]
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d023      	beq.n	80002f2 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80002aa:	89fb      	ldrh	r3, [r7, #14]
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	2206      	movs	r2, #6
 80002b0:	210f      	movs	r1, #15
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fa9e 	bl	80007f4 <CODEC_IO_Write>
 80002b8:	4603      	mov	r3, r0
 80002ba:	461a      	mov	r2, r3
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	4413      	add	r3, r2
 80002c0:	617b      	str	r3, [r7, #20]

    /* Set the Speaker attenuation level */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80002c2:	89fb      	ldrh	r3, [r7, #14]
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2200      	movs	r2, #0
 80002c8:	2124      	movs	r1, #36	; 0x24
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fa92 	bl	80007f4 <CODEC_IO_Write>
 80002d0:	4603      	mov	r3, r0
 80002d2:	461a      	mov	r2, r3
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	4413      	add	r3, r2
 80002d8:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80002da:	89fb      	ldrh	r3, [r7, #14]
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	2200      	movs	r2, #0
 80002e0:	2125      	movs	r1, #37	; 0x25
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fa86 	bl	80007f4 <CODEC_IO_Write>
 80002e8:	4603      	mov	r3, r0
 80002ea:	461a      	mov	r2, r3
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	4413      	add	r3, r2
 80002f0:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */

  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80002f2:	89fb      	ldrh	r3, [r7, #14]
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2200      	movs	r2, #0
 80002f8:	210a      	movs	r1, #10
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fa7a 	bl	80007f4 <CODEC_IO_Write>
 8000300:	4603      	mov	r3, r0
 8000302:	461a      	mov	r2, r3
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	4413      	add	r3, r2
 8000308:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800030a:	89fb      	ldrh	r3, [r7, #14]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2204      	movs	r2, #4
 8000310:	210e      	movs	r1, #14
 8000312:	4618      	mov	r0, r3
 8000314:	f000 fa6e 	bl	80007f4 <CODEC_IO_Write>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	4413      	add	r3, r2
 8000320:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000322:	89fb      	ldrh	r3, [r7, #14]
 8000324:	b2db      	uxtb	r3, r3
 8000326:	2200      	movs	r2, #0
 8000328:	2127      	movs	r1, #39	; 0x27
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fa62 	bl	80007f4 <CODEC_IO_Write>
 8000330:	4603      	mov	r3, r0
 8000332:	461a      	mov	r2, r3
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	4413      	add	r3, r2
 8000338:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800033a:	89fb      	ldrh	r3, [r7, #14]
 800033c:	b2db      	uxtb	r3, r3
 800033e:	220f      	movs	r2, #15
 8000340:	211f      	movs	r1, #31
 8000342:	4618      	mov	r0, r3
 8000344:	f000 fa56 	bl	80007f4 <CODEC_IO_Write>
 8000348:	4603      	mov	r3, r0
 800034a:	461a      	mov	r2, r3
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	4413      	add	r3, r2
 8000350:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000352:	89fb      	ldrh	r3, [r7, #14]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	220a      	movs	r2, #10
 8000358:	211a      	movs	r1, #26
 800035a:	4618      	mov	r0, r3
 800035c:	f000 fa4a 	bl	80007f4 <CODEC_IO_Write>
 8000360:	4603      	mov	r3, r0
 8000362:	461a      	mov	r2, r3
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	4413      	add	r3, r2
 8000368:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800036a:	89fb      	ldrh	r3, [r7, #14]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	220a      	movs	r2, #10
 8000370:	211b      	movs	r1, #27
 8000372:	4618      	mov	r0, r3
 8000374:	f000 fa3e 	bl	80007f4 <CODEC_IO_Write>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	4413      	add	r3, r2
 8000380:	617b      	str	r3, [r7, #20]

  /* Return communication control value */
  return counter;
 8000382:	697b      	ldr	r3, [r7, #20]
}
 8000384:	4618      	mov	r0, r3
 8000386:	3718      	adds	r7, #24
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	200001c0 	.word	0x200001c0

08000390 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000394:	f001 fcae 	bl	8001cf4 <AUDIO_IO_DeInit>
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}

0800039c <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The CS43L22 ID
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80003a6:	f001 fc6f 	bl	8001c88 <AUDIO_IO_Init>

  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80003aa:	88fb      	ldrh	r3, [r7, #6]
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	2101      	movs	r1, #1
 80003b0:	4618      	mov	r0, r3
 80003b2:	f001 fcf6 	bl	8001da2 <AUDIO_IO_Read>
 80003b6:	4603      	mov	r3, r0
 80003b8:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	f023 0307 	bic.w	r3, r3, #7
 80003c0:	73fb      	strb	r3, [r7, #15]

  return((uint32_t) Value);
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	6039      	str	r1, [r7, #0]
 80003d6:	80fb      	strh	r3, [r7, #6]
 80003d8:	4613      	mov	r3, r2
 80003da:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]

  if(Is_cs43l22_Stop == 1)
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <cs43l22_Play+0x70>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d123      	bne.n	8000430 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80003e8:	88fb      	ldrh	r3, [r7, #6]
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	2206      	movs	r2, #6
 80003ee:	210e      	movs	r1, #14
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f9ff 	bl	80007f4 <CODEC_IO_Write>
 80003f6:	4603      	mov	r3, r0
 80003f8:	461a      	mov	r2, r3
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	4413      	add	r3, r2
 80003fe:	60fb      	str	r3, [r7, #12]

    /* Enable Output device */
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000400:	88fb      	ldrh	r3, [r7, #6]
 8000402:	2100      	movs	r1, #0
 8000404:	4618      	mov	r0, r3
 8000406:	f000 f919 	bl	800063c <cs43l22_SetMute>
 800040a:	4602      	mov	r2, r0
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	4413      	add	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]

    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 8000412:	88fb      	ldrh	r3, [r7, #6]
 8000414:	b2db      	uxtb	r3, r3
 8000416:	229e      	movs	r2, #158	; 0x9e
 8000418:	2102      	movs	r1, #2
 800041a:	4618      	mov	r0, r3
 800041c:	f000 f9ea 	bl	80007f4 <CODEC_IO_Write>
 8000420:	4603      	mov	r3, r0
 8000422:	461a      	mov	r2, r3
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	4413      	add	r3, r2
 8000428:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <cs43l22_Play+0x70>)
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
  }

  /* Return communication control value */
  return counter;
 8000430:	68fb      	ldr	r3, [r7, #12]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000030 	.word	0x20000030

08000440 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]

  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	2101      	movs	r1, #1
 8000452:	4618      	mov	r0, r3
 8000454:	f000 f8f2 	bl	800063c <cs43l22_SetMute>
 8000458:	4602      	mov	r2, r0
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	4413      	add	r3, r2
 800045e:	60fb      	str	r3, [r7, #12]

  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8000460:	88fb      	ldrh	r3, [r7, #6]
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2201      	movs	r2, #1
 8000466:	2102      	movs	r1, #2
 8000468:	4618      	mov	r0, r3
 800046a:	f000 f9c3 	bl	80007f4 <CODEC_IO_Write>
 800046e:	4603      	mov	r3, r0
 8000470:	461a      	mov	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4413      	add	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]

  return counter;
 8000478:	68fb      	ldr	r3, [r7, #12]
}
 800047a:	4618      	mov	r0, r3
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8000492:	2300      	movs	r3, #0
 8000494:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000496:	88fb      	ldrh	r3, [r7, #6]
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f8ce 	bl	800063c <cs43l22_SetMute>
 80004a0:	4602      	mov	r2, r0
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	4413      	add	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80004a8:	2300      	movs	r3, #0
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	e002      	b.n	80004b4 <cs43l22_Resume+0x30>
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	3301      	adds	r3, #1
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	2bfe      	cmp	r3, #254	; 0xfe
 80004b8:	d9f9      	bls.n	80004ae <cs43l22_Resume+0x2a>

  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80004ba:	88fb      	ldrh	r3, [r7, #6]
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <cs43l22_Resume+0x74>)
 80004c0:	7812      	ldrb	r2, [r2, #0]
 80004c2:	b2d2      	uxtb	r2, r2
 80004c4:	2104      	movs	r1, #4
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f994 	bl	80007f4 <CODEC_IO_Write>
 80004cc:	4603      	mov	r3, r0
 80004ce:	461a      	mov	r2, r3
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	4413      	add	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	229e      	movs	r2, #158	; 0x9e
 80004dc:	2102      	movs	r1, #2
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 f988 	bl	80007f4 <CODEC_IO_Write>
 80004e4:	4603      	mov	r3, r0
 80004e6:	461a      	mov	r2, r3
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4413      	add	r3, r2
 80004ec:	60fb      	str	r3, [r7, #12]

  return counter;
 80004ee:	68fb      	ldr	r3, [r7, #12]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200001c0 	.word	0x200001c0

080004fc <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]

  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800050c:	88fb      	ldrh	r3, [r7, #6]
 800050e:	2101      	movs	r1, #1
 8000510:	4618      	mov	r0, r3
 8000512:	f000 f893 	bl	800063c <cs43l22_SetMute>
 8000516:	4602      	mov	r2, r0
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4413      	add	r3, r2
 800051c:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2204      	movs	r2, #4
 8000524:	210e      	movs	r1, #14
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f964 	bl	80007f4 <CODEC_IO_Write>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4413      	add	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]

  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	229f      	movs	r2, #159	; 0x9f
 800053c:	2102      	movs	r1, #2
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f958 	bl	80007f4 <CODEC_IO_Write>
 8000544:	4603      	mov	r3, r0
 8000546:	461a      	mov	r2, r3
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4413      	add	r3, r2
 800054c:	60fb      	str	r3, [r7, #12]

  Is_cs43l22_Stop = 1;
 800054e:	4b04      	ldr	r3, [pc, #16]	; (8000560 <cs43l22_Stop+0x64>)
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
  return counter;
 8000554:	68fb      	ldr	r3, [r7, #12]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000030 	.word	0x20000030

08000564 <cs43l22_SetVolume>:
  *                description for more details).
  *
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	460a      	mov	r2, r1
 800056e:	80fb      	strh	r3, [r7, #6]
 8000570:	4613      	mov	r3, r2
 8000572:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000578:	797b      	ldrb	r3, [r7, #5]
 800057a:	2b64      	cmp	r3, #100	; 0x64
 800057c:	d80b      	bhi.n	8000596 <cs43l22_SetVolume+0x32>
 800057e:	797a      	ldrb	r2, [r7, #5]
 8000580:	4613      	mov	r3, r2
 8000582:	021b      	lsls	r3, r3, #8
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	4a25      	ldr	r2, [pc, #148]	; (800061c <cs43l22_SetVolume+0xb8>)
 8000588:	fb82 1203 	smull	r1, r2, r2, r3
 800058c:	1152      	asrs	r2, r2, #5
 800058e:	17db      	asrs	r3, r3, #31
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	b2db      	uxtb	r3, r3
 8000594:	e000      	b.n	8000598 <cs43l22_SetVolume+0x34>
 8000596:	23ff      	movs	r3, #255	; 0xff
 8000598:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 800059a:	7afb      	ldrb	r3, [r7, #11]
 800059c:	2be6      	cmp	r3, #230	; 0xe6
 800059e:	d91c      	bls.n	80005da <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7);
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	b2d8      	uxtb	r0, r3
 80005a4:	7afb      	ldrb	r3, [r7, #11]
 80005a6:	3319      	adds	r3, #25
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	461a      	mov	r2, r3
 80005ac:	2120      	movs	r1, #32
 80005ae:	f000 f921 	bl	80007f4 <CODEC_IO_Write>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	4413      	add	r3, r2
 80005ba:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);
 80005bc:	88fb      	ldrh	r3, [r7, #6]
 80005be:	b2d8      	uxtb	r0, r3
 80005c0:	7afb      	ldrb	r3, [r7, #11]
 80005c2:	3319      	adds	r3, #25
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	461a      	mov	r2, r3
 80005c8:	2121      	movs	r1, #33	; 0x21
 80005ca:	f000 f913 	bl	80007f4 <CODEC_IO_Write>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461a      	mov	r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	4413      	add	r3, r2
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e01b      	b.n	8000612 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19);
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	b2d8      	uxtb	r0, r3
 80005de:	7afb      	ldrb	r3, [r7, #11]
 80005e0:	3319      	adds	r3, #25
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	461a      	mov	r2, r3
 80005e6:	2120      	movs	r1, #32
 80005e8:	f000 f904 	bl	80007f4 <CODEC_IO_Write>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19);
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	b2d8      	uxtb	r0, r3
 80005fa:	7afb      	ldrb	r3, [r7, #11]
 80005fc:	3319      	adds	r3, #25
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	461a      	mov	r2, r3
 8000602:	2121      	movs	r1, #33	; 0x21
 8000604:	f000 f8f6 	bl	80007f4 <CODEC_IO_Write>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4413      	add	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8000612:	68fb      	ldr	r3, [r7, #12]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	51eb851f 	.word	0x51eb851f

08000620 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	80fb      	strh	r3, [r7, #6]
  return 0;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	6039      	str	r1, [r7, #0]
 8000646:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]

  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d124      	bne.n	800069c <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	22ff      	movs	r2, #255	; 0xff
 8000658:	2104      	movs	r1, #4
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f8ca 	bl	80007f4 <CODEC_IO_Write>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2201      	movs	r2, #1
 8000670:	2122      	movs	r1, #34	; 0x22
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f8be 	bl	80007f4 <CODEC_IO_Write>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4413      	add	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2201      	movs	r2, #1
 8000688:	2123      	movs	r1, #35	; 0x23
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f8b2 	bl	80007f4 <CODEC_IO_Write>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e025      	b.n	80006e8 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2200      	movs	r2, #0
 80006a2:	2122      	movs	r1, #34	; 0x22
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f8a5 	bl	80007f4 <CODEC_IO_Write>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4413      	add	r3, r2
 80006b2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2200      	movs	r2, #0
 80006ba:	2123      	movs	r1, #35	; 0x23
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f899 	bl	80007f4 <CODEC_IO_Write>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	4413      	add	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <cs43l22_SetMute+0xb8>)
 80006d2:	7812      	ldrb	r2, [r2, #0]
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	2104      	movs	r1, #4
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f88b 	bl	80007f4 <CODEC_IO_Write>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	4413      	add	r3, r2
 80006e6:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80006e8:	68fb      	ldr	r3, [r7, #12]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200001c0 	.word	0x200001c0

080006f8 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	80fb      	strh	r3, [r7, #6]
 8000704:	4613      	mov	r3, r2
 8000706:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]

  switch (Output)
 800070c:	797b      	ldrb	r3, [r7, #5]
 800070e:	3b01      	subs	r3, #1
 8000710:	2b03      	cmp	r3, #3
 8000712:	d84b      	bhi.n	80007ac <cs43l22_SetOutputMode+0xb4>
 8000714:	a201      	add	r2, pc, #4	; (adr r2, 800071c <cs43l22_SetOutputMode+0x24>)
 8000716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071a:	bf00      	nop
 800071c:	0800072d 	.word	0x0800072d
 8000720:	0800074d 	.word	0x0800074d
 8000724:	0800076d 	.word	0x0800076d
 8000728:	0800078d 	.word	0x0800078d
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	22fa      	movs	r2, #250	; 0xfa
 8000732:	2104      	movs	r1, #4
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f85d 	bl	80007f4 <CODEC_IO_Write>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	4413      	add	r3, r2
 8000742:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <cs43l22_SetOutputMode+0xe0>)
 8000746:	22fa      	movs	r2, #250	; 0xfa
 8000748:	701a      	strb	r2, [r3, #0]
      break;
 800074a:	e03f      	b.n	80007cc <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	22af      	movs	r2, #175	; 0xaf
 8000752:	2104      	movs	r1, #4
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f84d 	bl	80007f4 <CODEC_IO_Write>
 800075a:	4603      	mov	r3, r0
 800075c:	461a      	mov	r2, r3
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	4413      	add	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <cs43l22_SetOutputMode+0xe0>)
 8000766:	22af      	movs	r2, #175	; 0xaf
 8000768:	701a      	strb	r2, [r3, #0]
      break;
 800076a:	e02f      	b.n	80007cc <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	22aa      	movs	r2, #170	; 0xaa
 8000772:	2104      	movs	r1, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f83d 	bl	80007f4 <CODEC_IO_Write>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	4413      	add	r3, r2
 8000782:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <cs43l22_SetOutputMode+0xe0>)
 8000786:	22aa      	movs	r2, #170	; 0xaa
 8000788:	701a      	strb	r2, [r3, #0]
      break;
 800078a:	e01f      	b.n	80007cc <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800078c:	88fb      	ldrh	r3, [r7, #6]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2205      	movs	r2, #5
 8000792:	2104      	movs	r1, #4
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f82d 	bl	80007f4 <CODEC_IO_Write>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	4413      	add	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <cs43l22_SetOutputMode+0xe0>)
 80007a6:	2205      	movs	r2, #5
 80007a8:	701a      	strb	r2, [r3, #0]
      break;
 80007aa:	e00f      	b.n	80007cc <cs43l22_SetOutputMode+0xd4>

    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2205      	movs	r2, #5
 80007b2:	2104      	movs	r1, #4
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 f81d 	bl	80007f4 <CODEC_IO_Write>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	4413      	add	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <cs43l22_SetOutputMode+0xe0>)
 80007c6:	2205      	movs	r2, #5
 80007c8:	701a      	strb	r2, [r3, #0]
      break;
 80007ca:	bf00      	nop
  }
  return counter;
 80007cc:	68fb      	ldr	r3, [r7, #12]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001c0 	.word	0x200001c0

080007dc <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	80fb      	strh	r3, [r7, #6]
  return 0;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <CODEC_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	460b      	mov	r3, r1
 8000800:	71bb      	strb	r3, [r7, #6]
 8000802:	4613      	mov	r3, r2
 8000804:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]

  AUDIO_IO_Write(Addr, Reg, Value);
 800080a:	797a      	ldrb	r2, [r7, #5]
 800080c:	79b9      	ldrb	r1, [r7, #6]
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	4618      	mov	r0, r3
 8000812:	f001 faaf 	bl	8001d74 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	b2db      	uxtb	r3, r3
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000828:	4b39      	ldr	r3, [pc, #228]	; (8000910 <MX_DFSDM1_Init+0xec>)
 800082a:	4a3a      	ldr	r2, [pc, #232]	; (8000914 <MX_DFSDM1_Init+0xf0>)
 800082c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <MX_DFSDM1_Init+0xec>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000834:	4b36      	ldr	r3, [pc, #216]	; (8000910 <MX_DFSDM1_Init+0xec>)
 8000836:	2201      	movs	r2, #1
 8000838:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <MX_DFSDM1_Init+0xec>)
 800083c:	2201      	movs	r2, #1
 800083e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_EXT_TRIGGER;
 8000840:	4b33      	ldr	r3, [pc, #204]	; (8000910 <MX_DFSDM1_Init+0xec>)
 8000842:	2202      	movs	r2, #2
 8000844:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = ENABLE;
 8000846:	4b32      	ldr	r3, [pc, #200]	; (8000910 <MX_DFSDM1_Init+0xec>)
 8000848:	2201      	movs	r2, #1
 800084a:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 800084c:	4b30      	ldr	r3, [pc, #192]	; (8000910 <MX_DFSDM1_Init+0xec>)
 800084e:	2200      	movs	r2, #0
 8000850:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8000852:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <MX_DFSDM1_Init+0xec>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000858:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <MX_DFSDM1_Init+0xec>)
 800085a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085e:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000860:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <MX_DFSDM1_Init+0xec>)
 8000862:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000866:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000868:	4b29      	ldr	r3, [pc, #164]	; (8000910 <MX_DFSDM1_Init+0xec>)
 800086a:	2240      	movs	r2, #64	; 0x40
 800086c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <MX_DFSDM1_Init+0xec>)
 8000870:	2201      	movs	r2, #1
 8000872:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000874:	4826      	ldr	r0, [pc, #152]	; (8000910 <MX_DFSDM1_Init+0xec>)
 8000876:	f001 fdfb 	bl	8002470 <HAL_DFSDM_FilterInit>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_DFSDM1_Init+0x60>
  {
    Error_Handler();
 8000880:	f000 fbc7 	bl	8001012 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <MX_DFSDM1_Init+0xf4>)
 8000886:	4a25      	ldr	r2, [pc, #148]	; (800091c <MX_DFSDM1_Init+0xf8>)
 8000888:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800088a:	4b23      	ldr	r3, [pc, #140]	; (8000918 <MX_DFSDM1_Init+0xf4>)
 800088c:	2201      	movs	r2, #1
 800088e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_DFSDM1_Init+0xf4>)
 8000892:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000896:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 4;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_DFSDM1_Init+0xf4>)
 800089a:	2204      	movs	r2, #4
 800089c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer =  DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_DFSDM1_Init+0xf4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_DFSDM1_Init+0xf4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_DFSDM1_Init+0xf4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_DFSDM1_Init+0xf4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_DFSDM1_Init+0xf4>)
 80008b8:	2204      	movs	r2, #4
 80008ba:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_DFSDM1_Init+0xf4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 10;
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_DFSDM1_Init+0xf4>)
 80008c4:	220a      	movs	r2, #10
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_DFSDM1_Init+0xf4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 2;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_DFSDM1_Init+0xf4>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80008d4:	4810      	ldr	r0, [pc, #64]	; (8000918 <MX_DFSDM1_Init+0xf4>)
 80008d6:	f001 fd0b 	bl	80022f0 <HAL_DFSDM_ChannelInit>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_DFSDM1_Init+0xc0>
  {
    Error_Handler();
 80008e0:	f000 fb97 	bl	8001012 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80008e4:	2201      	movs	r2, #1
 80008e6:	490e      	ldr	r1, [pc, #56]	; (8000920 <MX_DFSDM1_Init+0xfc>)
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <MX_DFSDM1_Init+0xec>)
 80008ea:	f001 fe9b 	bl	8002624 <HAL_DFSDM_FilterConfigRegChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_DFSDM1_Init+0xd4>
  {
    Error_Handler();
 80008f4:	f000 fb8d 	bl	8001012 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2) != HAL_OK)
 80008f8:	4909      	ldr	r1, [pc, #36]	; (8000920 <MX_DFSDM1_Init+0xfc>)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_DFSDM1_Init+0xec>)
 80008fc:	f001 fed7 	bl	80026ae <HAL_DFSDM_FilterConfigInjChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_DFSDM1_Init+0xe6>
  {
    Error_Handler();
 8000906:	f000 fb84 	bl	8001012 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200001c4 	.word	0x200001c4
 8000914:	40016100 	.word	0x40016100
 8000918:	20000218 	.word	0x20000218
 800091c:	40016040 	.word	0x40016040
 8000920:	00020004 	.word	0x00020004

08000924 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b0a6      	sub	sp, #152	; 0x98
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	2288      	movs	r2, #136	; 0x88
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f00c fbad 	bl	800d094 <memset>
  if(DFSDM1_Init == 0)
 800093a:	4b34      	ldr	r3, [pc, #208]	; (8000a0c <HAL_DFSDM_FilterMspInit+0xe8>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d129      	bne.n	8000996 <HAL_DFSDM_FilterMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000946:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000948:	2300      	movs	r3, #0
 800094a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	4618      	mov	r0, r3
 8000954:	f005 fd72 	bl	800643c <HAL_RCCEx_PeriphCLKConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_DFSDM_FilterMspInit+0x3e>
    {
      Error_Handler();
 800095e:	f000 fb58 	bl	8001012 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000962:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <HAL_DFSDM_FilterMspInit+0xec>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <HAL_DFSDM_FilterMspInit+0xec>)
 800096a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <HAL_DFSDM_FilterMspInit+0xec>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d10b      	bne.n	800098c <HAL_DFSDM_FilterMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <HAL_DFSDM_FilterMspInit+0xf0>)
 8000976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000978:	4a26      	ldr	r2, [pc, #152]	; (8000a14 <HAL_DFSDM_FilterMspInit+0xf0>)
 800097a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800097e:	6613      	str	r3, [r2, #96]	; 0x60
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <HAL_DFSDM_FilterMspInit+0xf0>)
 8000982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <HAL_DFSDM_FilterMspInit+0xe8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <HAL_DFSDM_FilterMspInit+0xe8>)
 8000994:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a1f      	ldr	r2, [pc, #124]	; (8000a18 <HAL_DFSDM_FilterMspInit+0xf4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d131      	bne.n	8000a04 <HAL_DFSDM_FilterMspInit+0xe0>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <HAL_DFSDM_FilterMspInit+0xf8>)
 80009a2:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <HAL_DFSDM_FilterMspInit+0xfc>)
 80009a4:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <HAL_DFSDM_FilterMspInit+0xf8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <HAL_DFSDM_FilterMspInit+0xf8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_DFSDM_FilterMspInit+0xf8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_DFSDM_FilterMspInit+0xf8>)
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_DFSDM_FilterMspInit+0xf8>)
 80009c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c4:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_DFSDM_FilterMspInit+0xf8>)
 80009c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009cc:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_DFSDM_FilterMspInit+0xf8>)
 80009d0:	2220      	movs	r2, #32
 80009d2:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_DFSDM_FilterMspInit+0xf8>)
 80009d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80009dc:	480f      	ldr	r0, [pc, #60]	; (8000a1c <HAL_DFSDM_FilterMspInit+0xf8>)
 80009de:	f001 ff01 	bl	80027e4 <HAL_DMA_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <HAL_DFSDM_FilterMspInit+0xc8>
    {
      Error_Handler();
 80009e8:	f000 fb13 	bl	8001012 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <HAL_DFSDM_FilterMspInit+0xf8>)
 80009f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_DFSDM_FilterMspInit+0xf8>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_DFSDM_FilterMspInit+0xf8>)
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_DFSDM_FilterMspInit+0xf8>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000a04:	bf00      	nop
 8000a06:	3798      	adds	r7, #152	; 0x98
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000029c 	.word	0x2000029c
 8000a10:	20000298 	.word	0x20000298
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40016100 	.word	0x40016100
 8000a1c:	20000250 	.word	0x20000250
 8000a20:	40020044 	.word	0x40020044

08000a24 <HAL_DFSDM_ChannelMspInit>:



void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0a6      	sub	sp, #152	; 0x98
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	2288      	movs	r2, #136	; 0x88
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f00c fb2d 	bl	800d094 <memset>
  if(DFSDM1_Init == 0)
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d129      	bne.n	8000a96 <HAL_DFSDM_ChannelMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a46:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	4618      	mov	r0, r3
 8000a54:	f005 fcf2 	bl	800643c <HAL_RCCEx_PeriphCLKConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_DFSDM_ChannelMspInit+0x3e>
    {
      Error_Handler();
 8000a5e:	f000 fad8 	bl	8001012 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	3301      	adds	r3, #1
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000a6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d10b      	bne.n	8000a8c <HAL_DFSDM_ChannelMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a78:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a7e:	6613      	str	r3, [r2, #96]	; 0x60
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000a94:	6013      	str	r3, [r2, #0]
  }
}
 8000a96:	bf00      	nop
 8000a98:	3798      	adds	r7, #152	; 0x98
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000029c 	.word	0x2000029c
 8000aa4:	20000298 	.word	0x20000298
 8000aa8:	40021000 	.word	0x40021000

08000aac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_DMA_Init+0x60>)
 8000ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ab6:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <MX_DMA_Init+0x60>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6493      	str	r3, [r2, #72]	; 0x48
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_DMA_Init+0x60>)
 8000ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_DMA_Init+0x60>)
 8000acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <MX_DMA_Init+0x60>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <MX_DMA_Init+0x60>)
 8000ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	200e      	movs	r0, #14
 8000ae8:	f001 fbbd 	bl	8002266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000aec:	200e      	movs	r0, #14
 8000aee:	f001 fbd6 	bl	800229e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2038      	movs	r0, #56	; 0x38
 8000af8:	f001 fbb5 	bl	8002266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000afc:	2038      	movs	r0, #56	; 0x38
 8000afe:	f001 fbce 	bl	800229e <HAL_NVIC_EnableIRQ>

}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <MX_GPIO_Init>:
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
     PB9   ------> LCD_COM3
*/
void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b26:	4bb7      	ldr	r3, [pc, #732]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	4ab6      	ldr	r2, [pc, #728]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b2c:	f043 0310 	orr.w	r3, r3, #16
 8000b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b32:	4bb4      	ldr	r3, [pc, #720]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	f003 0310 	and.w	r3, r3, #16
 8000b3a:	61bb      	str	r3, [r7, #24]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4bb1      	ldr	r3, [pc, #708]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	4ab0      	ldr	r2, [pc, #704]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4a:	4bae      	ldr	r3, [pc, #696]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b56:	4bab      	ldr	r3, [pc, #684]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4aaa      	ldr	r2, [pc, #680]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4ba8      	ldr	r3, [pc, #672]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4ba5      	ldr	r3, [pc, #660]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4aa4      	ldr	r2, [pc, #656]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4ba2      	ldr	r3, [pc, #648]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b9f      	ldr	r3, [pc, #636]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a9e      	ldr	r2, [pc, #632]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b9c      	ldr	r3, [pc, #624]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	4b99      	ldr	r3, [pc, #612]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a98      	ldr	r2, [pc, #608]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b96      	ldr	r3, [pc, #600]	; (8000e04 <MX_GPIO_Init+0x2f4>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LED_GREEN_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f240 1109 	movw	r1, #265	; 0x109
 8000bbc:	4892      	ldr	r0, [pc, #584]	; (8000e08 <MX_GPIO_Init+0x2f8>)
 8000bbe:	f002 fa55 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	210c      	movs	r1, #12
 8000bc6:	4891      	ldr	r0, [pc, #580]	; (8000e0c <MX_GPIO_Init+0x2fc>)
 8000bc8:	f002 fa50 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd2:	488f      	ldr	r0, [pc, #572]	; (8000e10 <MX_GPIO_Init+0x300>)
 8000bd4:	f002 fa4a 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	488d      	ldr	r0, [pc, #564]	; (8000e14 <MX_GPIO_Init+0x304>)
 8000bde:	f002 fa45 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000be2:	2308      	movs	r3, #8
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4883      	ldr	r0, [pc, #524]	; (8000e08 <MX_GPIO_Init+0x2f8>)
 8000bfa:	f001 ff99 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000bfe:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c04:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	487e      	ldr	r0, [pc, #504]	; (8000e10 <MX_GPIO_Init+0x300>)
 8000c16:	f001 ff8b 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin|USB_VBUS_Pin;
 8000c1a:	f640 0307 	movw	r3, #2055	; 0x807
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4878      	ldr	r0, [pc, #480]	; (8000e10 <MX_GPIO_Init+0x300>)
 8000c30:	f001 ff7e 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8000c34:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000c38:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000c46:	230b      	movs	r3, #11
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	486f      	ldr	r0, [pc, #444]	; (8000e10 <MX_GPIO_Init+0x300>)
 8000c52:	f001 ff6d 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 8000c56:	232f      	movs	r3, #47	; 0x2f
 8000c58:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6c:	f001 ff60 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000c70:	2310      	movs	r3, #16
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c74:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c88:	f001 ff52 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8000c8c:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000c90:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000c9e:	230b      	movs	r3, #11
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f001 ff40 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 8000cb0:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000cb4:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000cc2:	230b      	movs	r3, #11
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	484f      	ldr	r0, [pc, #316]	; (8000e0c <MX_GPIO_Init+0x2fc>)
 8000cce:	f001 ff2f 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4848      	ldr	r0, [pc, #288]	; (8000e0c <MX_GPIO_Init+0x2fc>)
 8000cea:	f001 ff21 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4840      	ldr	r0, [pc, #256]	; (8000e08 <MX_GPIO_Init+0x2f8>)
 8000d08:	f001 ff12 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000d0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d12:	2312      	movs	r3, #18
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4838      	ldr	r0, [pc, #224]	; (8000e0c <MX_GPIO_Init+0x2fc>)
 8000d2a:	f001 ff01 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8000d2e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000d32:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000d40:	230b      	movs	r3, #11
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4832      	ldr	r0, [pc, #200]	; (8000e14 <MX_GPIO_Init+0x304>)
 8000d4c:	f001 fef0 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4829      	ldr	r0, [pc, #164]	; (8000e10 <MX_GPIO_Init+0x300>)
 8000d6a:	f001 fee1 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d72:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	4824      	ldr	r0, [pc, #144]	; (8000e14 <MX_GPIO_Init+0x304>)
 8000d84:	f001 fed4 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8000d88:	231a      	movs	r3, #26
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d98:	2305      	movs	r3, #5
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	481c      	ldr	r0, [pc, #112]	; (8000e14 <MX_GPIO_Init+0x304>)
 8000da4:	f001 fec4 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000da8:	2360      	movs	r3, #96	; 0x60
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db8:	2307      	movs	r3, #7
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4814      	ldr	r0, [pc, #80]	; (8000e14 <MX_GPIO_Init+0x304>)
 8000dc4:	f001 feb4 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480d      	ldr	r0, [pc, #52]	; (8000e14 <MX_GPIO_Init+0x304>)
 8000de0:	f001 fea6 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000de4:	2308      	movs	r3, #8
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_GPIO_Init+0x2fc>)
 8000dfc:	f001 fe98 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000e00:	23c0      	movs	r3, #192	; 0xc0
 8000e02:	e009      	b.n	8000e18 <MX_GPIO_Init+0x308>
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48001000 	.word	0x48001000
 8000e0c:	48000400 	.word	0x48000400
 8000e10:	48000800 	.word	0x48000800
 8000e14:	48000c00 	.word	0x48000c00
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1a:	2312      	movs	r3, #18
 8000e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e26:	2304      	movs	r3, #4
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4817      	ldr	r0, [pc, #92]	; (8000e90 <MX_GPIO_Init+0x380>)
 8000e32:	f001 fe7d 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e3c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <MX_GPIO_Init+0x380>)
 8000e4e:	f001 fe6f 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	480a      	ldr	r0, [pc, #40]	; (8000e94 <MX_GPIO_Init+0x384>)
 8000e6a:	f001 fe61 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e72:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_GPIO_Init+0x384>)
 8000e84:	f001 fe54 	bl	8002b30 <HAL_GPIO_Init>

}
 8000e88:	bf00      	nop
 8000e8a:	3730      	adds	r7, #48	; 0x30
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	48000400 	.word	0x48000400
 8000e94:	48001000 	.word	0x48001000

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t PlaybackPosition   = PLAY_BUFF_SIZE + PLAY_HEADER;
 8000e9e:	f241 032c 	movw	r3, #4140	; 0x102c
 8000ea2:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea4:	f001 f840 	bl	8001f28 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED5);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f000 fd0f 	bl	80018cc <BSP_LED_Init>

   /* Check if the buffer has been loaded in flash */
   if(*((uint64_t *)AUDIO_FILE_ADDRESS) != 0x017EFE2446464952 ) Error_Handler();
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <main+0x50>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <main+0x54>)
 8000eb6:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <main+0x58>)
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf08      	it	eq
 8000ebc:	4282      	cmpeq	r2, r0
 8000ebe:	d001      	beq.n	8000ec4 <main+0x2c>
 8000ec0:	f000 f8a7 	bl	8001012 <Error_Handler>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec4:	f000 f816 	bl	8000ef4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ec8:	f000 f876 	bl	8000fb8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f7ff fe20 	bl	8000b10 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000ed0:	f000 f8a8 	bl	8001024 <MX_QUADSPI_Init>
  MX_DMA_Init();
 8000ed4:	f7ff fdea 	bl	8000aac <MX_DMA_Init>
  MX_SAI1_Init();
 8000ed8:	f000 fbe0 	bl	800169c <MX_SAI1_Init>
  MX_USB_DEVICE_Init();
 8000edc:	f00b fa18 	bl	800c310 <MX_USB_DEVICE_Init>
  MX_DFSDM1_Init();
 8000ee0:	f7ff fca0 	bl	8000824 <MX_DFSDM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <main+0x4c>
 8000ee6:	bf00      	nop
 8000ee8:	08080000 	.word	0x08080000
 8000eec:	46464952 	.word	0x46464952
 8000ef0:	017efe24 	.word	0x017efe24

08000ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b096      	sub	sp, #88	; 0x58
 8000ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	2244      	movs	r2, #68	; 0x44
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f00c f8c6 	bl	800d094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f1a:	f003 ff5f 	bl	8004ddc <HAL_PWREx_ControlVoltageScaling>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f24:	f000 f875 	bl	8001012 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f28:	f003 ff3a 	bl	8004da0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <SystemClock_Config+0xc0>)
 8000f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f32:	4a20      	ldr	r2, [pc, #128]	; (8000fb4 <SystemClock_Config+0xc0>)
 8000f34:	f023 0318 	bic.w	r3, r3, #24
 8000f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f3c:	2314      	movs	r3, #20
 8000f3e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f44:	2301      	movs	r3, #1
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f4c:	2360      	movs	r3, #96	; 0x60
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f50:	2302      	movs	r3, #2
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f54:	2301      	movs	r3, #1
 8000f56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f5c:	2328      	movs	r3, #40	; 0x28
 8000f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f60:	2307      	movs	r3, #7
 8000f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000f64:	2304      	movs	r3, #4
 8000f66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4618      	mov	r0, r3
 8000f72:	f004 fc75 	bl	8005860 <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000f7c:	f000 f849 	bl	8001012 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2303      	movs	r3, #3
 8000f86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	2104      	movs	r1, #4
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f005 f849 	bl	8006030 <HAL_RCC_ClockConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000fa4:	f000 f835 	bl	8001012 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000fa8:	f006 faa0 	bl	80074ec <HAL_RCCEx_EnableMSIPLLMode>
}
 8000fac:	bf00      	nop
 8000fae:	3758      	adds	r7, #88	; 0x58
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0a2      	sub	sp, #136	; 0x88
 8000fbc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2288      	movs	r2, #136	; 0x88
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f00c f865 	bl	800d094 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB;
 8000fca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fce:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000fd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000fe2:	2318      	movs	r3, #24
 8000fe4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8000ff2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ff6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 fa1e 	bl	800643c <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8001006:	f000 f804 	bl	8001012 <Error_Handler>
  }
}
 800100a:	bf00      	nop
 800100c:	3788      	adds	r7, #136	; 0x88
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001016:	b672      	cpsid	i
}
 8001018:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED5);
 800101a:	2001      	movs	r0, #1
 800101c:	f000 fca4 	bl	8001968 <BSP_LED_On>
  while (1)
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0xe>
	...

08001024 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_QUADSPI_Init+0x44>)
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <MX_QUADSPI_Init+0x48>)
 800102c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_QUADSPI_Init+0x44>)
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_QUADSPI_Init+0x44>)
 8001036:	2204      	movs	r2, #4
 8001038:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_QUADSPI_Init+0x44>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 0x17;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_QUADSPI_Init+0x44>)
 8001042:	2217      	movs	r2, #23
 8001044:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_QUADSPI_Init+0x44>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_QUADSPI_Init+0x44>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_QUADSPI_Init+0x44>)
 8001054:	f003 ff48 	bl	8004ee8 <HAL_QSPI_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800105e:	f7ff ffd8 	bl	8001012 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200002a0 	.word	0x200002a0
 800106c:	a0001000 	.word	0xa0001000

08001070 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a17      	ldr	r2, [pc, #92]	; (80010ec <HAL_QSPI_MspInit+0x7c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d128      	bne.n	80010e4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_QSPI_MspInit+0x80>)
 8001094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001096:	4a16      	ldr	r2, [pc, #88]	; (80010f0 <HAL_QSPI_MspInit+0x80>)
 8001098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109c:	6513      	str	r3, [r2, #80]	; 0x50
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_QSPI_MspInit+0x80>)
 80010a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_QSPI_MspInit+0x80>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <HAL_QSPI_MspInit+0x80>)
 80010b0:	f043 0310 	orr.w	r3, r3, #16
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_QSPI_MspInit+0x80>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|QUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80010c2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80010c6:	617b      	str	r3, [r7, #20]
                          |QUADSPI_BK1_IO2_Pin|QUADSPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010d4:	230a      	movs	r3, #10
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_QSPI_MspInit+0x84>)
 80010e0:	f001 fd26 	bl	8002b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	a0001000 	.word	0xa0001000
 80010f0:	40021000 	.word	0x40021000
 80010f4:	48001000 	.word	0x48001000

080010f8 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&hqspi) != QSPI_OK)
 80010fc:	4809      	ldr	r0, [pc, #36]	; (8001124 <BSP_QSPI_Init+0x2c>)
 80010fe:	f000 f98e 	bl	800141e <QSPI_ResetMemory>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <BSP_QSPI_Init+0x14>
  {
    return QSPI_NOT_SUPPORTED;
 8001108:	2304      	movs	r3, #4
 800110a:	e008      	b.n	800111e <BSP_QSPI_Init+0x26>
  }
 
  /* Configuration of the dummy cucles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != QSPI_OK)
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <BSP_QSPI_Init+0x2c>)
 800110e:	f000 f9c8 	bl	80014a2 <QSPI_DummyCyclesCfg>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <BSP_QSPI_Init+0x24>
  {
    return QSPI_NOT_SUPPORTED;
 8001118:	2304      	movs	r3, #4
 800111a:	e000      	b.n	800111e <BSP_QSPI_Init+0x26>
  }
  
  return QSPI_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200002a0 	.word	0x200002a0

08001128 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b092      	sub	sp, #72	; 0x48
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800113a:	23eb      	movs	r3, #235	; 0xeb
 800113c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 800113e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001148:	61fb      	str	r3, [r7, #28]
  sCommand.Address           = ReadAddr;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800114e:	2300      	movs	r3, #0
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8001152:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8001158:	230a      	movs	r3, #10
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = Size;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001164:	2300      	movs	r3, #0
 8001166:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001168:	2300      	movs	r3, #0
 800116a:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	f241 3288 	movw	r2, #5000	; 0x1388
 8001174:	4619      	mov	r1, r3
 8001176:	480c      	ldr	r0, [pc, #48]	; (80011a8 <BSP_QSPI_Read+0x80>)
 8001178:	f003 ff2c 	bl	8004fd4 <HAL_QSPI_Command>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e00b      	b.n	800119e <BSP_QSPI_Read+0x76>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001186:	f241 3288 	movw	r2, #5000	; 0x1388
 800118a:	68f9      	ldr	r1, [r7, #12]
 800118c:	4806      	ldr	r0, [pc, #24]	; (80011a8 <BSP_QSPI_Read+0x80>)
 800118e:	f004 f816 	bl	80051be <HAL_QSPI_Receive>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <BSP_QSPI_Read+0x74>
  {
    return QSPI_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <BSP_QSPI_Read+0x76>
  }

  return QSPI_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3748      	adds	r7, #72	; 0x48
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200002a0 	.word	0x200002a0

080011ac <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b096      	sub	sp, #88	; 0x58
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	653b      	str	r3, [r7, #80]	; 0x50

  while (current_addr <= WriteAddr)
 80011bc:	e003      	b.n	80011c6 <BSP_QSPI_Write+0x1a>
  {
    current_addr += N25Q128A_PAGE_SIZE;
 80011be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80011c4:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 80011c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d9f7      	bls.n	80011be <BSP_QSPI_Write+0x12>
  }
  current_size = current_addr - WriteAddr;
 80011ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80011d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d901      	bls.n	80011e2 <BSP_QSPI_Write+0x36>
  {
    current_size = Size;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80011ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 80011f4:	2312      	movs	r3, #18
 80011f6:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 80011f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80011fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001202:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001204:	2300      	movs	r3, #0
 8001206:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8001208:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800120c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001216:	2300      	movs	r3, #0
 8001218:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800121a:	2300      	movs	r3, #0
 800121c:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 800121e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001220:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8001222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&hqspi) != QSPI_OK)
 8001226:	4824      	ldr	r0, [pc, #144]	; (80012b8 <BSP_QSPI_Write+0x10c>)
 8001228:	f000 f9b6 	bl	8001598 <QSPI_WriteEnable>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <BSP_QSPI_Write+0x8a>
    {
      return QSPI_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e03b      	b.n	80012ae <BSP_QSPI_Write+0x102>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	f241 3288 	movw	r2, #5000	; 0x1388
 800123e:	4619      	mov	r1, r3
 8001240:	481d      	ldr	r0, [pc, #116]	; (80012b8 <BSP_QSPI_Write+0x10c>)
 8001242:	f003 fec7 	bl	8004fd4 <HAL_QSPI_Command>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <BSP_QSPI_Write+0xa4>
    {
      return QSPI_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e02e      	b.n	80012ae <BSP_QSPI_Write+0x102>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001250:	f241 3288 	movw	r2, #5000	; 0x1388
 8001254:	68f9      	ldr	r1, [r7, #12]
 8001256:	4818      	ldr	r0, [pc, #96]	; (80012b8 <BSP_QSPI_Write+0x10c>)
 8001258:	f003 ff1a 	bl	8005090 <HAL_QSPI_Transmit>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e023      	b.n	80012ae <BSP_QSPI_Write+0x102>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001266:	f241 3188 	movw	r1, #5000	; 0x1388
 800126a:	4813      	ldr	r0, [pc, #76]	; (80012b8 <BSP_QSPI_Write+0x10c>)
 800126c:	f000 f9dd 	bl	800162a <QSPI_AutoPollingMemReady>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <BSP_QSPI_Write+0xce>
    {
      return QSPI_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e019      	b.n	80012ae <BSP_QSPI_Write+0x102>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800127a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800127c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800127e:	4413      	add	r3, r2
 8001280:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 800128a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800128c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001290:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001292:	429a      	cmp	r2, r3
 8001294:	d203      	bcs.n	800129e <BSP_QSPI_Write+0xf2>
 8001296:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	e001      	b.n	80012a2 <BSP_QSPI_Write+0xf6>
 800129e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a2:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 80012a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80012a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d3b8      	bcc.n	800121e <BSP_QSPI_Write+0x72>
  
  return QSPI_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3758      	adds	r7, #88	; 0x58
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200002a0 	.word	0x200002a0

080012bc <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b090      	sub	sp, #64	; 0x40
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80012c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c8:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = SUBSECTOR_ERASE_CMD;
 80012ca:	2320      	movs	r3, #32
 80012cc:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 80012ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80012d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d8:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012de:	2300      	movs	r3, #0
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80012ee:	2300      	movs	r3, #0
 80012f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80012f2:	2300      	movs	r3, #0
 80012f4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&hqspi) != QSPI_OK)
 80012f6:	4812      	ldr	r0, [pc, #72]	; (8001340 <BSP_QSPI_Erase_Block+0x84>)
 80012f8:	f000 f94e 	bl	8001598 <QSPI_WriteEnable>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e017      	b.n	8001336 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	f241 3288 	movw	r2, #5000	; 0x1388
 800130e:	4619      	mov	r1, r3
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <BSP_QSPI_Erase_Block+0x84>)
 8001312:	f003 fe5f 	bl	8004fd4 <HAL_QSPI_Command>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e00a      	b.n	8001336 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&hqspi, N25Q128A_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8001320:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001324:	4806      	ldr	r0, [pc, #24]	; (8001340 <BSP_QSPI_Erase_Block+0x84>)
 8001326:	f000 f980 	bl	800162a <QSPI_AutoPollingMemReady>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3740      	adds	r7, #64	; 0x40
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200002a0 	.word	0x200002a0

08001344 <BSP_QSPI_GetStatus>:
/**
  * @brief  Reads current status of the QSPI memory.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetStatus(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b090      	sub	sp, #64	; 0x40
 8001348:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read flag status register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800134a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800134e:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = READ_FLAG_STATUS_REG_CMD;
 8001350:	2370      	movs	r3, #112	; 0x70
 8001352:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800135c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  sCommand.NbData            = 1;
 8001366:	2301      	movs	r3, #1
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800136e:	2300      	movs	r3, #0
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001372:	2300      	movs	r3, #0
 8001374:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	f241 3288 	movw	r2, #5000	; 0x1388
 800137e:	4619      	mov	r1, r3
 8001380:	4816      	ldr	r0, [pc, #88]	; (80013dc <BSP_QSPI_GetStatus+0x98>)
 8001382:	f003 fe27 	bl	8004fd4 <HAL_QSPI_Command>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <BSP_QSPI_GetStatus+0x4c>
  {
    return QSPI_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e020      	b.n	80013d2 <BSP_QSPI_GetStatus+0x8e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	f241 3288 	movw	r2, #5000	; 0x1388
 8001396:	4619      	mov	r1, r3
 8001398:	4810      	ldr	r0, [pc, #64]	; (80013dc <BSP_QSPI_GetStatus+0x98>)
 800139a:	f003 ff10 	bl	80051be <HAL_QSPI_Receive>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <BSP_QSPI_GetStatus+0x64>
  {
    return QSPI_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e014      	b.n	80013d2 <BSP_QSPI_GetStatus+0x8e>
  }
  
  /* Check the value of the register */
  if ((reg & (N25Q128A_FSR_PRERR | N25Q128A_FSR_VPPERR | N25Q128A_FSR_PGERR | N25Q128A_FSR_ERERR)) != 0)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <BSP_QSPI_GetStatus+0x72>
  {
    return QSPI_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00d      	b.n	80013d2 <BSP_QSPI_GetStatus+0x8e>
  }
  else if ((reg & (N25Q128A_FSR_PGSUS | N25Q128A_FSR_ERSUS)) != 0)
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <BSP_QSPI_GetStatus+0x80>
  {
    return QSPI_SUSPENDED;
 80013c0:	2308      	movs	r3, #8
 80013c2:	e006      	b.n	80013d2 <BSP_QSPI_GetStatus+0x8e>
  }
  else if ((reg & N25Q128A_FSR_READY) != 0)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	da01      	bge.n	80013d0 <BSP_QSPI_GetStatus+0x8c>
  {
    return QSPI_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	e000      	b.n	80013d2 <BSP_QSPI_GetStatus+0x8e>
  }
  else
  {
    return QSPI_BUSY;
 80013d0:	2302      	movs	r3, #2
  }
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3740      	adds	r7, #64	; 0x40
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200002a0 	.word	0x200002a0

080013e0 <BSP_QSPI_GetInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo: pointer on the configuration structure  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetInfo(QSPI_Info* pInfo)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize          = N25Q128A_FLASH_SIZE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013ee:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = N25Q128A_SUBSECTOR_SIZE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f6:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber = (N25Q128A_FLASH_SIZE/N25Q128A_SUBSECTOR_SIZE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013fe:	609a      	str	r2, [r3, #8]
  pInfo->ProgPageSize       = N25Q128A_PAGE_SIZE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001406:	60da      	str	r2, [r3, #12]
  pInfo->ProgPagesNumber    = (N25Q128A_FLASH_SIZE/N25Q128A_PAGE_SIZE);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800140e:	611a      	str	r2, [r3, #16]
  
  return QSPI_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b090      	sub	sp, #64	; 0x40
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142a:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 800142c:	2366      	movs	r3, #102	; 0x66
 800142e:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001434:	2300      	movs	r3, #0
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001444:	2300      	movs	r3, #0
 8001446:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001448:	2300      	movs	r3, #0
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	4619      	mov	r1, r3
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f003 fdbc 	bl	8004fd4 <HAL_QSPI_Command>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e019      	b.n	800149a <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8001466:	2399      	movs	r3, #153	; 0x99
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001472:	4619      	mov	r1, r3
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f003 fdad 	bl	8004fd4 <HAL_QSPI_Command>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e00a      	b.n	800149a <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001484:	f241 3188 	movw	r1, #5000	; 0x1388
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f8ce 	bl	800162a <QSPI_AutoPollingMemReady>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3740      	adds	r7, #64	; 0x40
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b094      	sub	sp, #80	; 0x50
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80014aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 80014b0:	2385      	movs	r3, #133	; 0x85
 80014b2:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80014bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 80014c6:	2301      	movs	r3, #1
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80014ce:	2300      	movs	r3, #0
 80014d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80014d2:	2300      	movs	r3, #0
 80014d4:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	f241 3288 	movw	r2, #5000	; 0x1388
 80014de:	4619      	mov	r1, r3
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f003 fd77 	bl	8004fd4 <HAL_QSPI_Command>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e04f      	b.n	8001590 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014f0:	f107 030b 	add.w	r3, r7, #11
 80014f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f003 fe5f 	bl	80051be <HAL_QSPI_Receive>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e042      	b.n	8001590 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f844 	bl	8001598 <QSPI_WriteEnable>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e03a      	b.n	8001590 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 800151a:	2381      	movs	r3, #129	; 0x81
 800151c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800151e:	7afb      	ldrb	r3, [r7, #11]
 8001520:	b25b      	sxtb	r3, r3
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	b25a      	sxtb	r2, r3
 8001528:	23f0      	movs	r3, #240	; 0xf0
 800152a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001536:	64fb      	str	r3, [r7, #76]	; 0x4c
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <QSPI_DummyCyclesCfg+0xa0>
  {
    return 32U;
 800153e:	2320      	movs	r3, #32
 8001540:	e003      	b.n	800154a <QSPI_DummyCyclesCfg+0xa8>
  }
  return __builtin_clz(value);
 8001542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001544:	fab3 f383 	clz	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4619      	mov	r1, r3
 800154c:	230a      	movs	r3, #10
 800154e:	408b      	lsls	r3, r1
 8001550:	b25b      	sxtb	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b25b      	sxtb	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	72fb      	strb	r3, [r7, #11]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f003 fd35 	bl	8004fd4 <HAL_QSPI_Command>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e00d      	b.n	8001590 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001574:	f107 030b 	add.w	r3, r7, #11
 8001578:	f241 3288 	movw	r2, #5000	; 0x1388
 800157c:	4619      	mov	r1, r3
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f003 fd86 	bl	8005090 <HAL_QSPI_Transmit>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <QSPI_DummyCyclesCfg+0xee>
  }
  
  return QSPI_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3750      	adds	r7, #80	; 0x50
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b096      	sub	sp, #88	; 0x58
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80015a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 80015a6:	2306      	movs	r3, #6
 80015a8:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80015be:	2300      	movs	r3, #0
 80015c0:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80015c2:	2300      	movs	r3, #0
 80015c4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4619      	mov	r1, r3
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f003 fcff 	bl	8004fd4 <HAL_QSPI_Command>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e020      	b.n	8001622 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = N25Q128A_SR_WREN;
 80015e0:	2302      	movs	r3, #2
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 80015e4:	2302      	movs	r3, #2
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80015f0:	2310      	movs	r3, #16
 80015f2:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80015f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015f8:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 80015fa:	2305      	movs	r3, #5
 80015fc:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 80015fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001602:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001604:	f107 0208 	add.w	r2, r7, #8
 8001608:	f107 0120 	add.w	r1, r7, #32
 800160c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f003 fe76 	bl	8005302 <HAL_QSPI_AutoPolling>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3758      	adds	r7, #88	; 0x58
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b096      	sub	sp, #88	; 0x58
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001638:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800163a:	2305      	movs	r3, #5
 800163c:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800163e:	2300      	movs	r3, #0
 8001640:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001646:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001654:	2300      	movs	r3, #0
 8001656:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001658:	2300      	movs	r3, #0
 800165a:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 8001660:	2301      	movs	r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001668:	2301      	movs	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 800166c:	2310      	movs	r3, #16
 800166e:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001670:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001674:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &sCommand, &sConfig, Timeout) != HAL_OK)
 8001676:	f107 0208 	add.w	r2, r7, #8
 800167a:	f107 0120 	add.w	r1, r7, #32
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f003 fe3e 	bl	8005302 <HAL_QSPI_AutoPolling>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3758      	adds	r7, #88	; 0x58
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800169c:	b598      	push	{r3, r4, r7, lr}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 0 */
	  __HAL_SAI_RESET_HANDLE_STATE(&hsai_BlockA1);
 80016a0:	4b45      	ldr	r3, [pc, #276]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	  hsai_BlockA1.Instance = SAI1_Block_A;
 80016a8:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016aa:	4a44      	ldr	r2, [pc, #272]	; (80017bc <MX_SAI1_Init+0x120>)
 80016ac:	601a      	str	r2, [r3, #0]
	  __HAL_SAI_DISABLE(&hsai_BlockA1);
 80016ae:	4b42      	ldr	r3, [pc, #264]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b40      	ldr	r3, [pc, #256]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016bc:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80016be:	4b3e      	ldr	r3, [pc, #248]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016c0:	4a3e      	ldr	r2, [pc, #248]	; (80017bc <MX_SAI1_Init+0x120>)
 80016c2:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80016c4:	4b3c      	ldr	r3, [pc, #240]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80016ca:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 80016d0:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80016d6:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80016dc:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80016e2:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80016e8:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ee:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80016f0:	4b31      	ldr	r3, [pc, #196]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_22K;
 80016fc:	4b2e      	ldr	r3, [pc, #184]	; (80017b8 <MX_SAI1_Init+0x11c>)
 80016fe:	f245 6222 	movw	r2, #22050	; 0x5622
 8001702:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001704:	4b2c      	ldr	r3, [pc, #176]	; (80017b8 <MX_SAI1_Init+0x11c>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800170a:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <MX_SAI1_Init+0x11c>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <MX_SAI1_Init+0x11c>)
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001716:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <MX_SAI1_Init+0x11c>)
 8001718:	2200      	movs	r2, #0
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 32;
 800171c:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <MX_SAI1_Init+0x11c>)
 800171e:	2220      	movs	r2, #32
 8001720:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 16;
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <MX_SAI1_Init+0x11c>)
 8001724:	2210      	movs	r2, #16
 8001726:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <MX_SAI1_Init+0x11c>)
 800172a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800172e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <MX_SAI1_Init+0x11c>)
 8001732:	2200      	movs	r2, #0
 8001734:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <MX_SAI1_Init+0x11c>)
 8001738:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800173c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800173e:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <MX_SAI1_Init+0x11c>)
 8001740:	2200      	movs	r2, #0
 8001742:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001744:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <MX_SAI1_Init+0x11c>)
 8001746:	2200      	movs	r2, #0
 8001748:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 2;
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <MX_SAI1_Init+0x11c>)
 800174c:	2202      	movs	r2, #2
 800174e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000003;
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <MX_SAI1_Init+0x11c>)
 8001752:	2203      	movs	r2, #3
 8001754:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001756:	4818      	ldr	r0, [pc, #96]	; (80017b8 <MX_SAI1_Init+0x11c>)
 8001758:	f006 f99a 	bl	8007a90 <HAL_SAI_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_SAI1_Init+0xca>
  {
    Error_Handler();
 8001762:	f7ff fc56 	bl	8001012 <Error_Handler>
  }

  /* USER CODE BEGIN SAI1_Init 2 */
  /* Enable SAI to generate clock used by audio driver */
    __HAL_SAI_ENABLE(&hsai_BlockA1);
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <MX_SAI1_Init+0x11c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MX_SAI1_Init+0x11c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001774:	601a      	str	r2, [r3, #0]

    /* Initialize audio driver */
     if(CS43L22_ID != cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS))
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MX_SAI1_Init+0x124>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2094      	movs	r0, #148	; 0x94
 800177c:	4798      	blx	r3
 800177e:	4603      	mov	r3, r0
 8001780:	2be0      	cmp	r3, #224	; 0xe0
 8001782:	d001      	beq.n	8001788 <MX_SAI1_Init+0xec>
     {
       Error_Handler();
 8001784:	f7ff fc45 	bl	8001012 <Error_Handler>
     }

     audio_drv = &cs43l22_drv;
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_SAI1_Init+0x128>)
 800178a:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <MX_SAI1_Init+0x124>)
 800178c:	601a      	str	r2, [r3, #0]
     audio_drv->Reset(AUDIO_I2C_ADDRESS);
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <MX_SAI1_Init+0x128>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	2094      	movs	r0, #148	; 0x94
 8001796:	4798      	blx	r3
     if(0 != audio_drv->Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 80, AUDIO_FREQUENCY_22K))
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <MX_SAI1_Init+0x128>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681c      	ldr	r4, [r3, #0]
 800179e:	f245 6322 	movw	r3, #22050	; 0x5622
 80017a2:	2250      	movs	r2, #80	; 0x50
 80017a4:	2102      	movs	r1, #2
 80017a6:	2094      	movs	r0, #148	; 0x94
 80017a8:	47a0      	blx	r4
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_SAI1_Init+0x118>
     {
       Error_Handler();
 80017b0:	f7ff fc2f 	bl	8001012 <Error_Handler>
     }

  /* USER CODE END SAI1_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	bd98      	pop	{r3, r4, r7, pc}
 80017b8:	200002e8 	.word	0x200002e8
 80017bc:	40015404 	.word	0x40015404
 80017c0:	20000000 	.word	0x20000000
 80017c4:	200002e4 	.word	0x200002e4

080017c8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a37      	ldr	r2, [pc, #220]	; (80018b4 <HAL_SAI_MspInit+0xec>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d167      	bne.n	80018aa <HAL_SAI_MspInit+0xe2>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80017da:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HAL_SAI_MspInit+0xf0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10b      	bne.n	80017fa <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80017e2:	4b36      	ldr	r3, [pc, #216]	; (80018bc <HAL_SAI_MspInit+0xf4>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e6:	4a35      	ldr	r2, [pc, #212]	; (80018bc <HAL_SAI_MspInit+0xf4>)
 80017e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ec:	6613      	str	r3, [r2, #96]	; 0x60
 80017ee:	4b33      	ldr	r3, [pc, #204]	; (80018bc <HAL_SAI_MspInit+0xf4>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 80017fa:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <HAL_SAI_MspInit+0xf0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	4a2d      	ldr	r2, [pc, #180]	; (80018b8 <HAL_SAI_MspInit+0xf0>)
 8001802:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE7     ------> SAI1_SD_B
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin
 8001804:	23f4      	movs	r3, #244	; 0xf4
 8001806:	60fb      	str	r3, [r7, #12]
                          |AUDIO_DIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001814:	230d      	movs	r3, #13
 8001816:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4619      	mov	r1, r3
 800181e:	4828      	ldr	r0, [pc, #160]	; (80018c0 <HAL_SAI_MspInit+0xf8>)
 8001820:	f001 f986 	bl	8002b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8001824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001828:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001836:	230d      	movs	r3, #13
 8001838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	4619      	mov	r1, r3
 8001840:	481f      	ldr	r0, [pc, #124]	; (80018c0 <HAL_SAI_MspInit+0xf8>)
 8001842:	f001 f975 	bl	8002b30 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <HAL_SAI_MspInit+0xfc>)
 8001848:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <HAL_SAI_MspInit+0x100>)
 800184a:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_SAI_MspInit+0xfc>)
 800184e:	2201      	movs	r2, #1
 8001850:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001852:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <HAL_SAI_MspInit+0xfc>)
 8001854:	2210      	movs	r2, #16
 8001856:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_SAI_MspInit+0xfc>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800185e:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_SAI_MspInit+0xfc>)
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_SAI_MspInit+0xfc>)
 8001866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800186a:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_SAI_MspInit+0xfc>)
 800186e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001872:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <HAL_SAI_MspInit+0xfc>)
 8001876:	2220      	movs	r2, #32
 8001878:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_SAI_MspInit+0xfc>)
 800187c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001880:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001882:	4810      	ldr	r0, [pc, #64]	; (80018c4 <HAL_SAI_MspInit+0xfc>)
 8001884:	f000 ffae 	bl	80027e4 <HAL_DMA_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_SAI_MspInit+0xca>
    {
      Error_Handler();
 800188e:	f7ff fbc0 	bl	8001012 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <HAL_SAI_MspInit+0xfc>)
 8001896:	671a      	str	r2, [r3, #112]	; 0x70
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_SAI_MspInit+0xfc>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <HAL_SAI_MspInit+0xfc>)
 80018a2:	66da      	str	r2, [r3, #108]	; 0x6c
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_SAI_MspInit+0xfc>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6293      	str	r3, [r2, #40]	; 0x28
    }
}
 80018aa:	bf00      	nop
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40015404 	.word	0x40015404
 80018b8:	200003b4 	.word	0x200003b4
 80018bc:	40021000 	.word	0x40021000
 80018c0:	48001000 	.word	0x48001000
 80018c4:	2000036c 	.word	0x2000036c
 80018c8:	40020408 	.word	0x40020408

080018cc <BSP_LED_Init>:
  *     @arg LED4
  * @retval None
  */
#endif
void BSP_LED_Init(Led_TypeDef Led)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10c      	bne.n	80018f6 <BSP_LED_Init+0x2a>
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <BSP_LED_Init+0x90>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	4a1e      	ldr	r2, [pc, #120]	; (800195c <BSP_LED_Init+0x90>)
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e8:	4b1c      	ldr	r3, [pc, #112]	; (800195c <BSP_LED_Init+0x90>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	e00e      	b.n	8001914 <BSP_LED_Init+0x48>
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d10b      	bne.n	8001914 <BSP_LED_Init+0x48>
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <BSP_LED_Init+0x90>)
 80018fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001900:	4a16      	ldr	r2, [pc, #88]	; (800195c <BSP_LED_Init+0x90>)
 8001902:	f043 0310 	orr.w	r3, r3, #16
 8001906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <BSP_LED_Init+0x90>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.Pin = LED_PIN[Led];
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <BSP_LED_Init+0x94>)
 8001918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <BSP_LED_Init+0x98>)
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	f107 0214 	add.w	r2, r7, #20
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f001 f8f9 	bl	8002b30 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], GPIO_InitStructure.Pin, GPIO_PIN_RESET);
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	4a08      	ldr	r2, [pc, #32]	; (8001964 <BSP_LED_Init+0x98>)
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	b291      	uxth	r1, r2
 800194a:	2200      	movs	r2, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f001 fb8d 	bl	800306c <HAL_GPIO_WritePin>
}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	; 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	0800d100 	.word	0x0800d100
 8001964:	20000034 	.word	0x20000034

08001968 <BSP_LED_On>:
  *     @arg LED4
  * @retval None
  */
#endif
void BSP_LED_On(Led_TypeDef Led)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	4a07      	ldr	r2, [pc, #28]	; (8001994 <BSP_LED_On+0x2c>)
 8001976:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	4a06      	ldr	r2, [pc, #24]	; (8001998 <BSP_LED_On+0x30>)
 800197e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001982:	2201      	movs	r2, #1
 8001984:	4619      	mov	r1, r3
 8001986:	f001 fb71 	bl	800306c <HAL_GPIO_WritePin>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000034 	.word	0x20000034
 8001998:	0800d100 	.word	0x0800d100

0800199c <I2C1_Init>:
/**
  * @brief Discovery I2C1 Bus initialization
  * @retval None
  */
static void I2C1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c1Handle) == HAL_I2C_STATE_RESET)
 80019a0:	4812      	ldr	r0, [pc, #72]	; (80019ec <I2C1_Init+0x50>)
 80019a2:	f001 fe7b 	bl	800369c <HAL_I2C_GetState>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d11d      	bne.n	80019e8 <I2C1_Init+0x4c>
  {
    I2c1Handle.Instance              = DISCOVERY_I2C1;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <I2C1_Init+0x50>)
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <I2C1_Init+0x54>)
 80019b0:	601a      	str	r2, [r3, #0]
    I2c1Handle.Init.Timing           = DISCOVERY_I2C1_TIMING;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <I2C1_Init+0x50>)
 80019b4:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <I2C1_Init+0x58>)
 80019b6:	605a      	str	r2, [r3, #4]
    I2c1Handle.Init.OwnAddress1      = 0;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <I2C1_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
    I2c1Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <I2C1_Init+0x50>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	60da      	str	r2, [r3, #12]
    I2c1Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <I2C1_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
    I2c1Handle.Init.OwnAddress2      = 0;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <I2C1_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	615a      	str	r2, [r3, #20]
    I2c1Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <I2C1_Init+0x50>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
    I2c1Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <I2C1_Init+0x50>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit(&I2c1Handle);
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <I2C1_Init+0x50>)
 80019de:	f000 f80b 	bl	80019f8 <I2C1_MspInit>
    HAL_I2C_Init(&I2c1Handle);
 80019e2:	4802      	ldr	r0, [pc, #8]	; (80019ec <I2C1_Init+0x50>)
 80019e4:	f001 fb5a 	bl	800309c <HAL_I2C_Init>
  }
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200003b8 	.word	0x200003b8
 80019f0:	40005400 	.word	0x40005400
 80019f4:	90112626 	.word	0x90112626

080019f8 <I2C1_MspInit>:
  * @brief Discovery I2C1 MSP Initialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hi2c)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0ae      	sub	sp, #184	; 0xb8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  /* IOSV bit MUST be set to access GPIO port G[2:15] */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a00:	4b3a      	ldr	r3, [pc, #232]	; (8001aec <I2C1_MspInit+0xf4>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	4a39      	ldr	r2, [pc, #228]	; (8001aec <I2C1_MspInit+0xf4>)
 8001a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0c:	4b37      	ldr	r3, [pc, #220]	; (8001aec <I2C1_MspInit+0xf4>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8001a18:	f003 fa46 	bl	8004ea8 <HAL_PWREx_EnableVddIO2>

  if (hi2c->Instance == DISCOVERY_I2C1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a33      	ldr	r2, [pc, #204]	; (8001af0 <I2C1_MspInit+0xf8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d15e      	bne.n	8001ae4 <I2C1_MspInit+0xec>
  {
    /*##-1- Configure the Discovery I2C clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a26:	2340      	movs	r3, #64	; 0x40
 8001a28:	61fb      	str	r3, [r7, #28]
    RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	4618      	mov	r0, r3
 8001a36:	f004 fd01 	bl	800643c <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <I2C1_MspInit+0xf4>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	4a2b      	ldr	r2, [pc, #172]	; (8001aec <I2C1_MspInit+0xf4>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <I2C1_MspInit+0xf4>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <I2C1_MspInit+0xf4>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	4a25      	ldr	r2, [pc, #148]	; (8001aec <I2C1_MspInit+0xf4>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <I2C1_MspInit+0xf4>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN;
 8001a6a:	23c0      	movs	r3, #192	; 0xc0
 8001a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001a70:	2312      	movs	r3, #18
 8001a72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = GPIO_PULLUP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C1_SCL_SDA_AF;
 8001a82:	2304      	movs	r3, #4
 8001a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C1_SCL_GPIO_PORT, &GPIO_InitStructure);
 8001a88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4819      	ldr	r0, [pc, #100]	; (8001af4 <I2C1_MspInit+0xfc>)
 8001a90:	f001 f84e 	bl	8002b30 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C1 peripheral #######################################*/
    /* Enable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_ENABLE();
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <I2C1_MspInit+0xf4>)
 8001a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a98:	4a14      	ldr	r2, [pc, #80]	; (8001aec <I2C1_MspInit+0xf4>)
 8001a9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <I2C1_MspInit+0xf4>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <I2C1_MspInit+0xf4>)
 8001aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab0:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <I2C1_MspInit+0xf4>)
 8001ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab6:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <I2C1_MspInit+0xf4>)
 8001aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abc:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <I2C1_MspInit+0xf4>)
 8001abe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ac2:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_EV_IRQn, 0x00, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	201f      	movs	r0, #31
 8001aca:	f000 fbcc 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001ace:	201f      	movs	r0, #31
 8001ad0:	f000 fbe5 	bl	800229e <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_ER_IRQn, 0x00, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2020      	movs	r0, #32
 8001ada:	f000 fbc4 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001ade:	2020      	movs	r0, #32
 8001ae0:	f000 fbdd 	bl	800229e <HAL_NVIC_EnableIRQ>
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	37b8      	adds	r7, #184	; 0xb8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40005400 	.word	0x40005400
 8001af4:	48000400 	.word	0x48000400

08001af8 <I2C1_DeInit>:
/**
  * @brief Discovery I2C1 Bus Deitialization
  * @retval None
  */
static void I2C1_DeInit(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c1Handle) != HAL_I2C_STATE_RESET)
 8001afc:	4806      	ldr	r0, [pc, #24]	; (8001b18 <I2C1_DeInit+0x20>)
 8001afe:	f001 fdcd 	bl	800369c <HAL_I2C_GetState>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <I2C1_DeInit+0x1c>
  {
    /* Deinit the I2C */
    HAL_I2C_DeInit(&I2c1Handle);
 8001b08:	4803      	ldr	r0, [pc, #12]	; (8001b18 <I2C1_DeInit+0x20>)
 8001b0a:	f001 fb56 	bl	80031ba <HAL_I2C_DeInit>
    I2C1_MspDeInit(&I2c1Handle);
 8001b0e:	4802      	ldr	r0, [pc, #8]	; (8001b18 <I2C1_DeInit+0x20>)
 8001b10:	f000 f804 	bl	8001b1c <I2C1_MspDeInit>
  }
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200003b8 	.word	0x200003b8

08001b1c <I2C1_MspDeInit>:
  * @brief Discovery I2C1 MSP Deinitialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a24      	ldr	r2, [pc, #144]	; (8001bbc <I2C1_MspDeInit+0xa0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d141      	bne.n	8001bb2 <I2C1_MspDeInit+0x96>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	4a1d      	ldr	r2, [pc, #116]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    /* Deinit Rx/Tx pins */
    HAL_GPIO_DeInit(DISCOVERY_I2C1_SCL_GPIO_PORT, (DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN));
 8001b5e:	21c0      	movs	r1, #192	; 0xc0
 8001b60:	4818      	ldr	r0, [pc, #96]	; (8001bc4 <I2C1_MspDeInit+0xa8>)
 8001b62:	f001 f98f 	bl	8002e84 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C1 peripheral ############################*/
    /* Force & Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	4a15      	ldr	r2, [pc, #84]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b70:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001b78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_DISABLE();
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001b84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b88:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C1 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001b8a:	201f      	movs	r0, #31
 8001b8c:	f000 fb95 	bl	80022ba <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001b90:	2020      	movs	r0, #32
 8001b92:	f000 fb92 	bl	80022ba <HAL_NVIC_DisableIRQ>

    __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9a:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <I2C1_MspDeInit+0xa4>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_DisableVddIO2();
 8001bae:	f003 f98b 	bl	8004ec8 <HAL_PWREx_DisableVddIO2>
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40005400 	.word	0x40005400
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	48000400 	.word	0x48000400

08001bc8 <I2C1_WriteBuffer>:
  * @param  pBuffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval None
  */
static HAL_StatusTypeDef I2C1_WriteBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af04      	add	r7, sp, #16
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	81fb      	strh	r3, [r7, #14]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	81bb      	strh	r3, [r7, #12]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <I2C1_WriteBuffer+0x4c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	8978      	ldrh	r0, [r7, #10]
 8001be6:	89ba      	ldrh	r2, [r7, #12]
 8001be8:	89f9      	ldrh	r1, [r7, #14]
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	8c3b      	ldrh	r3, [r7, #32]
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4808      	ldr	r0, [pc, #32]	; (8001c18 <I2C1_WriteBuffer+0x50>)
 8001bf8:	f001 fb22 	bl	8003240 <HAL_I2C_Mem_Write>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <I2C1_WriteBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001c06:	f000 f833 	bl	8001c70 <I2C1_Error>
  }
  return status;
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	2000003c 	.word	0x2000003c
 8001c18:	200003b8 	.word	0x200003b8

08001c1c <I2C1_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C1_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af04      	add	r7, sp, #16
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	4603      	mov	r3, r0
 8001c26:	81fb      	strh	r3, [r7, #14]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	81bb      	strh	r3, [r7, #12]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <I2C1_ReadBuffer+0x4c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	8978      	ldrh	r0, [r7, #10]
 8001c3a:	89ba      	ldrh	r2, [r7, #12]
 8001c3c:	89f9      	ldrh	r1, [r7, #14]
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	8c3b      	ldrh	r3, [r7, #32]
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4808      	ldr	r0, [pc, #32]	; (8001c6c <I2C1_ReadBuffer+0x50>)
 8001c4c:	f001 fc0c 	bl	8003468 <HAL_I2C_Mem_Read>
 8001c50:	4603      	mov	r3, r0
 8001c52:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <I2C1_ReadBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001c5a:	f000 f809 	bl	8001c70 <I2C1_Error>
  }
  return status;
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2000003c 	.word	0x2000003c
 8001c6c:	200003b8 	.word	0x200003b8

08001c70 <I2C1_Error>:
/**
  * @brief Discovery I2C1 error treatment function
  * @retval None
  */
static void I2C1_Error(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c1Handle);
 8001c74:	4803      	ldr	r0, [pc, #12]	; (8001c84 <I2C1_Error+0x14>)
 8001c76:	f001 faa0 	bl	80031ba <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C1_Init();
 8001c7a:	f7ff fe8f 	bl	800199c <I2C1_Init>
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200003b8 	.word	0x200003b8

08001c88 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <AUDIO_IO_Init+0x64>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	4a16      	ldr	r2, [pc, #88]	; (8001cec <AUDIO_IO_Init+0x64>)
 8001c94:	f043 0310 	orr.w	r3, r3, #16
 8001c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <AUDIO_IO_Init+0x64>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]

  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8001ca6:	2308      	movs	r3, #8
 8001ca8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <AUDIO_IO_Init+0x68>)
 8001cbc:	f000 ff38 	bl	8002b30 <HAL_GPIO_Init>

  /* I2C bus init */
  I2C1_Init();
 8001cc0:	f7ff fe6c 	bl	800199c <I2C1_Init>

  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2108      	movs	r1, #8
 8001cc8:	4809      	ldr	r0, [pc, #36]	; (8001cf0 <AUDIO_IO_Init+0x68>)
 8001cca:	f001 f9cf 	bl	800306c <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8001cce:	2005      	movs	r0, #5
 8001cd0:	f000 f9a6 	bl	8002020 <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2108      	movs	r1, #8
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <AUDIO_IO_Init+0x68>)
 8001cda:	f001 f9c7 	bl	800306c <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8001cde:	2005      	movs	r0, #5
 8001ce0:	f000 f99e 	bl	8002020 <HAL_Delay>
}
 8001ce4:	bf00      	nop
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	48001000 	.word	0x48001000

08001cf4 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)                       /* TO DO */
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0

  /***********************************************************************/
  /* In case of battery-supplied powered, there is no audio codec-based
     features available. Set audio codec I/O default setting */
  /***********************************************************************/
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <AUDIO_IO_DeInit+0x78>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <AUDIO_IO_DeInit+0x78>)
 8001d00:	f043 0310 	orr.w	r3, r3, #16
 8001d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d06:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <AUDIO_IO_DeInit+0x78>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP  ;
 8001d12:	2301      	movs	r3, #1
 8001d14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pin       = (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 8001d16:	237c      	movs	r3, #124	; 0x7c
 8001d18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4812      	ldr	r0, [pc, #72]	; (8001d70 <AUDIO_IO_DeInit+0x7c>)
 8001d28:	f000 ff02 	bl	8002b30 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2104      	movs	r1, #4
 8001d30:	480f      	ldr	r0, [pc, #60]	; (8001d70 <AUDIO_IO_DeInit+0x7c>)
 8001d32:	f001 f99b 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2108      	movs	r1, #8
 8001d3a:	480d      	ldr	r0, [pc, #52]	; (8001d70 <AUDIO_IO_DeInit+0x7c>)
 8001d3c:	f001 f996 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2110      	movs	r1, #16
 8001d44:	480a      	ldr	r0, [pc, #40]	; (8001d70 <AUDIO_IO_DeInit+0x7c>)
 8001d46:	f001 f991 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	4808      	ldr	r0, [pc, #32]	; (8001d70 <AUDIO_IO_DeInit+0x7c>)
 8001d50:	f001 f98c 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2140      	movs	r1, #64	; 0x40
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <AUDIO_IO_DeInit+0x7c>)
 8001d5a:	f001 f987 	bl	800306c <HAL_GPIO_WritePin>

  /* I2C bus Deinit */
  I2C1_DeInit();
 8001d5e:	f7ff fecb 	bl	8001af8 <I2C1_DeInit>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	48001000 	.word	0x48001000

08001d74 <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	71bb      	strb	r3, [r7, #6]
 8001d82:	4613      	mov	r3, r2
 8001d84:	717b      	strb	r3, [r7, #5]
  I2C1_WriteBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	b298      	uxth	r0, r3
 8001d8a:	79bb      	ldrb	r3, [r7, #6]
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	1d7b      	adds	r3, r7, #5
 8001d90:	2201      	movs	r2, #1
 8001d92:	9200      	str	r2, [sp, #0]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f7ff ff17 	bl	8001bc8 <I2C1_WriteBuffer>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af02      	add	r7, sp, #8
 8001da8:	4603      	mov	r3, r0
 8001daa:	460a      	mov	r2, r1
 8001dac:	71fb      	strb	r3, [r7, #7]
 8001dae:	4613      	mov	r3, r2
 8001db0:	71bb      	strb	r3, [r7, #6]
  uint8_t Read_Value = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]

  I2C1_ReadBuffer((uint16_t) Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Read_Value, 1);
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	b298      	uxth	r0, r3
 8001dba:	79bb      	ldrb	r3, [r7, #6]
 8001dbc:	b299      	uxth	r1, r3
 8001dbe:	f107 030f 	add.w	r3, r7, #15
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	9200      	str	r2, [sp, #0]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f7ff ff28 	bl	8001c1c <I2C1_ReadBuffer>

  return Read_Value;
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_MspInit+0x44>)
 8001de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_MspInit+0x44>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_MspInit+0x44>)
 8001dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_MspInit+0x44>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_MspInit+0x44>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6593      	str	r3, [r2, #88]	; 0x58
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_MspInit+0x44>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000

08001e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <NMI_Handler+0x4>

08001e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <HardFault_Handler+0x4>

08001e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <MemManage_Handler+0x4>

08001e32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <BusFault_Handler+0x4>

08001e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <UsageFault_Handler+0x4>

08001e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6c:	f000 f8b8 	bl	8001fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <DMA1_Channel4_IRQHandler+0x10>)
 8001e7a:	f000 fda9 	bl	80029d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000250 	.word	0x20000250

08001e88 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <DMA2_Channel1_IRQHandler+0x10>)
 8001e8e:	f000 fd9f 	bl	80029d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000036c 	.word	0x2000036c

08001e9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <OTG_FS_IRQHandler+0x10>)
 8001ea2:	f002 f802 	bl	8003eaa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20001900 	.word	0x20001900

08001eb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <SystemInit+0x20>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <SystemInit+0x20>)
 8001ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ed8:	f7ff ffea 	bl	8001eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ede:	490d      	ldr	r1, [pc, #52]	; (8001f14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <LoopForever+0xe>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ef4:	4c0a      	ldr	r4, [pc, #40]	; (8001f20 <LoopForever+0x16>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f02:	f00b f8a3 	bl	800d04c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f06:	f7fe ffc7 	bl	8000e98 <main>

08001f0a <LoopForever>:

LoopForever:
    b LoopForever
 8001f0a:	e7fe      	b.n	8001f0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f14:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8001f18:	0800d178 	.word	0x0800d178
  ldr r2, =_sbss
 8001f1c:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8001f20:	20002d80 	.word	0x20002d80

08001f24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f24:	e7fe      	b.n	8001f24 <ADC1_2_IRQHandler>
	...

08001f28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_Init+0x3c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <HAL_Init+0x3c>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3e:	2003      	movs	r0, #3
 8001f40:	f000 f986 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f44:	2000      	movs	r0, #0
 8001f46:	f000 f80f 	bl	8001f68 <HAL_InitTick>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	71fb      	strb	r3, [r7, #7]
 8001f54:	e001      	b.n	8001f5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f56:	f7ff ff3f 	bl	8001dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40022000 	.word	0x40022000

08001f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_InitTick+0x6c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d023      	beq.n	8001fc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f7c:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <HAL_InitTick+0x70>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_InitTick+0x6c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4619      	mov	r1, r3
 8001f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f99f 	bl	80022d6 <HAL_SYSTICK_Config>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10f      	bne.n	8001fbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b0f      	cmp	r3, #15
 8001fa2:	d809      	bhi.n	8001fb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f000 f95b 	bl	8002266 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_InitTick+0x74>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e007      	b.n	8001fc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e004      	b.n	8001fc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
 8001fc2:	e001      	b.n	8001fc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000048 	.word	0x20000048
 8001fd8:	20000040 	.word	0x20000040
 8001fdc:	20000044 	.word	0x20000044

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000048 	.word	0x20000048
 8002004:	20000404 	.word	0x20000404

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000404 	.word	0x20000404

08002020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff ffee 	bl	8002008 <HAL_GetTick>
 800202c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d005      	beq.n	8002046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_Delay+0x44>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002046:	bf00      	nop
 8002048:	f7ff ffde 	bl	8002008 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	429a      	cmp	r2, r3
 8002056:	d8f7      	bhi.n	8002048 <HAL_Delay+0x28>
  {
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000048 	.word	0x20000048

08002068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209a:	4a04      	ldr	r2, [pc, #16]	; (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <__NVIC_GetPriorityGrouping+0x18>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 0307 	and.w	r3, r3, #7
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db0b      	blt.n	80020f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f003 021f 	and.w	r2, r3, #31
 80020e4:	4907      	ldr	r1, [pc, #28]	; (8002104 <__NVIC_EnableIRQ+0x38>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2001      	movs	r0, #1
 80020ee:	fa00 f202 	lsl.w	r2, r0, r2
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100

08002108 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db12      	blt.n	8002140 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	490a      	ldr	r1, [pc, #40]	; (800214c <__NVIC_DisableIRQ+0x44>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2001      	movs	r0, #1
 800212a:	fa00 f202 	lsl.w	r2, r0, r2
 800212e:	3320      	adds	r3, #32
 8002130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002134:	f3bf 8f4f 	dsb	sy
}
 8002138:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800213a:	f3bf 8f6f 	isb	sy
}
 800213e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	; (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800221c:	d301      	bcc.n	8002222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221e:	2301      	movs	r3, #1
 8002220:	e00f      	b.n	8002242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <SysTick_Config+0x40>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222a:	210f      	movs	r1, #15
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f7ff ff8e 	bl	8002150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <SysTick_Config+0x40>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <SysTick_Config+0x40>)
 800223c:	2207      	movs	r2, #7
 800223e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000e010 	.word	0xe000e010

08002250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff05 	bl	8002068 <__NVIC_SetPriorityGrouping>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002278:	f7ff ff1a 	bl	80020b0 <__NVIC_GetPriorityGrouping>
 800227c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f7ff ff8e 	bl	80021a4 <NVIC_EncodePriority>
 8002288:	4602      	mov	r2, r0
 800228a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff5d 	bl	8002150 <__NVIC_SetPriority>
}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	4603      	mov	r3, r0
 80022a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff0d 	bl	80020cc <__NVIC_EnableIRQ>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff1d 	bl	8002108 <__NVIC_DisableIRQ>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ff94 	bl	800220c <SysTick_Config>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e0ac      	b.n	800245c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fa20 	bl	800274c <DFSDM_GetChannelFromInstance>
 800230c:	4603      	mov	r3, r0
 800230e:	4a55      	ldr	r2, [pc, #340]	; (8002464 <HAL_DFSDM_ChannelInit+0x174>)
 8002310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e09f      	b.n	800245c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7fe fb81 	bl	8000a24 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002322:	4b51      	ldr	r3, [pc, #324]	; (8002468 <HAL_DFSDM_ChannelInit+0x178>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3301      	adds	r3, #1
 8002328:	4a4f      	ldr	r2, [pc, #316]	; (8002468 <HAL_DFSDM_ChannelInit+0x178>)
 800232a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800232c:	4b4e      	ldr	r3, [pc, #312]	; (8002468 <HAL_DFSDM_ChannelInit+0x178>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d125      	bne.n	8002380 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002334:	4b4d      	ldr	r3, [pc, #308]	; (800246c <HAL_DFSDM_ChannelInit+0x17c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a4c      	ldr	r2, [pc, #304]	; (800246c <HAL_DFSDM_ChannelInit+0x17c>)
 800233a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800233e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002340:	4b4a      	ldr	r3, [pc, #296]	; (800246c <HAL_DFSDM_ChannelInit+0x17c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4948      	ldr	r1, [pc, #288]	; (800246c <HAL_DFSDM_ChannelInit+0x17c>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800234e:	4b47      	ldr	r3, [pc, #284]	; (800246c <HAL_DFSDM_ChannelInit+0x17c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a46      	ldr	r2, [pc, #280]	; (800246c <HAL_DFSDM_ChannelInit+0x17c>)
 8002354:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002358:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	791b      	ldrb	r3, [r3, #4]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d108      	bne.n	8002374 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002362:	4b42      	ldr	r3, [pc, #264]	; (800246c <HAL_DFSDM_ChannelInit+0x17c>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	3b01      	subs	r3, #1
 800236c:	041b      	lsls	r3, r3, #16
 800236e:	493f      	ldr	r1, [pc, #252]	; (800246c <HAL_DFSDM_ChannelInit+0x17c>)
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002374:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_DFSDM_ChannelInit+0x17c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a3c      	ldr	r2, [pc, #240]	; (800246c <HAL_DFSDM_ChannelInit+0x17c>)
 800237a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800237e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800238e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6819      	ldr	r1, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800239e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80023a4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 020f 	bic.w	r2, r2, #15
 80023bc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80023e4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	3b01      	subs	r3, #1
 80023f6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f002 0207 	and.w	r2, r2, #7
 8002410:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800243c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f97e 	bl	800274c <DFSDM_GetChannelFromInstance>
 8002450:	4602      	mov	r2, r0
 8002452:	4904      	ldr	r1, [pc, #16]	; (8002464 <HAL_DFSDM_ChannelInit+0x174>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2000040c 	.word	0x2000040c
 8002468:	20000408 	.word	0x20000408
 800246c:	40016000 	.word	0x40016000

08002470 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0ca      	b.n	8002618 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a66      	ldr	r2, [pc, #408]	; (8002620 <HAL_DFSDM_FilterInit+0x1b0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d109      	bne.n	80024a0 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002490:	2b01      	cmp	r3, #1
 8002492:	d003      	beq.n	800249c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0bb      	b.n	8002618 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7fe fa33 	bl	8000924 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80024cc:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7a1b      	ldrb	r3, [r3, #8]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d108      	bne.n	80024e8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	e007      	b.n	80024f8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80024f6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7a5b      	ldrb	r3, [r3, #9]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d108      	bne.n	8002512 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e007      	b.n	8002522 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002520:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8002530:	f023 0308 	bic.w	r3, r3, #8
 8002534:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d108      	bne.n	8002550 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7c1b      	ldrb	r3, [r3, #16]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d108      	bne.n	800256a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0210 	orr.w	r2, r2, #16
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e007      	b.n	800257a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0210 	bic.w	r2, r2, #16
 8002578:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7c5b      	ldrb	r3, [r3, #17]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d108      	bne.n	8002594 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0220 	orr.w	r2, r2, #32
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e007      	b.n	80025a4 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0220 	bic.w	r2, r2, #32
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80025b2:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80025b6:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6959      	ldr	r1, [r3, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80025ca:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80025d2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699a      	ldr	r2, [r3, #24]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7c1a      	ldrb	r2, [r3, #16]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40016100 	.word	0x40016100

08002624 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d02e      	beq.n	800269c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002644:	2bff      	cmp	r3, #255	; 0xff
 8002646:	d029      	beq.n	800269c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d10d      	bne.n	800267e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002670:	431a      	orrs	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e00a      	b.n	8002694 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
 800269a:	e001      	b.n	80026a0 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01b      	beq.n	80026fe <HAL_DFSDM_FilterConfigInjChannel+0x50>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80026cc:	2bff      	cmp	r3, #255	; 0xff
 80026ce:	d016      	beq.n	80026fe <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t)(Channel & DFSDM_LSB_MASK);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	b292      	uxth	r2, r2
 80026d8:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 80026da:	6838      	ldr	r0, [r7, #0]
 80026dc:	f000 f816 	bl	800270c <DFSDM_GetInjChannelsNbr>
 80026e0:	4602      	mov	r2, r0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d102      	bne.n	80026f6 <HAL_DFSDM_FilterConfigInjChannel+0x48>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	e000      	b.n	80026f8 <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 80026f6:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6493      	str	r3, [r2, #72]	; 0x48
 80026fc:	e001      	b.n	8002702 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8002702:	7bfb      	ldrb	r3, [r7, #15]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t)(Channels & DFSDM_LSB_MASK);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	b29b      	uxth	r3, r3
 800271c:	60bb      	str	r3, [r7, #8]
  while (tmp != 0U)
 800271e:	e00a      	b.n	8002736 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if ((tmp & 1U) != 0U)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3301      	adds	r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t)(tmp >> 1);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	60bb      	str	r3, [r7, #8]
  while (tmp != 0U)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f1      	bne.n	8002720 <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 800273c:	68fb      	ldr	r3, [r7, #12]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <DFSDM_GetChannelFromInstance+0x7c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d102      	bne.n	8002762 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	e02b      	b.n	80027ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <DFSDM_GetChannelFromInstance+0x80>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d102      	bne.n	8002770 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800276a:	2301      	movs	r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	e024      	b.n	80027ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <DFSDM_GetChannelFromInstance+0x84>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d102      	bne.n	800277e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002778:	2302      	movs	r3, #2
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	e01d      	b.n	80027ba <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <DFSDM_GetChannelFromInstance+0x88>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d102      	bne.n	800278c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002786:	2304      	movs	r3, #4
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	e016      	b.n	80027ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <DFSDM_GetChannelFromInstance+0x8c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d102      	bne.n	800279a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002794:	2305      	movs	r3, #5
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e00f      	b.n	80027ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <DFSDM_GetChannelFromInstance+0x90>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d102      	bne.n	80027a8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80027a2:	2306      	movs	r3, #6
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	e008      	b.n	80027ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a0d      	ldr	r2, [pc, #52]	; (80027e0 <DFSDM_GetChannelFromInstance+0x94>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d102      	bne.n	80027b6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80027b0:	2307      	movs	r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e001      	b.n	80027ba <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80027b6:	2303      	movs	r3, #3
 80027b8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40016000 	.word	0x40016000
 80027cc:	40016020 	.word	0x40016020
 80027d0:	40016040 	.word	0x40016040
 80027d4:	40016080 	.word	0x40016080
 80027d8:	400160a0 	.word	0x400160a0
 80027dc:	400160c0 	.word	0x400160c0
 80027e0:	400160e0 	.word	0x400160e0

080027e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e098      	b.n	8002928 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b4d      	ldr	r3, [pc, #308]	; (8002934 <HAL_DMA_Init+0x150>)
 80027fe:	429a      	cmp	r2, r3
 8002800:	d80f      	bhi.n	8002822 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	4b4b      	ldr	r3, [pc, #300]	; (8002938 <HAL_DMA_Init+0x154>)
 800280a:	4413      	add	r3, r2
 800280c:	4a4b      	ldr	r2, [pc, #300]	; (800293c <HAL_DMA_Init+0x158>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	009a      	lsls	r2, r3, #2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a48      	ldr	r2, [pc, #288]	; (8002940 <HAL_DMA_Init+0x15c>)
 800281e:	641a      	str	r2, [r3, #64]	; 0x40
 8002820:	e00e      	b.n	8002840 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	4b46      	ldr	r3, [pc, #280]	; (8002944 <HAL_DMA_Init+0x160>)
 800282a:	4413      	add	r3, r2
 800282c:	4a43      	ldr	r2, [pc, #268]	; (800293c <HAL_DMA_Init+0x158>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	009a      	lsls	r2, r3, #2
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a42      	ldr	r2, [pc, #264]	; (8002948 <HAL_DMA_Init+0x164>)
 800283e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800287c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800289a:	d039      	beq.n	8002910 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	4a27      	ldr	r2, [pc, #156]	; (8002940 <HAL_DMA_Init+0x15c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d11a      	bne.n	80028dc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028a6:	4b29      	ldr	r3, [pc, #164]	; (800294c <HAL_DMA_Init+0x168>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f003 031c 	and.w	r3, r3, #28
 80028b2:	210f      	movs	r1, #15
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	4924      	ldr	r1, [pc, #144]	; (800294c <HAL_DMA_Init+0x168>)
 80028bc:	4013      	ands	r3, r2
 80028be:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028c0:	4b22      	ldr	r3, [pc, #136]	; (800294c <HAL_DMA_Init+0x168>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	f003 031c 	and.w	r3, r3, #28
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	491d      	ldr	r1, [pc, #116]	; (800294c <HAL_DMA_Init+0x168>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
 80028da:	e019      	b.n	8002910 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028dc:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <HAL_DMA_Init+0x16c>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	f003 031c 	and.w	r3, r3, #28
 80028e8:	210f      	movs	r1, #15
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	4917      	ldr	r1, [pc, #92]	; (8002950 <HAL_DMA_Init+0x16c>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028f6:	4b16      	ldr	r3, [pc, #88]	; (8002950 <HAL_DMA_Init+0x16c>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f003 031c 	and.w	r3, r3, #28
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	4911      	ldr	r1, [pc, #68]	; (8002950 <HAL_DMA_Init+0x16c>)
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	40020407 	.word	0x40020407
 8002938:	bffdfff8 	.word	0xbffdfff8
 800293c:	cccccccd 	.word	0xcccccccd
 8002940:	40020000 	.word	0x40020000
 8002944:	bffdfbf8 	.word	0xbffdfbf8
 8002948:	40020400 	.word	0x40020400
 800294c:	400200a8 	.word	0x400200a8
 8002950:	400204a8 	.word	0x400204a8

08002954 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d008      	beq.n	800297e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2204      	movs	r2, #4
 8002970:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e022      	b.n	80029c4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 020e 	bic.w	r2, r2, #14
 800298c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0201 	bic.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f003 021c 	and.w	r2, r3, #28
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2101      	movs	r1, #1
 80029ac:	fa01 f202 	lsl.w	r2, r1, r2
 80029b0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	f003 031c 	and.w	r3, r3, #28
 80029f0:	2204      	movs	r2, #4
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d026      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x7a>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d021      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d107      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0204 	bic.w	r2, r2, #4
 8002a22:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f003 021c 	and.w	r2, r3, #28
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2104      	movs	r1, #4
 8002a32:	fa01 f202 	lsl.w	r2, r1, r2
 8002a36:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d071      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002a48:	e06c      	b.n	8002b24 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f003 031c 	and.w	r3, r3, #28
 8002a52:	2202      	movs	r2, #2
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d02e      	beq.n	8002abc <HAL_DMA_IRQHandler+0xec>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d029      	beq.n	8002abc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 020a 	bic.w	r2, r2, #10
 8002a84:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f003 021c 	and.w	r2, r3, #28
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d038      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002aba:	e033      	b.n	8002b24 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	f003 031c 	and.w	r3, r3, #28
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d02a      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x156>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d025      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 020e 	bic.w	r2, r2, #14
 8002ae8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f003 021c 	and.w	r2, r3, #28
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2101      	movs	r1, #1
 8002af8:	fa01 f202 	lsl.w	r2, r1, r2
 8002afc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
}
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b3e:	e17f      	b.n	8002e40 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8171 	beq.w	8002e3a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d005      	beq.n	8002b70 <HAL_GPIO_Init+0x40>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d130      	bne.n	8002bd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 0201 	and.w	r2, r3, #1
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d118      	bne.n	8002c10 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002be4:	2201      	movs	r2, #1
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	08db      	lsrs	r3, r3, #3
 8002bfa:	f003 0201 	and.w	r2, r3, #1
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d017      	beq.n	8002c4c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d123      	bne.n	8002ca0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	08da      	lsrs	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3208      	adds	r2, #8
 8002c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	220f      	movs	r2, #15
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	08da      	lsrs	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3208      	adds	r2, #8
 8002c9a:	6939      	ldr	r1, [r7, #16]
 8002c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80ac 	beq.w	8002e3a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	4b5f      	ldr	r3, [pc, #380]	; (8002e60 <HAL_GPIO_Init+0x330>)
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce6:	4a5e      	ldr	r2, [pc, #376]	; (8002e60 <HAL_GPIO_Init+0x330>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6613      	str	r3, [r2, #96]	; 0x60
 8002cee:	4b5c      	ldr	r3, [pc, #368]	; (8002e60 <HAL_GPIO_Init+0x330>)
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cfa:	4a5a      	ldr	r2, [pc, #360]	; (8002e64 <HAL_GPIO_Init+0x334>)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	3302      	adds	r3, #2
 8002d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	220f      	movs	r2, #15
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d24:	d025      	beq.n	8002d72 <HAL_GPIO_Init+0x242>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a4f      	ldr	r2, [pc, #316]	; (8002e68 <HAL_GPIO_Init+0x338>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01f      	beq.n	8002d6e <HAL_GPIO_Init+0x23e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4e      	ldr	r2, [pc, #312]	; (8002e6c <HAL_GPIO_Init+0x33c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d019      	beq.n	8002d6a <HAL_GPIO_Init+0x23a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a4d      	ldr	r2, [pc, #308]	; (8002e70 <HAL_GPIO_Init+0x340>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_GPIO_Init+0x236>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <HAL_GPIO_Init+0x344>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00d      	beq.n	8002d62 <HAL_GPIO_Init+0x232>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4b      	ldr	r2, [pc, #300]	; (8002e78 <HAL_GPIO_Init+0x348>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <HAL_GPIO_Init+0x22e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4a      	ldr	r2, [pc, #296]	; (8002e7c <HAL_GPIO_Init+0x34c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_GPIO_Init+0x22a>
 8002d56:	2306      	movs	r3, #6
 8002d58:	e00c      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d5a:	2307      	movs	r3, #7
 8002d5c:	e00a      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d5e:	2305      	movs	r3, #5
 8002d60:	e008      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d62:	2304      	movs	r3, #4
 8002d64:	e006      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d66:	2303      	movs	r3, #3
 8002d68:	e004      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_GPIO_Init+0x244>
 8002d72:	2300      	movs	r3, #0
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	f002 0203 	and.w	r2, r2, #3
 8002d7a:	0092      	lsls	r2, r2, #2
 8002d7c:	4093      	lsls	r3, r2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d84:	4937      	ldr	r1, [pc, #220]	; (8002e64 <HAL_GPIO_Init+0x334>)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002db6:	4a32      	ldr	r2, [pc, #200]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dbc:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002de0:	4a27      	ldr	r2, [pc, #156]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002de6:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e0a:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e34:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f47f ae78 	bne.w	8002b40 <HAL_GPIO_Init+0x10>
  }
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40010000 	.word	0x40010000
 8002e68:	48000400 	.word	0x48000400
 8002e6c:	48000800 	.word	0x48000800
 8002e70:	48000c00 	.word	0x48000c00
 8002e74:	48001000 	.word	0x48001000
 8002e78:	48001400 	.word	0x48001400
 8002e7c:	48001800 	.word	0x48001800
 8002e80:	40010400 	.word	0x40010400

08002e84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002e92:	e0cd      	b.n	8003030 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002e94:	2201      	movs	r2, #1
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80c0 	beq.w	800302a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002eaa:	4a68      	ldr	r2, [pc, #416]	; (800304c <HAL_GPIO_DeInit+0x1c8>)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ed2:	d025      	beq.n	8002f20 <HAL_GPIO_DeInit+0x9c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a5e      	ldr	r2, [pc, #376]	; (8003050 <HAL_GPIO_DeInit+0x1cc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d01f      	beq.n	8002f1c <HAL_GPIO_DeInit+0x98>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a5d      	ldr	r2, [pc, #372]	; (8003054 <HAL_GPIO_DeInit+0x1d0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d019      	beq.n	8002f18 <HAL_GPIO_DeInit+0x94>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a5c      	ldr	r2, [pc, #368]	; (8003058 <HAL_GPIO_DeInit+0x1d4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d013      	beq.n	8002f14 <HAL_GPIO_DeInit+0x90>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a5b      	ldr	r2, [pc, #364]	; (800305c <HAL_GPIO_DeInit+0x1d8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00d      	beq.n	8002f10 <HAL_GPIO_DeInit+0x8c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a5a      	ldr	r2, [pc, #360]	; (8003060 <HAL_GPIO_DeInit+0x1dc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <HAL_GPIO_DeInit+0x88>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a59      	ldr	r2, [pc, #356]	; (8003064 <HAL_GPIO_DeInit+0x1e0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_GPIO_DeInit+0x84>
 8002f04:	2306      	movs	r3, #6
 8002f06:	e00c      	b.n	8002f22 <HAL_GPIO_DeInit+0x9e>
 8002f08:	2307      	movs	r3, #7
 8002f0a:	e00a      	b.n	8002f22 <HAL_GPIO_DeInit+0x9e>
 8002f0c:	2305      	movs	r3, #5
 8002f0e:	e008      	b.n	8002f22 <HAL_GPIO_DeInit+0x9e>
 8002f10:	2304      	movs	r3, #4
 8002f12:	e006      	b.n	8002f22 <HAL_GPIO_DeInit+0x9e>
 8002f14:	2303      	movs	r3, #3
 8002f16:	e004      	b.n	8002f22 <HAL_GPIO_DeInit+0x9e>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e002      	b.n	8002f22 <HAL_GPIO_DeInit+0x9e>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <HAL_GPIO_DeInit+0x9e>
 8002f20:	2300      	movs	r3, #0
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	f002 0203 	and.w	r2, r2, #3
 8002f28:	0092      	lsls	r2, r2, #2
 8002f2a:	4093      	lsls	r3, r2
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d132      	bne.n	8002f98 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002f32:	4b4d      	ldr	r3, [pc, #308]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	494b      	ldr	r1, [pc, #300]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002f40:	4b49      	ldr	r3, [pc, #292]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	4947      	ldr	r1, [pc, #284]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002f4e:	4b46      	ldr	r3, [pc, #280]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	4944      	ldr	r1, [pc, #272]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002f5c:	4b42      	ldr	r3, [pc, #264]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	4940      	ldr	r1, [pc, #256]	; (8003068 <HAL_GPIO_DeInit+0x1e4>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	220f      	movs	r2, #15
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002f7a:	4a34      	ldr	r2, [pc, #208]	; (800304c <HAL_GPIO_DeInit+0x1c8>)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3302      	adds	r3, #2
 8002f82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	4830      	ldr	r0, [pc, #192]	; (800304c <HAL_GPIO_DeInit+0x1c8>)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	400a      	ands	r2, r1
 8002f92:	3302      	adds	r3, #2
 8002f94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2103      	movs	r1, #3
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	08da      	lsrs	r2, r3, #3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3208      	adds	r2, #8
 8002fb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	220f      	movs	r2, #15
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	08d2      	lsrs	r2, r2, #3
 8002fcc:	4019      	ands	r1, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3208      	adds	r2, #8
 8002fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	2103      	movs	r1, #3
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	2103      	movs	r1, #3
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	401a      	ands	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301a:	2101      	movs	r1, #1
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	401a      	ands	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3301      	adds	r3, #1
 800302e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	f47f af2b 	bne.w	8002e94 <HAL_GPIO_DeInit+0x10>
  }
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40010000 	.word	0x40010000
 8003050:	48000400 	.word	0x48000400
 8003054:	48000800 	.word	0x48000800
 8003058:	48000c00 	.word	0x48000c00
 800305c:	48001000 	.word	0x48001000
 8003060:	48001400 	.word	0x48001400
 8003064:	48001800 	.word	0x48001800
 8003068:	40010400 	.word	0x40010400

0800306c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800307c:	787b      	ldrb	r3, [r7, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003088:	e002      	b.n	8003090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e081      	b.n	80031b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f8a8 	bl	8003218 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2224      	movs	r2, #36	; 0x24
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d107      	bne.n	8003116 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	e006      	b.n	8003124 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003122:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d104      	bne.n	8003136 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003134:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003148:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003158:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69d9      	ldr	r1, [r3, #28]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e021      	b.n	8003210 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2224      	movs	r2, #36	; 0x24
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f821 	bl	800322c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	461a      	mov	r2, r3
 800324e:	4603      	mov	r3, r0
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	460b      	mov	r3, r1
 8003254:	813b      	strh	r3, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b20      	cmp	r3, #32
 8003264:	f040 80f9 	bne.w	800345a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_I2C_Mem_Write+0x34>
 800326e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0ed      	b.n	800345c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_I2C_Mem_Write+0x4e>
 800328a:	2302      	movs	r3, #2
 800328c:	e0e6      	b.n	800345c <HAL_I2C_Mem_Write+0x21c>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003296:	f7fe feb7 	bl	8002008 <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	2319      	movs	r3, #25
 80032a2:	2201      	movs	r2, #1
 80032a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fad1 	bl	8003850 <I2C_WaitOnFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0d1      	b.n	800345c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2221      	movs	r2, #33	; 0x21
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2240      	movs	r2, #64	; 0x40
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a3a      	ldr	r2, [r7, #32]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032e0:	88f8      	ldrh	r0, [r7, #6]
 80032e2:	893a      	ldrh	r2, [r7, #8]
 80032e4:	8979      	ldrh	r1, [r7, #10]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	4603      	mov	r3, r0
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f9e1 	bl	80036b8 <I2C_RequestMemoryWrite>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0a9      	b.n	800345c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	2bff      	cmp	r3, #255	; 0xff
 8003310:	d90e      	bls.n	8003330 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	22ff      	movs	r2, #255	; 0xff
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331c:	b2da      	uxtb	r2, r3
 800331e:	8979      	ldrh	r1, [r7, #10]
 8003320:	2300      	movs	r3, #0
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fc39 	bl	8003ba0 <I2C_TransferConfig>
 800332e:	e00f      	b.n	8003350 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	b2da      	uxtb	r2, r3
 8003340:	8979      	ldrh	r1, [r7, #10]
 8003342:	2300      	movs	r3, #0
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fc28 	bl	8003ba0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 fabb 	bl	80038d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e07b      	b.n	800345c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d034      	beq.n	8003408 <HAL_I2C_Mem_Write+0x1c8>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d130      	bne.n	8003408 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	2200      	movs	r2, #0
 80033ae:	2180      	movs	r1, #128	; 0x80
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fa4d 	bl	8003850 <I2C_WaitOnFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e04d      	b.n	800345c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2bff      	cmp	r3, #255	; 0xff
 80033c8:	d90e      	bls.n	80033e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	22ff      	movs	r2, #255	; 0xff
 80033ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	8979      	ldrh	r1, [r7, #10]
 80033d8:	2300      	movs	r3, #0
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 fbdd 	bl	8003ba0 <I2C_TransferConfig>
 80033e6:	e00f      	b.n	8003408 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	8979      	ldrh	r1, [r7, #10]
 80033fa:	2300      	movs	r3, #0
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fbcc 	bl	8003ba0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d19e      	bne.n	8003350 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fa9a 	bl	8003950 <I2C_WaitOnSTOPFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e01a      	b.n	800345c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2220      	movs	r2, #32
 800342c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6859      	ldr	r1, [r3, #4]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <HAL_I2C_Mem_Write+0x224>)
 800343a:	400b      	ands	r3, r1
 800343c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e000      	b.n	800345c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	fe00e800 	.word	0xfe00e800

08003468 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af02      	add	r7, sp, #8
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	4608      	mov	r0, r1
 8003472:	4611      	mov	r1, r2
 8003474:	461a      	mov	r2, r3
 8003476:	4603      	mov	r3, r0
 8003478:	817b      	strh	r3, [r7, #10]
 800347a:	460b      	mov	r3, r1
 800347c:	813b      	strh	r3, [r7, #8]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b20      	cmp	r3, #32
 800348c:	f040 80fd 	bne.w	800368a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_I2C_Mem_Read+0x34>
 8003496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003498:	2b00      	cmp	r3, #0
 800349a:	d105      	bne.n	80034a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0f1      	b.n	800368c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_I2C_Mem_Read+0x4e>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e0ea      	b.n	800368c <HAL_I2C_Mem_Read+0x224>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034be:	f7fe fda3 	bl	8002008 <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	2319      	movs	r3, #25
 80034ca:	2201      	movs	r2, #1
 80034cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f9bd 	bl	8003850 <I2C_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0d5      	b.n	800368c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2222      	movs	r2, #34	; 0x22
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2240      	movs	r2, #64	; 0x40
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a3a      	ldr	r2, [r7, #32]
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003508:	88f8      	ldrh	r0, [r7, #6]
 800350a:	893a      	ldrh	r2, [r7, #8]
 800350c:	8979      	ldrh	r1, [r7, #10]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	4603      	mov	r3, r0
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f921 	bl	8003760 <I2C_RequestMemoryRead>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0ad      	b.n	800368c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	2bff      	cmp	r3, #255	; 0xff
 8003538:	d90e      	bls.n	8003558 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	22ff      	movs	r2, #255	; 0xff
 800353e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003544:	b2da      	uxtb	r2, r3
 8003546:	8979      	ldrh	r1, [r7, #10]
 8003548:	4b52      	ldr	r3, [pc, #328]	; (8003694 <HAL_I2C_Mem_Read+0x22c>)
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 fb25 	bl	8003ba0 <I2C_TransferConfig>
 8003556:	e00f      	b.n	8003578 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	b2da      	uxtb	r2, r3
 8003568:	8979      	ldrh	r1, [r7, #10]
 800356a:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_I2C_Mem_Read+0x22c>)
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fb14 	bl	8003ba0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	2200      	movs	r2, #0
 8003580:	2104      	movs	r1, #4
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f964 	bl	8003850 <I2C_WaitOnFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07c      	b.n	800368c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d034      	beq.n	8003638 <HAL_I2C_Mem_Read+0x1d0>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d130      	bne.n	8003638 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	2200      	movs	r2, #0
 80035de:	2180      	movs	r1, #128	; 0x80
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f935 	bl	8003850 <I2C_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e04d      	b.n	800368c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2bff      	cmp	r3, #255	; 0xff
 80035f8:	d90e      	bls.n	8003618 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	22ff      	movs	r2, #255	; 0xff
 80035fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	b2da      	uxtb	r2, r3
 8003606:	8979      	ldrh	r1, [r7, #10]
 8003608:	2300      	movs	r3, #0
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 fac5 	bl	8003ba0 <I2C_TransferConfig>
 8003616:	e00f      	b.n	8003638 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	b2da      	uxtb	r2, r3
 8003628:	8979      	ldrh	r1, [r7, #10]
 800362a:	2300      	movs	r3, #0
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fab4 	bl	8003ba0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d19a      	bne.n	8003578 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f982 	bl	8003950 <I2C_WaitOnSTOPFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e01a      	b.n	800368c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2220      	movs	r2, #32
 800365c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_I2C_Mem_Read+0x230>)
 800366a:	400b      	ands	r3, r1
 800366c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e000      	b.n	800368c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800368a:	2302      	movs	r3, #2
  }
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	80002400 	.word	0x80002400
 8003698:	fe00e800 	.word	0xfe00e800

0800369c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036aa:	b2db      	uxtb	r3, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	4608      	mov	r0, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	461a      	mov	r2, r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	817b      	strh	r3, [r7, #10]
 80036ca:	460b      	mov	r3, r1
 80036cc:	813b      	strh	r3, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	8979      	ldrh	r1, [r7, #10]
 80036d8:	4b20      	ldr	r3, [pc, #128]	; (800375c <I2C_RequestMemoryWrite+0xa4>)
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fa5d 	bl	8003ba0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	69b9      	ldr	r1, [r7, #24]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8f0 	bl	80038d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e02c      	b.n	8003754 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003700:	893b      	ldrh	r3, [r7, #8]
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	629a      	str	r2, [r3, #40]	; 0x28
 800370a:	e015      	b.n	8003738 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800370c:	893b      	ldrh	r3, [r7, #8]
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	b29b      	uxth	r3, r3
 8003712:	b2da      	uxtb	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800371a:	69fa      	ldr	r2, [r7, #28]
 800371c:	69b9      	ldr	r1, [r7, #24]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f8d6 	bl	80038d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e012      	b.n	8003754 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800372e:	893b      	ldrh	r3, [r7, #8]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2200      	movs	r2, #0
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f884 	bl	8003850 <I2C_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	80002000 	.word	0x80002000

08003760 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	4608      	mov	r0, r1
 800376a:	4611      	mov	r1, r2
 800376c:	461a      	mov	r2, r3
 800376e:	4603      	mov	r3, r0
 8003770:	817b      	strh	r3, [r7, #10]
 8003772:	460b      	mov	r3, r1
 8003774:	813b      	strh	r3, [r7, #8]
 8003776:	4613      	mov	r3, r2
 8003778:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	8979      	ldrh	r1, [r7, #10]
 8003780:	4b20      	ldr	r3, [pc, #128]	; (8003804 <I2C_RequestMemoryRead+0xa4>)
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	2300      	movs	r3, #0
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fa0a 	bl	8003ba0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	69b9      	ldr	r1, [r7, #24]
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f89d 	bl	80038d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e02c      	b.n	80037fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037a6:	893b      	ldrh	r3, [r7, #8]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28
 80037b0:	e015      	b.n	80037de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80037b2:	893b      	ldrh	r3, [r7, #8]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	69b9      	ldr	r1, [r7, #24]
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f883 	bl	80038d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e012      	b.n	80037fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037d4:	893b      	ldrh	r3, [r7, #8]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2140      	movs	r1, #64	; 0x40
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f831 	bl	8003850 <I2C_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	80002000 	.word	0x80002000

08003808 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b02      	cmp	r3, #2
 800381c:	d103      	bne.n	8003826 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d007      	beq.n	8003844 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	619a      	str	r2, [r3, #24]
  }
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	4613      	mov	r3, r2
 800385e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003860:	e022      	b.n	80038a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d01e      	beq.n	80038a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386a:	f7fe fbcd 	bl	8002008 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d302      	bcc.n	8003880 <I2C_WaitOnFlagUntilTimeout+0x30>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d113      	bne.n	80038a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	f043 0220 	orr.w	r2, r3, #32
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e00f      	b.n	80038c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4013      	ands	r3, r2
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d0cd      	beq.n	8003862 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038dc:	e02c      	b.n	8003938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f870 	bl	80039c8 <I2C_IsErrorOccurred>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e02a      	b.n	8003948 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d01e      	beq.n	8003938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe fb85 	bl	8002008 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d113      	bne.n	8003938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e007      	b.n	8003948 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d1cb      	bne.n	80038de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800395c:	e028      	b.n	80039b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f830 	bl	80039c8 <I2C_IsErrorOccurred>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e026      	b.n	80039c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7fe fb49 	bl	8002008 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d113      	bne.n	80039b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e007      	b.n	80039c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d1cf      	bne.n	800395e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d075      	beq.n	8003ae0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2210      	movs	r2, #16
 80039fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039fc:	e056      	b.n	8003aac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d052      	beq.n	8003aac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a06:	f7fe faff 	bl	8002008 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d302      	bcc.n	8003a1c <I2C_IsErrorOccurred+0x54>
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d147      	bne.n	8003aac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3e:	d12e      	bne.n	8003a9e <I2C_IsErrorOccurred+0xd6>
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a46:	d02a      	beq.n	8003a9e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d027      	beq.n	8003a9e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a5c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a5e:	f7fe fad3 	bl	8002008 <HAL_GetTick>
 8003a62:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a64:	e01b      	b.n	8003a9e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a66:	f7fe facf 	bl	8002008 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b19      	cmp	r3, #25
 8003a72:	d914      	bls.n	8003a9e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f043 0220 	orr.w	r2, r3, #32
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d1dc      	bne.n	8003a66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d003      	beq.n	8003ac2 <I2C_IsErrorOccurred+0xfa>
 8003aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d09d      	beq.n	80039fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	f043 0304 	orr.w	r3, r3, #4
 8003ad8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00b      	beq.n	8003b2c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f043 0308 	orr.w	r3, r3, #8
 8003b1a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00b      	beq.n	8003b4e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01c      	beq.n	8003b90 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f7ff fe56 	bl	8003808 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6859      	ldr	r1, [r3, #4]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <I2C_IsErrorOccurred+0x1d4>)
 8003b68:	400b      	ands	r3, r1
 8003b6a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3728      	adds	r7, #40	; 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	fe00e800 	.word	0xfe00e800

08003ba0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	607b      	str	r3, [r7, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	817b      	strh	r3, [r7, #10]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bb8:	7a7b      	ldrb	r3, [r7, #9]
 8003bba:	041b      	lsls	r3, r3, #16
 8003bbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bc0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bce:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	0d5b      	lsrs	r3, r3, #21
 8003bda:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <I2C_TransferConfig+0x60>)
 8003be0:	430b      	orrs	r3, r1
 8003be2:	43db      	mvns	r3, r3
 8003be4:	ea02 0103 	and.w	r1, r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	03ff63ff 	.word	0x03ff63ff

08003c04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c06:	b08f      	sub	sp, #60	; 0x3c
 8003c08:	af0a      	add	r7, sp, #40	; 0x28
 8003c0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e116      	b.n	8003e44 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f008 fe0b 	bl	800c84c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f004 f9a0 	bl	8007f9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	687e      	ldr	r6, [r7, #4]
 8003c62:	466d      	mov	r5, sp
 8003c64:	f106 0410 	add.w	r4, r6, #16
 8003c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c74:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c78:	1d33      	adds	r3, r6, #4
 8003c7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c7c:	6838      	ldr	r0, [r7, #0]
 8003c7e:	f004 f8b3 	bl	8007de8 <USB_CoreInit>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0d7      	b.n	8003e44 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f004 f98e 	bl	8007fbc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73fb      	strb	r3, [r7, #15]
 8003ca4:	e04a      	b.n	8003d3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	333d      	adds	r3, #61	; 0x3d
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cba:	7bfa      	ldrb	r2, [r7, #15]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	333c      	adds	r3, #60	; 0x3c
 8003cca:	7bfa      	ldrb	r2, [r7, #15]
 8003ccc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cce:	7bfa      	ldrb	r2, [r7, #15]
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	b298      	uxth	r0, r3
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	3342      	adds	r3, #66	; 0x42
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	333f      	adds	r3, #63	; 0x3f
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cfa:	7bfa      	ldrb	r2, [r7, #15]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	3344      	adds	r3, #68	; 0x44
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	3348      	adds	r3, #72	; 0x48
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	3350      	adds	r3, #80	; 0x50
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
 8003d3c:	7bfa      	ldrb	r2, [r7, #15]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d3af      	bcc.n	8003ca6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]
 8003d4a:	e044      	b.n	8003dd6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d4c:	7bfa      	ldrb	r2, [r7, #15]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003d5e:	2200      	movs	r2, #0
 8003d60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d62:	7bfa      	ldrb	r2, [r7, #15]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003d74:	7bfa      	ldrb	r2, [r7, #15]
 8003d76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d78:	7bfa      	ldrb	r2, [r7, #15]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d8e:	7bfa      	ldrb	r2, [r7, #15]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dba:	7bfa      	ldrb	r2, [r7, #15]
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
 8003dd6:	7bfa      	ldrb	r2, [r7, #15]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d3b5      	bcc.n	8003d4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	687e      	ldr	r6, [r7, #4]
 8003de8:	466d      	mov	r5, sp
 8003dea:	f106 0410 	add.w	r4, r6, #16
 8003dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003df6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dfe:	1d33      	adds	r3, r6, #4
 8003e00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e02:	6838      	ldr	r0, [r7, #0]
 8003e04:	f004 f926 	bl	8008054 <USB_DevInit>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2202      	movs	r2, #2
 8003e12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e014      	b.n	8003e44 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 ff84 	bl	8004d40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f005 f8f8 	bl	8009032 <USB_DevDisconnect>

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_PCD_Start+0x1c>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e01c      	b.n	8003ea2 <HAL_PCD_Start+0x56>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d105      	bne.n	8003e84 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f004 f875 	bl	8007f78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f005 f8ac 	bl	8008ff0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003eaa:	b590      	push	{r4, r7, lr}
 8003eac:	b08d      	sub	sp, #52	; 0x34
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f005 f96a 	bl	800919a <USB_GetMode>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f040 8384 	bne.w	80045d6 <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f005 f8ce 	bl	8009074 <USB_ReadInterrupts>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 837a 	beq.w	80045d4 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f005 f8c5 	bl	8009074 <USB_ReadInterrupts>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d107      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f002 0202 	and.w	r2, r2, #2
 8003f02:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f005 f8b3 	bl	8009074 <USB_ReadInterrupts>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d161      	bne.n	8003fdc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0210 	bic.w	r2, r2, #16
 8003f26:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	f003 020f 	and.w	r2, r3, #15
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	4413      	add	r3, r2
 8003f44:	3304      	adds	r3, #4
 8003f46:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	0c5b      	lsrs	r3, r3, #17
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d124      	bne.n	8003f9e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d035      	beq.n	8003fcc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	6a38      	ldr	r0, [r7, #32]
 8003f74:	f004 feea 	bl	8008d4c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	091b      	lsrs	r3, r3, #4
 8003f80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f84:	441a      	add	r2, r3
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f96:	441a      	add	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	619a      	str	r2, [r3, #24]
 8003f9c:	e016      	b.n	8003fcc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	0c5b      	lsrs	r3, r3, #17
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	2b06      	cmp	r3, #6
 8003fa8:	d110      	bne.n	8003fcc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fb0:	2208      	movs	r2, #8
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6a38      	ldr	r0, [r7, #32]
 8003fb6:	f004 fec9 	bl	8008d4c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fc6:	441a      	add	r2, r3
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0210 	orr.w	r2, r2, #16
 8003fda:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f005 f847 	bl	8009074 <USB_ReadInterrupts>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ff0:	d16e      	bne.n	80040d0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f005 f84d 	bl	800909a <USB_ReadDevAllOutEpInterrupt>
 8004000:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004002:	e062      	b.n	80040ca <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d057      	beq.n	80040be <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f005 f872 	bl	8009102 <USB_ReadDevOutEPInterrupt>
 800401e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00c      	beq.n	8004044 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004036:	461a      	mov	r2, r3
 8004038:	2301      	movs	r3, #1
 800403a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800403c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fda4 	bl	8004b8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00c      	beq.n	8004068 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405a:	461a      	mov	r2, r3
 800405c:	2308      	movs	r3, #8
 800405e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fde0 	bl	8004c28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	461a      	mov	r2, r3
 8004080:	2310      	movs	r3, #16
 8004082:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	461a      	mov	r2, r3
 800409c:	2320      	movs	r3, #32
 800409e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	461a      	mov	r2, r3
 80040b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	3301      	adds	r3, #1
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	085b      	lsrs	r3, r3, #1
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d199      	bne.n	8004004 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f004 ffcd 	bl	8009074 <USB_ReadInterrupts>
 80040da:	4603      	mov	r3, r0
 80040dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e4:	f040 808c 	bne.w	8004200 <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f004 ffee 	bl	80090ce <USB_ReadDevAllInEpInterrupt>
 80040f2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80040f8:	e07e      	b.n	80041f8 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d073      	beq.n	80041ec <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	4611      	mov	r1, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f005 f815 	bl	800913e <USB_ReadDevInEPInterrupt>
 8004114:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d020      	beq.n	8004162 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	2201      	movs	r2, #1
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	43db      	mvns	r3, r3
 800413a:	69f9      	ldr	r1, [r7, #28]
 800413c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004140:	4013      	ands	r3, r2
 8004142:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004150:	461a      	mov	r2, r3
 8004152:	2301      	movs	r3, #1
 8004154:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	b2db      	uxtb	r3, r3
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f008 fc08 	bl	800c972 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004178:	461a      	mov	r2, r3
 800417a:	2308      	movs	r3, #8
 800417c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004194:	461a      	mov	r2, r3
 8004196:	2310      	movs	r3, #16
 8004198:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b0:	461a      	mov	r2, r3
 80041b2:	2340      	movs	r3, #64	; 0x40
 80041b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00c      	beq.n	80041da <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80041c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041c2:	6a38      	ldr	r0, [r7, #32]
 80041c4:	f004 f892 	bl	80082ec <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	461a      	mov	r2, r3
 80041d6:	2302      	movs	r3, #2
 80041d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80041e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fc47 	bl	8004a7a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	3301      	adds	r3, #1
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f47f af7d 	bne.w	80040fa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f004 ff35 	bl	8009074 <USB_ReadInterrupts>
 800420a:	4603      	mov	r3, r0
 800420c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004214:	d122      	bne.n	800425c <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004230:	2b01      	cmp	r3, #1
 8004232:	d108      	bne.n	8004246 <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800423c:	2100      	movs	r1, #0
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fda2 	bl	8004d88 <HAL_PCDEx_LPM_Callback>
 8004244:	e002      	b.n	800424c <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f008 fc00 	bl	800ca4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800425a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f004 ff07 	bl	8009074 <USB_ReadInterrupts>
 8004266:	4603      	mov	r3, r0
 8004268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800426c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004270:	d112      	bne.n	8004298 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b01      	cmp	r3, #1
 8004280:	d102      	bne.n	8004288 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f008 fbbc 	bl	800ca00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004296:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f004 fee9 	bl	8009074 <USB_ReadInterrupts>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ac:	d121      	bne.n	80042f2 <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80042bc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d111      	bne.n	80042ec <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	089b      	lsrs	r3, r3, #2
 80042d8:	f003 020f 	and.w	r2, r3, #15
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80042e2:	2101      	movs	r1, #1
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fd4f 	bl	8004d88 <HAL_PCDEx_LPM_Callback>
 80042ea:	e002      	b.n	80042f2 <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f008 fb87 	bl	800ca00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f004 febc 	bl	8009074 <USB_ReadInterrupts>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004306:	f040 80b5 	bne.w	8004474 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2110      	movs	r1, #16
 8004324:	4618      	mov	r0, r3
 8004326:	f003 ffe1 	bl	80082ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800432a:	2300      	movs	r3, #0
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800432e:	e046      	b.n	80043be <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	461a      	mov	r2, r3
 800433e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004342:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004354:	0151      	lsls	r1, r2, #5
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	440a      	add	r2, r1
 800435a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800435e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004362:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004370:	461a      	mov	r2, r3
 8004372:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004376:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004388:	0151      	lsls	r1, r2, #5
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	440a      	add	r2, r1
 800438e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004392:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004396:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043a8:	0151      	lsls	r1, r2, #5
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	440a      	add	r2, r1
 80043ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043b6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ba:	3301      	adds	r3, #1
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d3b3      	bcc.n	8004330 <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043d6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80043da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d016      	beq.n	8004412 <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043f4:	f043 030b 	orr.w	r3, r3, #11
 80043f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800440a:	f043 030b 	orr.w	r3, r3, #11
 800440e:	6453      	str	r3, [r2, #68]	; 0x44
 8004410:	e015      	b.n	800443e <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004420:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004424:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004428:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004438:	f043 030b 	orr.w	r3, r3, #11
 800443c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69fa      	ldr	r2, [r7, #28]
 8004448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800444c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004450:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f004 fecc 	bl	80091fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f004 fdfb 	bl	8009074 <USB_ReadInterrupts>
 800447e:	4603      	mov	r3, r0
 8004480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004488:	d124      	bne.n	80044d4 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f004 fe91 	bl	80091b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f003 ffa0 	bl	80083de <USB_GetDevSpeed>
 800449e:	4603      	mov	r3, r0
 80044a0:	461a      	mov	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681c      	ldr	r4, [r3, #0]
 80044aa:	f001 ff2f 	bl	800630c <HAL_RCC_GetHCLKFreq>
 80044ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	4620      	mov	r0, r4
 80044ba:	f003 fcc1 	bl	8007e40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f008 fa7f 	bl	800c9c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80044d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f004 fdcb 	bl	8009074 <USB_ReadInterrupts>
 80044de:	4603      	mov	r3, r0
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d10a      	bne.n	80044fe <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f008 fa5c 	bl	800c9a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f002 0208 	and.w	r2, r2, #8
 80044fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f004 fdb6 	bl	8009074 <USB_ReadInterrupts>
 8004508:	4603      	mov	r3, r0
 800450a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800450e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004512:	d10f      	bne.n	8004534 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	b2db      	uxtb	r3, r3
 800451c:	4619      	mov	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f008 face 	bl	800cac0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004532:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f004 fd9b 	bl	8009074 <USB_ReadInterrupts>
 800453e:	4603      	mov	r3, r0
 8004540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004544:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004548:	d10f      	bne.n	800456a <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	b2db      	uxtb	r3, r3
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f008 faa1 	bl	800ca9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f004 fd80 	bl	8009074 <USB_ReadInterrupts>
 8004574:	4603      	mov	r3, r0
 8004576:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800457a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457e:	d10a      	bne.n	8004596 <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f008 faaf 	bl	800cae4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004594:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f004 fd6a 	bl	8009074 <USB_ReadInterrupts>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d115      	bne.n	80045d6 <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f008 fa9f 	bl	800cb00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6859      	ldr	r1, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	e000      	b.n	80045d6 <HAL_PCD_IRQHandler+0x72c>
      return;
 80045d4:	bf00      	nop
    }
  }
}
 80045d6:	3734      	adds	r7, #52	; 0x34
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd90      	pop	{r4, r7, pc}

080045dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_PCD_SetAddress+0x1a>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e013      	b.n	800461e <HAL_PCD_SetAddress+0x42>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	78fa      	ldrb	r2, [r7, #3]
 8004602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f004 fcc8 	bl	8008fa4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	4608      	mov	r0, r1
 8004630:	4611      	mov	r1, r2
 8004632:	461a      	mov	r2, r3
 8004634:	4603      	mov	r3, r0
 8004636:	70fb      	strb	r3, [r7, #3]
 8004638:	460b      	mov	r3, r1
 800463a:	803b      	strh	r3, [r7, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004648:	2b00      	cmp	r3, #0
 800464a:	da0f      	bge.n	800466c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	f003 020f 	and.w	r2, r3, #15
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	3338      	adds	r3, #56	; 0x38
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4413      	add	r3, r2
 8004660:	3304      	adds	r3, #4
 8004662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	705a      	strb	r2, [r3, #1]
 800466a:	e00f      	b.n	800468c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	f003 020f 	and.w	r2, r3, #15
 8004672:	4613      	mov	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4413      	add	r3, r2
 8004682:	3304      	adds	r3, #4
 8004684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	b2da      	uxtb	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004698:	883a      	ldrh	r2, [r7, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	78ba      	ldrb	r2, [r7, #2]
 80046a2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	785b      	ldrb	r3, [r3, #1]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d004      	beq.n	80046b6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046b6:	78bb      	ldrb	r3, [r7, #2]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d102      	bne.n	80046c2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_PCD_EP_Open+0xaa>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e00e      	b.n	80046ee <HAL_PCD_EP_Open+0xc8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68f9      	ldr	r1, [r7, #12]
 80046de:	4618      	mov	r0, r3
 80046e0:	f003 fe9c 	bl	800841c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80046ec:	7afb      	ldrb	r3, [r7, #11]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b084      	sub	sp, #16
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	460b      	mov	r3, r1
 8004700:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004702:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004706:	2b00      	cmp	r3, #0
 8004708:	da0f      	bge.n	800472a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800470a:	78fb      	ldrb	r3, [r7, #3]
 800470c:	f003 020f 	and.w	r2, r3, #15
 8004710:	4613      	mov	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	3338      	adds	r3, #56	; 0x38
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	4413      	add	r3, r2
 800471e:	3304      	adds	r3, #4
 8004720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	705a      	strb	r2, [r3, #1]
 8004728:	e00f      	b.n	800474a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	f003 020f 	and.w	r2, r3, #15
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	4413      	add	r3, r2
 8004740:	3304      	adds	r3, #4
 8004742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	b2da      	uxtb	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_PCD_EP_Close+0x6e>
 8004760:	2302      	movs	r3, #2
 8004762:	e00e      	b.n	8004782 <HAL_PCD_EP_Close+0x8c>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68f9      	ldr	r1, [r7, #12]
 8004772:	4618      	mov	r0, r3
 8004774:	f003 feda 	bl	800852c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b086      	sub	sp, #24
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	460b      	mov	r3, r1
 8004798:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800479a:	7afb      	ldrb	r3, [r7, #11]
 800479c:	f003 020f 	and.w	r2, r3, #15
 80047a0:	4613      	mov	r3, r2
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	3304      	adds	r3, #4
 80047b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2200      	movs	r2, #0
 80047c4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2200      	movs	r2, #0
 80047ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047cc:	7afb      	ldrb	r3, [r7, #11]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047d8:	7afb      	ldrb	r3, [r7, #11]
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6979      	ldr	r1, [r7, #20]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f004 f957 	bl	8008a9c <USB_EP0StartXfer>
 80047ee:	e005      	b.n	80047fc <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6979      	ldr	r1, [r7, #20]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f003 ff74 	bl	80086e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	460b      	mov	r3, r1
 8004810:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	f003 020f 	and.w	r2, r3, #15
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004828:	681b      	ldr	r3, [r3, #0]
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b086      	sub	sp, #24
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	460b      	mov	r3, r1
 8004844:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004846:	7afb      	ldrb	r3, [r7, #11]
 8004848:	f003 020f 	and.w	r2, r3, #15
 800484c:	4613      	mov	r3, r2
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	3338      	adds	r3, #56	; 0x38
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	3304      	adds	r3, #4
 800485c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2200      	movs	r2, #0
 800486e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2201      	movs	r2, #1
 8004874:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004876:	7afb      	ldrb	r3, [r7, #11]
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	b2da      	uxtb	r2, r3
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004882:	7afb      	ldrb	r3, [r7, #11]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	2b00      	cmp	r3, #0
 800488a:	d106      	bne.n	800489a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6979      	ldr	r1, [r7, #20]
 8004892:	4618      	mov	r0, r3
 8004894:	f004 f902 	bl	8008a9c <USB_EP0StartXfer>
 8004898:	e005      	b.n	80048a6 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6979      	ldr	r1, [r7, #20]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f003 ff1f 	bl	80086e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	f003 020f 	and.w	r2, r3, #15
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d901      	bls.n	80048ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e04e      	b.n	800496c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	da0f      	bge.n	80048f6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048d6:	78fb      	ldrb	r3, [r7, #3]
 80048d8:	f003 020f 	and.w	r2, r3, #15
 80048dc:	4613      	mov	r3, r2
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	3338      	adds	r3, #56	; 0x38
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	4413      	add	r3, r2
 80048ea:	3304      	adds	r3, #4
 80048ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	705a      	strb	r2, [r3, #1]
 80048f4:	e00d      	b.n	8004912 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048f6:	78fa      	ldrb	r2, [r7, #3]
 80048f8:	4613      	mov	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	4413      	add	r3, r2
 8004908:	3304      	adds	r3, #4
 800490a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	b2da      	uxtb	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_PCD_EP_SetStall+0x82>
 800492e:	2302      	movs	r3, #2
 8004930:	e01c      	b.n	800496c <HAL_PCD_EP_SetStall+0xbc>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68f9      	ldr	r1, [r7, #12]
 8004940:	4618      	mov	r0, r3
 8004942:	f004 fa5b 	bl	8008dfc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	2b00      	cmp	r3, #0
 800494e:	d108      	bne.n	8004962 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f004 fc4d 	bl	80091fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	f003 020f 	and.w	r2, r3, #15
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	429a      	cmp	r2, r3
 800498c:	d901      	bls.n	8004992 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e042      	b.n	8004a18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004996:	2b00      	cmp	r3, #0
 8004998:	da0f      	bge.n	80049ba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	f003 020f 	and.w	r2, r3, #15
 80049a0:	4613      	mov	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	3338      	adds	r3, #56	; 0x38
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4413      	add	r3, r2
 80049ae:	3304      	adds	r3, #4
 80049b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	705a      	strb	r2, [r3, #1]
 80049b8:	e00f      	b.n	80049da <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	f003 020f 	and.w	r2, r3, #15
 80049c0:	4613      	mov	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	4413      	add	r3, r2
 80049d0:	3304      	adds	r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_PCD_EP_ClrStall+0x86>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e00e      	b.n	8004a18 <HAL_PCD_EP_ClrStall+0xa4>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68f9      	ldr	r1, [r7, #12]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f004 fa65 	bl	8008ed8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_PCD_EP_Flush+0x1a>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e01b      	b.n	8004a72 <HAL_PCD_EP_Flush+0x52>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004a42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da09      	bge.n	8004a5e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	4619      	mov	r1, r3
 8004a56:	4610      	mov	r0, r2
 8004a58:	f003 fc48 	bl	80082ec <USB_FlushTxFifo>
 8004a5c:	e004      	b.n	8004a68 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f003 fc74 	bl	8008350 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b088      	sub	sp, #32
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	3338      	adds	r3, #56	; 0x38
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d901      	bls.n	8004ab2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e067      	b.n	8004b82 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d902      	bls.n	8004ace <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	3303      	adds	r3, #3
 8004ad2:	089b      	lsrs	r3, r3, #2
 8004ad4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ad6:	e026      	b.n	8004b26 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d902      	bls.n	8004af4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	3303      	adds	r3, #3
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	68d9      	ldr	r1, [r3, #12]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f004 f8e5 	bl	8008cd8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	441a      	add	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	441a      	add	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d809      	bhi.n	8004b50 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d203      	bcs.n	8004b50 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1c3      	bne.n	8004ad8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	695a      	ldr	r2, [r3, #20]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d811      	bhi.n	8004b80 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	2201      	movs	r2, #1
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	43db      	mvns	r3, r3
 8004b76:	6939      	ldr	r1, [r7, #16]
 8004b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	333c      	adds	r3, #60	; 0x3c
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4a19      	ldr	r2, [pc, #100]	; (8004c24 <PCD_EP_OutXfrComplete_int+0x98>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d124      	bne.n	8004c0c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bde:	6093      	str	r3, [r2, #8]
 8004be0:	e01a      	b.n	8004c18 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	2320      	movs	r3, #32
 8004bfc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	4619      	mov	r1, r3
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f007 fe99 	bl	800c93c <HAL_PCD_DataOutStageCallback>
 8004c0a:	e005      	b.n	8004c18 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f007 fe92 	bl	800c93c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	4f54310a 	.word	0x4f54310a

08004c28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	333c      	adds	r3, #60	; 0x3c
 8004c40:	3304      	adds	r3, #4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <PCD_EP_OutSetupPacket_int+0x64>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d90e      	bls.n	8004c7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d009      	beq.n	8004c7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c74:	461a      	mov	r2, r3
 8004c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f007 fe4b 	bl	800c918 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	4f54300a 	.word	0x4f54300a

08004c90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	70fb      	strb	r3, [r7, #3]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d107      	bne.n	8004cbe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004cae:	883b      	ldrh	r3, [r7, #0]
 8004cb0:	0419      	lsls	r1, r3, #16
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28
 8004cbc:	e028      	b.n	8004d10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	4413      	add	r3, r2
 8004cca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	73fb      	strb	r3, [r7, #15]
 8004cd0:	e00d      	b.n	8004cee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	3340      	adds	r3, #64	; 0x40
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	0c1b      	lsrs	r3, r3, #16
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	3301      	adds	r3, #1
 8004cec:	73fb      	strb	r3, [r7, #15]
 8004cee:	7bfa      	ldrb	r2, [r7, #15]
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d3ec      	bcc.n	8004cd2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004cf8:	883b      	ldrh	r3, [r7, #0]
 8004cfa:	0418      	lsls	r0, r3, #16
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6819      	ldr	r1, [r3, #0]
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	4302      	orrs	r2, r0
 8004d08:	3340      	adds	r3, #64	; 0x40
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	460b      	mov	r3, r1
 8004d28:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	887a      	ldrh	r2, [r7, #2]
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d72:	f043 0303 	orr.w	r3, r3, #3
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a04      	ldr	r2, [pc, #16]	; (8004dbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dae:	6013      	str	r3, [r2, #0]
}
 8004db0:	bf00      	nop
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40007000 	.word	0x40007000

08004dc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004dc4:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40007000 	.word	0x40007000

08004ddc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dea:	d130      	bne.n	8004e4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dec:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df8:	d038      	beq.n	8004e6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dfa:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e02:	4a1e      	ldr	r2, [pc, #120]	; (8004e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2232      	movs	r2, #50	; 0x32
 8004e10:	fb02 f303 	mul.w	r3, r2, r3
 8004e14:	4a1b      	ldr	r2, [pc, #108]	; (8004e84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e16:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1a:	0c9b      	lsrs	r3, r3, #18
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e20:	e002      	b.n	8004e28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e28:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e34:	d102      	bne.n	8004e3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f2      	bne.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e48:	d110      	bne.n	8004e6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e00f      	b.n	8004e6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e4e:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5a:	d007      	beq.n	8004e6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e5c:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e64:	4a05      	ldr	r2, [pc, #20]	; (8004e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40007000 	.word	0x40007000
 8004e80:	20000040 	.word	0x20000040
 8004e84:	431bde83 	.word	0x431bde83

08004e88 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4a04      	ldr	r2, [pc, #16]	; (8004ea4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e96:	6053      	str	r3, [r2, #4]
}
 8004e98:	bf00      	nop
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40007000 	.word	0x40007000

08004ea8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	4a04      	ldr	r2, [pc, #16]	; (8004ec4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eb6:	6053      	str	r3, [r2, #4]
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40007000 	.word	0x40007000

08004ec8 <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_PWREx_DisableVddIO2+0x1c>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4a04      	ldr	r2, [pc, #16]	; (8004ee4 <HAL_PWREx_DisableVddIO2+0x1c>)
 8004ed2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ed6:	6053      	str	r3, [r2, #4]
}
 8004ed8:	bf00      	nop
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40007000 	.word	0x40007000

08004ee8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004ef0:	f7fd f88a 	bl	8002008 <HAL_GetTick>
 8004ef4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e063      	b.n	8004fc8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7fc f8ab 	bl	8001070 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004f1a:	f241 3188 	movw	r1, #5000	; 0x1388
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fad3 	bl	80054ca <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	021a      	lsls	r2, r3, #8
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	2120      	movs	r1, #32
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 facb 	bl	80054e6 <QSPI_WaitFlagStateUntilTimeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004f54:	7afb      	ldrb	r3, [r7, #11]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d131      	bne.n	8004fbe <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f64:	f023 0310 	bic.w	r3, r3, #16
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6852      	ldr	r2, [r2, #4]
 8004f6c:	0611      	lsls	r1, r2, #24
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	68d2      	ldr	r2, [r2, #12]
 8004f72:	4311      	orrs	r1, r2
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	4b13      	ldr	r3, [pc, #76]	; (8004fd0 <HAL_QSPI_Init+0xe8>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6912      	ldr	r2, [r2, #16]
 8004f8a:	0411      	lsls	r1, r2, #16
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6952      	ldr	r2, [r2, #20]
 8004f90:	4311      	orrs	r1, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6992      	ldr	r2, [r2, #24]
 8004f96:	4311      	orrs	r1, r2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004fc6:	7afb      	ldrb	r3, [r7, #11]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	ffe0f8fe 	.word	0xffe0f8fe

08004fd4 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004fe0:	f7fd f812 	bl	8002008 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_QSPI_Command+0x22>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e048      	b.n	8005088 <HAL_QSPI_Command+0xb4>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b01      	cmp	r3, #1
 8005008:	d137      	bne.n	800507a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2200      	movs	r2, #0
 8005020:	2120      	movs	r1, #32
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fa5f 	bl	80054e6 <QSPI_WaitFlagStateUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800502c:	7dfb      	ldrb	r3, [r7, #23]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d125      	bne.n	800507e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005032:	2200      	movs	r2, #0
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 fa8c 	bl	8005554 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d115      	bne.n	8005070 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2201      	movs	r2, #1
 800504c:	2102      	movs	r1, #2
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fa49 	bl	80054e6 <QSPI_WaitFlagStateUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10f      	bne.n	800507e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2202      	movs	r2, #2
 8005064:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800506e:	e006      	b.n	800507e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005078:	e001      	b.n	800507e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800507a:	2302      	movs	r3, #2
 800507c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005086:	7dfb      	ldrb	r3, [r7, #23]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08a      	sub	sp, #40	; 0x28
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80050a0:	f7fc ffb2 	bl	8002008 <HAL_GetTick>
 80050a4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3320      	adds	r3, #32
 80050ac:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d101      	bne.n	80050be <HAL_QSPI_Transmit+0x2e>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e07b      	b.n	80051b6 <HAL_QSPI_Transmit+0x126>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d16a      	bne.n	80051a8 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d05b      	beq.n	8005196 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2212      	movs	r2, #18
 80050e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695a      	ldr	r2, [r3, #20]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005112:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005114:	e01b      	b.n	800514e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	2201      	movs	r2, #1
 800511e:	2104      	movs	r1, #4
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f9e0 	bl	80054e6 <QSPI_WaitFlagStateUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800512a:	7ffb      	ldrb	r3, [r7, #31]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d113      	bne.n	8005158 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	781a      	ldrb	r2, [r3, #0]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	1e5a      	subs	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1df      	bne.n	8005116 <HAL_QSPI_Transmit+0x86>
 8005156:	e000      	b.n	800515a <HAL_QSPI_Transmit+0xca>
          break;
 8005158:	bf00      	nop
      }

      if (status == HAL_OK)
 800515a:	7ffb      	ldrb	r3, [r7, #31]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d115      	bne.n	800518c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2201      	movs	r2, #1
 8005168:	2102      	movs	r1, #2
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f9bb 	bl	80054e6 <QSPI_WaitFlagStateUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005174:	7ffb      	ldrb	r3, [r7, #31]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d108      	bne.n	800518c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2202      	movs	r2, #2
 8005180:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f934 	bl	80053f0 <HAL_QSPI_Abort>
 8005188:	4603      	mov	r3, r0
 800518a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005194:	e00a      	b.n	80051ac <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	f043 0208 	orr.w	r2, r3, #8
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	77fb      	strb	r3, [r7, #31]
 80051a6:	e001      	b.n	80051ac <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80051a8:	2302      	movs	r3, #2
 80051aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80051b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3720      	adds	r7, #32
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b08a      	sub	sp, #40	; 0x28
 80051c2:	af02      	add	r7, sp, #8
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80051ce:	f7fc ff1b 	bl	8002008 <HAL_GetTick>
 80051d2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3320      	adds	r3, #32
 80051e2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_QSPI_Receive+0x36>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e082      	b.n	80052fa <HAL_QSPI_Receive+0x13c>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	d171      	bne.n	80052ec <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d062      	beq.n	80052da <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2222      	movs	r2, #34	; 0x22
 8005218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800524c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005256:	e01c      	b.n	8005292 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2201      	movs	r2, #1
 8005260:	2106      	movs	r1, #6
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f93f 	bl	80054e6 <QSPI_WaitFlagStateUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800526c:	7ffb      	ldrb	r3, [r7, #31]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d114      	bne.n	800529c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	7812      	ldrb	r2, [r2, #0]
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528c:	1e5a      	subs	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1de      	bne.n	8005258 <HAL_QSPI_Receive+0x9a>
 800529a:	e000      	b.n	800529e <HAL_QSPI_Receive+0xe0>
          break;
 800529c:	bf00      	nop
      }

      if (status == HAL_OK)
 800529e:	7ffb      	ldrb	r3, [r7, #31]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d115      	bne.n	80052d0 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2201      	movs	r2, #1
 80052ac:	2102      	movs	r1, #2
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f919 	bl	80054e6 <QSPI_WaitFlagStateUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80052b8:	7ffb      	ldrb	r3, [r7, #31]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d108      	bne.n	80052d0 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2202      	movs	r2, #2
 80052c4:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 f892 	bl	80053f0 <HAL_QSPI_Abort>
 80052cc:	4603      	mov	r3, r0
 80052ce:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80052d8:	e00a      	b.n	80052f0 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	f043 0208 	orr.w	r2, r3, #8
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	77fb      	strb	r3, [r7, #31]
 80052ea:	e001      	b.n	80052f0 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80052ec:	2302      	movs	r3, #2
 80052ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80052f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b088      	sub	sp, #32
 8005306:	af02      	add	r7, sp, #8
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005310:	f7fc fe7a 	bl	8002008 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_QSPI_AutoPolling+0x24>
 8005322:	2302      	movs	r3, #2
 8005324:	e060      	b.n	80053e8 <HAL_QSPI_AutoPolling+0xe6>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b01      	cmp	r3, #1
 8005338:	d14f      	bne.n	80053da <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2242      	movs	r2, #66	; 0x42
 8005344:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2200      	movs	r2, #0
 8005350:	2120      	movs	r1, #32
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f8c7 	bl	80054e6 <QSPI_WaitFlagStateUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800535c:	7dfb      	ldrb	r3, [r7, #23]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d13d      	bne.n	80053de <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6852      	ldr	r2, [r2, #4]
 8005374:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6892      	ldr	r2, [r2, #8]
 800537e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	431a      	orrs	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005398:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80053a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f8d3 	bl	8005554 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2201      	movs	r2, #1
 80053b6:	2108      	movs	r1, #8
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f894 	bl	80054e6 <QSPI_WaitFlagStateUntilTimeout>
 80053be:	4603      	mov	r3, r0
 80053c0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2208      	movs	r2, #8
 80053ce:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80053d8:	e001      	b.n	80053de <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80053da:	2302      	movs	r3, #2
 80053dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80053fc:	f7fc fe04 	bl	8002008 <HAL_GetTick>
 8005400:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005408:	b2db      	uxtb	r3, r3
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d056      	beq.n	80054c0 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d017      	beq.n	8005458 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0204 	bic.w	r2, r2, #4
 8005436:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543c:	4618      	mov	r0, r3
 800543e:	f7fd fa89 	bl	8002954 <HAL_DMA_Abort>
 8005442:	4603      	mov	r3, r0
 8005444:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005450:	f043 0204 	orr.w	r2, r3, #4
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0202 	orr.w	r2, r2, #2
 8005466:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2201      	movs	r2, #1
 8005472:	2102      	movs	r1, #2
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f836 	bl	80054e6 <QSPI_WaitFlagStateUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10e      	bne.n	80054a2 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2202      	movs	r2, #2
 800548a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2200      	movs	r2, #0
 8005496:	2120      	movs	r1, #32
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f824 	bl	80054e6 <QSPI_WaitFlagStateUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10b      	bne.n	80054c0 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80054b6:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	603b      	str	r3, [r7, #0]
 80054f2:	4613      	mov	r3, r2
 80054f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80054f6:	e01a      	b.n	800552e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d016      	beq.n	800552e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005500:	f7fc fd82 	bl	8002008 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	429a      	cmp	r2, r3
 800550e:	d302      	bcc.n	8005516 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10b      	bne.n	800552e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2204      	movs	r2, #4
 800551a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005522:	f043 0201 	orr.w	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e00e      	b.n	800554c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	bf14      	ite	ne
 800553c:	2301      	movne	r3, #1
 800553e:	2300      	moveq	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	429a      	cmp	r2, r3
 8005548:	d1d6      	bne.n	80054f8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	2b00      	cmp	r3, #0
 8005566:	d009      	beq.n	800557c <QSPI_Config+0x28>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800556e:	d005      	beq.n	800557c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3a01      	subs	r2, #1
 800557a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80b9 	beq.w	80056f8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d05f      	beq.n	800564e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	6892      	ldr	r2, [r2, #8]
 8005596:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d031      	beq.n	8005604 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	431a      	orrs	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ae:	431a      	orrs	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	431a      	orrs	r2, r3
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	049b      	lsls	r3, r3, #18
 80055bc:	431a      	orrs	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	431a      	orrs	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	ea42 0103 	orr.w	r1, r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055f4:	f000 812e 	beq.w	8005854 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	6852      	ldr	r2, [r2, #4]
 8005600:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005602:	e127      	b.n	8005854 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	431a      	orrs	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005612:	431a      	orrs	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	431a      	orrs	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	049b      	lsls	r3, r3, #18
 8005620:	431a      	orrs	r2, r3
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	431a      	orrs	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	431a      	orrs	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	431a      	orrs	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	431a      	orrs	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	ea42 0103 	orr.w	r1, r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	430a      	orrs	r2, r1
 800564a:	615a      	str	r2, [r3, #20]
}
 800564c:	e102      	b.n	8005854 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d02e      	beq.n	80056b4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	431a      	orrs	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005664:	431a      	orrs	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	431a      	orrs	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	049b      	lsls	r3, r3, #18
 8005672:	431a      	orrs	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	431a      	orrs	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	431a      	orrs	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	431a      	orrs	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	431a      	orrs	r2, r3
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	ea42 0103 	orr.w	r1, r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	430a      	orrs	r2, r1
 800569c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80056a4:	f000 80d6 	beq.w	8005854 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	6852      	ldr	r2, [r2, #4]
 80056b0:	619a      	str	r2, [r3, #24]
}
 80056b2:	e0cf      	b.n	8005854 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	431a      	orrs	r2, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	431a      	orrs	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	431a      	orrs	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	049b      	lsls	r3, r3, #18
 80056d0:	431a      	orrs	r2, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	431a      	orrs	r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	ea42 0103 	orr.w	r1, r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	615a      	str	r2, [r3, #20]
}
 80056f6:	e0ad      	b.n	8005854 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d058      	beq.n	80057b2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	6892      	ldr	r2, [r2, #8]
 8005708:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d02d      	beq.n	800576e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571a:	431a      	orrs	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005720:	431a      	orrs	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	431a      	orrs	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	049b      	lsls	r3, r3, #18
 800572e:	431a      	orrs	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	431a      	orrs	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	431a      	orrs	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	431a      	orrs	r2, r3
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	431a      	orrs	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	ea42 0103 	orr.w	r1, r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	430a      	orrs	r2, r1
 8005758:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005760:	d078      	beq.n	8005854 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	6852      	ldr	r2, [r2, #4]
 800576a:	619a      	str	r2, [r3, #24]
}
 800576c:	e072      	b.n	8005854 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	431a      	orrs	r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577c:	431a      	orrs	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	431a      	orrs	r2, r3
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	049b      	lsls	r3, r3, #18
 800578a:	431a      	orrs	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	431a      	orrs	r2, r3
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	431a      	orrs	r2, r3
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	431a      	orrs	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	ea42 0103 	orr.w	r1, r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	615a      	str	r2, [r3, #20]
}
 80057b0:	e050      	b.n	8005854 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d02a      	beq.n	8005810 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	431a      	orrs	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	431a      	orrs	r2, r3
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	049b      	lsls	r3, r3, #18
 80057d6:	431a      	orrs	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	431a      	orrs	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	431a      	orrs	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	ea42 0103 	orr.w	r1, r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005802:	d027      	beq.n	8005854 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	6852      	ldr	r2, [r2, #4]
 800580c:	619a      	str	r2, [r3, #24]
}
 800580e:	e021      	b.n	8005854 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01d      	beq.n	8005854 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005820:	431a      	orrs	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005826:	431a      	orrs	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	431a      	orrs	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	049b      	lsls	r3, r3, #18
 8005834:	431a      	orrs	r2, r3
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	431a      	orrs	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	431a      	orrs	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	ea42 0103 	orr.w	r1, r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	430a      	orrs	r2, r1
 8005852:	615a      	str	r2, [r3, #20]
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b088      	sub	sp, #32
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e3d8      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005872:	4b97      	ldr	r3, [pc, #604]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 030c 	and.w	r3, r3, #12
 800587a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800587c:	4b94      	ldr	r3, [pc, #592]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80e4 	beq.w	8005a5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d007      	beq.n	80058aa <HAL_RCC_OscConfig+0x4a>
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	2b0c      	cmp	r3, #12
 800589e:	f040 808b 	bne.w	80059b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	f040 8087 	bne.w	80059b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058aa:	4b89      	ldr	r3, [pc, #548]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_RCC_OscConfig+0x62>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e3b0      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1a      	ldr	r2, [r3, #32]
 80058c6:	4b82      	ldr	r3, [pc, #520]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <HAL_RCC_OscConfig+0x7c>
 80058d2:	4b7f      	ldr	r3, [pc, #508]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058da:	e005      	b.n	80058e8 <HAL_RCC_OscConfig+0x88>
 80058dc:	4b7c      	ldr	r3, [pc, #496]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80058de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058e2:	091b      	lsrs	r3, r3, #4
 80058e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d223      	bcs.n	8005934 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fd43 	bl	800637c <RCC_SetFlashLatencyFromMSIRange>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e391      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005900:	4b73      	ldr	r3, [pc, #460]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a72      	ldr	r2, [pc, #456]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005906:	f043 0308 	orr.w	r3, r3, #8
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	4b70      	ldr	r3, [pc, #448]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	496d      	ldr	r1, [pc, #436]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 800591a:	4313      	orrs	r3, r2
 800591c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800591e:	4b6c      	ldr	r3, [pc, #432]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	4968      	ldr	r1, [pc, #416]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 800592e:	4313      	orrs	r3, r2
 8005930:	604b      	str	r3, [r1, #4]
 8005932:	e025      	b.n	8005980 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005934:	4b66      	ldr	r3, [pc, #408]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a65      	ldr	r2, [pc, #404]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 800593a:	f043 0308 	orr.w	r3, r3, #8
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	4b63      	ldr	r3, [pc, #396]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	4960      	ldr	r1, [pc, #384]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 800594e:	4313      	orrs	r3, r2
 8005950:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005952:	4b5f      	ldr	r3, [pc, #380]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	495b      	ldr	r1, [pc, #364]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005962:	4313      	orrs	r3, r2
 8005964:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d109      	bne.n	8005980 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fd03 	bl	800637c <RCC_SetFlashLatencyFromMSIRange>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e351      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005980:	f000 fc38 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 8005984:	4602      	mov	r2, r0
 8005986:	4b52      	ldr	r3, [pc, #328]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	091b      	lsrs	r3, r3, #4
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	4950      	ldr	r1, [pc, #320]	; (8005ad4 <HAL_RCC_OscConfig+0x274>)
 8005992:	5ccb      	ldrb	r3, [r1, r3]
 8005994:	f003 031f 	and.w	r3, r3, #31
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
 800599c:	4a4e      	ldr	r2, [pc, #312]	; (8005ad8 <HAL_RCC_OscConfig+0x278>)
 800599e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80059a0:	4b4e      	ldr	r3, [pc, #312]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fc fadf 	bl	8001f68 <HAL_InitTick>
 80059aa:	4603      	mov	r3, r0
 80059ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d052      	beq.n	8005a5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	e335      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d032      	beq.n	8005a26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80059c0:	4b43      	ldr	r3, [pc, #268]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a42      	ldr	r2, [pc, #264]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80059c6:	f043 0301 	orr.w	r3, r3, #1
 80059ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059cc:	f7fc fb1c 	bl	8002008 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059d4:	f7fc fb18 	bl	8002008 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e31e      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059e6:	4b3a      	ldr	r3, [pc, #232]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f0      	beq.n	80059d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059f2:	4b37      	ldr	r3, [pc, #220]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a36      	ldr	r2, [pc, #216]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80059f8:	f043 0308 	orr.w	r3, r3, #8
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	4b34      	ldr	r3, [pc, #208]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	4931      	ldr	r1, [pc, #196]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a10:	4b2f      	ldr	r3, [pc, #188]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	492c      	ldr	r1, [pc, #176]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	604b      	str	r3, [r1, #4]
 8005a24:	e01a      	b.n	8005a5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a26:	4b2a      	ldr	r3, [pc, #168]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a29      	ldr	r2, [pc, #164]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a2c:	f023 0301 	bic.w	r3, r3, #1
 8005a30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a32:	f7fc fae9 	bl	8002008 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a3a:	f7fc fae5 	bl	8002008 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e2eb      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a4c:	4b20      	ldr	r3, [pc, #128]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f0      	bne.n	8005a3a <HAL_RCC_OscConfig+0x1da>
 8005a58:	e000      	b.n	8005a5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d074      	beq.n	8005b52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d005      	beq.n	8005a7a <HAL_RCC_OscConfig+0x21a>
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2b0c      	cmp	r3, #12
 8005a72:	d10e      	bne.n	8005a92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d10b      	bne.n	8005a92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a7a:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d064      	beq.n	8005b50 <HAL_RCC_OscConfig+0x2f0>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d160      	bne.n	8005b50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e2c8      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a9a:	d106      	bne.n	8005aaa <HAL_RCC_OscConfig+0x24a>
 8005a9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a0b      	ldr	r2, [pc, #44]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	e026      	b.n	8005af8 <HAL_RCC_OscConfig+0x298>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ab2:	d115      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x280>
 8005ab4:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a05      	ldr	r2, [pc, #20]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005aba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	4b03      	ldr	r3, [pc, #12]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a02      	ldr	r2, [pc, #8]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	e014      	b.n	8005af8 <HAL_RCC_OscConfig+0x298>
 8005ace:	bf00      	nop
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	0800d104 	.word	0x0800d104
 8005ad8:	20000040 	.word	0x20000040
 8005adc:	20000044 	.word	0x20000044
 8005ae0:	4ba0      	ldr	r3, [pc, #640]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a9f      	ldr	r2, [pc, #636]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	4b9d      	ldr	r3, [pc, #628]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a9c      	ldr	r2, [pc, #624]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d013      	beq.n	8005b28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b00:	f7fc fa82 	bl	8002008 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b08:	f7fc fa7e 	bl	8002008 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b64      	cmp	r3, #100	; 0x64
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e284      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b1a:	4b92      	ldr	r3, [pc, #584]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0x2a8>
 8005b26:	e014      	b.n	8005b52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b28:	f7fc fa6e 	bl	8002008 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b30:	f7fc fa6a 	bl	8002008 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b64      	cmp	r3, #100	; 0x64
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e270      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b42:	4b88      	ldr	r3, [pc, #544]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f0      	bne.n	8005b30 <HAL_RCC_OscConfig+0x2d0>
 8005b4e:	e000      	b.n	8005b52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d060      	beq.n	8005c20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_OscConfig+0x310>
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	2b0c      	cmp	r3, #12
 8005b68:	d119      	bne.n	8005b9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d116      	bne.n	8005b9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b70:	4b7c      	ldr	r3, [pc, #496]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <HAL_RCC_OscConfig+0x328>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e24d      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b88:	4b76      	ldr	r3, [pc, #472]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	061b      	lsls	r3, r3, #24
 8005b96:	4973      	ldr	r1, [pc, #460]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b9c:	e040      	b.n	8005c20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d023      	beq.n	8005bee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ba6:	4b6f      	ldr	r3, [pc, #444]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a6e      	ldr	r2, [pc, #440]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb2:	f7fc fa29 	bl	8002008 <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bba:	f7fc fa25 	bl	8002008 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e22b      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bcc:	4b65      	ldr	r3, [pc, #404]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0f0      	beq.n	8005bba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd8:	4b62      	ldr	r3, [pc, #392]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	061b      	lsls	r3, r3, #24
 8005be6:	495f      	ldr	r1, [pc, #380]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	604b      	str	r3, [r1, #4]
 8005bec:	e018      	b.n	8005c20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bee:	4b5d      	ldr	r3, [pc, #372]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a5c      	ldr	r2, [pc, #368]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfa:	f7fc fa05 	bl	8002008 <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c02:	f7fc fa01 	bl	8002008 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e207      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c14:	4b53      	ldr	r3, [pc, #332]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1f0      	bne.n	8005c02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d03c      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01c      	beq.n	8005c6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c34:	4b4b      	ldr	r3, [pc, #300]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c3a:	4a4a      	ldr	r2, [pc, #296]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005c3c:	f043 0301 	orr.w	r3, r3, #1
 8005c40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c44:	f7fc f9e0 	bl	8002008 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c4c:	f7fc f9dc 	bl	8002008 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e1e2      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c5e:	4b41      	ldr	r3, [pc, #260]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0ef      	beq.n	8005c4c <HAL_RCC_OscConfig+0x3ec>
 8005c6c:	e01b      	b.n	8005ca6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c6e:	4b3d      	ldr	r3, [pc, #244]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c74:	4a3b      	ldr	r2, [pc, #236]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005c76:	f023 0301 	bic.w	r3, r3, #1
 8005c7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7e:	f7fc f9c3 	bl	8002008 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c86:	f7fc f9bf 	bl	8002008 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e1c5      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c98:	4b32      	ldr	r3, [pc, #200]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1ef      	bne.n	8005c86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 80a6 	beq.w	8005e00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005cb8:	4b2a      	ldr	r3, [pc, #168]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10d      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cc4:	4b27      	ldr	r3, [pc, #156]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc8:	4a26      	ldr	r2, [pc, #152]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cce:	6593      	str	r3, [r2, #88]	; 0x58
 8005cd0:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd8:	60bb      	str	r3, [r7, #8]
 8005cda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ce0:	4b21      	ldr	r3, [pc, #132]	; (8005d68 <HAL_RCC_OscConfig+0x508>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d118      	bne.n	8005d1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cec:	4b1e      	ldr	r3, [pc, #120]	; (8005d68 <HAL_RCC_OscConfig+0x508>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1d      	ldr	r2, [pc, #116]	; (8005d68 <HAL_RCC_OscConfig+0x508>)
 8005cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cf8:	f7fc f986 	bl	8002008 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d00:	f7fc f982 	bl	8002008 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e188      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <HAL_RCC_OscConfig+0x508>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f0      	beq.n	8005d00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d108      	bne.n	8005d38 <HAL_RCC_OscConfig+0x4d8>
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2c:	4a0d      	ldr	r2, [pc, #52]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005d2e:	f043 0301 	orr.w	r3, r3, #1
 8005d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d36:	e029      	b.n	8005d8c <HAL_RCC_OscConfig+0x52c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b05      	cmp	r3, #5
 8005d3e:	d115      	bne.n	8005d6c <HAL_RCC_OscConfig+0x50c>
 8005d40:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d46:	4a07      	ldr	r2, [pc, #28]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005d48:	f043 0304 	orr.w	r3, r3, #4
 8005d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d50:	4b04      	ldr	r3, [pc, #16]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d56:	4a03      	ldr	r2, [pc, #12]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d60:	e014      	b.n	8005d8c <HAL_RCC_OscConfig+0x52c>
 8005d62:	bf00      	nop
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40007000 	.word	0x40007000
 8005d6c:	4b91      	ldr	r3, [pc, #580]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d72:	4a90      	ldr	r2, [pc, #576]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005d74:	f023 0301 	bic.w	r3, r3, #1
 8005d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d7c:	4b8d      	ldr	r3, [pc, #564]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d82:	4a8c      	ldr	r2, [pc, #560]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005d84:	f023 0304 	bic.w	r3, r3, #4
 8005d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d016      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d94:	f7fc f938 	bl	8002008 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d9a:	e00a      	b.n	8005db2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9c:	f7fc f934 	bl	8002008 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e138      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005db2:	4b80      	ldr	r3, [pc, #512]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0ed      	beq.n	8005d9c <HAL_RCC_OscConfig+0x53c>
 8005dc0:	e015      	b.n	8005dee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc2:	f7fc f921 	bl	8002008 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005dc8:	e00a      	b.n	8005de0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dca:	f7fc f91d 	bl	8002008 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e121      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005de0:	4b74      	ldr	r3, [pc, #464]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1ed      	bne.n	8005dca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dee:	7ffb      	ldrb	r3, [r7, #31]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d105      	bne.n	8005e00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005df4:	4b6f      	ldr	r3, [pc, #444]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df8:	4a6e      	ldr	r2, [pc, #440]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dfe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 810c 	beq.w	8006022 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	f040 80d4 	bne.w	8005fbc <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005e14:	4b67      	ldr	r3, [pc, #412]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f003 0203 	and.w	r2, r3, #3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d130      	bne.n	8005e8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	3b01      	subs	r3, #1
 8005e34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d127      	bne.n	8005e8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d11f      	bne.n	8005e8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e54:	2a07      	cmp	r2, #7
 8005e56:	bf14      	ite	ne
 8005e58:	2201      	movne	r2, #1
 8005e5a:	2200      	moveq	r2, #0
 8005e5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d113      	bne.n	8005e8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d109      	bne.n	8005e8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	085b      	lsrs	r3, r3, #1
 8005e82:	3b01      	subs	r3, #1
 8005e84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d06e      	beq.n	8005f68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	2b0c      	cmp	r3, #12
 8005e8e:	d069      	beq.n	8005f64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e90:	4b48      	ldr	r3, [pc, #288]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005e9c:	4b45      	ldr	r3, [pc, #276]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e0bb      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005eac:	4b41      	ldr	r3, [pc, #260]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a40      	ldr	r2, [pc, #256]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eb6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005eb8:	f7fc f8a6 	bl	8002008 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec0:	f7fc f8a2 	bl	8002008 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e0a8      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ed2:	4b38      	ldr	r3, [pc, #224]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ede:	4b35      	ldr	r3, [pc, #212]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	4b35      	ldr	r3, [pc, #212]	; (8005fb8 <HAL_RCC_OscConfig+0x758>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005eee:	3a01      	subs	r2, #1
 8005ef0:	0112      	lsls	r2, r2, #4
 8005ef2:	4311      	orrs	r1, r2
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ef8:	0212      	lsls	r2, r2, #8
 8005efa:	4311      	orrs	r1, r2
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f00:	0852      	lsrs	r2, r2, #1
 8005f02:	3a01      	subs	r2, #1
 8005f04:	0552      	lsls	r2, r2, #21
 8005f06:	4311      	orrs	r1, r2
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005f0c:	0852      	lsrs	r2, r2, #1
 8005f0e:	3a01      	subs	r2, #1
 8005f10:	0652      	lsls	r2, r2, #25
 8005f12:	4311      	orrs	r1, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f18:	0912      	lsrs	r2, r2, #4
 8005f1a:	0452      	lsls	r2, r2, #17
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	4925      	ldr	r1, [pc, #148]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005f24:	4b23      	ldr	r3, [pc, #140]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a22      	ldr	r2, [pc, #136]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f30:	4b20      	ldr	r3, [pc, #128]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	4a1f      	ldr	r2, [pc, #124]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f3c:	f7fc f864 	bl	8002008 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f44:	f7fc f860 	bl	8002008 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e066      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f56:	4b17      	ldr	r3, [pc, #92]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0f0      	beq.n	8005f44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f62:	e05e      	b.n	8006022 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e05d      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f68:	4b12      	ldr	r3, [pc, #72]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d156      	bne.n	8006022 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f74:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a0e      	ldr	r2, [pc, #56]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f80:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	4a0b      	ldr	r2, [pc, #44]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f8c:	f7fc f83c 	bl	8002008 <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f94:	f7fc f838 	bl	8002008 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e03e      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fa6:	4b03      	ldr	r3, [pc, #12]	; (8005fb4 <HAL_RCC_OscConfig+0x754>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0f0      	beq.n	8005f94 <HAL_RCC_OscConfig+0x734>
 8005fb2:	e036      	b.n	8006022 <HAL_RCC_OscConfig+0x7c2>
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	2b0c      	cmp	r3, #12
 8005fc0:	d02d      	beq.n	800601e <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc2:	4b1a      	ldr	r3, [pc, #104]	; (800602c <HAL_RCC_OscConfig+0x7cc>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a19      	ldr	r2, [pc, #100]	; (800602c <HAL_RCC_OscConfig+0x7cc>)
 8005fc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fcc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005fce:	4b17      	ldr	r3, [pc, #92]	; (800602c <HAL_RCC_OscConfig+0x7cc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d105      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005fda:	4b14      	ldr	r3, [pc, #80]	; (800602c <HAL_RCC_OscConfig+0x7cc>)
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	4a13      	ldr	r2, [pc, #76]	; (800602c <HAL_RCC_OscConfig+0x7cc>)
 8005fe0:	f023 0303 	bic.w	r3, r3, #3
 8005fe4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005fe6:	4b11      	ldr	r3, [pc, #68]	; (800602c <HAL_RCC_OscConfig+0x7cc>)
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	4a10      	ldr	r2, [pc, #64]	; (800602c <HAL_RCC_OscConfig+0x7cc>)
 8005fec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff6:	f7fc f807 	bl	8002008 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ffc:	e008      	b.n	8006010 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ffe:	f7fc f803 	bl	8002008 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e009      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006010:	4b06      	ldr	r3, [pc, #24]	; (800602c <HAL_RCC_OscConfig+0x7cc>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1f0      	bne.n	8005ffe <HAL_RCC_OscConfig+0x79e>
 800601c:	e001      	b.n	8006022 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3720      	adds	r7, #32
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40021000 	.word	0x40021000

08006030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e0c8      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006044:	4b66      	ldr	r3, [pc, #408]	; (80061e0 <HAL_RCC_ClockConfig+0x1b0>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d910      	bls.n	8006074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006052:	4b63      	ldr	r3, [pc, #396]	; (80061e0 <HAL_RCC_ClockConfig+0x1b0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f023 0207 	bic.w	r2, r3, #7
 800605a:	4961      	ldr	r1, [pc, #388]	; (80061e0 <HAL_RCC_ClockConfig+0x1b0>)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	4313      	orrs	r3, r2
 8006060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006062:	4b5f      	ldr	r3, [pc, #380]	; (80061e0 <HAL_RCC_ClockConfig+0x1b0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d001      	beq.n	8006074 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e0b0      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d04c      	beq.n	800611a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b03      	cmp	r3, #3
 8006086:	d107      	bne.n	8006098 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006088:	4b56      	ldr	r3, [pc, #344]	; (80061e4 <HAL_RCC_ClockConfig+0x1b4>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d121      	bne.n	80060d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e09e      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d107      	bne.n	80060b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060a0:	4b50      	ldr	r3, [pc, #320]	; (80061e4 <HAL_RCC_ClockConfig+0x1b4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d115      	bne.n	80060d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e092      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d107      	bne.n	80060c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80060b8:	4b4a      	ldr	r3, [pc, #296]	; (80061e4 <HAL_RCC_ClockConfig+0x1b4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d109      	bne.n	80060d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e086      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060c8:	4b46      	ldr	r3, [pc, #280]	; (80061e4 <HAL_RCC_ClockConfig+0x1b4>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e07e      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060d8:	4b42      	ldr	r3, [pc, #264]	; (80061e4 <HAL_RCC_ClockConfig+0x1b4>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f023 0203 	bic.w	r2, r3, #3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	493f      	ldr	r1, [pc, #252]	; (80061e4 <HAL_RCC_ClockConfig+0x1b4>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ea:	f7fb ff8d 	bl	8002008 <HAL_GetTick>
 80060ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f0:	e00a      	b.n	8006108 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060f2:	f7fb ff89 	bl	8002008 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006100:	4293      	cmp	r3, r2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e066      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006108:	4b36      	ldr	r3, [pc, #216]	; (80061e4 <HAL_RCC_ClockConfig+0x1b4>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f003 020c 	and.w	r2, r3, #12
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	429a      	cmp	r2, r3
 8006118:	d1eb      	bne.n	80060f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d008      	beq.n	8006138 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006126:	4b2f      	ldr	r3, [pc, #188]	; (80061e4 <HAL_RCC_ClockConfig+0x1b4>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	492c      	ldr	r1, [pc, #176]	; (80061e4 <HAL_RCC_ClockConfig+0x1b4>)
 8006134:	4313      	orrs	r3, r2
 8006136:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006138:	4b29      	ldr	r3, [pc, #164]	; (80061e0 <HAL_RCC_ClockConfig+0x1b0>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d210      	bcs.n	8006168 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006146:	4b26      	ldr	r3, [pc, #152]	; (80061e0 <HAL_RCC_ClockConfig+0x1b0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f023 0207 	bic.w	r2, r3, #7
 800614e:	4924      	ldr	r1, [pc, #144]	; (80061e0 <HAL_RCC_ClockConfig+0x1b0>)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	4313      	orrs	r3, r2
 8006154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006156:	4b22      	ldr	r3, [pc, #136]	; (80061e0 <HAL_RCC_ClockConfig+0x1b0>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d001      	beq.n	8006168 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e036      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006174:	4b1b      	ldr	r3, [pc, #108]	; (80061e4 <HAL_RCC_ClockConfig+0x1b4>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	4918      	ldr	r1, [pc, #96]	; (80061e4 <HAL_RCC_ClockConfig+0x1b4>)
 8006182:	4313      	orrs	r3, r2
 8006184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006192:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <HAL_RCC_ClockConfig+0x1b4>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4910      	ldr	r1, [pc, #64]	; (80061e4 <HAL_RCC_ClockConfig+0x1b4>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061a6:	f000 f825 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 80061aa:	4602      	mov	r2, r0
 80061ac:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <HAL_RCC_ClockConfig+0x1b4>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	091b      	lsrs	r3, r3, #4
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	490c      	ldr	r1, [pc, #48]	; (80061e8 <HAL_RCC_ClockConfig+0x1b8>)
 80061b8:	5ccb      	ldrb	r3, [r1, r3]
 80061ba:	f003 031f 	and.w	r3, r3, #31
 80061be:	fa22 f303 	lsr.w	r3, r2, r3
 80061c2:	4a0a      	ldr	r2, [pc, #40]	; (80061ec <HAL_RCC_ClockConfig+0x1bc>)
 80061c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061c6:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <HAL_RCC_ClockConfig+0x1c0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fb fecc 	bl	8001f68 <HAL_InitTick>
 80061d0:	4603      	mov	r3, r0
 80061d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80061d4:	7afb      	ldrb	r3, [r7, #11]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	40022000 	.word	0x40022000
 80061e4:	40021000 	.word	0x40021000
 80061e8:	0800d104 	.word	0x0800d104
 80061ec:	20000040 	.word	0x20000040
 80061f0:	20000044 	.word	0x20000044

080061f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b089      	sub	sp, #36	; 0x24
 80061f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	2300      	movs	r3, #0
 8006200:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006202:	4b3e      	ldr	r3, [pc, #248]	; (80062fc <HAL_RCC_GetSysClockFreq+0x108>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 030c 	and.w	r3, r3, #12
 800620a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800620c:	4b3b      	ldr	r3, [pc, #236]	; (80062fc <HAL_RCC_GetSysClockFreq+0x108>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_RCC_GetSysClockFreq+0x34>
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	2b0c      	cmp	r3, #12
 8006220:	d121      	bne.n	8006266 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d11e      	bne.n	8006266 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006228:	4b34      	ldr	r3, [pc, #208]	; (80062fc <HAL_RCC_GetSysClockFreq+0x108>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b00      	cmp	r3, #0
 8006232:	d107      	bne.n	8006244 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006234:	4b31      	ldr	r3, [pc, #196]	; (80062fc <HAL_RCC_GetSysClockFreq+0x108>)
 8006236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800623a:	0a1b      	lsrs	r3, r3, #8
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	61fb      	str	r3, [r7, #28]
 8006242:	e005      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006244:	4b2d      	ldr	r3, [pc, #180]	; (80062fc <HAL_RCC_GetSysClockFreq+0x108>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	091b      	lsrs	r3, r3, #4
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006250:	4a2b      	ldr	r2, [pc, #172]	; (8006300 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006258:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10d      	bne.n	800627c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006264:	e00a      	b.n	800627c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b04      	cmp	r3, #4
 800626a:	d102      	bne.n	8006272 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800626c:	4b25      	ldr	r3, [pc, #148]	; (8006304 <HAL_RCC_GetSysClockFreq+0x110>)
 800626e:	61bb      	str	r3, [r7, #24]
 8006270:	e004      	b.n	800627c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2b08      	cmp	r3, #8
 8006276:	d101      	bne.n	800627c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006278:	4b23      	ldr	r3, [pc, #140]	; (8006308 <HAL_RCC_GetSysClockFreq+0x114>)
 800627a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	2b0c      	cmp	r3, #12
 8006280:	d134      	bne.n	80062ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006282:	4b1e      	ldr	r3, [pc, #120]	; (80062fc <HAL_RCC_GetSysClockFreq+0x108>)
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d003      	beq.n	800629a <HAL_RCC_GetSysClockFreq+0xa6>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b03      	cmp	r3, #3
 8006296:	d003      	beq.n	80062a0 <HAL_RCC_GetSysClockFreq+0xac>
 8006298:	e005      	b.n	80062a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800629a:	4b1a      	ldr	r3, [pc, #104]	; (8006304 <HAL_RCC_GetSysClockFreq+0x110>)
 800629c:	617b      	str	r3, [r7, #20]
      break;
 800629e:	e005      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80062a0:	4b19      	ldr	r3, [pc, #100]	; (8006308 <HAL_RCC_GetSysClockFreq+0x114>)
 80062a2:	617b      	str	r3, [r7, #20]
      break;
 80062a4:	e002      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	617b      	str	r3, [r7, #20]
      break;
 80062aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062ac:	4b13      	ldr	r3, [pc, #76]	; (80062fc <HAL_RCC_GetSysClockFreq+0x108>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	3301      	adds	r3, #1
 80062b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80062ba:	4b10      	ldr	r3, [pc, #64]	; (80062fc <HAL_RCC_GetSysClockFreq+0x108>)
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	fb03 f202 	mul.w	r2, r3, r2
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062d2:	4b0a      	ldr	r3, [pc, #40]	; (80062fc <HAL_RCC_GetSysClockFreq+0x108>)
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	0e5b      	lsrs	r3, r3, #25
 80062d8:	f003 0303 	and.w	r3, r3, #3
 80062dc:	3301      	adds	r3, #1
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80062ec:	69bb      	ldr	r3, [r7, #24]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3724      	adds	r7, #36	; 0x24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40021000 	.word	0x40021000
 8006300:	0800d11c 	.word	0x0800d11c
 8006304:	00f42400 	.word	0x00f42400
 8006308:	007a1200 	.word	0x007a1200

0800630c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006310:	4b03      	ldr	r3, [pc, #12]	; (8006320 <HAL_RCC_GetHCLKFreq+0x14>)
 8006312:	681b      	ldr	r3, [r3, #0]
}
 8006314:	4618      	mov	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20000040 	.word	0x20000040

08006324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006328:	f7ff fff0 	bl	800630c <HAL_RCC_GetHCLKFreq>
 800632c:	4602      	mov	r2, r0
 800632e:	4b06      	ldr	r3, [pc, #24]	; (8006348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	0a1b      	lsrs	r3, r3, #8
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	4904      	ldr	r1, [pc, #16]	; (800634c <HAL_RCC_GetPCLK1Freq+0x28>)
 800633a:	5ccb      	ldrb	r3, [r1, r3]
 800633c:	f003 031f 	and.w	r3, r3, #31
 8006340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006344:	4618      	mov	r0, r3
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40021000 	.word	0x40021000
 800634c:	0800d114 	.word	0x0800d114

08006350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006354:	f7ff ffda 	bl	800630c <HAL_RCC_GetHCLKFreq>
 8006358:	4602      	mov	r2, r0
 800635a:	4b06      	ldr	r3, [pc, #24]	; (8006374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	0adb      	lsrs	r3, r3, #11
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	4904      	ldr	r1, [pc, #16]	; (8006378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006366:	5ccb      	ldrb	r3, [r1, r3]
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006370:	4618      	mov	r0, r3
 8006372:	bd80      	pop	{r7, pc}
 8006374:	40021000 	.word	0x40021000
 8006378:	0800d114 	.word	0x0800d114

0800637c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006384:	2300      	movs	r3, #0
 8006386:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006388:	4b2a      	ldr	r3, [pc, #168]	; (8006434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800638a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006394:	f7fe fd14 	bl	8004dc0 <HAL_PWREx_GetVoltageRange>
 8006398:	6178      	str	r0, [r7, #20]
 800639a:	e014      	b.n	80063c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800639c:	4b25      	ldr	r3, [pc, #148]	; (8006434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800639e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a0:	4a24      	ldr	r2, [pc, #144]	; (8006434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a6:	6593      	str	r3, [r2, #88]	; 0x58
 80063a8:	4b22      	ldr	r3, [pc, #136]	; (8006434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063b4:	f7fe fd04 	bl	8004dc0 <HAL_PWREx_GetVoltageRange>
 80063b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063ba:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063be:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063cc:	d10b      	bne.n	80063e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b80      	cmp	r3, #128	; 0x80
 80063d2:	d919      	bls.n	8006408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2ba0      	cmp	r3, #160	; 0xa0
 80063d8:	d902      	bls.n	80063e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063da:	2302      	movs	r3, #2
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	e013      	b.n	8006408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063e0:	2301      	movs	r3, #1
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	e010      	b.n	8006408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b80      	cmp	r3, #128	; 0x80
 80063ea:	d902      	bls.n	80063f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80063ec:	2303      	movs	r3, #3
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	e00a      	b.n	8006408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b80      	cmp	r3, #128	; 0x80
 80063f6:	d102      	bne.n	80063fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063f8:	2302      	movs	r3, #2
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	e004      	b.n	8006408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b70      	cmp	r3, #112	; 0x70
 8006402:	d101      	bne.n	8006408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006404:	2301      	movs	r3, #1
 8006406:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006408:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f023 0207 	bic.w	r2, r3, #7
 8006410:	4909      	ldr	r1, [pc, #36]	; (8006438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006418:	4b07      	ldr	r3, [pc, #28]	; (8006438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	429a      	cmp	r2, r3
 8006424:	d001      	beq.n	800642a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	40021000 	.word	0x40021000
 8006438:	40022000 	.word	0x40022000

0800643c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006444:	2300      	movs	r3, #0
 8006446:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006448:	2300      	movs	r3, #0
 800644a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006454:	2b00      	cmp	r3, #0
 8006456:	d041      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800645c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006460:	d02a      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006462:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006466:	d824      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006468:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800646c:	d008      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800646e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006472:	d81e      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00a      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800647c:	d010      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800647e:	e018      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006480:	4b86      	ldr	r3, [pc, #536]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	4a85      	ldr	r2, [pc, #532]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800648a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800648c:	e015      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3304      	adds	r3, #4
 8006492:	2100      	movs	r1, #0
 8006494:	4618      	mov	r0, r3
 8006496:	f001 f839 	bl	800750c <RCCEx_PLLSAI1_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800649e:	e00c      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3320      	adds	r3, #32
 80064a4:	2100      	movs	r1, #0
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 f924 	bl	80076f4 <RCCEx_PLLSAI2_Config>
 80064ac:	4603      	mov	r3, r0
 80064ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064b0:	e003      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	74fb      	strb	r3, [r7, #19]
      break;
 80064b6:	e000      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80064b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ba:	7cfb      	ldrb	r3, [r7, #19]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10b      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064c0:	4b76      	ldr	r3, [pc, #472]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ce:	4973      	ldr	r1, [pc, #460]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80064d6:	e001      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d8:	7cfb      	ldrb	r3, [r7, #19]
 80064da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d041      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064f0:	d02a      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80064f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064f6:	d824      	bhi.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064fc:	d008      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80064fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006502:	d81e      	bhi.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800650c:	d010      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800650e:	e018      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006510:	4b62      	ldr	r3, [pc, #392]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	4a61      	ldr	r2, [pc, #388]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800651a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800651c:	e015      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3304      	adds	r3, #4
 8006522:	2100      	movs	r1, #0
 8006524:	4618      	mov	r0, r3
 8006526:	f000 fff1 	bl	800750c <RCCEx_PLLSAI1_Config>
 800652a:	4603      	mov	r3, r0
 800652c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800652e:	e00c      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3320      	adds	r3, #32
 8006534:	2100      	movs	r1, #0
 8006536:	4618      	mov	r0, r3
 8006538:	f001 f8dc 	bl	80076f4 <RCCEx_PLLSAI2_Config>
 800653c:	4603      	mov	r3, r0
 800653e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006540:	e003      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	74fb      	strb	r3, [r7, #19]
      break;
 8006546:	e000      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800654a:	7cfb      	ldrb	r3, [r7, #19]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10b      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006550:	4b52      	ldr	r3, [pc, #328]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006556:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800655e:	494f      	ldr	r1, [pc, #316]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006560:	4313      	orrs	r3, r2
 8006562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006566:	e001      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006568:	7cfb      	ldrb	r3, [r7, #19]
 800656a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 80a0 	beq.w	80066ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800657a:	2300      	movs	r3, #0
 800657c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800657e:	4b47      	ldr	r3, [pc, #284]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800658e:	2300      	movs	r3, #0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00d      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006594:	4b41      	ldr	r3, [pc, #260]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006598:	4a40      	ldr	r2, [pc, #256]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800659a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800659e:	6593      	str	r3, [r2, #88]	; 0x58
 80065a0:	4b3e      	ldr	r3, [pc, #248]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065a8:	60bb      	str	r3, [r7, #8]
 80065aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ac:	2301      	movs	r3, #1
 80065ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065b0:	4b3b      	ldr	r3, [pc, #236]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a3a      	ldr	r2, [pc, #232]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065bc:	f7fb fd24 	bl	8002008 <HAL_GetTick>
 80065c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065c2:	e009      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065c4:	f7fb fd20 	bl	8002008 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d902      	bls.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	74fb      	strb	r3, [r7, #19]
        break;
 80065d6:	e005      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065d8:	4b31      	ldr	r3, [pc, #196]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0ef      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80065e4:	7cfb      	ldrb	r3, [r7, #19]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d15c      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065ea:	4b2c      	ldr	r3, [pc, #176]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01f      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	429a      	cmp	r2, r3
 8006606:	d019      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006608:	4b24      	ldr	r3, [pc, #144]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800660a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006612:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006614:	4b21      	ldr	r3, [pc, #132]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661a:	4a20      	ldr	r2, [pc, #128]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800661c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006624:	4b1d      	ldr	r3, [pc, #116]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662a:	4a1c      	ldr	r2, [pc, #112]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800662c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006634:	4a19      	ldr	r2, [pc, #100]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d016      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006646:	f7fb fcdf 	bl	8002008 <HAL_GetTick>
 800664a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800664c:	e00b      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800664e:	f7fb fcdb 	bl	8002008 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	f241 3288 	movw	r2, #5000	; 0x1388
 800665c:	4293      	cmp	r3, r2
 800665e:	d902      	bls.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	74fb      	strb	r3, [r7, #19]
            break;
 8006664:	e006      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006666:	4b0d      	ldr	r3, [pc, #52]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0ec      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006674:	7cfb      	ldrb	r3, [r7, #19]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10c      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800667a:	4b08      	ldr	r3, [pc, #32]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800667c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800668a:	4904      	ldr	r1, [pc, #16]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006692:	e009      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006694:	7cfb      	ldrb	r3, [r7, #19]
 8006696:	74bb      	strb	r3, [r7, #18]
 8006698:	e006      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800669a:	bf00      	nop
 800669c:	40021000 	.word	0x40021000
 80066a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a4:	7cfb      	ldrb	r3, [r7, #19]
 80066a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066a8:	7c7b      	ldrb	r3, [r7, #17]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d105      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066ae:	4b9e      	ldr	r3, [pc, #632]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b2:	4a9d      	ldr	r2, [pc, #628]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00a      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066c6:	4b98      	ldr	r3, [pc, #608]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066cc:	f023 0203 	bic.w	r2, r3, #3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	4994      	ldr	r1, [pc, #592]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00a      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066e8:	4b8f      	ldr	r3, [pc, #572]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ee:	f023 020c 	bic.w	r2, r3, #12
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f6:	498c      	ldr	r1, [pc, #560]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800670a:	4b87      	ldr	r3, [pc, #540]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800670c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006710:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	4983      	ldr	r1, [pc, #524]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800672c:	4b7e      	ldr	r3, [pc, #504]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800672e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006732:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673a:	497b      	ldr	r1, [pc, #492]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800673c:	4313      	orrs	r3, r2
 800673e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800674e:	4b76      	ldr	r3, [pc, #472]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800675c:	4972      	ldr	r1, [pc, #456]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800675e:	4313      	orrs	r3, r2
 8006760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006770:	4b6d      	ldr	r3, [pc, #436]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006776:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677e:	496a      	ldr	r1, [pc, #424]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006792:	4b65      	ldr	r3, [pc, #404]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006798:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a0:	4961      	ldr	r1, [pc, #388]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067b4:	4b5c      	ldr	r3, [pc, #368]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c2:	4959      	ldr	r1, [pc, #356]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067d6:	4b54      	ldr	r3, [pc, #336]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e4:	4950      	ldr	r1, [pc, #320]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067f8:	4b4b      	ldr	r3, [pc, #300]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006806:	4948      	ldr	r1, [pc, #288]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006808:	4313      	orrs	r3, r2
 800680a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800681a:	4b43      	ldr	r3, [pc, #268]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800681c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006828:	493f      	ldr	r1, [pc, #252]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d028      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800683c:	4b3a      	ldr	r3, [pc, #232]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006842:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684a:	4937      	ldr	r1, [pc, #220]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006856:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800685a:	d106      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800685c:	4b32      	ldr	r3, [pc, #200]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	4a31      	ldr	r2, [pc, #196]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006866:	60d3      	str	r3, [r2, #12]
 8006868:	e011      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800686e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006872:	d10c      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3304      	adds	r3, #4
 8006878:	2101      	movs	r1, #1
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fe46 	bl	800750c <RCCEx_PLLSAI1_Config>
 8006880:	4603      	mov	r3, r0
 8006882:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006884:	7cfb      	ldrb	r3, [r7, #19]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800688a:	7cfb      	ldrb	r3, [r7, #19]
 800688c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d028      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800689a:	4b23      	ldr	r3, [pc, #140]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800689c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a8:	491f      	ldr	r1, [pc, #124]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068b8:	d106      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068ba:	4b1b      	ldr	r3, [pc, #108]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	4a1a      	ldr	r2, [pc, #104]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068c4:	60d3      	str	r3, [r2, #12]
 80068c6:	e011      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068d0:	d10c      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3304      	adds	r3, #4
 80068d6:	2101      	movs	r1, #1
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fe17 	bl	800750c <RCCEx_PLLSAI1_Config>
 80068de:	4603      	mov	r3, r0
 80068e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068e2:	7cfb      	ldrb	r3, [r7, #19]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80068e8:	7cfb      	ldrb	r3, [r7, #19]
 80068ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d02b      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068f8:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006906:	4908      	ldr	r1, [pc, #32]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006908:	4313      	orrs	r3, r2
 800690a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006916:	d109      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006918:	4b03      	ldr	r3, [pc, #12]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	4a02      	ldr	r2, [pc, #8]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800691e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006922:	60d3      	str	r3, [r2, #12]
 8006924:	e014      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006926:	bf00      	nop
 8006928:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006934:	d10c      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	3304      	adds	r3, #4
 800693a:	2101      	movs	r1, #1
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fde5 	bl	800750c <RCCEx_PLLSAI1_Config>
 8006942:	4603      	mov	r3, r0
 8006944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006946:	7cfb      	ldrb	r3, [r7, #19]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800694c:	7cfb      	ldrb	r3, [r7, #19]
 800694e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d02f      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800695c:	4b2b      	ldr	r3, [pc, #172]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800695e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006962:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800696a:	4928      	ldr	r1, [pc, #160]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800696c:	4313      	orrs	r3, r2
 800696e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800697a:	d10d      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3304      	adds	r3, #4
 8006980:	2102      	movs	r1, #2
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fdc2 	bl	800750c <RCCEx_PLLSAI1_Config>
 8006988:	4603      	mov	r3, r0
 800698a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800698c:	7cfb      	ldrb	r3, [r7, #19]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d014      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006992:	7cfb      	ldrb	r3, [r7, #19]
 8006994:	74bb      	strb	r3, [r7, #18]
 8006996:	e011      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800699c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a0:	d10c      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3320      	adds	r3, #32
 80069a6:	2102      	movs	r1, #2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fea3 	bl	80076f4 <RCCEx_PLLSAI2_Config>
 80069ae:	4603      	mov	r3, r0
 80069b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069b2:	7cfb      	ldrb	r3, [r7, #19]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80069b8:	7cfb      	ldrb	r3, [r7, #19]
 80069ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069c8:	4b10      	ldr	r3, [pc, #64]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069d6:	490d      	ldr	r1, [pc, #52]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00b      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069ea:	4b08      	ldr	r3, [pc, #32]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069fa:	4904      	ldr	r1, [pc, #16]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006a02:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	40021000 	.word	0x40021000

08006a10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a22:	d13e      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006a24:	4bb2      	ldr	r3, [pc, #712]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a36:	d028      	beq.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a3e:	f200 8542 	bhi.w	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a48:	d005      	beq.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a50:	d00e      	beq.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006a52:	f000 bd38 	b.w	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a56:	4ba6      	ldr	r3, [pc, #664]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	f040 8532 	bne.w	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8006a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a6a:	61fb      	str	r3, [r7, #28]
      break;
 8006a6c:	f000 bd2d 	b.w	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006a70:	4b9f      	ldr	r3, [pc, #636]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	f040 8527 	bne.w	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8006a80:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a84:	61fb      	str	r3, [r7, #28]
      break;
 8006a86:	f000 bd22 	b.w	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a8a:	4b99      	ldr	r3, [pc, #612]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a96:	f040 851c 	bne.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8006a9a:	4b96      	ldr	r3, [pc, #600]	; (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8006a9c:	61fb      	str	r3, [r7, #28]
      break;
 8006a9e:	f000 bd18 	b.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006aa2:	4b93      	ldr	r3, [pc, #588]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d036      	beq.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d840      	bhi.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d003      	beq.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d020      	beq.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006ac4:	e039      	b.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006ac6:	4b8a      	ldr	r3, [pc, #552]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d116      	bne.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006ad2:	4b87      	ldr	r3, [pc, #540]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d005      	beq.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006ade:	4b84      	ldr	r3, [pc, #528]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	091b      	lsrs	r3, r3, #4
 8006ae4:	f003 030f 	and.w	r3, r3, #15
 8006ae8:	e005      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006aea:	4b81      	ldr	r3, [pc, #516]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006af0:	0a1b      	lsrs	r3, r3, #8
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	4a80      	ldr	r2, [pc, #512]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006afc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006afe:	e01f      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61bb      	str	r3, [r7, #24]
      break;
 8006b04:	e01c      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b06:	4b7a      	ldr	r3, [pc, #488]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b12:	d102      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006b14:	4b79      	ldr	r3, [pc, #484]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8006b16:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006b18:	e012      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61bb      	str	r3, [r7, #24]
      break;
 8006b1e:	e00f      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b20:	4b73      	ldr	r3, [pc, #460]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b2c:	d102      	bne.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006b2e:	4b74      	ldr	r3, [pc, #464]	; (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006b30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006b32:	e005      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61bb      	str	r3, [r7, #24]
      break;
 8006b38:	e002      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61bb      	str	r3, [r7, #24]
      break;
 8006b3e:	bf00      	nop
    }

    switch(PeriphClk)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b46:	f000 80dd 	beq.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b50:	f200 84c1 	bhi.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b5a:	f000 80d3 	beq.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b64:	f200 84b7 	bhi.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6e:	f000 835f 	beq.w	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b78:	f200 84ad 	bhi.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b82:	f000 847e 	beq.w	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b8c:	f200 84a3 	bhi.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b96:	f000 82cd 	beq.w	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ba0:	f200 8499 	bhi.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006baa:	f000 80ab 	beq.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb4:	f200 848f 	bhi.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bbe:	f000 8090 	beq.w	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc8:	f200 8485 	bhi.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd2:	d07f      	beq.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bda:	f200 847c 	bhi.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be4:	f000 8403 	beq.w	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bee:	f200 8472 	bhi.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf8:	f000 83af 	beq.w	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c02:	f200 8468 	bhi.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c0c:	f000 8379 	beq.w	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c16:	f200 845e 	bhi.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b80      	cmp	r3, #128	; 0x80
 8006c1e:	f000 8344 	beq.w	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b80      	cmp	r3, #128	; 0x80
 8006c26:	f200 8456 	bhi.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b20      	cmp	r3, #32
 8006c2e:	d84b      	bhi.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 844f 	beq.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	2b1f      	cmp	r3, #31
 8006c3e:	f200 844a 	bhi.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006c42:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8006c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c48:	08006e31 	.word	0x08006e31
 8006c4c:	08006e9f 	.word	0x08006e9f
 8006c50:	080074d7 	.word	0x080074d7
 8006c54:	08006f33 	.word	0x08006f33
 8006c58:	080074d7 	.word	0x080074d7
 8006c5c:	080074d7 	.word	0x080074d7
 8006c60:	080074d7 	.word	0x080074d7
 8006c64:	08006fb9 	.word	0x08006fb9
 8006c68:	080074d7 	.word	0x080074d7
 8006c6c:	080074d7 	.word	0x080074d7
 8006c70:	080074d7 	.word	0x080074d7
 8006c74:	080074d7 	.word	0x080074d7
 8006c78:	080074d7 	.word	0x080074d7
 8006c7c:	080074d7 	.word	0x080074d7
 8006c80:	080074d7 	.word	0x080074d7
 8006c84:	08007031 	.word	0x08007031
 8006c88:	080074d7 	.word	0x080074d7
 8006c8c:	080074d7 	.word	0x080074d7
 8006c90:	080074d7 	.word	0x080074d7
 8006c94:	080074d7 	.word	0x080074d7
 8006c98:	080074d7 	.word	0x080074d7
 8006c9c:	080074d7 	.word	0x080074d7
 8006ca0:	080074d7 	.word	0x080074d7
 8006ca4:	080074d7 	.word	0x080074d7
 8006ca8:	080074d7 	.word	0x080074d7
 8006cac:	080074d7 	.word	0x080074d7
 8006cb0:	080074d7 	.word	0x080074d7
 8006cb4:	080074d7 	.word	0x080074d7
 8006cb8:	080074d7 	.word	0x080074d7
 8006cbc:	080074d7 	.word	0x080074d7
 8006cc0:	080074d7 	.word	0x080074d7
 8006cc4:	080070b3 	.word	0x080070b3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b40      	cmp	r3, #64	; 0x40
 8006ccc:	f000 82c1 	beq.w	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006cd0:	f000 bc01 	b.w	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006cd4:	69b9      	ldr	r1, [r7, #24]
 8006cd6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006cda:	f000 fde9 	bl	80078b0 <RCCEx_GetSAIxPeriphCLKFreq>
 8006cde:	61f8      	str	r0, [r7, #28]
      break;
 8006ce0:	e3fa      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006ce2:	69b9      	ldr	r1, [r7, #24]
 8006ce4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006ce8:	f000 fde2 	bl	80078b0 <RCCEx_GetSAIxPeriphCLKFreq>
 8006cec:	61f8      	str	r0, [r7, #28]
      break;
 8006cee:	e3f3      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	0003d090 	.word	0x0003d090
 8006cf8:	0800d11c 	.word	0x0800d11c
 8006cfc:	00f42400 	.word	0x00f42400
 8006d00:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006d04:	4ba9      	ldr	r3, [pc, #676]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006d0e:	613b      	str	r3, [r7, #16]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d16:	d00c      	beq.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d1e:	d87f      	bhi.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d26:	d04e      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d2e:	d01d      	beq.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8006d30:	e076      	b.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006d32:	4b9e      	ldr	r3, [pc, #632]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d172      	bne.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006d3e:	4b9b      	ldr	r3, [pc, #620]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0308 	and.w	r3, r3, #8
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d005      	beq.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8006d4a:	4b98      	ldr	r3, [pc, #608]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	091b      	lsrs	r3, r3, #4
 8006d50:	f003 030f 	and.w	r3, r3, #15
 8006d54:	e005      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8006d56:	4b95      	ldr	r3, [pc, #596]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d5c:	0a1b      	lsrs	r3, r3, #8
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	4a93      	ldr	r2, [pc, #588]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d68:	61fb      	str	r3, [r7, #28]
          break;
 8006d6a:	e05b      	b.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006d6c:	4b8f      	ldr	r3, [pc, #572]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d78:	d156      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006d7a:	4b8c      	ldr	r3, [pc, #560]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d86:	d14f      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006d88:	4b88      	ldr	r3, [pc, #544]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	0a1b      	lsrs	r3, r3, #8
 8006d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d92:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	fb03 f202 	mul.w	r2, r3, r2
 8006d9c:	4b83      	ldr	r3, [pc, #524]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	091b      	lsrs	r3, r3, #4
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	3301      	adds	r3, #1
 8006da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dac:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006dae:	4b7f      	ldr	r3, [pc, #508]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	0d5b      	lsrs	r3, r3, #21
 8006db4:	f003 0303 	and.w	r3, r3, #3
 8006db8:	3301      	adds	r3, #1
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc2:	61fb      	str	r3, [r7, #28]
          break;
 8006dc4:	e030      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006dc6:	4b79      	ldr	r3, [pc, #484]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dd2:	d12b      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006dd4:	4b75      	ldr	r3, [pc, #468]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006de0:	d124      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006de2:	4b72      	ldr	r3, [pc, #456]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	0a1b      	lsrs	r3, r3, #8
 8006de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dec:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	fb03 f202 	mul.w	r2, r3, r2
 8006df6:	4b6d      	ldr	r3, [pc, #436]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	091b      	lsrs	r3, r3, #4
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	3301      	adds	r3, #1
 8006e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e06:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006e08:	4b68      	ldr	r3, [pc, #416]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	0d5b      	lsrs	r3, r3, #21
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	3301      	adds	r3, #1
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1c:	61fb      	str	r3, [r7, #28]
          break;
 8006e1e:	e005      	b.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8006e20:	bf00      	nop
 8006e22:	e359      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006e24:	bf00      	nop
 8006e26:	e357      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006e28:	bf00      	nop
 8006e2a:	e355      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006e2c:	bf00      	nop
        break;
 8006e2e:	e353      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006e30:	4b5e      	ldr	r3, [pc, #376]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	613b      	str	r3, [r7, #16]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d827      	bhi.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8006e42:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8006e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e48:	08006e59 	.word	0x08006e59
 8006e4c:	08006e61 	.word	0x08006e61
 8006e50:	08006e69 	.word	0x08006e69
 8006e54:	08006e7d 	.word	0x08006e7d
          frequency = HAL_RCC_GetPCLK2Freq();
 8006e58:	f7ff fa7a 	bl	8006350 <HAL_RCC_GetPCLK2Freq>
 8006e5c:	61f8      	str	r0, [r7, #28]
          break;
 8006e5e:	e01d      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e60:	f7ff f9c8 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 8006e64:	61f8      	str	r0, [r7, #28]
          break;
 8006e66:	e019      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e68:	4b50      	ldr	r3, [pc, #320]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e74:	d10f      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8006e76:	4b4f      	ldr	r3, [pc, #316]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006e78:	61fb      	str	r3, [r7, #28]
          break;
 8006e7a:	e00c      	b.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e7c:	4b4b      	ldr	r3, [pc, #300]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d107      	bne.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8006e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e8e:	61fb      	str	r3, [r7, #28]
          break;
 8006e90:	e003      	b.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8006e92:	bf00      	nop
 8006e94:	e320      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006e96:	bf00      	nop
 8006e98:	e31e      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006e9a:	bf00      	nop
        break;
 8006e9c:	e31c      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006e9e:	4b43      	ldr	r3, [pc, #268]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea4:	f003 030c 	and.w	r3, r3, #12
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	2b0c      	cmp	r3, #12
 8006eae:	d83a      	bhi.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006eb0:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8006eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb6:	bf00      	nop
 8006eb8:	08006eed 	.word	0x08006eed
 8006ebc:	08006f27 	.word	0x08006f27
 8006ec0:	08006f27 	.word	0x08006f27
 8006ec4:	08006f27 	.word	0x08006f27
 8006ec8:	08006ef5 	.word	0x08006ef5
 8006ecc:	08006f27 	.word	0x08006f27
 8006ed0:	08006f27 	.word	0x08006f27
 8006ed4:	08006f27 	.word	0x08006f27
 8006ed8:	08006efd 	.word	0x08006efd
 8006edc:	08006f27 	.word	0x08006f27
 8006ee0:	08006f27 	.word	0x08006f27
 8006ee4:	08006f27 	.word	0x08006f27
 8006ee8:	08006f11 	.word	0x08006f11
          frequency = HAL_RCC_GetPCLK1Freq();
 8006eec:	f7ff fa1a 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 8006ef0:	61f8      	str	r0, [r7, #28]
          break;
 8006ef2:	e01d      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ef4:	f7ff f97e 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 8006ef8:	61f8      	str	r0, [r7, #28]
          break;
 8006efa:	e019      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006efc:	4b2b      	ldr	r3, [pc, #172]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f08:	d10f      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8006f0a:	4b2a      	ldr	r3, [pc, #168]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006f0c:	61fb      	str	r3, [r7, #28]
          break;
 8006f0e:	e00c      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f10:	4b26      	ldr	r3, [pc, #152]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d107      	bne.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8006f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f22:	61fb      	str	r3, [r7, #28]
          break;
 8006f24:	e003      	b.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8006f26:	bf00      	nop
 8006f28:	e2d6      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006f2a:	bf00      	nop
 8006f2c:	e2d4      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006f2e:	bf00      	nop
        break;
 8006f30:	e2d2      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006f32:	4b1e      	ldr	r3, [pc, #120]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f3c:	613b      	str	r3, [r7, #16]
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	2b30      	cmp	r3, #48	; 0x30
 8006f42:	d021      	beq.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	2b30      	cmp	r3, #48	; 0x30
 8006f48:	d829      	bhi.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2b20      	cmp	r3, #32
 8006f4e:	d011      	beq.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d823      	bhi.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b10      	cmp	r3, #16
 8006f60:	d004      	beq.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8006f62:	e01c      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f64:	f7ff f9de 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 8006f68:	61f8      	str	r0, [r7, #28]
          break;
 8006f6a:	e01d      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f6c:	f7ff f942 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 8006f70:	61f8      	str	r0, [r7, #28]
          break;
 8006f72:	e019      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f74:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f80:	d10f      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8006f82:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006f84:	61fb      	str	r3, [r7, #28]
          break;
 8006f86:	e00c      	b.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f88:	4b08      	ldr	r3, [pc, #32]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d107      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8006f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f9a:	61fb      	str	r3, [r7, #28]
          break;
 8006f9c:	e003      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8006f9e:	bf00      	nop
 8006fa0:	e29a      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006fa2:	bf00      	nop
 8006fa4:	e298      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006fa6:	bf00      	nop
        break;
 8006fa8:	e296      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006faa:	bf00      	nop
 8006fac:	40021000 	.word	0x40021000
 8006fb0:	0800d11c 	.word	0x0800d11c
 8006fb4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006fb8:	4b9b      	ldr	r3, [pc, #620]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fc2:	613b      	str	r3, [r7, #16]
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	2bc0      	cmp	r3, #192	; 0xc0
 8006fc8:	d021      	beq.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	2bc0      	cmp	r3, #192	; 0xc0
 8006fce:	d829      	bhi.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	2b80      	cmp	r3, #128	; 0x80
 8006fd4:	d011      	beq.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b80      	cmp	r3, #128	; 0x80
 8006fda:	d823      	bhi.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d004      	beq.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8006fe8:	e01c      	b.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fea:	f7ff f99b 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 8006fee:	61f8      	str	r0, [r7, #28]
          break;
 8006ff0:	e01d      	b.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ff2:	f7ff f8ff 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 8006ff6:	61f8      	str	r0, [r7, #28]
          break;
 8006ff8:	e019      	b.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ffa:	4b8b      	ldr	r3, [pc, #556]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007006:	d10f      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8007008:	4b88      	ldr	r3, [pc, #544]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800700a:	61fb      	str	r3, [r7, #28]
          break;
 800700c:	e00c      	b.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800700e:	4b86      	ldr	r3, [pc, #536]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b02      	cmp	r3, #2
 800701a:	d107      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 800701c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007020:	61fb      	str	r3, [r7, #28]
          break;
 8007022:	e003      	b.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8007024:	bf00      	nop
 8007026:	e257      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007028:	bf00      	nop
 800702a:	e255      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800702c:	bf00      	nop
        break;
 800702e:	e253      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007030:	4b7d      	ldr	r3, [pc, #500]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007042:	d025      	beq.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800704a:	d82c      	bhi.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007052:	d013      	beq.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800705a:	d824      	bhi.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d004      	beq.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007068:	d004      	beq.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800706a:	e01c      	b.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 800706c:	f7ff f95a 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 8007070:	61f8      	str	r0, [r7, #28]
          break;
 8007072:	e01d      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007074:	f7ff f8be 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 8007078:	61f8      	str	r0, [r7, #28]
          break;
 800707a:	e019      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800707c:	4b6a      	ldr	r3, [pc, #424]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007088:	d10f      	bne.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800708a:	4b68      	ldr	r3, [pc, #416]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800708c:	61fb      	str	r3, [r7, #28]
          break;
 800708e:	e00c      	b.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007090:	4b65      	ldr	r3, [pc, #404]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b02      	cmp	r3, #2
 800709c:	d107      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800709e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070a2:	61fb      	str	r3, [r7, #28]
          break;
 80070a4:	e003      	b.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 80070a6:	bf00      	nop
 80070a8:	e216      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80070aa:	bf00      	nop
 80070ac:	e214      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80070ae:	bf00      	nop
        break;
 80070b0:	e212      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80070b2:	4b5d      	ldr	r3, [pc, #372]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80070b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070bc:	613b      	str	r3, [r7, #16]
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070c4:	d025      	beq.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070cc:	d82c      	bhi.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070d4:	d013      	beq.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070dc:	d824      	bhi.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d004      	beq.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ea:	d004      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80070ec:	e01c      	b.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 80070ee:	f7ff f919 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 80070f2:	61f8      	str	r0, [r7, #28]
          break;
 80070f4:	e01d      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80070f6:	f7ff f87d 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 80070fa:	61f8      	str	r0, [r7, #28]
          break;
 80070fc:	e019      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070fe:	4b4a      	ldr	r3, [pc, #296]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710a:	d10f      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 800710c:	4b47      	ldr	r3, [pc, #284]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800710e:	61fb      	str	r3, [r7, #28]
          break;
 8007110:	e00c      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007112:	4b45      	ldr	r3, [pc, #276]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b02      	cmp	r3, #2
 800711e:	d107      	bne.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8007120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007124:	61fb      	str	r3, [r7, #28]
          break;
 8007126:	e003      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8007128:	bf00      	nop
 800712a:	e1d5      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800712c:	bf00      	nop
 800712e:	e1d3      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007130:	bf00      	nop
        break;
 8007132:	e1d1      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007134:	4b3c      	ldr	r3, [pc, #240]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800713e:	613b      	str	r3, [r7, #16]
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007146:	d00c      	beq.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800714e:	d864      	bhi.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007156:	d008      	beq.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800715e:	d030      	beq.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8007160:	e05b      	b.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8007162:	f7ff f847 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 8007166:	61f8      	str	r0, [r7, #28]
          break;
 8007168:	e05c      	b.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800716a:	4b2f      	ldr	r3, [pc, #188]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007176:	d152      	bne.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8007178:	4b2b      	ldr	r3, [pc, #172]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d04c      	beq.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007184:	4b28      	ldr	r3, [pc, #160]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	0a1b      	lsrs	r3, r3, #8
 800718a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800718e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	fb03 f202 	mul.w	r2, r3, r2
 8007198:	4b23      	ldr	r3, [pc, #140]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	091b      	lsrs	r3, r3, #4
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	3301      	adds	r3, #1
 80071a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80071aa:	4b1f      	ldr	r3, [pc, #124]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	0e5b      	lsrs	r3, r3, #25
 80071b0:	f003 0303 	and.w	r3, r3, #3
 80071b4:	3301      	adds	r3, #1
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80071be:	61fb      	str	r3, [r7, #28]
          break;
 80071c0:	e02d      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80071c2:	4b19      	ldr	r3, [pc, #100]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071ce:	d128      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80071d0:	4b15      	ldr	r3, [pc, #84]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d022      	beq.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80071dc:	4b12      	ldr	r3, [pc, #72]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	0a1b      	lsrs	r3, r3, #8
 80071e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	fb03 f202 	mul.w	r2, r3, r2
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	091b      	lsrs	r3, r3, #4
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	3301      	adds	r3, #1
 80071fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007200:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8007202:	4b09      	ldr	r3, [pc, #36]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	0e5b      	lsrs	r3, r3, #25
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	3301      	adds	r3, #1
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	fbb2 f3f3 	udiv	r3, r2, r3
 8007216:	61fb      	str	r3, [r7, #28]
          break;
 8007218:	e003      	b.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800721a:	bf00      	nop
 800721c:	e15c      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800721e:	bf00      	nop
 8007220:	e15a      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007222:	bf00      	nop
        break;
 8007224:	e158      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8007226:	bf00      	nop
 8007228:	40021000 	.word	0x40021000
 800722c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007230:	4b9d      	ldr	r3, [pc, #628]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800723a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d103      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007242:	f7ff f885 	bl	8006350 <HAL_RCC_GetPCLK2Freq>
 8007246:	61f8      	str	r0, [r7, #28]
        break;
 8007248:	e146      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800724a:	f7fe ffd3 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 800724e:	61f8      	str	r0, [r7, #28]
        break;
 8007250:	e142      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007252:	4b95      	ldr	r3, [pc, #596]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007258:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007264:	d013      	beq.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800726c:	d819      	bhi.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d004      	beq.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800727a:	d004      	beq.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 800727c:	e011      	b.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800727e:	f7ff f851 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 8007282:	61f8      	str	r0, [r7, #28]
          break;
 8007284:	e010      	b.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8007286:	f7fe ffb5 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 800728a:	61f8      	str	r0, [r7, #28]
          break;
 800728c:	e00c      	b.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800728e:	4b86      	ldr	r3, [pc, #536]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800729a:	d104      	bne.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800729c:	4b83      	ldr	r3, [pc, #524]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800729e:	61fb      	str	r3, [r7, #28]
          break;
 80072a0:	e001      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80072a2:	bf00      	nop
 80072a4:	e118      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80072a6:	bf00      	nop
        break;
 80072a8:	e116      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80072aa:	4b7f      	ldr	r3, [pc, #508]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80072ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80072b4:	613b      	str	r3, [r7, #16]
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072bc:	d013      	beq.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072c4:	d819      	bhi.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d004      	beq.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072d2:	d004      	beq.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 80072d4:	e011      	b.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 80072d6:	f7ff f825 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 80072da:	61f8      	str	r0, [r7, #28]
          break;
 80072dc:	e010      	b.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80072de:	f7fe ff89 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 80072e2:	61f8      	str	r0, [r7, #28]
          break;
 80072e4:	e00c      	b.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072e6:	4b70      	ldr	r3, [pc, #448]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f2:	d104      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80072f4:	4b6d      	ldr	r3, [pc, #436]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80072f6:	61fb      	str	r3, [r7, #28]
          break;
 80072f8:	e001      	b.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80072fa:	bf00      	nop
 80072fc:	e0ec      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80072fe:	bf00      	nop
        break;
 8007300:	e0ea      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007302:	4b69      	ldr	r3, [pc, #420]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800730c:	613b      	str	r3, [r7, #16]
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007314:	d013      	beq.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800731c:	d819      	bhi.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d004      	beq.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800732a:	d004      	beq.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 800732c:	e011      	b.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800732e:	f7fe fff9 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 8007332:	61f8      	str	r0, [r7, #28]
          break;
 8007334:	e010      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8007336:	f7fe ff5d 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 800733a:	61f8      	str	r0, [r7, #28]
          break;
 800733c:	e00c      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800733e:	4b5a      	ldr	r3, [pc, #360]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734a:	d104      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 800734c:	4b57      	ldr	r3, [pc, #348]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800734e:	61fb      	str	r3, [r7, #28]
          break;
 8007350:	e001      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8007352:	bf00      	nop
 8007354:	e0c0      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007356:	bf00      	nop
        break;
 8007358:	e0be      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800735a:	4b53      	ldr	r3, [pc, #332]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007360:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007364:	613b      	str	r3, [r7, #16]
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800736c:	d02c      	beq.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007374:	d833      	bhi.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800737c:	d01a      	beq.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007384:	d82b      	bhi.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d004      	beq.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007392:	d004      	beq.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8007394:	e023      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007396:	f7fe ffc5 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 800739a:	61f8      	str	r0, [r7, #28]
          break;
 800739c:	e026      	b.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800739e:	4b42      	ldr	r3, [pc, #264]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80073a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d11a      	bne.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80073ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80073b0:	61fb      	str	r3, [r7, #28]
          break;
 80073b2:	e016      	b.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073b4:	4b3c      	ldr	r3, [pc, #240]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c0:	d111      	bne.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80073c2:	4b3a      	ldr	r3, [pc, #232]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80073c4:	61fb      	str	r3, [r7, #28]
          break;
 80073c6:	e00e      	b.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80073c8:	4b37      	ldr	r3, [pc, #220]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80073ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d109      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80073d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073da:	61fb      	str	r3, [r7, #28]
          break;
 80073dc:	e005      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80073de:	bf00      	nop
 80073e0:	e07a      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80073e2:	bf00      	nop
 80073e4:	e078      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80073e6:	bf00      	nop
 80073e8:	e076      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80073ea:	bf00      	nop
        break;
 80073ec:	e074      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80073ee:	4b2e      	ldr	r3, [pc, #184]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80073f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80073f8:	613b      	str	r3, [r7, #16]
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007400:	d02c      	beq.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007408:	d833      	bhi.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007410:	d01a      	beq.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007418:	d82b      	bhi.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d004      	beq.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007426:	d004      	beq.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8007428:	e023      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 800742a:	f7fe ff7b 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 800742e:	61f8      	str	r0, [r7, #28]
          break;
 8007430:	e026      	b.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007432:	4b1d      	ldr	r3, [pc, #116]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b02      	cmp	r3, #2
 800743e:	d11a      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8007440:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007444:	61fb      	str	r3, [r7, #28]
          break;
 8007446:	e016      	b.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007448:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007454:	d111      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8007456:	4b15      	ldr	r3, [pc, #84]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8007458:	61fb      	str	r3, [r7, #28]
          break;
 800745a:	e00e      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800745c:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800745e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b02      	cmp	r3, #2
 8007468:	d109      	bne.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800746a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800746e:	61fb      	str	r3, [r7, #28]
          break;
 8007470:	e005      	b.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8007472:	bf00      	nop
 8007474:	e030      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007476:	bf00      	nop
 8007478:	e02e      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800747a:	bf00      	nop
 800747c:	e02c      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800747e:	bf00      	nop
        break;
 8007480:	e02a      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8007482:	4b09      	ldr	r3, [pc, #36]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007488:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d004      	beq.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800749a:	d009      	beq.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 800749c:	e012      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800749e:	f7fe ff41 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 80074a2:	61f8      	str	r0, [r7, #28]
          break;
 80074a4:	e00e      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80074a6:	bf00      	nop
 80074a8:	40021000 	.word	0x40021000
 80074ac:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074b0:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074bc:	d101      	bne.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80074be:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80074c0:	61fb      	str	r3, [r7, #28]
          break;
 80074c2:	bf00      	nop
        break;
 80074c4:	e008      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80074c6:	bf00      	nop
 80074c8:	e006      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80074ca:	bf00      	nop
 80074cc:	e004      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80074ce:	bf00      	nop
 80074d0:	e002      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80074d2:	bf00      	nop
 80074d4:	e000      	b.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80074d6:	bf00      	nop
    }
  }

  return(frequency);
 80074d8:	69fb      	ldr	r3, [r7, #28]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3720      	adds	r7, #32
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	40021000 	.word	0x40021000
 80074e8:	00f42400 	.word	0x00f42400

080074ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80074f0:	4b05      	ldr	r3, [pc, #20]	; (8007508 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a04      	ldr	r2, [pc, #16]	; (8007508 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80074f6:	f043 0304 	orr.w	r3, r3, #4
 80074fa:	6013      	str	r3, [r2, #0]
}
 80074fc:	bf00      	nop
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40021000 	.word	0x40021000

0800750c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800751a:	4b75      	ldr	r3, [pc, #468]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d018      	beq.n	8007558 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007526:	4b72      	ldr	r3, [pc, #456]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f003 0203 	and.w	r2, r3, #3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d10d      	bne.n	8007552 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
       ||
 800753a:	2b00      	cmp	r3, #0
 800753c:	d009      	beq.n	8007552 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800753e:	4b6c      	ldr	r3, [pc, #432]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	091b      	lsrs	r3, r3, #4
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
       ||
 800754e:	429a      	cmp	r2, r3
 8007550:	d047      	beq.n	80075e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	73fb      	strb	r3, [r7, #15]
 8007556:	e044      	b.n	80075e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b03      	cmp	r3, #3
 800755e:	d018      	beq.n	8007592 <RCCEx_PLLSAI1_Config+0x86>
 8007560:	2b03      	cmp	r3, #3
 8007562:	d825      	bhi.n	80075b0 <RCCEx_PLLSAI1_Config+0xa4>
 8007564:	2b01      	cmp	r3, #1
 8007566:	d002      	beq.n	800756e <RCCEx_PLLSAI1_Config+0x62>
 8007568:	2b02      	cmp	r3, #2
 800756a:	d009      	beq.n	8007580 <RCCEx_PLLSAI1_Config+0x74>
 800756c:	e020      	b.n	80075b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800756e:	4b60      	ldr	r3, [pc, #384]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d11d      	bne.n	80075b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800757e:	e01a      	b.n	80075b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007580:	4b5b      	ldr	r3, [pc, #364]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007588:	2b00      	cmp	r3, #0
 800758a:	d116      	bne.n	80075ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007590:	e013      	b.n	80075ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007592:	4b57      	ldr	r3, [pc, #348]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10f      	bne.n	80075be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800759e:	4b54      	ldr	r3, [pc, #336]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075ae:	e006      	b.n	80075be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	73fb      	strb	r3, [r7, #15]
      break;
 80075b4:	e004      	b.n	80075c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075b6:	bf00      	nop
 80075b8:	e002      	b.n	80075c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075ba:	bf00      	nop
 80075bc:	e000      	b.n	80075c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075be:	bf00      	nop
    }

    if(status == HAL_OK)
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10d      	bne.n	80075e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80075c6:	4b4a      	ldr	r3, [pc, #296]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6819      	ldr	r1, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	011b      	lsls	r3, r3, #4
 80075da:	430b      	orrs	r3, r1
 80075dc:	4944      	ldr	r1, [pc, #272]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d17d      	bne.n	80076e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80075e8:	4b41      	ldr	r3, [pc, #260]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a40      	ldr	r2, [pc, #256]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f4:	f7fa fd08 	bl	8002008 <HAL_GetTick>
 80075f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80075fa:	e009      	b.n	8007610 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075fc:	f7fa fd04 	bl	8002008 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d902      	bls.n	8007610 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	73fb      	strb	r3, [r7, #15]
        break;
 800760e:	e005      	b.n	800761c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007610:	4b37      	ldr	r3, [pc, #220]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1ef      	bne.n	80075fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d160      	bne.n	80076e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d111      	bne.n	800764c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007628:	4b31      	ldr	r3, [pc, #196]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6892      	ldr	r2, [r2, #8]
 8007638:	0211      	lsls	r1, r2, #8
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	68d2      	ldr	r2, [r2, #12]
 800763e:	0912      	lsrs	r2, r2, #4
 8007640:	0452      	lsls	r2, r2, #17
 8007642:	430a      	orrs	r2, r1
 8007644:	492a      	ldr	r1, [pc, #168]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007646:	4313      	orrs	r3, r2
 8007648:	610b      	str	r3, [r1, #16]
 800764a:	e027      	b.n	800769c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d112      	bne.n	8007678 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007652:	4b27      	ldr	r3, [pc, #156]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800765a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6892      	ldr	r2, [r2, #8]
 8007662:	0211      	lsls	r1, r2, #8
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6912      	ldr	r2, [r2, #16]
 8007668:	0852      	lsrs	r2, r2, #1
 800766a:	3a01      	subs	r2, #1
 800766c:	0552      	lsls	r2, r2, #21
 800766e:	430a      	orrs	r2, r1
 8007670:	491f      	ldr	r1, [pc, #124]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007672:	4313      	orrs	r3, r2
 8007674:	610b      	str	r3, [r1, #16]
 8007676:	e011      	b.n	800769c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007678:	4b1d      	ldr	r3, [pc, #116]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007680:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6892      	ldr	r2, [r2, #8]
 8007688:	0211      	lsls	r1, r2, #8
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	6952      	ldr	r2, [r2, #20]
 800768e:	0852      	lsrs	r2, r2, #1
 8007690:	3a01      	subs	r2, #1
 8007692:	0652      	lsls	r2, r2, #25
 8007694:	430a      	orrs	r2, r1
 8007696:	4916      	ldr	r1, [pc, #88]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007698:	4313      	orrs	r3, r2
 800769a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800769c:	4b14      	ldr	r3, [pc, #80]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a13      	ldr	r2, [pc, #76]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a8:	f7fa fcae 	bl	8002008 <HAL_GetTick>
 80076ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80076ae:	e009      	b.n	80076c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076b0:	f7fa fcaa 	bl	8002008 <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d902      	bls.n	80076c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	73fb      	strb	r3, [r7, #15]
          break;
 80076c2:	e005      	b.n	80076d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80076c4:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0ef      	beq.n	80076b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d106      	bne.n	80076e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80076d6:	4b06      	ldr	r3, [pc, #24]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076d8:	691a      	ldr	r2, [r3, #16]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	4904      	ldr	r1, [pc, #16]	; (80076f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	40021000 	.word	0x40021000

080076f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007702:	4b6a      	ldr	r3, [pc, #424]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d018      	beq.n	8007740 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800770e:	4b67      	ldr	r3, [pc, #412]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0203 	and.w	r2, r3, #3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	d10d      	bne.n	800773a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
       ||
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007726:	4b61      	ldr	r3, [pc, #388]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	091b      	lsrs	r3, r3, #4
 800772c:	f003 0307 	and.w	r3, r3, #7
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
       ||
 8007736:	429a      	cmp	r2, r3
 8007738:	d047      	beq.n	80077ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	73fb      	strb	r3, [r7, #15]
 800773e:	e044      	b.n	80077ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b03      	cmp	r3, #3
 8007746:	d018      	beq.n	800777a <RCCEx_PLLSAI2_Config+0x86>
 8007748:	2b03      	cmp	r3, #3
 800774a:	d825      	bhi.n	8007798 <RCCEx_PLLSAI2_Config+0xa4>
 800774c:	2b01      	cmp	r3, #1
 800774e:	d002      	beq.n	8007756 <RCCEx_PLLSAI2_Config+0x62>
 8007750:	2b02      	cmp	r3, #2
 8007752:	d009      	beq.n	8007768 <RCCEx_PLLSAI2_Config+0x74>
 8007754:	e020      	b.n	8007798 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007756:	4b55      	ldr	r3, [pc, #340]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d11d      	bne.n	800779e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007766:	e01a      	b.n	800779e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007768:	4b50      	ldr	r3, [pc, #320]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007770:	2b00      	cmp	r3, #0
 8007772:	d116      	bne.n	80077a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007778:	e013      	b.n	80077a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800777a:	4b4c      	ldr	r3, [pc, #304]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10f      	bne.n	80077a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007786:	4b49      	ldr	r3, [pc, #292]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d109      	bne.n	80077a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007796:	e006      	b.n	80077a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	73fb      	strb	r3, [r7, #15]
      break;
 800779c:	e004      	b.n	80077a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800779e:	bf00      	nop
 80077a0:	e002      	b.n	80077a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077a2:	bf00      	nop
 80077a4:	e000      	b.n	80077a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10d      	bne.n	80077ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80077ae:	4b3f      	ldr	r3, [pc, #252]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6819      	ldr	r1, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	3b01      	subs	r3, #1
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	430b      	orrs	r3, r1
 80077c4:	4939      	ldr	r1, [pc, #228]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d167      	bne.n	80078a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80077d0:	4b36      	ldr	r3, [pc, #216]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a35      	ldr	r2, [pc, #212]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80077d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077dc:	f7fa fc14 	bl	8002008 <HAL_GetTick>
 80077e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80077e2:	e009      	b.n	80077f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80077e4:	f7fa fc10 	bl	8002008 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d902      	bls.n	80077f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	73fb      	strb	r3, [r7, #15]
        break;
 80077f6:	e005      	b.n	8007804 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80077f8:	4b2c      	ldr	r3, [pc, #176]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1ef      	bne.n	80077e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d14a      	bne.n	80078a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d111      	bne.n	8007834 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007810:	4b26      	ldr	r3, [pc, #152]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6892      	ldr	r2, [r2, #8]
 8007820:	0211      	lsls	r1, r2, #8
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	68d2      	ldr	r2, [r2, #12]
 8007826:	0912      	lsrs	r2, r2, #4
 8007828:	0452      	lsls	r2, r2, #17
 800782a:	430a      	orrs	r2, r1
 800782c:	491f      	ldr	r1, [pc, #124]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800782e:	4313      	orrs	r3, r2
 8007830:	614b      	str	r3, [r1, #20]
 8007832:	e011      	b.n	8007858 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007834:	4b1d      	ldr	r3, [pc, #116]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800783c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6892      	ldr	r2, [r2, #8]
 8007844:	0211      	lsls	r1, r2, #8
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	6912      	ldr	r2, [r2, #16]
 800784a:	0852      	lsrs	r2, r2, #1
 800784c:	3a01      	subs	r2, #1
 800784e:	0652      	lsls	r2, r2, #25
 8007850:	430a      	orrs	r2, r1
 8007852:	4916      	ldr	r1, [pc, #88]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007854:	4313      	orrs	r3, r2
 8007856:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007858:	4b14      	ldr	r3, [pc, #80]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a13      	ldr	r2, [pc, #76]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800785e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007862:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007864:	f7fa fbd0 	bl	8002008 <HAL_GetTick>
 8007868:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800786a:	e009      	b.n	8007880 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800786c:	f7fa fbcc 	bl	8002008 <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	2b02      	cmp	r3, #2
 8007878:	d902      	bls.n	8007880 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	73fb      	strb	r3, [r7, #15]
          break;
 800787e:	e005      	b.n	800788c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007880:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d0ef      	beq.n	800786c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d106      	bne.n	80078a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007892:	4b06      	ldr	r3, [pc, #24]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8007894:	695a      	ldr	r2, [r3, #20]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	4904      	ldr	r1, [pc, #16]	; (80078ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800789c:	4313      	orrs	r3, r2
 800789e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	40021000 	.word	0x40021000

080078b0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b089      	sub	sp, #36	; 0x24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078cc:	d10c      	bne.n	80078e8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80078ce:	4b6e      	ldr	r3, [pc, #440]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80078d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80078d8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078e0:	d112      	bne.n	8007908 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80078e2:	4b6a      	ldr	r3, [pc, #424]	; (8007a8c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80078e4:	61fb      	str	r3, [r7, #28]
 80078e6:	e00f      	b.n	8007908 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ee:	d10b      	bne.n	8007908 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80078f0:	4b65      	ldr	r3, [pc, #404]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80078f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80078fa:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007902:	d101      	bne.n	8007908 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007904:	4b61      	ldr	r3, [pc, #388]	; (8007a8c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8007906:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f040 80b4 	bne.w	8007a78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800791a:	d003      	beq.n	8007924 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007922:	d135      	bne.n	8007990 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007924:	4b58      	ldr	r3, [pc, #352]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800792c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007930:	f040 80a1 	bne.w	8007a76 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8007934:	4b54      	ldr	r3, [pc, #336]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 809a 	beq.w	8007a76 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007942:	4b51      	ldr	r3, [pc, #324]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	091b      	lsrs	r3, r3, #4
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	3301      	adds	r3, #1
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	fbb2 f3f3 	udiv	r3, r2, r3
 8007954:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007956:	4b4c      	ldr	r3, [pc, #304]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	0a1b      	lsrs	r3, r3, #8
 800795c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007960:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10a      	bne.n	800797e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007968:	4b47      	ldr	r3, [pc, #284]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8007974:	2311      	movs	r3, #17
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	e001      	b.n	800797e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800797a:	2307      	movs	r3, #7
 800797c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	fb03 f202 	mul.w	r2, r3, r2
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	fbb2 f3f3 	udiv	r3, r2, r3
 800798c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800798e:	e072      	b.n	8007a76 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d133      	bne.n	80079fe <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8007996:	4b3c      	ldr	r3, [pc, #240]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800799e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079a2:	d169      	bne.n	8007a78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80079a4:	4b38      	ldr	r3, [pc, #224]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d063      	beq.n	8007a78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80079b0:	4b35      	ldr	r3, [pc, #212]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	091b      	lsrs	r3, r3, #4
 80079b6:	f003 0307 	and.w	r3, r3, #7
 80079ba:	3301      	adds	r3, #1
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80079c4:	4b30      	ldr	r3, [pc, #192]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	0a1b      	lsrs	r3, r3, #8
 80079ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ce:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10a      	bne.n	80079ec <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80079d6:	4b2c      	ldr	r3, [pc, #176]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80079e2:	2311      	movs	r3, #17
 80079e4:	617b      	str	r3, [r7, #20]
 80079e6:	e001      	b.n	80079ec <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80079e8:	2307      	movs	r3, #7
 80079ea:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	fb03 f202 	mul.w	r2, r3, r2
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079fa:	61fb      	str	r3, [r7, #28]
 80079fc:	e03c      	b.n	8007a78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a04:	d003      	beq.n	8007a0e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a0c:	d134      	bne.n	8007a78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007a0e:	4b1e      	ldr	r3, [pc, #120]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a1a:	d12d      	bne.n	8007a78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8007a1c:	4b1a      	ldr	r3, [pc, #104]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d027      	beq.n	8007a78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007a28:	4b17      	ldr	r3, [pc, #92]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	091b      	lsrs	r3, r3, #4
 8007a2e:	f003 0307 	and.w	r3, r3, #7
 8007a32:	3301      	adds	r3, #1
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007a3c:	4b12      	ldr	r3, [pc, #72]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	0a1b      	lsrs	r3, r3, #8
 8007a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a46:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007a4e:	4b0e      	ldr	r3, [pc, #56]	; (8007a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8007a5a:	2311      	movs	r3, #17
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e001      	b.n	8007a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8007a60:	2307      	movs	r3, #7
 8007a62:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	fb03 f202 	mul.w	r2, r3, r2
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a72:	61fb      	str	r3, [r7, #28]
 8007a74:	e000      	b.n	8007a78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007a76:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007a78:	69fb      	ldr	r3, [r7, #28]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3724      	adds	r7, #36	; 0x24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40021000 	.word	0x40021000
 8007a8c:	001fff68 	.word	0x001fff68

08007a90 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e155      	b.n	8007d4e <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7f9 fe86 	bl	80017c8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f959 	bl	8007d74 <SAI_Disable>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e140      	b.n	8007d4e <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d00c      	beq.n	8007af6 <HAL_SAI_Init+0x66>
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d80d      	bhi.n	8007afc <HAL_SAI_Init+0x6c>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_SAI_Init+0x5a>
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d003      	beq.n	8007af0 <HAL_SAI_Init+0x60>
 8007ae8:	e008      	b.n	8007afc <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	61fb      	str	r3, [r7, #28]
      break;
 8007aee:	e008      	b.n	8007b02 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007af0:	2310      	movs	r3, #16
 8007af2:	61fb      	str	r3, [r7, #28]
      break;
 8007af4:	e005      	b.n	8007b02 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007af6:	2320      	movs	r3, #32
 8007af8:	61fb      	str	r3, [r7, #28]
      break;
 8007afa:	e002      	b.n	8007b02 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8007afc:	2300      	movs	r3, #0
 8007afe:	61fb      	str	r3, [r7, #28]
      break;
 8007b00:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d81d      	bhi.n	8007b46 <HAL_SAI_Init+0xb6>
 8007b0a:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <HAL_SAI_Init+0x80>)
 8007b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b10:	08007b21 	.word	0x08007b21
 8007b14:	08007b27 	.word	0x08007b27
 8007b18:	08007b2f 	.word	0x08007b2f
 8007b1c:	08007b37 	.word	0x08007b37
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	617b      	str	r3, [r7, #20]
      break;
 8007b24:	e012      	b.n	8007b4c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b2a:	617b      	str	r3, [r7, #20]
      break;
 8007b2c:	e00e      	b.n	8007b4c <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b32:	617b      	str	r3, [r7, #20]
      break;
 8007b34:	e00a      	b.n	8007b4c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b3a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	f043 0301 	orr.w	r3, r3, #1
 8007b42:	61fb      	str	r3, [r7, #28]
      break;
 8007b44:	e002      	b.n	8007b4c <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	617b      	str	r3, [r7, #20]
      break;
 8007b4a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a81      	ldr	r2, [pc, #516]	; (8007d58 <HAL_SAI_Init+0x2c8>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d004      	beq.n	8007b60 <HAL_SAI_Init+0xd0>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a80      	ldr	r2, [pc, #512]	; (8007d5c <HAL_SAI_Init+0x2cc>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d103      	bne.n	8007b68 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8007b60:	4a7f      	ldr	r2, [pc, #508]	; (8007d60 <HAL_SAI_Init+0x2d0>)
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	6013      	str	r3, [r2, #0]
 8007b66:	e002      	b.n	8007b6e <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007b68:	4a7e      	ldr	r2, [pc, #504]	; (8007d64 <HAL_SAI_Init+0x2d4>)
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d041      	beq.n	8007bfa <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a77      	ldr	r2, [pc, #476]	; (8007d58 <HAL_SAI_Init+0x2c8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d004      	beq.n	8007b8a <HAL_SAI_Init+0xfa>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a75      	ldr	r2, [pc, #468]	; (8007d5c <HAL_SAI_Init+0x2cc>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d105      	bne.n	8007b96 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007b8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007b8e:	f7fe ff3f 	bl	8006a10 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b92:	6138      	str	r0, [r7, #16]
 8007b94:	e004      	b.n	8007ba0 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007b96:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007b9a:	f7fe ff39 	bl	8006a10 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b9e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	461a      	mov	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	025b      	lsls	r3, r3, #9
 8007bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb6:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	4a6b      	ldr	r2, [pc, #428]	; (8007d68 <HAL_SAI_Init+0x2d8>)
 8007bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc0:	08da      	lsrs	r2, r3, #3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007bc6:	68f9      	ldr	r1, [r7, #12]
 8007bc8:	4b67      	ldr	r3, [pc, #412]	; (8007d68 <HAL_SAI_Init+0x2d8>)
 8007bca:	fba3 2301 	umull	r2, r3, r3, r1
 8007bce:	08da      	lsrs	r2, r3, #3
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	005b      	lsls	r3, r3, #1
 8007bd8:	1aca      	subs	r2, r1, r3
 8007bda:	2a08      	cmp	r2, #8
 8007bdc:	d904      	bls.n	8007be8 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d104      	bne.n	8007bfa <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	085a      	lsrs	r2, r3, #1
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_SAI_Init+0x17a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d109      	bne.n	8007c1e <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d101      	bne.n	8007c16 <HAL_SAI_Init+0x186>
 8007c12:	2300      	movs	r3, #0
 8007c14:	e001      	b.n	8007c1a <HAL_SAI_Init+0x18a>
 8007c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c1a:	61bb      	str	r3, [r7, #24]
 8007c1c:	e008      	b.n	8007c30 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d102      	bne.n	8007c2c <HAL_SAI_Init+0x19c>
 8007c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c2a:	e000      	b.n	8007c2e <HAL_SAI_Init+0x19e>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6819      	ldr	r1, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4b4c      	ldr	r3, [pc, #304]	; (8007d6c <HAL_SAI_Init+0x2dc>)
 8007c3c:	400b      	ands	r3, r1
 8007c3e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6819      	ldr	r1, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007c54:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8007c68:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007c74:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	051b      	lsls	r3, r3, #20
 8007c7c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6812      	ldr	r2, [r2, #0]
 8007c90:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007c94:	f023 030f 	bic.w	r3, r3, #15
 8007c98:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6859      	ldr	r1, [r3, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	699a      	ldr	r2, [r3, #24]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca8:	431a      	orrs	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6899      	ldr	r1, [r3, #8]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	4b2b      	ldr	r3, [pc, #172]	; (8007d70 <HAL_SAI_Init+0x2e0>)
 8007cc4:	400b      	ands	r3, r1
 8007cc6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6899      	ldr	r1, [r3, #8]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007cd8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8007cde:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8007ce4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cea:	3b01      	subs	r3, #1
 8007cec:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007cee:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68d9      	ldr	r1, [r3, #12]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007d06:	400b      	ands	r3, r1
 8007d08:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68d9      	ldr	r1, [r3, #12]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d18:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d1e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007d20:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d26:	3b01      	subs	r3, #1
 8007d28:	021b      	lsls	r3, r3, #8
 8007d2a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3720      	adds	r7, #32
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	40015404 	.word	0x40015404
 8007d5c:	40015424 	.word	0x40015424
 8007d60:	40015400 	.word	0x40015400
 8007d64:	40015800 	.word	0x40015800
 8007d68:	cccccccd 	.word	0xcccccccd
 8007d6c:	ff05c010 	.word	0xff05c010
 8007d70:	fff88000 	.word	0xfff88000

08007d74 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007d7c:	4b18      	ldr	r3, [pc, #96]	; (8007de0 <SAI_Disable+0x6c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a18      	ldr	r2, [pc, #96]	; (8007de4 <SAI_Disable+0x70>)
 8007d82:	fba2 2303 	umull	r2, r3, r2, r3
 8007d86:	0b1b      	lsrs	r3, r3, #12
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007d9e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	72fb      	strb	r3, [r7, #11]
      break;
 8007dba:	e009      	b.n	8007dd0 <SAI_Disable+0x5c>
    }
    count--;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e7      	bne.n	8007da0 <SAI_Disable+0x2c>

  return status;
 8007dd0:	7afb      	ldrb	r3, [r7, #11]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	20000040 	.word	0x20000040
 8007de4:	95cbec1b 	.word	0x95cbec1b

08007de8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007de8:	b084      	sub	sp, #16
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	f107 001c 	add.w	r0, r7, #28
 8007df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fa40 	bl	800928c <USB_CoreReset>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d106      	bne.n	8007e24 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	639a      	str	r2, [r3, #56]	; 0x38
 8007e22:	e005      	b.n	8007e30 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e3c:	b004      	add	sp, #16
 8007e3e:	4770      	bx	lr

08007e40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d165      	bne.n	8007f20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	4a3e      	ldr	r2, [pc, #248]	; (8007f50 <USB_SetTurnaroundTime+0x110>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d906      	bls.n	8007e6a <USB_SetTurnaroundTime+0x2a>
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4a3d      	ldr	r2, [pc, #244]	; (8007f54 <USB_SetTurnaroundTime+0x114>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d202      	bcs.n	8007e6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007e64:	230f      	movs	r3, #15
 8007e66:	617b      	str	r3, [r7, #20]
 8007e68:	e05c      	b.n	8007f24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	4a39      	ldr	r2, [pc, #228]	; (8007f54 <USB_SetTurnaroundTime+0x114>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d306      	bcc.n	8007e80 <USB_SetTurnaroundTime+0x40>
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	4a38      	ldr	r2, [pc, #224]	; (8007f58 <USB_SetTurnaroundTime+0x118>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d202      	bcs.n	8007e80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007e7a:	230e      	movs	r3, #14
 8007e7c:	617b      	str	r3, [r7, #20]
 8007e7e:	e051      	b.n	8007f24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4a35      	ldr	r2, [pc, #212]	; (8007f58 <USB_SetTurnaroundTime+0x118>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d306      	bcc.n	8007e96 <USB_SetTurnaroundTime+0x56>
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	4a34      	ldr	r2, [pc, #208]	; (8007f5c <USB_SetTurnaroundTime+0x11c>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d202      	bcs.n	8007e96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007e90:	230d      	movs	r3, #13
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	e046      	b.n	8007f24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	4a30      	ldr	r2, [pc, #192]	; (8007f5c <USB_SetTurnaroundTime+0x11c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d306      	bcc.n	8007eac <USB_SetTurnaroundTime+0x6c>
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	4a2f      	ldr	r2, [pc, #188]	; (8007f60 <USB_SetTurnaroundTime+0x120>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d802      	bhi.n	8007eac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007ea6:	230c      	movs	r3, #12
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	e03b      	b.n	8007f24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	4a2c      	ldr	r2, [pc, #176]	; (8007f60 <USB_SetTurnaroundTime+0x120>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d906      	bls.n	8007ec2 <USB_SetTurnaroundTime+0x82>
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	4a2b      	ldr	r2, [pc, #172]	; (8007f64 <USB_SetTurnaroundTime+0x124>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d802      	bhi.n	8007ec2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007ebc:	230b      	movs	r3, #11
 8007ebe:	617b      	str	r3, [r7, #20]
 8007ec0:	e030      	b.n	8007f24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	4a27      	ldr	r2, [pc, #156]	; (8007f64 <USB_SetTurnaroundTime+0x124>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d906      	bls.n	8007ed8 <USB_SetTurnaroundTime+0x98>
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	4a26      	ldr	r2, [pc, #152]	; (8007f68 <USB_SetTurnaroundTime+0x128>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d802      	bhi.n	8007ed8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007ed2:	230a      	movs	r3, #10
 8007ed4:	617b      	str	r3, [r7, #20]
 8007ed6:	e025      	b.n	8007f24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	4a23      	ldr	r2, [pc, #140]	; (8007f68 <USB_SetTurnaroundTime+0x128>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d906      	bls.n	8007eee <USB_SetTurnaroundTime+0xae>
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	4a22      	ldr	r2, [pc, #136]	; (8007f6c <USB_SetTurnaroundTime+0x12c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d202      	bcs.n	8007eee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ee8:	2309      	movs	r3, #9
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	e01a      	b.n	8007f24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	4a1e      	ldr	r2, [pc, #120]	; (8007f6c <USB_SetTurnaroundTime+0x12c>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d306      	bcc.n	8007f04 <USB_SetTurnaroundTime+0xc4>
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	4a1d      	ldr	r2, [pc, #116]	; (8007f70 <USB_SetTurnaroundTime+0x130>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d802      	bhi.n	8007f04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007efe:	2308      	movs	r3, #8
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	e00f      	b.n	8007f24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4a1a      	ldr	r2, [pc, #104]	; (8007f70 <USB_SetTurnaroundTime+0x130>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d906      	bls.n	8007f1a <USB_SetTurnaroundTime+0xda>
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	4a19      	ldr	r2, [pc, #100]	; (8007f74 <USB_SetTurnaroundTime+0x134>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d202      	bcs.n	8007f1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f14:	2307      	movs	r3, #7
 8007f16:	617b      	str	r3, [r7, #20]
 8007f18:	e004      	b.n	8007f24 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f1a:	2306      	movs	r3, #6
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	e001      	b.n	8007f24 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f20:	2309      	movs	r3, #9
 8007f22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	68da      	ldr	r2, [r3, #12]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	029b      	lsls	r3, r3, #10
 8007f38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	371c      	adds	r7, #28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	00d8acbf 	.word	0x00d8acbf
 8007f54:	00e4e1c0 	.word	0x00e4e1c0
 8007f58:	00f42400 	.word	0x00f42400
 8007f5c:	01067380 	.word	0x01067380
 8007f60:	011a499f 	.word	0x011a499f
 8007f64:	01312cff 	.word	0x01312cff
 8007f68:	014ca43f 	.word	0x014ca43f
 8007f6c:	016e3600 	.word	0x016e3600
 8007f70:	01a6ab1f 	.word	0x01a6ab1f
 8007f74:	01e84800 	.word	0x01e84800

08007f78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f043 0201 	orr.w	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f023 0201 	bic.w	r2, r3, #1
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d115      	bne.n	800800a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007fea:	2001      	movs	r0, #1
 8007fec:	f7fa f818 	bl	8002020 <HAL_Delay>
      ms++;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 f8cf 	bl	800919a <USB_GetMode>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d01e      	beq.n	8008040 <USB_SetCurrentMode+0x84>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2b31      	cmp	r3, #49	; 0x31
 8008006:	d9f0      	bls.n	8007fea <USB_SetCurrentMode+0x2e>
 8008008:	e01a      	b.n	8008040 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d115      	bne.n	800803c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800801c:	2001      	movs	r0, #1
 800801e:	f7f9 ffff 	bl	8002020 <HAL_Delay>
      ms++;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3301      	adds	r3, #1
 8008026:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 f8b6 	bl	800919a <USB_GetMode>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <USB_SetCurrentMode+0x84>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b31      	cmp	r3, #49	; 0x31
 8008038:	d9f0      	bls.n	800801c <USB_SetCurrentMode+0x60>
 800803a:	e001      	b.n	8008040 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e005      	b.n	800804c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b32      	cmp	r3, #50	; 0x32
 8008044:	d101      	bne.n	800804a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e000      	b.n	800804c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008054:	b084      	sub	sp, #16
 8008056:	b580      	push	{r7, lr}
 8008058:	b086      	sub	sp, #24
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008062:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800806e:	2300      	movs	r3, #0
 8008070:	613b      	str	r3, [r7, #16]
 8008072:	e009      	b.n	8008088 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	3340      	adds	r3, #64	; 0x40
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	2200      	movs	r2, #0
 8008080:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	3301      	adds	r3, #1
 8008086:	613b      	str	r3, [r7, #16]
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	2b0e      	cmp	r3, #14
 800808c:	d9f2      	bls.n	8008074 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800808e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008090:	2b00      	cmp	r3, #0
 8008092:	d11c      	bne.n	80080ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080a2:	f043 0302 	orr.w	r3, r3, #2
 80080a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	e005      	b.n	80080da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080e0:	461a      	mov	r2, r3
 80080e2:	2300      	movs	r3, #0
 80080e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ec:	4619      	mov	r1, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f4:	461a      	mov	r2, r3
 80080f6:	680b      	ldr	r3, [r1, #0]
 80080f8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80080fa:	2103      	movs	r1, #3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f955 	bl	80083ac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008102:	2110      	movs	r1, #16
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f8f1 	bl	80082ec <USB_FlushTxFifo>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f91b 	bl	8008350 <USB_FlushRxFifo>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800812a:	461a      	mov	r2, r3
 800812c:	2300      	movs	r3, #0
 800812e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008136:	461a      	mov	r2, r3
 8008138:	2300      	movs	r3, #0
 800813a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008142:	461a      	mov	r2, r3
 8008144:	2300      	movs	r3, #0
 8008146:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008148:	2300      	movs	r3, #0
 800814a:	613b      	str	r3, [r7, #16]
 800814c:	e043      	b.n	80081d6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008164:	d118      	bne.n	8008198 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10a      	bne.n	8008182 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008178:	461a      	mov	r2, r3
 800817a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	e013      	b.n	80081aa <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818e:	461a      	mov	r2, r3
 8008190:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	e008      	b.n	80081aa <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a4:	461a      	mov	r2, r3
 80081a6:	2300      	movs	r3, #0
 80081a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b6:	461a      	mov	r2, r3
 80081b8:	2300      	movs	r3, #0
 80081ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c8:	461a      	mov	r2, r3
 80081ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	3301      	adds	r3, #1
 80081d4:	613b      	str	r3, [r7, #16]
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d3b7      	bcc.n	800814e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081de:	2300      	movs	r3, #0
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	e043      	b.n	800826c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081fa:	d118      	bne.n	800822e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820e:	461a      	mov	r2, r3
 8008210:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	e013      	b.n	8008240 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008224:	461a      	mov	r2, r3
 8008226:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	e008      	b.n	8008240 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823a:	461a      	mov	r2, r3
 800823c:	2300      	movs	r3, #0
 800823e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800824c:	461a      	mov	r2, r3
 800824e:	2300      	movs	r3, #0
 8008250:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825e:	461a      	mov	r2, r3
 8008260:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008264:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	3301      	adds	r3, #1
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	429a      	cmp	r2, r3
 8008272:	d3b7      	bcc.n	80081e4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008282:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008286:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008294:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	f043 0210 	orr.w	r2, r3, #16
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	699a      	ldr	r2, [r3, #24]
 80082a6:	4b10      	ldr	r3, [pc, #64]	; (80082e8 <USB_DevInit+0x294>)
 80082a8:	4313      	orrs	r3, r2
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	f043 0208 	orr.w	r2, r3, #8
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80082c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d107      	bne.n	80082d6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082ce:	f043 0304 	orr.w	r3, r3, #4
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3718      	adds	r7, #24
 80082dc:	46bd      	mov	sp, r7
 80082de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082e2:	b004      	add	sp, #16
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	803c3800 	.word	0x803c3800

080082ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3301      	adds	r3, #1
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	4a12      	ldr	r2, [pc, #72]	; (800834c <USB_FlushTxFifo+0x60>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d901      	bls.n	800830a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e01a      	b.n	8008340 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	daf3      	bge.n	80082fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	019b      	lsls	r3, r3, #6
 800831a:	f043 0220 	orr.w	r2, r3, #32
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3301      	adds	r3, #1
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	4a08      	ldr	r2, [pc, #32]	; (800834c <USB_FlushTxFifo+0x60>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d901      	bls.n	8008332 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e006      	b.n	8008340 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b20      	cmp	r3, #32
 800833c:	d0f1      	beq.n	8008322 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	00030d40 	.word	0x00030d40

08008350 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3301      	adds	r3, #1
 8008360:	60fb      	str	r3, [r7, #12]
 8008362:	4a11      	ldr	r2, [pc, #68]	; (80083a8 <USB_FlushRxFifo+0x58>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d901      	bls.n	800836c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e017      	b.n	800839c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	daf3      	bge.n	800835c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2210      	movs	r2, #16
 800837c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3301      	adds	r3, #1
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	4a08      	ldr	r2, [pc, #32]	; (80083a8 <USB_FlushRxFifo+0x58>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d901      	bls.n	800838e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e006      	b.n	800839c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f003 0310 	and.w	r3, r3, #16
 8008396:	2b10      	cmp	r3, #16
 8008398:	d0f1      	beq.n	800837e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	00030d40 	.word	0x00030d40

080083ac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	68f9      	ldr	r1, [r7, #12]
 80083c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083cc:	4313      	orrs	r3, r2
 80083ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80083de:	b480      	push	{r7}
 80083e0:	b087      	sub	sp, #28
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f003 0306 	and.w	r3, r3, #6
 80083f6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d002      	beq.n	8008404 <USB_GetDevSpeed+0x26>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b06      	cmp	r3, #6
 8008402:	d102      	bne.n	800840a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008404:	2302      	movs	r3, #2
 8008406:	75fb      	strb	r3, [r7, #23]
 8008408:	e001      	b.n	800840e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800840a:	230f      	movs	r3, #15
 800840c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800840e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008410:	4618      	mov	r0, r3
 8008412:	371c      	adds	r7, #28
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	785b      	ldrb	r3, [r3, #1]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d13a      	bne.n	80084ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843e:	69da      	ldr	r2, [r3, #28]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	f003 030f 	and.w	r3, r3, #15
 8008448:	2101      	movs	r1, #1
 800844a:	fa01 f303 	lsl.w	r3, r1, r3
 800844e:	b29b      	uxth	r3, r3
 8008450:	68f9      	ldr	r1, [r7, #12]
 8008452:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008456:	4313      	orrs	r3, r2
 8008458:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d155      	bne.n	800851c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	78db      	ldrb	r3, [r3, #3]
 800848a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800848c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	059b      	lsls	r3, r3, #22
 8008492:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008494:	4313      	orrs	r3, r2
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	0151      	lsls	r1, r2, #5
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	440a      	add	r2, r1
 800849e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	e036      	b.n	800851c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b4:	69da      	ldr	r2, [r3, #28]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	2101      	movs	r1, #1
 80084c0:	fa01 f303 	lsl.w	r3, r1, r3
 80084c4:	041b      	lsls	r3, r3, #16
 80084c6:	68f9      	ldr	r1, [r7, #12]
 80084c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084cc:	4313      	orrs	r3, r2
 80084ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	015a      	lsls	r2, r3, #5
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d11a      	bne.n	800851c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	78db      	ldrb	r3, [r3, #3]
 8008500:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008502:	430b      	orrs	r3, r1
 8008504:	4313      	orrs	r3, r2
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	0151      	lsls	r1, r2, #5
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	440a      	add	r2, r1
 800850e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800851a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
	...

0800852c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	785b      	ldrb	r3, [r3, #1]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d161      	bne.n	800860c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800855a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800855e:	d11f      	bne.n	80085a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	0151      	lsls	r1, r2, #5
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	440a      	add	r2, r1
 8008576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800857a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800857e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	440a      	add	r2, r1
 8008596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800859a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800859e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	f003 030f 	and.w	r3, r3, #15
 80085b0:	2101      	movs	r1, #1
 80085b2:	fa01 f303 	lsl.w	r3, r1, r3
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	43db      	mvns	r3, r3
 80085ba:	68f9      	ldr	r1, [r7, #12]
 80085bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085c0:	4013      	ands	r3, r2
 80085c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ca:	69da      	ldr	r2, [r3, #28]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	2101      	movs	r1, #1
 80085d6:	fa01 f303 	lsl.w	r3, r1, r3
 80085da:	b29b      	uxth	r3, r3
 80085dc:	43db      	mvns	r3, r3
 80085de:	68f9      	ldr	r1, [r7, #12]
 80085e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085e4:	4013      	ands	r3, r2
 80085e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	0159      	lsls	r1, r3, #5
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	440b      	add	r3, r1
 80085fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008602:	4619      	mov	r1, r3
 8008604:	4b35      	ldr	r3, [pc, #212]	; (80086dc <USB_DeactivateEndpoint+0x1b0>)
 8008606:	4013      	ands	r3, r2
 8008608:	600b      	str	r3, [r1, #0]
 800860a:	e060      	b.n	80086ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800861e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008622:	d11f      	bne.n	8008664 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	015a      	lsls	r2, r3, #5
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	4413      	add	r3, r2
 800862c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	0151      	lsls	r1, r2, #5
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	440a      	add	r2, r1
 800863a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800863e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008642:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	0151      	lsls	r1, r2, #5
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	440a      	add	r2, r1
 800865a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800865e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008662:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f003 030f 	and.w	r3, r3, #15
 8008674:	2101      	movs	r1, #1
 8008676:	fa01 f303 	lsl.w	r3, r1, r3
 800867a:	041b      	lsls	r3, r3, #16
 800867c:	43db      	mvns	r3, r3
 800867e:	68f9      	ldr	r1, [r7, #12]
 8008680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008684:	4013      	ands	r3, r2
 8008686:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868e:	69da      	ldr	r2, [r3, #28]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	f003 030f 	and.w	r3, r3, #15
 8008698:	2101      	movs	r1, #1
 800869a:	fa01 f303 	lsl.w	r3, r1, r3
 800869e:	041b      	lsls	r3, r3, #16
 80086a0:	43db      	mvns	r3, r3
 80086a2:	68f9      	ldr	r1, [r7, #12]
 80086a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086a8:	4013      	ands	r3, r2
 80086aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	0159      	lsls	r1, r3, #5
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	440b      	add	r3, r1
 80086c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c6:	4619      	mov	r1, r3
 80086c8:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <USB_DeactivateEndpoint+0x1b4>)
 80086ca:	4013      	ands	r3, r2
 80086cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	ec337800 	.word	0xec337800
 80086e0:	eff37800 	.word	0xeff37800

080086e4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	785b      	ldrb	r3, [r3, #1]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	f040 810a 	bne.w	8008916 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d132      	bne.n	8008770 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	015a      	lsls	r2, r3, #5
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	4413      	add	r3, r2
 8008712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	0151      	lsls	r1, r2, #5
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	440a      	add	r2, r1
 8008720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008724:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008728:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800872c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	4413      	add	r3, r2
 8008736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	0151      	lsls	r1, r2, #5
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	440a      	add	r2, r1
 8008744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008748:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800874c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	0151      	lsls	r1, r2, #5
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	440a      	add	r2, r1
 8008764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008768:	0cdb      	lsrs	r3, r3, #19
 800876a:	04db      	lsls	r3, r3, #19
 800876c:	6113      	str	r3, [r2, #16]
 800876e:	e074      	b.n	800885a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	0151      	lsls	r1, r2, #5
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	440a      	add	r2, r1
 8008786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800878a:	0cdb      	lsrs	r3, r3, #19
 800878c:	04db      	lsls	r3, r3, #19
 800878e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	0151      	lsls	r1, r2, #5
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	440a      	add	r2, r1
 80087a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	6959      	ldr	r1, [r3, #20]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	440b      	add	r3, r1
 80087cc:	1e59      	subs	r1, r3, #1
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80087d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80087d8:	4baf      	ldr	r3, [pc, #700]	; (8008a98 <USB_EPStartXfer+0x3b4>)
 80087da:	400b      	ands	r3, r1
 80087dc:	6939      	ldr	r1, [r7, #16]
 80087de:	0148      	lsls	r0, r1, #5
 80087e0:	6979      	ldr	r1, [r7, #20]
 80087e2:	4401      	add	r1, r0
 80087e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80087e8:	4313      	orrs	r3, r2
 80087ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f8:	691a      	ldr	r2, [r3, #16]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008802:	6939      	ldr	r1, [r7, #16]
 8008804:	0148      	lsls	r0, r1, #5
 8008806:	6979      	ldr	r1, [r7, #20]
 8008808:	4401      	add	r1, r0
 800880a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800880e:	4313      	orrs	r3, r2
 8008810:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	78db      	ldrb	r3, [r3, #3]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d11f      	bne.n	800885a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	0151      	lsls	r1, r2, #5
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	440a      	add	r2, r1
 8008830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008834:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008838:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	4413      	add	r3, r2
 8008842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	0151      	lsls	r1, r2, #5
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	440a      	add	r2, r1
 8008850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008854:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008858:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	4413      	add	r3, r2
 8008862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	0151      	lsls	r1, r2, #5
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	440a      	add	r2, r1
 8008870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008874:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008878:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	78db      	ldrb	r3, [r3, #3]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d015      	beq.n	80088ae <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 8100 	beq.w	8008a8c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	f003 030f 	and.w	r3, r3, #15
 800889c:	2101      	movs	r1, #1
 800889e:	fa01 f303 	lsl.w	r3, r1, r3
 80088a2:	6979      	ldr	r1, [r7, #20]
 80088a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088a8:	4313      	orrs	r3, r2
 80088aa:	634b      	str	r3, [r1, #52]	; 0x34
 80088ac:	e0ee      	b.n	8008a8c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d110      	bne.n	80088e0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	0151      	lsls	r1, r2, #5
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	440a      	add	r2, r1
 80088d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	e00f      	b.n	8008900 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	0151      	lsls	r1, r2, #5
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	440a      	add	r2, r1
 80088f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088fe:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	68d9      	ldr	r1, [r3, #12]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781a      	ldrb	r2, [r3, #0]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	b29b      	uxth	r3, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f9e2 	bl	8008cd8 <USB_WritePacket>
 8008914:	e0ba      	b.n	8008a8c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	4413      	add	r3, r2
 800891e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	0151      	lsls	r1, r2, #5
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	440a      	add	r2, r1
 800892c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008930:	0cdb      	lsrs	r3, r3, #19
 8008932:	04db      	lsls	r3, r3, #19
 8008934:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	015a      	lsls	r2, r3, #5
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	4413      	add	r3, r2
 800893e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	0151      	lsls	r1, r2, #5
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	440a      	add	r2, r1
 800894c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008950:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008954:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008958:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d123      	bne.n	80089aa <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	4413      	add	r3, r2
 800896a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896e:	691a      	ldr	r2, [r3, #16]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008978:	6939      	ldr	r1, [r7, #16]
 800897a:	0148      	lsls	r0, r1, #5
 800897c:	6979      	ldr	r1, [r7, #20]
 800897e:	4401      	add	r1, r0
 8008980:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008984:	4313      	orrs	r3, r2
 8008986:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	4413      	add	r3, r2
 8008990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	0151      	lsls	r1, r2, #5
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	440a      	add	r2, r1
 800899e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089a6:	6113      	str	r3, [r2, #16]
 80089a8:	e033      	b.n	8008a12 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	695a      	ldr	r2, [r3, #20]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	4413      	add	r3, r2
 80089b4:	1e5a      	subs	r2, r3, #1
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80089be:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089cc:	691a      	ldr	r2, [r3, #16]
 80089ce:	89fb      	ldrh	r3, [r7, #14]
 80089d0:	04d9      	lsls	r1, r3, #19
 80089d2:	4b31      	ldr	r3, [pc, #196]	; (8008a98 <USB_EPStartXfer+0x3b4>)
 80089d4:	400b      	ands	r3, r1
 80089d6:	6939      	ldr	r1, [r7, #16]
 80089d8:	0148      	lsls	r0, r1, #5
 80089da:	6979      	ldr	r1, [r7, #20]
 80089dc:	4401      	add	r1, r0
 80089de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089e2:	4313      	orrs	r3, r2
 80089e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f2:	691a      	ldr	r2, [r3, #16]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	89f9      	ldrh	r1, [r7, #14]
 80089fa:	fb01 f303 	mul.w	r3, r1, r3
 80089fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a02:	6939      	ldr	r1, [r7, #16]
 8008a04:	0148      	lsls	r0, r1, #5
 8008a06:	6979      	ldr	r1, [r7, #20]
 8008a08:	4401      	add	r1, r0
 8008a0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	78db      	ldrb	r3, [r3, #3]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d128      	bne.n	8008a6c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d110      	bne.n	8008a4c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	0151      	lsls	r1, r2, #5
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	440a      	add	r2, r1
 8008a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	e00f      	b.n	8008a6c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	0151      	lsls	r1, r2, #5
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	440a      	add	r2, r1
 8008a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	015a      	lsls	r2, r3, #5
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	0151      	lsls	r1, r2, #5
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	440a      	add	r2, r1
 8008a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	1ff80000 	.word	0x1ff80000

08008a9c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	785b      	ldrb	r3, [r3, #1]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	f040 80ab 	bne.w	8008c10 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d132      	bne.n	8008b28 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	0151      	lsls	r1, r2, #5
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	440a      	add	r2, r1
 8008ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008adc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ae0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ae4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	0151      	lsls	r1, r2, #5
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	440a      	add	r2, r1
 8008afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	0151      	lsls	r1, r2, #5
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	440a      	add	r2, r1
 8008b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b20:	0cdb      	lsrs	r3, r3, #19
 8008b22:	04db      	lsls	r3, r3, #19
 8008b24:	6113      	str	r3, [r2, #16]
 8008b26:	e04e      	b.n	8008bc6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	0151      	lsls	r1, r2, #5
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	440a      	add	r2, r1
 8008b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b42:	0cdb      	lsrs	r3, r3, #19
 8008b44:	04db      	lsls	r3, r3, #19
 8008b46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	0151      	lsls	r1, r2, #5
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	440a      	add	r2, r1
 8008b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	695a      	ldr	r2, [r3, #20]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d903      	bls.n	8008b80 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	689a      	ldr	r2, [r3, #8]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	0151      	lsls	r1, r2, #5
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	440a      	add	r2, r1
 8008b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bac:	691a      	ldr	r2, [r3, #16]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bb6:	68b9      	ldr	r1, [r7, #8]
 8008bb8:	0148      	lsls	r0, r1, #5
 8008bba:	68f9      	ldr	r1, [r7, #12]
 8008bbc:	4401      	add	r1, r0
 8008bbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	0151      	lsls	r1, r2, #5
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	440a      	add	r2, r1
 8008bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008be0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008be4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d06d      	beq.n	8008cca <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	f003 030f 	and.w	r3, r3, #15
 8008bfe:	2101      	movs	r1, #1
 8008c00:	fa01 f303 	lsl.w	r3, r1, r3
 8008c04:	68f9      	ldr	r1, [r7, #12]
 8008c06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	634b      	str	r3, [r1, #52]	; 0x34
 8008c0e:	e05c      	b.n	8008cca <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	0151      	lsls	r1, r2, #5
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	440a      	add	r2, r1
 8008c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c2a:	0cdb      	lsrs	r3, r3, #19
 8008c2c:	04db      	lsls	r3, r3, #19
 8008c2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	0151      	lsls	r1, r2, #5
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	440a      	add	r2, r1
 8008c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c52:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	695b      	ldr	r3, [r3, #20]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	689a      	ldr	r2, [r3, #8]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	0151      	lsls	r1, r2, #5
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	440a      	add	r2, r1
 8008c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c90:	691a      	ldr	r2, [r3, #16]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	0148      	lsls	r0, r1, #5
 8008c9e:	68f9      	ldr	r1, [r7, #12]
 8008ca0:	4401      	add	r1, r0
 8008ca2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	015a      	lsls	r2, r3, #5
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	0151      	lsls	r1, r2, #5
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	440a      	add	r2, r1
 8008cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008cc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b089      	sub	sp, #36	; 0x24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	71fb      	strb	r3, [r7, #7]
 8008cea:	4613      	mov	r3, r2
 8008cec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008cf6:	88bb      	ldrh	r3, [r7, #4]
 8008cf8:	3303      	adds	r3, #3
 8008cfa:	089b      	lsrs	r3, r3, #2
 8008cfc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008cfe:	2300      	movs	r3, #0
 8008d00:	61bb      	str	r3, [r7, #24]
 8008d02:	e018      	b.n	8008d36 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d04:	79fb      	ldrb	r3, [r7, #7]
 8008d06:	031a      	lsls	r2, r3, #12
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d10:	461a      	mov	r2, r3
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	3301      	adds	r3, #1
 8008d22:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	3301      	adds	r3, #1
 8008d28:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	3301      	adds	r3, #1
 8008d34:	61bb      	str	r3, [r7, #24]
 8008d36:	69ba      	ldr	r2, [r7, #24]
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d3e2      	bcc.n	8008d04 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3724      	adds	r7, #36	; 0x24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b08b      	sub	sp, #44	; 0x2c
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	4613      	mov	r3, r2
 8008d58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d62:	88fb      	ldrh	r3, [r7, #6]
 8008d64:	089b      	lsrs	r3, r3, #2
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d6a:	88fb      	ldrh	r3, [r7, #6]
 8008d6c:	f003 0303 	and.w	r3, r3, #3
 8008d70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d72:	2300      	movs	r3, #0
 8008d74:	623b      	str	r3, [r7, #32]
 8008d76:	e014      	b.n	8008da2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	3301      	adds	r3, #1
 8008d88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	3301      	adds	r3, #1
 8008d94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	3301      	adds	r3, #1
 8008d9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	623b      	str	r3, [r7, #32]
 8008da2:	6a3a      	ldr	r2, [r7, #32]
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d3e6      	bcc.n	8008d78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008daa:	8bfb      	ldrh	r3, [r7, #30]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d01e      	beq.n	8008dee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dba:	461a      	mov	r2, r3
 8008dbc:	f107 0310 	add.w	r3, r7, #16
 8008dc0:	6812      	ldr	r2, [r2, #0]
 8008dc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	701a      	strb	r2, [r3, #0]
      i++;
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	623b      	str	r3, [r7, #32]
      pDest++;
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	3301      	adds	r3, #1
 8008de0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008de2:	8bfb      	ldrh	r3, [r7, #30]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008de8:	8bfb      	ldrh	r3, [r7, #30]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1ea      	bne.n	8008dc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	372c      	adds	r7, #44	; 0x2c
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	785b      	ldrb	r3, [r3, #1]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d12c      	bne.n	8008e72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	db12      	blt.n	8008e50 <USB_EPSetStall+0x54>
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00f      	beq.n	8008e50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	015a      	lsls	r2, r3, #5
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	0151      	lsls	r1, r2, #5
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	440a      	add	r2, r1
 8008e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	0151      	lsls	r1, r2, #5
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	440a      	add	r2, r1
 8008e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	e02b      	b.n	8008eca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	db12      	blt.n	8008eaa <USB_EPSetStall+0xae>
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00f      	beq.n	8008eaa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	0151      	lsls	r1, r2, #5
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	440a      	add	r2, r1
 8008ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ea4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ea8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	0151      	lsls	r1, r2, #5
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	440a      	add	r2, r1
 8008ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ec8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	785b      	ldrb	r3, [r3, #1]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d128      	bne.n	8008f46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	0151      	lsls	r1, r2, #5
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	440a      	add	r2, r1
 8008f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	78db      	ldrb	r3, [r3, #3]
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d003      	beq.n	8008f24 <USB_EPClearStall+0x4c>
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	78db      	ldrb	r3, [r3, #3]
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d138      	bne.n	8008f96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	0151      	lsls	r1, r2, #5
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	440a      	add	r2, r1
 8008f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	e027      	b.n	8008f96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	0151      	lsls	r1, r2, #5
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	440a      	add	r2, r1
 8008f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	78db      	ldrb	r3, [r3, #3]
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d003      	beq.n	8008f76 <USB_EPClearStall+0x9e>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	78db      	ldrb	r3, [r3, #3]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d10f      	bne.n	8008f96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	0151      	lsls	r1, r2, #5
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fc2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008fc6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	011b      	lsls	r3, r3, #4
 8008fd4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008fd8:	68f9      	ldr	r1, [r7, #12]
 8008fda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3714      	adds	r7, #20
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800900a:	f023 0303 	bic.w	r3, r3, #3
 800900e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800901e:	f023 0302 	bic.w	r3, r3, #2
 8009022:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009032:	b480      	push	{r7}
 8009034:	b085      	sub	sp, #20
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800904c:	f023 0303 	bic.w	r3, r3, #3
 8009050:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009060:	f043 0302 	orr.w	r3, r3, #2
 8009064:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	695b      	ldr	r3, [r3, #20]
 8009080:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	4013      	ands	r3, r2
 800908a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800908c:	68fb      	ldr	r3, [r7, #12]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800909a:	b480      	push	{r7}
 800909c:	b085      	sub	sp, #20
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	4013      	ands	r3, r2
 80090bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	0c1b      	lsrs	r3, r3, #16
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3714      	adds	r7, #20
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b085      	sub	sp, #20
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ea:	69db      	ldr	r3, [r3, #28]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	4013      	ands	r3, r2
 80090f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	b29b      	uxth	r3, r3
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009102:	b480      	push	{r7}
 8009104:	b085      	sub	sp, #20
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	460b      	mov	r3, r1
 800910c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009112:	78fb      	ldrb	r3, [r7, #3]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	4013      	ands	r3, r2
 800912e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009130:	68bb      	ldr	r3, [r7, #8]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800913e:	b480      	push	{r7}
 8009140:	b087      	sub	sp, #28
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	460b      	mov	r3, r1
 8009148:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009160:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009162:	78fb      	ldrb	r3, [r7, #3]
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	fa22 f303 	lsr.w	r3, r2, r3
 800916e:	01db      	lsls	r3, r3, #7
 8009170:	b2db      	uxtb	r3, r3
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	4313      	orrs	r3, r2
 8009176:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009178:	78fb      	ldrb	r3, [r7, #3]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	4013      	ands	r3, r2
 800918a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800918c:	68bb      	ldr	r3, [r7, #8]
}
 800918e:	4618      	mov	r0, r3
 8009190:	371c      	adds	r7, #28
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	f003 0301 	and.w	r3, r3, #1
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b085      	sub	sp, #20
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80091d4:	f023 0307 	bic.w	r3, r3, #7
 80091d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	333c      	adds	r3, #60	; 0x3c
 800920e:	3304      	adds	r3, #4
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	4a1c      	ldr	r2, [pc, #112]	; (8009288 <USB_EP0_OutStart+0x8c>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d90a      	bls.n	8009232 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800922c:	d101      	bne.n	8009232 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	e024      	b.n	800927c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009238:	461a      	mov	r2, r3
 800923a:	2300      	movs	r3, #0
 800923c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800924c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009260:	f043 0318 	orr.w	r3, r3, #24
 8009264:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009274:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009278:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	4f54300a 	.word	0x4f54300a

0800928c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3301      	adds	r3, #1
 800929c:	60fb      	str	r3, [r7, #12]
 800929e:	4a13      	ldr	r2, [pc, #76]	; (80092ec <USB_CoreReset+0x60>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d901      	bls.n	80092a8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e01a      	b.n	80092de <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	daf3      	bge.n	8009298 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	f043 0201 	orr.w	r2, r3, #1
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3301      	adds	r3, #1
 80092c4:	60fb      	str	r3, [r7, #12]
 80092c6:	4a09      	ldr	r2, [pc, #36]	; (80092ec <USB_CoreReset+0x60>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d901      	bls.n	80092d0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e006      	b.n	80092de <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d0f1      	beq.n	80092c0 <USB_CoreReset+0x34>

  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	00030d40 	.word	0x00030d40

080092f0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80092fc:	f241 0074 	movw	r0, #4212	; 0x1074
 8009300:	f003 fe86 	bl	800d010 <USBD_static_malloc>
 8009304:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d105      	bne.n	8009318 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009314:	2302      	movs	r3, #2
 8009316:	e034      	b.n	8009382 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	7c1b      	ldrb	r3, [r3, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d115      	bne.n	8009354 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800932c:	2202      	movs	r2, #2
 800932e:	2101      	movs	r1, #1
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f003 fc71 	bl	800cc18 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800933e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009342:	2202      	movs	r2, #2
 8009344:	2181      	movs	r1, #129	; 0x81
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f003 fc66 	bl	800cc18 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	871a      	strh	r2, [r3, #56]	; 0x38
 8009352:	e012      	b.n	800937a <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009354:	2340      	movs	r3, #64	; 0x40
 8009356:	2202      	movs	r2, #2
 8009358:	2101      	movs	r1, #1
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f003 fc5c 	bl	800cc18 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009368:	2340      	movs	r3, #64	; 0x40
 800936a:	2202      	movs	r2, #2
 800936c:	2181      	movs	r1, #129	; 0x81
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f003 fc52 	bl	800cc18 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f999 	bl	80096b2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b082      	sub	sp, #8
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	460b      	mov	r3, r1
 8009394:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8009396:	2101      	movs	r1, #1
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f003 fc7b 	bl	800cc94 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80093a6:	2181      	movs	r1, #129	; 0x81
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f003 fc73 	bl	800cc94 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00c      	beq.n	80093d8 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f9dd 	bl	800977e <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093ca:	4618      	mov	r0, r3
 80093cc:	f003 fe2e 	bl	800d02c <USBD_static_free>
    pdev->pClassData = NULL;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
	...

080093e4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093f4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80093fa:	2300      	movs	r3, #0
 80093fc:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d101      	bne.n	8009408 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009404:	2303      	movs	r3, #3
 8009406:	e0db      	b.n	80095c0 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009410:	2b00      	cmp	r3, #0
 8009412:	d04e      	beq.n	80094b2 <USBD_MSC_Setup+0xce>
 8009414:	2b20      	cmp	r3, #32
 8009416:	f040 80cb 	bne.w	80095b0 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	785b      	ldrb	r3, [r3, #1]
 800941e:	2bfe      	cmp	r3, #254	; 0xfe
 8009420:	d002      	beq.n	8009428 <USBD_MSC_Setup+0x44>
 8009422:	2bff      	cmp	r3, #255	; 0xff
 8009424:	d025      	beq.n	8009472 <USBD_MSC_Setup+0x8e>
 8009426:	e03c      	b.n	80094a2 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	885b      	ldrh	r3, [r3, #2]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d119      	bne.n	8009464 <USBD_MSC_Setup+0x80>
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	88db      	ldrh	r3, [r3, #6]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d115      	bne.n	8009464 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800943e:	2b00      	cmp	r3, #0
 8009440:	da10      	bge.n	8009464 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	4798      	blx	r3
 800944c:	4603      	mov	r3, r0
 800944e:	461a      	mov	r2, r3
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2201      	movs	r2, #1
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f002 fef5 	bl	800c24a <USBD_CtlSendData>
 8009460:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009462:	e025      	b.n	80094b0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f002 fe7e 	bl	800c168 <USBD_CtlError>
            ret = USBD_FAIL;
 800946c:	2303      	movs	r3, #3
 800946e:	75fb      	strb	r3, [r7, #23]
          break;
 8009470:	e01e      	b.n	80094b0 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	885b      	ldrh	r3, [r3, #2]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10c      	bne.n	8009494 <USBD_MSC_Setup+0xb0>
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	88db      	ldrh	r3, [r3, #6]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d108      	bne.n	8009494 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009488:	2b00      	cmp	r3, #0
 800948a:	db03      	blt.n	8009494 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f94f 	bl	8009730 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009492:	e00d      	b.n	80094b0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f002 fe66 	bl	800c168 <USBD_CtlError>
            ret = USBD_FAIL;
 800949c:	2303      	movs	r3, #3
 800949e:	75fb      	strb	r3, [r7, #23]
          break;
 80094a0:	e006      	b.n	80094b0 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f002 fe5f 	bl	800c168 <USBD_CtlError>
          ret = USBD_FAIL;
 80094aa:	2303      	movs	r3, #3
 80094ac:	75fb      	strb	r3, [r7, #23]
          break;
 80094ae:	bf00      	nop
      }
      break;
 80094b0:	e085      	b.n	80095be <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	785b      	ldrb	r3, [r3, #1]
 80094b6:	2b0b      	cmp	r3, #11
 80094b8:	d871      	bhi.n	800959e <USBD_MSC_Setup+0x1ba>
 80094ba:	a201      	add	r2, pc, #4	; (adr r2, 80094c0 <USBD_MSC_Setup+0xdc>)
 80094bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c0:	080094f1 	.word	0x080094f1
 80094c4:	0800956d 	.word	0x0800956d
 80094c8:	0800959f 	.word	0x0800959f
 80094cc:	0800959f 	.word	0x0800959f
 80094d0:	0800959f 	.word	0x0800959f
 80094d4:	0800959f 	.word	0x0800959f
 80094d8:	0800959f 	.word	0x0800959f
 80094dc:	0800959f 	.word	0x0800959f
 80094e0:	0800959f 	.word	0x0800959f
 80094e4:	0800959f 	.word	0x0800959f
 80094e8:	0800951b 	.word	0x0800951b
 80094ec:	08009545 	.word	0x08009545
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d107      	bne.n	800950c <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80094fc:	f107 030e 	add.w	r3, r7, #14
 8009500:	2202      	movs	r2, #2
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f002 fea0 	bl	800c24a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800950a:	e050      	b.n	80095ae <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f002 fe2a 	bl	800c168 <USBD_CtlError>
            ret = USBD_FAIL;
 8009514:	2303      	movs	r3, #3
 8009516:	75fb      	strb	r3, [r7, #23]
          break;
 8009518:	e049      	b.n	80095ae <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b03      	cmp	r3, #3
 8009524:	d107      	bne.n	8009536 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	3304      	adds	r3, #4
 800952a:	2201      	movs	r2, #1
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f002 fe8b 	bl	800c24a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009534:	e03b      	b.n	80095ae <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f002 fe15 	bl	800c168 <USBD_CtlError>
            ret = USBD_FAIL;
 800953e:	2303      	movs	r3, #3
 8009540:	75fb      	strb	r3, [r7, #23]
          break;
 8009542:	e034      	b.n	80095ae <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2b03      	cmp	r3, #3
 800954e:	d106      	bne.n	800955e <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	885b      	ldrh	r3, [r3, #2]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	461a      	mov	r2, r3
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800955c:	e027      	b.n	80095ae <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f002 fe01 	bl	800c168 <USBD_CtlError>
            ret = USBD_FAIL;
 8009566:	2303      	movs	r3, #3
 8009568:	75fb      	strb	r3, [r7, #23]
          break;
 800956a:	e020      	b.n	80095ae <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b03      	cmp	r3, #3
 8009576:	d119      	bne.n	80095ac <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	885b      	ldrh	r3, [r3, #2]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d115      	bne.n	80095ac <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	889b      	ldrh	r3, [r3, #4]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f003 fbb9 	bl	800cd00 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	889b      	ldrh	r3, [r3, #4]
 8009592:	b2db      	uxtb	r3, r3
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 faa6 	bl	8009ae8 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800959c:	e006      	b.n	80095ac <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f002 fde1 	bl	800c168 <USBD_CtlError>
          ret = USBD_FAIL;
 80095a6:	2303      	movs	r3, #3
 80095a8:	75fb      	strb	r3, [r7, #23]
          break;
 80095aa:	e000      	b.n	80095ae <USBD_MSC_Setup+0x1ca>
          break;
 80095ac:	bf00      	nop
      }
      break;
 80095ae:	e006      	b.n	80095be <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f002 fdd8 	bl	800c168 <USBD_CtlError>
      ret = USBD_FAIL;
 80095b8:	2303      	movs	r3, #3
 80095ba:	75fb      	strb	r3, [r7, #23]
      break;
 80095bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80095be:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3718      	adds	r7, #24
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f8e4 	bl	80097a6 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f90c 	bl	8009816 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2220      	movs	r2, #32
 8009614:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8009616:	4b03      	ldr	r3, [pc, #12]	; (8009624 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8009618:	4618      	mov	r0, r3
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	20000084 	.word	0x20000084

08009628 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2220      	movs	r2, #32
 8009634:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8009636:	4b03      	ldr	r3, [pc, #12]	; (8009644 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8009638:	4618      	mov	r0, r3
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	200000a4 	.word	0x200000a4

08009648 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2220      	movs	r2, #32
 8009654:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8009656:	4b03      	ldr	r3, [pc, #12]	; (8009664 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	200000c4 	.word	0x200000c4

08009668 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	220a      	movs	r2, #10
 8009674:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8009676:	4b03      	ldr	r3, [pc, #12]	; (8009684 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009678:	4618      	mov	r0, r3
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	200000e4 	.word	0x200000e4

08009688 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009698:	2303      	movs	r3, #3
 800969a:	e004      	b.n	80096a6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096c0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d02f      	beq.n	8009728 <MSC_BOT_Init+0x76>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2000      	movs	r0, #0
 8009702:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8009704:	2101      	movs	r1, #1
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f003 fafa 	bl	800cd00 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800970c:	2181      	movs	r1, #129	; 0x81
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f003 faf6 	bl	800cd00 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800971a:	3210      	adds	r2, #16
 800971c:	231f      	movs	r3, #31
 800971e:	2101      	movs	r1, #1
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f003 fc29 	bl	800cf78 <USBD_LL_PrepareReceive>
 8009726:	e000      	b.n	800972a <MSC_BOT_Init+0x78>
    return;
 8009728:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800973e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d017      	beq.n	8009776 <MSC_BOT_Reset+0x46>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8009752:	2181      	movs	r1, #129	; 0x81
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f003 fb3f 	bl	800cdd8 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800975a:	2101      	movs	r1, #1
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f003 fb3b 	bl	800cdd8 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009768:	3210      	adds	r2, #16
 800976a:	231f      	movs	r3, #31
 800976c:	2101      	movs	r1, #1
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f003 fc02 	bl	800cf78 <USBD_LL_PrepareReceive>
 8009774:	e000      	b.n	8009778 <MSC_BOT_Reset+0x48>
    return;
 8009776:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800977e:	b480      	push	{r7}
 8009780:	b085      	sub	sp, #20
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800978c:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	721a      	strb	r2, [r3, #8]
  }
}
 800979a:	bf00      	nop
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	460b      	mov	r3, r1
 80097b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097b8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d022      	beq.n	8009806 <MSC_BOT_DataIn+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	7a1b      	ldrb	r3, [r3, #8]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d005      	beq.n	80097d4 <MSC_BOT_DataIn+0x2e>
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	db1e      	blt.n	800980a <MSC_BOT_DataIn+0x64>
 80097cc:	3b03      	subs	r3, #3
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d81b      	bhi.n	800980a <MSC_BOT_DataIn+0x64>
 80097d2:	e013      	b.n	80097fc <MSC_BOT_DataIn+0x56>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097da:	7f59      	ldrb	r1, [r3, #29]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097e2:	331f      	adds	r3, #31
 80097e4:	461a      	mov	r2, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f9ac 	bl	8009b44 <SCSI_ProcessCmd>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	da0d      	bge.n	800980e <MSC_BOT_DataIn+0x68>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80097f2:	2101      	movs	r1, #1
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f90d 	bl	8009a14 <MSC_BOT_SendCSW>
      }
      break;
 80097fa:	e008      	b.n	800980e <MSC_BOT_DataIn+0x68>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80097fc:	2100      	movs	r1, #0
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f908 	bl	8009a14 <MSC_BOT_SendCSW>
      break;
 8009804:	e004      	b.n	8009810 <MSC_BOT_DataIn+0x6a>
    return;
 8009806:	bf00      	nop
 8009808:	e002      	b.n	8009810 <MSC_BOT_DataIn+0x6a>

    default:
      break;
 800980a:	bf00      	nop
 800980c:	e000      	b.n	8009810 <MSC_BOT_DataIn+0x6a>
      break;
 800980e:	bf00      	nop
  }
}
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b084      	sub	sp, #16
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	460b      	mov	r3, r1
 8009820:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009828:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d01e      	beq.n	800986e <MSC_BOT_DataOut+0x58>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	7a1b      	ldrb	r3, [r3, #8]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d002      	beq.n	800983e <MSC_BOT_DataOut+0x28>
 8009838:	2b01      	cmp	r3, #1
 800983a:	d004      	beq.n	8009846 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800983c:	e01a      	b.n	8009874 <MSC_BOT_DataOut+0x5e>
      MSC_BOT_CBW_Decode(pdev);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f81c 	bl	800987c <MSC_BOT_CBW_Decode>
      break;
 8009844:	e016      	b.n	8009874 <MSC_BOT_DataOut+0x5e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800984c:	7f59      	ldrb	r1, [r3, #29]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009854:	331f      	adds	r3, #31
 8009856:	461a      	mov	r2, r3
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f973 	bl	8009b44 <SCSI_ProcessCmd>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	da06      	bge.n	8009872 <MSC_BOT_DataOut+0x5c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009864:	2101      	movs	r1, #1
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f8d4 	bl	8009a14 <MSC_BOT_SendCSW>
      break;
 800986c:	e001      	b.n	8009872 <MSC_BOT_DataOut+0x5c>
    return;
 800986e:	bf00      	nop
 8009870:	e000      	b.n	8009874 <MSC_BOT_DataOut+0x5e>
      break;
 8009872:	bf00      	nop
  }
}
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
	...

0800987c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800988a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	f000 8083 	beq.w	800999a <MSC_BOT_CBW_Decode+0x11e>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80098a2:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80098b2:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80098b4:	2101      	movs	r1, #1
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f003 fb96 	bl	800cfe8 <USBD_LL_GetRxDataSize>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b1f      	cmp	r3, #31
 80098c0:	d118      	bne.n	80098f4 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098c8:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80098ca:	4a37      	ldr	r2, [pc, #220]	; (80099a8 <MSC_BOT_CBW_Decode+0x12c>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d111      	bne.n	80098f4 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d6:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d80b      	bhi.n	80098f4 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098e2:	7f9b      	ldrb	r3, [r3, #30]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d005      	beq.n	80098f4 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bCBLength > 16U))
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ee:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80098f0:	2b10      	cmp	r3, #16
 80098f2:	d90f      	bls.n	8009914 <MSC_BOT_CBW_Decode+0x98>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098fa:	7f59      	ldrb	r1, [r3, #29]
 80098fc:	2320      	movs	r3, #32
 80098fe:	2205      	movs	r2, #5
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fe0d 	bl	800a520 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2202      	movs	r2, #2
 800990a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f8b7 	bl	8009a80 <MSC_BOT_Abort>
 8009912:	e045      	b.n	80099a0 <MSC_BOT_CBW_Decode+0x124>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800991a:	7f59      	ldrb	r1, [r3, #29]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009922:	331f      	adds	r3, #31
 8009924:	461a      	mov	r2, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f90c 	bl	8009b44 <SCSI_ProcessCmd>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	da0c      	bge.n	800994c <MSC_BOT_CBW_Decode+0xd0>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	7a1b      	ldrb	r3, [r3, #8]
 8009936:	2b05      	cmp	r3, #5
 8009938:	d104      	bne.n	8009944 <MSC_BOT_CBW_Decode+0xc8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800993a:	2101      	movs	r1, #1
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f869 	bl	8009a14 <MSC_BOT_SendCSW>
 8009942:	e02d      	b.n	80099a0 <MSC_BOT_CBW_Decode+0x124>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f89b 	bl	8009a80 <MSC_BOT_Abort>
 800994a:	e029      	b.n	80099a0 <MSC_BOT_CBW_Decode+0x124>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	7a1b      	ldrb	r3, [r3, #8]
 8009950:	2b02      	cmp	r3, #2
 8009952:	d024      	beq.n	800999e <MSC_BOT_CBW_Decode+0x122>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009958:	2b01      	cmp	r3, #1
 800995a:	d020      	beq.n	800999e <MSC_BOT_CBW_Decode+0x122>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009960:	2b03      	cmp	r3, #3
 8009962:	d01c      	beq.n	800999e <MSC_BOT_CBW_Decode+0x122>
    {
      if (hmsc->bot_data_length > 0U)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d009      	beq.n	8009980 <MSC_BOT_CBW_Decode+0x104>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f103 0110 	add.w	r1, r3, #16
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	461a      	mov	r2, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f817 	bl	80099ac <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800997e:	e00f      	b.n	80099a0 <MSC_BOT_CBW_Decode+0x124>
      }
      else if (hmsc->bot_data_length == 0U)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d104      	bne.n	8009992 <MSC_BOT_CBW_Decode+0x116>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009988:	2100      	movs	r1, #0
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f842 	bl	8009a14 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8009990:	e006      	b.n	80099a0 <MSC_BOT_CBW_Decode+0x124>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f874 	bl	8009a80 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009998:	e002      	b.n	80099a0 <MSC_BOT_CBW_Decode+0x124>
    return;
 800999a:	bf00      	nop
 800999c:	e000      	b.n	80099a0 <MSC_BOT_CBW_Decode+0x124>
      }
    }
    else
    {
      return;
 800999e:	bf00      	nop
    }
  }
}
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	43425355 	.word	0x43425355

080099ac <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099be:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	4293      	cmp	r3, r2
 80099cc:	bf28      	it	cs
 80099ce:	4613      	movcs	r3, r2
 80099d0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d019      	beq.n	8009a0c <MSC_BOT_SendData+0x60>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80099ea:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	2204      	movs	r2, #4
 80099fc:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	2181      	movs	r1, #129	; 0x81
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f003 fa7f 	bl	800cf08 <USBD_LL_Transmit>
 8009a0a:	e000      	b.n	8009a0e <MSC_BOT_SendData+0x62>
    return;
 8009a0c:	bf00      	nop
}
 8009a0e:	3718      	adds	r7, #24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a26:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d022      	beq.n	8009a74 <MSC_BOT_SendCSW+0x60>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a34:	461a      	mov	r2, r3
 8009a36:	4b11      	ldr	r3, [pc, #68]	; (8009a7c <MSC_BOT_SendCSW+0x68>)
 8009a38:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a40:	461a      	mov	r2, r3
 8009a42:	78fb      	ldrb	r3, [r7, #3]
 8009a44:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8009a54:	3210      	adds	r2, #16
 8009a56:	230d      	movs	r3, #13
 8009a58:	2181      	movs	r1, #129	; 0x81
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f003 fa54 	bl	800cf08 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009a66:	3210      	adds	r2, #16
 8009a68:	231f      	movs	r3, #31
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f003 fa83 	bl	800cf78 <USBD_LL_PrepareReceive>
 8009a72:	e000      	b.n	8009a76 <MSC_BOT_SendCSW+0x62>
    return;
 8009a74:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	53425355 	.word	0x53425355

08009a80 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a8e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d024      	beq.n	8009ae0 <MSC_BOT_Abort+0x60>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a9c:	7f1b      	ldrb	r3, [r3, #28]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10d      	bne.n	8009abe <MSC_BOT_Abort+0x3e>
      (hmsc->cbw.dDataLength != 0U) &&
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa8:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d007      	beq.n	8009abe <MSC_BOT_Abort+0x3e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d103      	bne.n	8009abe <MSC_BOT_Abort+0x3e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f003 f957 	bl	800cd6c <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8009abe:	2181      	movs	r1, #129	; 0x81
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f003 f953 	bl	800cd6c <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	7a5b      	ldrb	r3, [r3, #9]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d109      	bne.n	8009ae2 <MSC_BOT_Abort+0x62>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8009ace:	2181      	movs	r1, #129	; 0x81
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f003 f94b 	bl	800cd6c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f003 f947 	bl	800cd6c <USBD_LL_StallEP>
 8009ade:	e000      	b.n	8009ae2 <MSC_BOT_Abort+0x62>
    return;
 8009ae0:	bf00      	nop
  }
}
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009afa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d019      	beq.n	8009b36 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	7a5b      	ldrb	r3, [r3, #9]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d108      	bne.n	8009b1c <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8009b0a:	2181      	movs	r1, #129	; 0x81
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f003 f92d 	bl	800cd6c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8009b12:	2101      	movs	r1, #1
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f003 f929 	bl	800cd6c <USBD_LL_StallEP>
 8009b1a:	e00f      	b.n	8009b3c <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	da0a      	bge.n	8009b3a <MSC_BOT_CplClrFeature+0x52>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	7a5b      	ldrb	r3, [r3, #9]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d006      	beq.n	8009b3a <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7ff ff70 	bl	8009a14 <MSC_BOT_SendCSW>
 8009b34:	e002      	b.n	8009b3c <MSC_BOT_CplClrFeature+0x54>
    return;
 8009b36:	bf00      	nop
 8009b38:	e000      	b.n	8009b3c <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8009b3a:	bf00      	nop
  }
}
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
	...

08009b44 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	607a      	str	r2, [r7, #4]
 8009b50:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b58:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d102      	bne.n	8009b66 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8009b60:	f04f 33ff 	mov.w	r3, #4294967295
 8009b64:	e168      	b.n	8009e38 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	2baa      	cmp	r3, #170	; 0xaa
 8009b6c:	f000 8144 	beq.w	8009df8 <SCSI_ProcessCmd+0x2b4>
 8009b70:	2baa      	cmp	r3, #170	; 0xaa
 8009b72:	f300 8153 	bgt.w	8009e1c <SCSI_ProcessCmd+0x2d8>
 8009b76:	2ba8      	cmp	r3, #168	; 0xa8
 8009b78:	f000 812c 	beq.w	8009dd4 <SCSI_ProcessCmd+0x290>
 8009b7c:	2ba8      	cmp	r3, #168	; 0xa8
 8009b7e:	f300 814d 	bgt.w	8009e1c <SCSI_ProcessCmd+0x2d8>
 8009b82:	2b5a      	cmp	r3, #90	; 0x5a
 8009b84:	f300 80c0 	bgt.w	8009d08 <SCSI_ProcessCmd+0x1c4>
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f2c0 8147 	blt.w	8009e1c <SCSI_ProcessCmd+0x2d8>
 8009b8e:	2b5a      	cmp	r3, #90	; 0x5a
 8009b90:	f200 8144 	bhi.w	8009e1c <SCSI_ProcessCmd+0x2d8>
 8009b94:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <SCSI_ProcessCmd+0x58>)
 8009b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9a:	bf00      	nop
 8009b9c:	08009d0f 	.word	0x08009d0f
 8009ba0:	08009e1d 	.word	0x08009e1d
 8009ba4:	08009e1d 	.word	0x08009e1d
 8009ba8:	08009d21 	.word	0x08009d21
 8009bac:	08009e1d 	.word	0x08009e1d
 8009bb0:	08009e1d 	.word	0x08009e1d
 8009bb4:	08009e1d 	.word	0x08009e1d
 8009bb8:	08009e1d 	.word	0x08009e1d
 8009bbc:	08009e1d 	.word	0x08009e1d
 8009bc0:	08009e1d 	.word	0x08009e1d
 8009bc4:	08009e1d 	.word	0x08009e1d
 8009bc8:	08009e1d 	.word	0x08009e1d
 8009bcc:	08009e1d 	.word	0x08009e1d
 8009bd0:	08009e1d 	.word	0x08009e1d
 8009bd4:	08009e1d 	.word	0x08009e1d
 8009bd8:	08009e1d 	.word	0x08009e1d
 8009bdc:	08009e1d 	.word	0x08009e1d
 8009be0:	08009e1d 	.word	0x08009e1d
 8009be4:	08009d33 	.word	0x08009d33
 8009be8:	08009e1d 	.word	0x08009e1d
 8009bec:	08009e1d 	.word	0x08009e1d
 8009bf0:	08009e1d 	.word	0x08009e1d
 8009bf4:	08009e1d 	.word	0x08009e1d
 8009bf8:	08009e1d 	.word	0x08009e1d
 8009bfc:	08009e1d 	.word	0x08009e1d
 8009c00:	08009e1d 	.word	0x08009e1d
 8009c04:	08009d69 	.word	0x08009d69
 8009c08:	08009d45 	.word	0x08009d45
 8009c0c:	08009e1d 	.word	0x08009e1d
 8009c10:	08009e1d 	.word	0x08009e1d
 8009c14:	08009d57 	.word	0x08009d57
 8009c18:	08009e1d 	.word	0x08009e1d
 8009c1c:	08009e1d 	.word	0x08009e1d
 8009c20:	08009e1d 	.word	0x08009e1d
 8009c24:	08009e1d 	.word	0x08009e1d
 8009c28:	08009d8d 	.word	0x08009d8d
 8009c2c:	08009e1d 	.word	0x08009e1d
 8009c30:	08009d9f 	.word	0x08009d9f
 8009c34:	08009e1d 	.word	0x08009e1d
 8009c38:	08009e1d 	.word	0x08009e1d
 8009c3c:	08009dc3 	.word	0x08009dc3
 8009c40:	08009e1d 	.word	0x08009e1d
 8009c44:	08009de7 	.word	0x08009de7
 8009c48:	08009e1d 	.word	0x08009e1d
 8009c4c:	08009e1d 	.word	0x08009e1d
 8009c50:	08009e1d 	.word	0x08009e1d
 8009c54:	08009e1d 	.word	0x08009e1d
 8009c58:	08009e0b 	.word	0x08009e0b
 8009c5c:	08009e1d 	.word	0x08009e1d
 8009c60:	08009e1d 	.word	0x08009e1d
 8009c64:	08009e1d 	.word	0x08009e1d
 8009c68:	08009e1d 	.word	0x08009e1d
 8009c6c:	08009e1d 	.word	0x08009e1d
 8009c70:	08009e1d 	.word	0x08009e1d
 8009c74:	08009e1d 	.word	0x08009e1d
 8009c78:	08009e1d 	.word	0x08009e1d
 8009c7c:	08009e1d 	.word	0x08009e1d
 8009c80:	08009e1d 	.word	0x08009e1d
 8009c84:	08009e1d 	.word	0x08009e1d
 8009c88:	08009e1d 	.word	0x08009e1d
 8009c8c:	08009e1d 	.word	0x08009e1d
 8009c90:	08009e1d 	.word	0x08009e1d
 8009c94:	08009e1d 	.word	0x08009e1d
 8009c98:	08009e1d 	.word	0x08009e1d
 8009c9c:	08009e1d 	.word	0x08009e1d
 8009ca0:	08009e1d 	.word	0x08009e1d
 8009ca4:	08009e1d 	.word	0x08009e1d
 8009ca8:	08009e1d 	.word	0x08009e1d
 8009cac:	08009e1d 	.word	0x08009e1d
 8009cb0:	08009e1d 	.word	0x08009e1d
 8009cb4:	08009e1d 	.word	0x08009e1d
 8009cb8:	08009e1d 	.word	0x08009e1d
 8009cbc:	08009e1d 	.word	0x08009e1d
 8009cc0:	08009e1d 	.word	0x08009e1d
 8009cc4:	08009e1d 	.word	0x08009e1d
 8009cc8:	08009e1d 	.word	0x08009e1d
 8009ccc:	08009e1d 	.word	0x08009e1d
 8009cd0:	08009e1d 	.word	0x08009e1d
 8009cd4:	08009e1d 	.word	0x08009e1d
 8009cd8:	08009e1d 	.word	0x08009e1d
 8009cdc:	08009e1d 	.word	0x08009e1d
 8009ce0:	08009e1d 	.word	0x08009e1d
 8009ce4:	08009e1d 	.word	0x08009e1d
 8009ce8:	08009e1d 	.word	0x08009e1d
 8009cec:	08009e1d 	.word	0x08009e1d
 8009cf0:	08009e1d 	.word	0x08009e1d
 8009cf4:	08009e1d 	.word	0x08009e1d
 8009cf8:	08009e1d 	.word	0x08009e1d
 8009cfc:	08009e1d 	.word	0x08009e1d
 8009d00:	08009e1d 	.word	0x08009e1d
 8009d04:	08009d7b 	.word	0x08009d7b
 8009d08:	2b9e      	cmp	r3, #158	; 0x9e
 8009d0a:	d051      	beq.n	8009db0 <SCSI_ProcessCmd+0x26c>
 8009d0c:	e086      	b.n	8009e1c <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8009d0e:	7afb      	ldrb	r3, [r7, #11]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	4619      	mov	r1, r3
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f000 f893 	bl	8009e40 <SCSI_TestUnitReady>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d1e:	e089      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009d20:	7afb      	ldrb	r3, [r7, #11]
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	4619      	mov	r1, r3
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 fb64 	bl	800a3f4 <SCSI_RequestSense>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d30:	e080      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8009d32:	7afb      	ldrb	r3, [r7, #11]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	4619      	mov	r1, r3
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 f8d5 	bl	8009ee8 <SCSI_Inquiry>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]
      break;
 8009d42:	e077      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009d44:	7afb      	ldrb	r3, [r7, #11]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f000 fc40 	bl	800a5d0 <SCSI_StartStopUnit>
 8009d50:	4603      	mov	r3, r0
 8009d52:	75fb      	strb	r3, [r7, #23]
      break;
 8009d54:	e06e      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009d56:	7afb      	ldrb	r3, [r7, #11]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f000 fc90 	bl	800a682 <SCSI_AllowPreventRemovable>
 8009d62:	4603      	mov	r3, r0
 8009d64:	75fb      	strb	r3, [r7, #23]
      break;
 8009d66:	e065      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009d68:	7afb      	ldrb	r3, [r7, #11]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f000 fae8 	bl	800a344 <SCSI_ModeSense6>
 8009d74:	4603      	mov	r3, r0
 8009d76:	75fb      	strb	r3, [r7, #23]
      break;
 8009d78:	e05c      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009d7a:	7afb      	ldrb	r3, [r7, #11]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 fb0b 	bl	800a39c <SCSI_ModeSense10>
 8009d86:	4603      	mov	r3, r0
 8009d88:	75fb      	strb	r3, [r7, #23]
      break;
 8009d8a:	e053      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009d8c:	7afb      	ldrb	r3, [r7, #11]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	4619      	mov	r1, r3
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f000 fa61 	bl	800a25a <SCSI_ReadFormatCapacity>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d9c:	e04a      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009d9e:	7afb      	ldrb	r3, [r7, #11]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	4619      	mov	r1, r3
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f000 f917 	bl	8009fd8 <SCSI_ReadCapacity10>
 8009daa:	4603      	mov	r3, r0
 8009dac:	75fb      	strb	r3, [r7, #23]
      break;
 8009dae:	e041      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009db0:	7afb      	ldrb	r3, [r7, #11]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	4619      	mov	r1, r3
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 f994 	bl	800a0e4 <SCSI_ReadCapacity16>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc0:	e038      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009dc2:	7afb      	ldrb	r3, [r7, #11]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f000 fc87 	bl	800a6dc <SCSI_Read10>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd2:	e02f      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009dd4:	7afb      	ldrb	r3, [r7, #11]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 fd2c 	bl	800a838 <SCSI_Read12>
 8009de0:	4603      	mov	r3, r0
 8009de2:	75fb      	strb	r3, [r7, #23]
      break;
 8009de4:	e026      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8009de6:	7afb      	ldrb	r3, [r7, #11]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	4619      	mov	r1, r3
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f000 fddb 	bl	800a9a8 <SCSI_Write10>
 8009df2:	4603      	mov	r3, r0
 8009df4:	75fb      	strb	r3, [r7, #23]
      break;
 8009df6:	e01d      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009df8:	7afb      	ldrb	r3, [r7, #11]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f000 fea4 	bl	800ab4c <SCSI_Write12>
 8009e04:	4603      	mov	r3, r0
 8009e06:	75fb      	strb	r3, [r7, #23]
      break;
 8009e08:	e014      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009e0a:	7afb      	ldrb	r3, [r7, #11]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f000 ff7d 	bl	800ad10 <SCSI_Verify10>
 8009e16:	4603      	mov	r3, r0
 8009e18:	75fb      	strb	r3, [r7, #23]
      break;
 8009e1a:	e00b      	b.n	8009e34 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009e1c:	7af9      	ldrb	r1, [r7, #11]
 8009e1e:	2320      	movs	r3, #32
 8009e20:	2205      	movs	r2, #5
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 fb7c 	bl	800a520 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	2202      	movs	r2, #2
 8009e2c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009e2e:	23ff      	movs	r3, #255	; 0xff
 8009e30:	75fb      	strb	r3, [r7, #23]
      break;
 8009e32:	bf00      	nop
  }

  return ret;
 8009e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	607a      	str	r2, [r7, #4]
 8009e4c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e54:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d102      	bne.n	8009e62 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8009e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e60:	e03e      	b.n	8009ee0 <SCSI_TestUnitReady+0xa0>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00b      	beq.n	8009e86 <SCSI_TestUnitReady+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e74:	7f59      	ldrb	r1, [r3, #29]
 8009e76:	2320      	movs	r3, #32
 8009e78:	2205      	movs	r2, #5
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f000 fb50 	bl	800a520 <SCSI_SenseCode>

    return -1;
 8009e80:	f04f 33ff 	mov.w	r3, #4294967295
 8009e84:	e02c      	b.n	8009ee0 <SCSI_TestUnitReady+0xa0>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e8c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d10b      	bne.n	8009eac <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009e94:	7af9      	ldrb	r1, [r7, #11]
 8009e96:	233a      	movs	r3, #58	; 0x3a
 8009e98:	2202      	movs	r2, #2
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f000 fb40 	bl	800a520 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	2205      	movs	r2, #5
 8009ea4:	721a      	strb	r2, [r3, #8]
    return -1;
 8009ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eaa:	e019      	b.n	8009ee0 <SCSI_TestUnitReady+0xa0>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	7afa      	ldrb	r2, [r7, #11]
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	4798      	blx	r3
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00b      	beq.n	8009ed8 <SCSI_TestUnitReady+0x98>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009ec0:	7af9      	ldrb	r1, [r7, #11]
 8009ec2:	233a      	movs	r3, #58	; 0x3a
 8009ec4:	2202      	movs	r2, #2
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f000 fb2a 	bl	800a520 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	2205      	movs	r2, #5
 8009ed0:	721a      	strb	r2, [r3, #8]

    return -1;
 8009ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed6:	e003      	b.n	8009ee0 <SCSI_TestUnitReady+0xa0>
  }
  hmsc->bot_data_length = 0U;
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	2200      	movs	r2, #0
 8009edc:	60da      	str	r2, [r3, #12]

  return 0;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b088      	sub	sp, #32
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009efc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d102      	bne.n	8009f0a <SCSI_Inquiry+0x22>
  {
    return -1;
 8009f04:	f04f 33ff 	mov.w	r3, #4294967295
 8009f08:	e05d      	b.n	8009fc6 <SCSI_Inquiry+0xde>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10b      	bne.n	8009f2e <SCSI_Inquiry+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f1c:	7f59      	ldrb	r1, [r3, #29]
 8009f1e:	2320      	movs	r3, #32
 8009f20:	2205      	movs	r2, #5
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f000 fafc 	bl	800a520 <SCSI_SenseCode>
    return -1;
 8009f28:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2c:	e04b      	b.n	8009fc6 <SCSI_Inquiry+0xde>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	3301      	adds	r3, #1
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	f003 0301 	and.w	r3, r3, #1
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d021      	beq.n	8009f80 <SCSI_Inquiry+0x98>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	3302      	adds	r3, #2
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d105      	bne.n	8009f52 <SCSI_Inquiry+0x6a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009f46:	2206      	movs	r2, #6
 8009f48:	4921      	ldr	r1, [pc, #132]	; (8009fd0 <SCSI_Inquiry+0xe8>)
 8009f4a:	69b8      	ldr	r0, [r7, #24]
 8009f4c:	f001 f86b 	bl	800b026 <SCSI_UpdateBotData>
 8009f50:	e038      	b.n	8009fc4 <SCSI_Inquiry+0xdc>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	3302      	adds	r3, #2
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b80      	cmp	r3, #128	; 0x80
 8009f5a:	d105      	bne.n	8009f68 <SCSI_Inquiry+0x80>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009f5c:	2208      	movs	r2, #8
 8009f5e:	491d      	ldr	r1, [pc, #116]	; (8009fd4 <SCSI_Inquiry+0xec>)
 8009f60:	69b8      	ldr	r0, [r7, #24]
 8009f62:	f001 f860 	bl	800b026 <SCSI_UpdateBotData>
 8009f66:	e02d      	b.n	8009fc4 <SCSI_Inquiry+0xdc>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f6e:	7f59      	ldrb	r1, [r3, #29]
 8009f70:	2324      	movs	r3, #36	; 0x24
 8009f72:	2205      	movs	r2, #5
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 fad3 	bl	800a520 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7e:	e022      	b.n	8009fc6 <SCSI_Inquiry+0xde>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f86:	69d9      	ldr	r1, [r3, #28]
 8009f88:	7afa      	ldrb	r2, [r7, #11]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	00db      	lsls	r3, r3, #3
 8009f8e:	4413      	add	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	440b      	add	r3, r1
 8009f94:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	3304      	adds	r3, #4
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	3305      	adds	r3, #5
 8009fa0:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	8bfa      	ldrh	r2, [r7, #30]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d303      	bcc.n	8009fb8 <SCSI_Inquiry+0xd0>
    {
      len = params[4];
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009fb8:	8bfb      	ldrh	r3, [r7, #30]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	6979      	ldr	r1, [r7, #20]
 8009fbe:	69b8      	ldr	r0, [r7, #24]
 8009fc0:	f001 f831 	bl	800b026 <SCSI_UpdateBotData>
  }

  return 0;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3720      	adds	r7, #32
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	200000f0 	.word	0x200000f0
 8009fd4:	200000f8 	.word	0x200000f8

08009fd8 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009fd8:	b590      	push	{r4, r7, lr}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	607a      	str	r2, [r7, #4]
 8009fe4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d102      	bne.n	8009ffa <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8009ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff8:	e070      	b.n	800a0dc <SCSI_ReadCapacity10+0x104>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a000:	685c      	ldr	r4, [r3, #4]
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a008:	3308      	adds	r3, #8
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 800a010:	3204      	adds	r2, #4
 800a012:	7af8      	ldrb	r0, [r7, #11]
 800a014:	4619      	mov	r1, r3
 800a016:	47a0      	blx	r4
 800a018:	4603      	mov	r3, r0
 800a01a:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a01c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d106      	bne.n	800a032 <SCSI_ReadCapacity10+0x5a>
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a02a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d108      	bne.n	800a044 <SCSI_ReadCapacity10+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a032:	7af9      	ldrb	r1, [r7, #11]
 800a034:	233a      	movs	r3, #58	; 0x3a
 800a036:	2202      	movs	r2, #2
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f000 fa71 	bl	800a520 <SCSI_SenseCode>
    return -1;
 800a03e:	f04f 33ff 	mov.w	r3, #4294967295
 800a042:	e04b      	b.n	800a0dc <SCSI_ReadCapacity10+0x104>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a04a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a04c:	3b01      	subs	r3, #1
 800a04e:	0e1b      	lsrs	r3, r3, #24
 800a050:	b2da      	uxtb	r2, r3
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a05c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a05e:	3b01      	subs	r3, #1
 800a060:	0c1b      	lsrs	r3, r3, #16
 800a062:	b2da      	uxtb	r2, r3
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a06e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a070:	3b01      	subs	r3, #1
 800a072:	0a1b      	lsrs	r3, r3, #8
 800a074:	b2da      	uxtb	r2, r3
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a082:	b2db      	uxtb	r3, r3
 800a084:	3b01      	subs	r3, #1
 800a086:	b2da      	uxtb	r2, r3
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a092:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a096:	161b      	asrs	r3, r3, #24
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0a4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0a8:	141b      	asrs	r3, r3, #16
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0ba:	0a1b      	lsrs	r3, r3, #8
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	2208      	movs	r2, #8
 800a0d8:	60da      	str	r2, [r3, #12]

  return 0;
 800a0da:	2300      	movs	r3, #0

}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	371c      	adds	r7, #28
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd90      	pop	{r4, r7, pc}

0800a0e4 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a0e4:	b590      	push	{r4, r7, lr}
 800a0e6:	b089      	sub	sp, #36	; 0x24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0f8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d102      	bne.n	800a106 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 800a100:	f04f 33ff 	mov.w	r3, #4294967295
 800a104:	e0a5      	b.n	800a252 <SCSI_ReadCapacity16+0x16e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a10c:	685c      	ldr	r4, [r3, #4]
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a114:	3308      	adds	r3, #8
 800a116:	69ba      	ldr	r2, [r7, #24]
 800a118:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 800a11c:	3204      	adds	r2, #4
 800a11e:	7af8      	ldrb	r0, [r7, #11]
 800a120:	4619      	mov	r1, r3
 800a122:	47a0      	blx	r4
 800a124:	4603      	mov	r3, r0
 800a126:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a128:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d106      	bne.n	800a13e <SCSI_ReadCapacity16+0x5a>
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a136:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d108      	bne.n	800a150 <SCSI_ReadCapacity16+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a13e:	7af9      	ldrb	r1, [r7, #11]
 800a140:	233a      	movs	r3, #58	; 0x3a
 800a142:	2202      	movs	r2, #2
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 f9eb 	bl	800a520 <SCSI_SenseCode>
    return -1;
 800a14a:	f04f 33ff 	mov.w	r3, #4294967295
 800a14e:	e080      	b.n	800a252 <SCSI_ReadCapacity16+0x16e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	330a      	adds	r3, #10
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	330b      	adds	r3, #11
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a160:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	330c      	adds	r3, #12
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a16a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	320d      	adds	r2, #13
 800a170:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a172:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a178:	2300      	movs	r3, #0
 800a17a:	77fb      	strb	r3, [r7, #31]
 800a17c:	e007      	b.n	800a18e <SCSI_ReadCapacity16+0xaa>
  {
    hmsc->bot_data[idx] = 0U;
 800a17e:	7ffb      	ldrb	r3, [r7, #31]
 800a180:	69ba      	ldr	r2, [r7, #24]
 800a182:	4413      	add	r3, r2
 800a184:	2200      	movs	r2, #0
 800a186:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a188:	7ffb      	ldrb	r3, [r7, #31]
 800a18a:	3301      	adds	r3, #1
 800a18c:	77fb      	strb	r3, [r7, #31]
 800a18e:	7ffa      	ldrb	r2, [r7, #31]
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	429a      	cmp	r2, r3
 800a196:	d3f2      	bcc.n	800a17e <SCSI_ReadCapacity16+0x9a>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a19e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	0e1b      	lsrs	r3, r3, #24
 800a1a4:	b2da      	uxtb	r2, r3
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	0c1b      	lsrs	r3, r3, #16
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	0a1b      	lsrs	r3, r3, #8
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a1ea:	161b      	asrs	r3, r3, #24
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a1fc:	141b      	asrs	r3, r3, #16
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a20a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a20e:	0a1b      	lsrs	r3, r3, #8
 800a210:	b29b      	uxth	r3, r3
 800a212:	b2da      	uxtb	r2, r3
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a21e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a222:	b2da      	uxtb	r2, r3
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	330a      	adds	r3, #10
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	330b      	adds	r3, #11
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a238:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	330c      	adds	r3, #12
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a242:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	320d      	adds	r2, #13
 800a248:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a24a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	60da      	str	r2, [r3, #12]

  return 0;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3724      	adds	r7, #36	; 0x24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd90      	pop	{r4, r7, pc}

0800a25a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b088      	sub	sp, #32
 800a25e:	af00      	add	r7, sp, #0
 800a260:	60f8      	str	r0, [r7, #12]
 800a262:	460b      	mov	r3, r1
 800a264:	607a      	str	r2, [r7, #4]
 800a266:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a26e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d102      	bne.n	800a27c <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 800a276:	f04f 33ff 	mov.w	r3, #4294967295
 800a27a:	e05e      	b.n	800a33a <SCSI_ReadFormatCapacity+0xe0>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f107 0214 	add.w	r2, r7, #20
 800a288:	f107 0110 	add.w	r1, r7, #16
 800a28c:	7af8      	ldrb	r0, [r7, #11]
 800a28e:	4798      	blx	r3
 800a290:	4603      	mov	r3, r0
 800a292:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d106      	bne.n	800a2aa <SCSI_ReadFormatCapacity+0x50>
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2a2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d108      	bne.n	800a2bc <SCSI_ReadFormatCapacity+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a2aa:	7af9      	ldrb	r1, [r7, #11]
 800a2ac:	233a      	movs	r3, #58	; 0x3a
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f000 f935 	bl	800a520 <SCSI_SenseCode>
    return -1;
 800a2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ba:	e03e      	b.n	800a33a <SCSI_ReadFormatCapacity+0xe0>
  }

  for (i = 0U; i < 12U ; i++)
 800a2bc:	2300      	movs	r3, #0
 800a2be:	83fb      	strh	r3, [r7, #30]
 800a2c0:	e007      	b.n	800a2d2 <SCSI_ReadFormatCapacity+0x78>
  {
    hmsc->bot_data[i] = 0U;
 800a2c2:	8bfb      	ldrh	r3, [r7, #30]
 800a2c4:	69ba      	ldr	r2, [r7, #24]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800a2cc:	8bfb      	ldrh	r3, [r7, #30]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	83fb      	strh	r3, [r7, #30]
 800a2d2:	8bfb      	ldrh	r3, [r7, #30]
 800a2d4:	2b0b      	cmp	r3, #11
 800a2d6:	d9f4      	bls.n	800a2c2 <SCSI_ReadFormatCapacity+0x68>
  }

  hmsc->bot_data[3] = 0x08U;
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	2208      	movs	r2, #8
 800a2dc:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	0e1b      	lsrs	r3, r3, #24
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	0c1b      	lsrs	r3, r3, #16
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	0a1b      	lsrs	r3, r3, #8
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	b2db      	uxtb	r3, r3
 800a306:	3b01      	subs	r3, #1
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	2202      	movs	r2, #2
 800a312:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800a314:	8abb      	ldrh	r3, [r7, #20]
 800a316:	141b      	asrs	r3, r3, #16
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a31e:	8abb      	ldrh	r3, [r7, #20]
 800a320:	0a1b      	lsrs	r3, r3, #8
 800a322:	b29b      	uxth	r3, r3
 800a324:	b2da      	uxtb	r2, r3
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a32a:	8abb      	ldrh	r3, [r7, #20]
 800a32c:	b2da      	uxtb	r2, r3
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	220c      	movs	r2, #12
 800a336:	60da      	str	r2, [r3, #12]

  return 0;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3720      	adds	r7, #32
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	460b      	mov	r3, r1
 800a34e:	607a      	str	r2, [r7, #4]
 800a350:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a358:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a35a:	2317      	movs	r3, #23
 800a35c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d102      	bne.n	800a36a <SCSI_ModeSense6+0x26>
  {
    return -1;
 800a364:	f04f 33ff 	mov.w	r3, #4294967295
 800a368:	e011      	b.n	800a38e <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	3304      	adds	r3, #4
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	b29b      	uxth	r3, r3
 800a372:	8afa      	ldrh	r2, [r7, #22]
 800a374:	429a      	cmp	r2, r3
 800a376:	d303      	bcc.n	800a380 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	3304      	adds	r3, #4
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a380:	8afb      	ldrh	r3, [r7, #22]
 800a382:	461a      	mov	r2, r3
 800a384:	4904      	ldr	r1, [pc, #16]	; (800a398 <SCSI_ModeSense6+0x54>)
 800a386:	6938      	ldr	r0, [r7, #16]
 800a388:	f000 fe4d 	bl	800b026 <SCSI_UpdateBotData>

  return 0;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20000100 	.word	0x20000100

0800a39c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3b0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a3b2:	231b      	movs	r3, #27
 800a3b4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d102      	bne.n	800a3c2 <SCSI_ModeSense10+0x26>
  {
    return -1;
 800a3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c0:	e011      	b.n	800a3e6 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	3308      	adds	r3, #8
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	8afa      	ldrh	r2, [r7, #22]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d303      	bcc.n	800a3d8 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	3308      	adds	r3, #8
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a3d8:	8afb      	ldrh	r3, [r7, #22]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	4904      	ldr	r1, [pc, #16]	; (800a3f0 <SCSI_ModeSense10+0x54>)
 800a3de:	6938      	ldr	r0, [r7, #16]
 800a3e0:	f000 fe21 	bl	800b026 <SCSI_UpdateBotData>

  return 0;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3718      	adds	r7, #24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000118 	.word	0x20000118

0800a3f4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	607a      	str	r2, [r7, #4]
 800a400:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a408:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d102      	bne.n	800a416 <SCSI_RequestSense+0x22>
  {
    return -1;
 800a410:	f04f 33ff 	mov.w	r3, #4294967295
 800a414:	e080      	b.n	800a518 <SCSI_RequestSense+0x124>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10b      	bne.n	800a43a <SCSI_RequestSense+0x46>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a428:	7f59      	ldrb	r1, [r3, #29]
 800a42a:	2320      	movs	r3, #32
 800a42c:	2205      	movs	r2, #5
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f000 f876 	bl	800a520 <SCSI_SenseCode>
    return -1;
 800a434:	f04f 33ff 	mov.w	r3, #4294967295
 800a438:	e06e      	b.n	800a518 <SCSI_RequestSense+0x124>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a43a:	2300      	movs	r3, #0
 800a43c:	75fb      	strb	r3, [r7, #23]
 800a43e:	e007      	b.n	800a450 <SCSI_RequestSense+0x5c>
  {
    hmsc->bot_data[i] = 0U;
 800a440:	7dfb      	ldrb	r3, [r7, #23]
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	4413      	add	r3, r2
 800a446:	2200      	movs	r2, #0
 800a448:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	3301      	adds	r3, #1
 800a44e:	75fb      	strb	r3, [r7, #23]
 800a450:	7dfb      	ldrb	r3, [r7, #23]
 800a452:	2b11      	cmp	r3, #17
 800a454:	d9f4      	bls.n	800a440 <SCSI_RequestSense+0x4c>
  }

  hmsc->bot_data[0] = 0x70U;
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	2270      	movs	r2, #112	; 0x70
 800a45a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	220c      	movs	r2, #12
 800a460:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a468:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a472:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a476:	429a      	cmp	r2, r3
 800a478:	d03f      	beq.n	800a4fa <SCSI_RequestSense+0x106>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a480:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a484:	461a      	mov	r2, r3
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a48c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a49a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a4a4:	00db      	lsls	r3, r3, #3
 800a4a6:	4413      	add	r3, r2
 800a4a8:	791a      	ldrb	r2, [r3, #4]
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4b4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a4be:	00db      	lsls	r3, r3, #3
 800a4c0:	4413      	add	r3, r2
 800a4c2:	795a      	ldrb	r2, [r3, #5]
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ce:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a4ea:	2b04      	cmp	r3, #4
 800a4ec:	d105      	bne.n	800a4fa <SCSI_RequestSense+0x106>
    {
      hmsc->scsi_sense_head = 0U;
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	2212      	movs	r2, #18
 800a4fe:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	3304      	adds	r3, #4
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	2b12      	cmp	r3, #18
 800a508:	d805      	bhi.n	800a516 <SCSI_RequestSense+0x122>
  {
    hmsc->bot_data_length = params[4];
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	3304      	adds	r3, #4
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	461a      	mov	r2, r3
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3718      	adds	r7, #24
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	4608      	mov	r0, r1
 800a52a:	4611      	mov	r1, r2
 800a52c:	461a      	mov	r2, r3
 800a52e:	4603      	mov	r3, r0
 800a530:	70fb      	strb	r3, [r7, #3]
 800a532:	460b      	mov	r3, r1
 800a534:	70bb      	strb	r3, [r7, #2]
 800a536:	4613      	mov	r3, r2
 800a538:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a540:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d03d      	beq.n	800a5c4 <SCSI_SenseCode+0xa4>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a54e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a552:	461a      	mov	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a55a:	78b9      	ldrb	r1, [r7, #2]
 800a55c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a566:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a570:	00db      	lsls	r3, r3, #3
 800a572:	4413      	add	r3, r2
 800a574:	787a      	ldrb	r2, [r7, #1]
 800a576:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a57e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a588:	00db      	lsls	r3, r3, #3
 800a58a:	4413      	add	r3, r2
 800a58c:	2200      	movs	r2, #0
 800a58e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a596:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a59a:	3301      	adds	r3, #1
 800a59c:	b2da      	uxtb	r2, r3
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ae:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	d107      	bne.n	800a5c6 <SCSI_SenseCode+0xa6>
  {
    hmsc->scsi_sense_tail = 0U;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a5c2:	e000      	b.n	800a5c6 <SCSI_SenseCode+0xa6>
    return;
 800a5c4:	bf00      	nop
  }
}
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	607a      	str	r2, [r7, #4]
 800a5dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5e4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d102      	bne.n	800a5f2 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 800a5ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f0:	e043      	b.n	800a67a <SCSI_StartStopUnit+0xaa>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d10f      	bne.n	800a620 <SCSI_StartStopUnit+0x50>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	3304      	adds	r3, #4
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	f003 0303 	and.w	r3, r3, #3
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d108      	bne.n	800a620 <SCSI_StartStopUnit+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a60e:	7af9      	ldrb	r1, [r7, #11]
 800a610:	2324      	movs	r3, #36	; 0x24
 800a612:	2205      	movs	r2, #5
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f7ff ff83 	bl	800a520 <SCSI_SenseCode>

    return -1;
 800a61a:	f04f 33ff 	mov.w	r3, #4294967295
 800a61e:	e02c      	b.n	800a67a <SCSI_StartStopUnit+0xaa>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	3304      	adds	r3, #4
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	f003 0303 	and.w	r3, r3, #3
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d106      	bne.n	800a63c <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a634:	2200      	movs	r2, #0
 800a636:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a63a:	e01a      	b.n	800a672 <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	3304      	adds	r3, #4
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	f003 0303 	and.w	r3, r3, #3
 800a646:	2b02      	cmp	r3, #2
 800a648:	d106      	bne.n	800a658 <SCSI_StartStopUnit+0x88>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a650:	2202      	movs	r2, #2
 800a652:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a656:	e00c      	b.n	800a672 <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3304      	adds	r3, #4
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	f003 0303 	and.w	r3, r3, #3
 800a662:	2b03      	cmp	r3, #3
 800a664:	d105      	bne.n	800a672 <SCSI_StartStopUnit+0xa2>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2200      	movs	r2, #0
 800a676:	60da      	str	r2, [r3, #12]

  return 0;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a682:	b480      	push	{r7}
 800a684:	b087      	sub	sp, #28
 800a686:	af00      	add	r7, sp, #0
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	460b      	mov	r3, r1
 800a68c:	607a      	str	r2, [r7, #4]
 800a68e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a696:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d102      	bne.n	800a6a4 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 800a69e:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a2:	e015      	b.n	800a6d0 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d106      	bne.n	800a6bc <SCSI_AllowPreventRemovable+0x3a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a6ba:	e005      	b.n	800a6c8 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	60da      	str	r2, [r3, #12]

  return 0;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	371c      	adds	r7, #28
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6f0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d102      	bne.n	800a6fe <SCSI_Read10+0x22>
  {
    return -1;
 800a6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6fc:	e098      	b.n	800a830 <SCSI_Read10+0x154>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	7a1b      	ldrb	r3, [r3, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	f040 808a 	bne.w	800a81c <SCSI_Read10+0x140>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a70e:	7f1b      	ldrb	r3, [r3, #28]
 800a710:	b25b      	sxtb	r3, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	db0b      	blt.n	800a72e <SCSI_Read10+0x52>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a71c:	7f59      	ldrb	r1, [r3, #29]
 800a71e:	2320      	movs	r3, #32
 800a720:	2205      	movs	r2, #5
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f7ff fefc 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800a728:	f04f 33ff 	mov.w	r3, #4294967295
 800a72c:	e080      	b.n	800a830 <SCSI_Read10+0x154>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a734:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a738:	2b02      	cmp	r3, #2
 800a73a:	d108      	bne.n	800a74e <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a73c:	7af9      	ldrb	r1, [r7, #11]
 800a73e:	233a      	movs	r3, #58	; 0x3a
 800a740:	2202      	movs	r2, #2
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f7ff feec 	bl	800a520 <SCSI_SenseCode>

      return -1;
 800a748:	f04f 33ff 	mov.w	r3, #4294967295
 800a74c:	e070      	b.n	800a830 <SCSI_Read10+0x154>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	7afa      	ldrb	r2, [r7, #11]
 800a758:	4610      	mov	r0, r2
 800a75a:	4798      	blx	r3
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d008      	beq.n	800a774 <SCSI_Read10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a762:	7af9      	ldrb	r1, [r7, #11]
 800a764:	233a      	movs	r3, #58	; 0x3a
 800a766:	2202      	movs	r2, #2
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7ff fed9 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800a76e:	f04f 33ff 	mov.w	r3, #4294967295
 800a772:	e05d      	b.n	800a830 <SCSI_Read10+0x154>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3302      	adds	r3, #2
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	3303      	adds	r3, #3
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a784:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	3304      	adds	r3, #4
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a78e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	3205      	adds	r2, #5
 800a794:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a796:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a79e:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3307      	adds	r3, #7
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	021b      	lsls	r3, r3, #8
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	3208      	adds	r2, #8
 800a7ac:	7812      	ldrb	r2, [r2, #0]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7b6:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7c8:	7af9      	ldrb	r1, [r7, #11]
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 fadb 	bl	800ad86 <SCSI_CheckAddressRange>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	da02      	bge.n	800a7dc <SCSI_Read10+0x100>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7da:	e029      	b.n	800a830 <SCSI_Read10+0x154>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7e2:	699a      	ldr	r2, [r3, #24]
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ec:	6979      	ldr	r1, [r7, #20]
 800a7ee:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a7f2:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a7f6:	fb01 f303 	mul.w	r3, r1, r3
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d00b      	beq.n	800a816 <SCSI_Read10+0x13a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a804:	7f59      	ldrb	r1, [r3, #29]
 800a806:	2320      	movs	r3, #32
 800a808:	2205      	movs	r2, #5
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f7ff fe88 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800a810:	f04f 33ff 	mov.w	r3, #4294967295
 800a814:	e00c      	b.n	800a830 <SCSI_Read10+0x154>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2202      	movs	r2, #2
 800a81a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a822:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a824:	7afb      	ldrb	r3, [r7, #11]
 800a826:	4619      	mov	r1, r3
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 fad5 	bl	800add8 <SCSI_ProcessRead>
 800a82e:	4603      	mov	r3, r0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3718      	adds	r7, #24
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	460b      	mov	r3, r1
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a84c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d102      	bne.n	800a85a <SCSI_Read12+0x22>
  {
    return -1;
 800a854:	f04f 33ff 	mov.w	r3, #4294967295
 800a858:	e0a2      	b.n	800a9a0 <SCSI_Read12+0x168>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	7a1b      	ldrb	r3, [r3, #8]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f040 8094 	bne.w	800a98c <SCSI_Read12+0x154>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a86a:	7f1b      	ldrb	r3, [r3, #28]
 800a86c:	b25b      	sxtb	r3, r3
 800a86e:	2b00      	cmp	r3, #0
 800a870:	db0b      	blt.n	800a88a <SCSI_Read12+0x52>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a878:	7f59      	ldrb	r1, [r3, #29]
 800a87a:	2320      	movs	r3, #32
 800a87c:	2205      	movs	r2, #5
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f7ff fe4e 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800a884:	f04f 33ff 	mov.w	r3, #4294967295
 800a888:	e08a      	b.n	800a9a0 <SCSI_Read12+0x168>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a890:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a894:	2b02      	cmp	r3, #2
 800a896:	d108      	bne.n	800a8aa <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a898:	7af9      	ldrb	r1, [r7, #11]
 800a89a:	233a      	movs	r3, #58	; 0x3a
 800a89c:	2202      	movs	r2, #2
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f7ff fe3e 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800a8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a8:	e07a      	b.n	800a9a0 <SCSI_Read12+0x168>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	7afa      	ldrb	r2, [r7, #11]
 800a8b4:	4610      	mov	r0, r2
 800a8b6:	4798      	blx	r3
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d008      	beq.n	800a8d0 <SCSI_Read12+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a8be:	7af9      	ldrb	r1, [r7, #11]
 800a8c0:	233a      	movs	r3, #58	; 0x3a
 800a8c2:	2202      	movs	r2, #2
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f7ff fe2b 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800a8ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ce:	e067      	b.n	800a9a0 <SCSI_Read12+0x168>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	3302      	adds	r3, #2
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	3303      	adds	r3, #3
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a8e0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a8ea:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	3205      	adds	r2, #5
 800a8f0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a8f2:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a8f4:	697a      	ldr	r2, [r7, #20]
 800a8f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8fa:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3306      	adds	r3, #6
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	3307      	adds	r3, #7
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a90c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	3308      	adds	r3, #8
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a916:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	3209      	adds	r2, #9
 800a91c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a91e:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a926:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a92e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a938:	7af9      	ldrb	r1, [r7, #11]
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f000 fa23 	bl	800ad86 <SCSI_CheckAddressRange>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	da02      	bge.n	800a94c <SCSI_Read12+0x114>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a946:	f04f 33ff 	mov.w	r3, #4294967295
 800a94a:	e029      	b.n	800a9a0 <SCSI_Read12+0x168>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a952:	699a      	ldr	r2, [r3, #24]
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a95a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a95c:	6979      	ldr	r1, [r7, #20]
 800a95e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a962:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a966:	fb01 f303 	mul.w	r3, r1, r3
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d00b      	beq.n	800a986 <SCSI_Read12+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a974:	7f59      	ldrb	r1, [r3, #29]
 800a976:	2320      	movs	r3, #32
 800a978:	2205      	movs	r2, #5
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f7ff fdd0 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800a980:	f04f 33ff 	mov.w	r3, #4294967295
 800a984:	e00c      	b.n	800a9a0 <SCSI_Read12+0x168>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2202      	movs	r2, #2
 800a98a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a992:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a994:	7afb      	ldrb	r3, [r7, #11]
 800a996:	4619      	mov	r1, r3
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 fa1d 	bl	800add8 <SCSI_ProcessRead>
 800a99e:	4603      	mov	r3, r0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3718      	adds	r7, #24
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	607a      	str	r2, [r7, #4]
 800a9b4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9bc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d102      	bne.n	800a9ca <SCSI_Write10+0x22>
  {
    return -1;
 800a9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c8:	e0bc      	b.n	800ab44 <SCSI_Write10+0x19c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	7a1b      	ldrb	r3, [r3, #8]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f040 80b2 	bne.w	800ab38 <SCSI_Write10+0x190>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9da:	699b      	ldr	r3, [r3, #24]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10b      	bne.n	800a9f8 <SCSI_Write10+0x50>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9e6:	7f59      	ldrb	r1, [r3, #29]
 800a9e8:	2320      	movs	r3, #32
 800a9ea:	2205      	movs	r2, #5
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f7ff fd97 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800a9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f6:	e0a5      	b.n	800ab44 <SCSI_Write10+0x19c>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9fe:	7f1b      	ldrb	r3, [r3, #28]
 800aa00:	b25b      	sxtb	r3, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	da0b      	bge.n	800aa1e <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa0c:	7f59      	ldrb	r1, [r3, #29]
 800aa0e:	2320      	movs	r3, #32
 800aa10:	2205      	movs	r2, #5
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f7ff fd84 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800aa18:	f04f 33ff 	mov.w	r3, #4294967295
 800aa1c:	e092      	b.n	800ab44 <SCSI_Write10+0x19c>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	7afa      	ldrb	r2, [r7, #11]
 800aa28:	4610      	mov	r0, r2
 800aa2a:	4798      	blx	r3
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d008      	beq.n	800aa44 <SCSI_Write10+0x9c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800aa32:	7af9      	ldrb	r1, [r7, #11]
 800aa34:	233a      	movs	r3, #58	; 0x3a
 800aa36:	2202      	movs	r2, #2
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f7ff fd71 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800aa3e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa42:	e07f      	b.n	800ab44 <SCSI_Write10+0x19c>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	7afa      	ldrb	r2, [r7, #11]
 800aa4e:	4610      	mov	r0, r2
 800aa50:	4798      	blx	r3
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d008      	beq.n	800aa6a <SCSI_Write10+0xc2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800aa58:	7af9      	ldrb	r1, [r7, #11]
 800aa5a:	2327      	movs	r3, #39	; 0x27
 800aa5c:	2202      	movs	r2, #2
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f7ff fd5e 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800aa64:	f04f 33ff 	mov.w	r3, #4294967295
 800aa68:	e06c      	b.n	800ab44 <SCSI_Write10+0x19c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	3302      	adds	r3, #2
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	3303      	adds	r3, #3
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa7a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	3304      	adds	r3, #4
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800aa84:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	3205      	adds	r2, #5
 800aa8a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800aa8c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa94:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	3307      	adds	r3, #7
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	3208      	adds	r2, #8
 800aaa2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aaac:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aab4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aabe:	7af9      	ldrb	r1, [r7, #11]
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f000 f960 	bl	800ad86 <SCSI_CheckAddressRange>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	da02      	bge.n	800aad2 <SCSI_Write10+0x12a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800aacc:	f04f 33ff 	mov.w	r3, #4294967295
 800aad0:	e038      	b.n	800ab44 <SCSI_Write10+0x19c>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aae0:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aae4:	fb02 f303 	mul.w	r3, r2, r3
 800aae8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	693a      	ldr	r2, [r7, #16]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d00b      	beq.n	800ab10 <SCSI_Write10+0x168>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aafe:	7f59      	ldrb	r1, [r3, #29]
 800ab00:	2320      	movs	r3, #32
 800ab02:	2205      	movs	r2, #5
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f7ff fd0b 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800ab0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab0e:	e019      	b.n	800ab44 <SCSI_Write10+0x19c>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab16:	bf28      	it	cs
 800ab18:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ab1c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	2201      	movs	r2, #1
 800ab22:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	f103 0210 	add.w	r2, r3, #16
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	2101      	movs	r1, #1
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f002 fa22 	bl	800cf78 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	e005      	b.n	800ab44 <SCSI_Write10+0x19c>
    return SCSI_ProcessWrite(pdev, lun);
 800ab38:	7afb      	ldrb	r3, [r7, #11]
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f000 f9d5 	bl	800aeec <SCSI_ProcessWrite>
 800ab42:	4603      	mov	r3, r0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3718      	adds	r7, #24
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	460b      	mov	r3, r1
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab60:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d102      	bne.n	800ab6e <SCSI_Write12+0x22>
  {
    return -1;
 800ab68:	f04f 33ff 	mov.w	r3, #4294967295
 800ab6c:	e0cc      	b.n	800ad08 <SCSI_Write12+0x1bc>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	7a1b      	ldrb	r3, [r3, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f040 80c2 	bne.w	800acfc <SCSI_Write12+0x1b0>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab7e:	699b      	ldr	r3, [r3, #24]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10b      	bne.n	800ab9c <SCSI_Write12+0x50>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab8a:	7f59      	ldrb	r1, [r3, #29]
 800ab8c:	2320      	movs	r3, #32
 800ab8e:	2205      	movs	r2, #5
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f7ff fcc5 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800ab96:	f04f 33ff 	mov.w	r3, #4294967295
 800ab9a:	e0b5      	b.n	800ad08 <SCSI_Write12+0x1bc>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aba2:	7f1b      	ldrb	r3, [r3, #28]
 800aba4:	b25b      	sxtb	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	da0b      	bge.n	800abc2 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abb0:	7f59      	ldrb	r1, [r3, #29]
 800abb2:	2320      	movs	r3, #32
 800abb4:	2205      	movs	r2, #5
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f7ff fcb2 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800abbc:	f04f 33ff 	mov.w	r3, #4294967295
 800abc0:	e0a2      	b.n	800ad08 <SCSI_Write12+0x1bc>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	7afa      	ldrb	r2, [r7, #11]
 800abcc:	4610      	mov	r0, r2
 800abce:	4798      	blx	r3
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00b      	beq.n	800abee <SCSI_Write12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800abd6:	7af9      	ldrb	r1, [r7, #11]
 800abd8:	233a      	movs	r3, #58	; 0x3a
 800abda:	2202      	movs	r2, #2
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f7ff fc9f 	bl	800a520 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	2205      	movs	r2, #5
 800abe6:	721a      	strb	r2, [r3, #8]
      return -1;
 800abe8:	f04f 33ff 	mov.w	r3, #4294967295
 800abec:	e08c      	b.n	800ad08 <SCSI_Write12+0x1bc>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	7afa      	ldrb	r2, [r7, #11]
 800abf8:	4610      	mov	r0, r2
 800abfa:	4798      	blx	r3
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00b      	beq.n	800ac1a <SCSI_Write12+0xce>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ac02:	7af9      	ldrb	r1, [r7, #11]
 800ac04:	2327      	movs	r3, #39	; 0x27
 800ac06:	2202      	movs	r2, #2
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f7ff fc89 	bl	800a520 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2205      	movs	r2, #5
 800ac12:	721a      	strb	r2, [r3, #8]
      return -1;
 800ac14:	f04f 33ff 	mov.w	r3, #4294967295
 800ac18:	e076      	b.n	800ad08 <SCSI_Write12+0x1bc>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	3302      	adds	r3, #2
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	3303      	adds	r3, #3
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ac2a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	3304      	adds	r3, #4
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ac34:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	3205      	adds	r2, #5
 800ac3a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ac3c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac44:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	3306      	adds	r3, #6
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	3307      	adds	r3, #7
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ac56:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	3308      	adds	r3, #8
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ac60:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	3209      	adds	r2, #9
 800ac66:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ac68:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac70:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac82:	7af9      	ldrb	r1, [r7, #11]
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f000 f87e 	bl	800ad86 <SCSI_CheckAddressRange>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	da02      	bge.n	800ac96 <SCSI_Write12+0x14a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ac90:	f04f 33ff 	mov.w	r3, #4294967295
 800ac94:	e038      	b.n	800ad08 <SCSI_Write12+0x1bc>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac9e:	697a      	ldr	r2, [r7, #20]
 800aca0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aca4:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aca8:	fb02 f303 	mul.w	r3, r2, r3
 800acac:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acb4:	699b      	ldr	r3, [r3, #24]
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d00b      	beq.n	800acd4 <SCSI_Write12+0x188>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acc2:	7f59      	ldrb	r1, [r3, #29]
 800acc4:	2320      	movs	r3, #32
 800acc6:	2205      	movs	r2, #5
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f7ff fc29 	bl	800a520 <SCSI_SenseCode>
      return -1;
 800acce:	f04f 33ff 	mov.w	r3, #4294967295
 800acd2:	e019      	b.n	800ad08 <SCSI_Write12+0x1bc>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acda:	bf28      	it	cs
 800acdc:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ace0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2201      	movs	r2, #1
 800ace6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f103 0210 	add.w	r2, r3, #16
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	2101      	movs	r1, #1
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f002 f940 	bl	800cf78 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	e005      	b.n	800ad08 <SCSI_Write12+0x1bc>
    return SCSI_ProcessWrite(pdev, lun);
 800acfc:	7afb      	ldrb	r3, [r7, #11]
 800acfe:	4619      	mov	r1, r3
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f000 f8f3 	bl	800aeec <SCSI_ProcessWrite>
 800ad06:	4603      	mov	r3, r0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	607a      	str	r2, [r7, #4]
 800ad1c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad24:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d102      	bne.n	800ad32 <SCSI_Verify10+0x22>
  {
    return -1;
 800ad2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad30:	e025      	b.n	800ad7e <SCSI_Verify10+0x6e>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	3301      	adds	r3, #1
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	f003 0302 	and.w	r3, r3, #2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d008      	beq.n	800ad52 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ad40:	7af9      	ldrb	r1, [r7, #11]
 800ad42:	2324      	movs	r3, #36	; 0x24
 800ad44:	2205      	movs	r2, #5
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7ff fbea 	bl	800a520 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800ad4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad50:	e015      	b.n	800ad7e <SCSI_Verify10+0x6e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad62:	7af9      	ldrb	r1, [r7, #11]
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 f80e 	bl	800ad86 <SCSI_CheckAddressRange>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	da02      	bge.n	800ad76 <SCSI_Verify10+0x66>
  {
    return -1; /* error */
 800ad70:	f04f 33ff 	mov.w	r3, #4294967295
 800ad74:	e003      	b.n	800ad7e <SCSI_Verify10+0x6e>
  }

  hmsc->bot_data_length = 0U;
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	60da      	str	r2, [r3, #12]

  return 0;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3718      	adds	r7, #24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b086      	sub	sp, #24
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	60f8      	str	r0, [r7, #12]
 800ad8e:	607a      	str	r2, [r7, #4]
 800ad90:	603b      	str	r3, [r7, #0]
 800ad92:	460b      	mov	r3, r1
 800ad94:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad9c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d102      	bne.n	800adaa <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800ada4:	f04f 33ff 	mov.w	r3, #4294967295
 800ada8:	e012      	b.n	800add0 <SCSI_CheckAddressRange+0x4a>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	441a      	add	r2, r3
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adb8:	429a      	cmp	r2, r3
 800adba:	d908      	bls.n	800adce <SCSI_CheckAddressRange+0x48>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800adbc:	7af9      	ldrb	r1, [r7, #11]
 800adbe:	2321      	movs	r3, #33	; 0x21
 800adc0:	2205      	movs	r2, #5
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f7ff fbac 	bl	800a520 <SCSI_SenseCode>
    return -1;
 800adc8:	f04f 33ff 	mov.w	r3, #4294967295
 800adcc:	e000      	b.n	800add0 <SCSI_CheckAddressRange+0x4a>
  }

  return 0;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3718      	adds	r7, #24
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800add8:	b590      	push	{r4, r7, lr}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	460b      	mov	r3, r1
 800ade2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adea:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800adfa:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800adfe:	fb02 f303 	mul.w	r3, r2, r3
 800ae02:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d102      	bne.n	800ae10 <SCSI_ProcessRead+0x38>
  {
    return -1;
 800ae0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae0e:	e069      	b.n	800aee4 <SCSI_ProcessRead+0x10c>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae16:	bf28      	it	cs
 800ae18:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ae1c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae24:	691c      	ldr	r4, [r3, #16]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f103 0110 	add.w	r1, r3, #16
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae3a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae3e:	4618      	mov	r0, r3
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	78f8      	ldrb	r0, [r7, #3]
 800ae4a:	47a0      	blx	r4
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	da08      	bge.n	800ae64 <SCSI_ProcessRead+0x8c>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800ae52:	78f9      	ldrb	r1, [r7, #3]
 800ae54:	2311      	movs	r3, #17
 800ae56:	2204      	movs	r2, #4
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7ff fb61 	bl	800a520 <SCSI_SenseCode>
    return -1;
 800ae5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae62:	e03f      	b.n	800aee4 <SCSI_ProcessRead+0x10c>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f103 0210 	add.w	r2, r3, #16
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	2181      	movs	r1, #129	; 0x81
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f002 f84a 	bl	800cf08 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae86:	4619      	mov	r1, r3
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae8e:	4413      	add	r3, r2
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae96:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aea6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aeaa:	4619      	mov	r1, r3
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	fbb3 f3f1 	udiv	r3, r3, r1
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aeba:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aece:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d102      	bne.n	800aee2 <SCSI_ProcessRead+0x10a>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2203      	movs	r2, #3
 800aee0:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3714      	adds	r7, #20
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd90      	pop	{r4, r7, pc}

0800aeec <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800aeec:	b590      	push	{r4, r7, lr}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aefe:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af0e:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800af12:	fb02 f303 	mul.w	r3, r2, r3
 800af16:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d102      	bne.n	800af24 <SCSI_ProcessWrite+0x38>
  {
    return -1;
 800af1e:	f04f 33ff 	mov.w	r3, #4294967295
 800af22:	e07c      	b.n	800b01e <SCSI_ProcessWrite+0x132>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af2a:	bf28      	it	cs
 800af2c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800af30:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af38:	695c      	ldr	r4, [r3, #20]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f103 0110 	add.w	r1, r3, #16
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af46:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af52:	4618      	mov	r0, r3
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	78f8      	ldrb	r0, [r7, #3]
 800af5e:	47a0      	blx	r4
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	da08      	bge.n	800af78 <SCSI_ProcessWrite+0x8c>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800af66:	78f9      	ldrb	r1, [r7, #3]
 800af68:	2303      	movs	r3, #3
 800af6a:	2204      	movs	r2, #4
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7ff fad7 	bl	800a520 <SCSI_SenseCode>
    return -1;
 800af72:	f04f 33ff 	mov.w	r3, #4294967295
 800af76:	e052      	b.n	800b01e <SCSI_ProcessWrite+0x132>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af8a:	4619      	mov	r1, r3
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800af92:	4413      	add	r3, r2
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af9a:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afaa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800afae:	4619      	mov	r1, r3
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	fbb3 f3f1 	udiv	r3, r3, r1
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800afbe:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	1ad3      	subs	r3, r2, r3
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800afd2:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d104      	bne.n	800afea <SCSI_ProcessWrite+0xfe>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800afe0:	2100      	movs	r1, #0
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7fe fd16 	bl	8009a14 <MSC_BOT_SendCSW>
 800afe8:	e018      	b.n	800b01c <SCSI_ProcessWrite+0x130>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aff8:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800affc:	fb02 f303 	mul.w	r3, r2, r3
 800b000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b004:	bf28      	it	cs
 800b006:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800b00a:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f103 0210 	add.w	r2, r3, #16
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	2101      	movs	r1, #1
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f001 ffae 	bl	800cf78 <USBD_LL_PrepareReceive>
  }

  return 0;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	bd90      	pop	{r4, r7, pc}

0800b026 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800b026:	b480      	push	{r7}
 800b028:	b087      	sub	sp, #28
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	60f8      	str	r0, [r7, #12]
 800b02e:	60b9      	str	r1, [r7, #8]
 800b030:	4613      	mov	r3, r2
 800b032:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800b034:	88fb      	ldrh	r3, [r7, #6]
 800b036:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d102      	bne.n	800b044 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800b03e:	f04f 33ff 	mov.w	r3, #4294967295
 800b042:	e013      	b.n	800b06c <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800b044:	8afa      	ldrh	r2, [r7, #22]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800b04a:	e00b      	b.n	800b064 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800b04c:	8afb      	ldrh	r3, [r7, #22]
 800b04e:	3b01      	subs	r3, #1
 800b050:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800b052:	8afb      	ldrh	r3, [r7, #22]
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	441a      	add	r2, r3
 800b058:	8afb      	ldrh	r3, [r7, #22]
 800b05a:	7811      	ldrb	r1, [r2, #0]
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	4413      	add	r3, r2
 800b060:	460a      	mov	r2, r1
 800b062:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800b064:	8afb      	ldrh	r3, [r7, #22]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1f0      	bne.n	800b04c <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	371c      	adds	r7, #28
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	4613      	mov	r3, r2
 800b084:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d101      	bne.n	800b090 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b08c:	2303      	movs	r3, #3
 800b08e:	e01f      	b.n	800b0d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2200      	movs	r2, #0
 800b094:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d003      	beq.n	800b0b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	79fa      	ldrb	r2, [r7, #7]
 800b0c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f001 fd29 	bl	800cb1c <USBD_LL_Init>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3718      	adds	r7, #24
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	e016      	b.n	800b11e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00b      	beq.n	800b11c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10c:	f107 020e 	add.w	r2, r7, #14
 800b110:	4610      	mov	r0, r2
 800b112:	4798      	blx	r3
 800b114:	4602      	mov	r2, r0
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b082      	sub	sp, #8
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f001 fd40 	bl	800cbb4 <USBD_LL_Start>
 800b134:	4603      	mov	r3, r0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b13e:	b480      	push	{r7}
 800b140:	b083      	sub	sp, #12
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	460b      	mov	r3, r1
 800b15e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b160:	2303      	movs	r3, #3
 800b162:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d009      	beq.n	800b182 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	78fa      	ldrb	r2, [r7, #3]
 800b178:	4611      	mov	r1, r2
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	4798      	blx	r3
 800b17e:	4603      	mov	r3, r0
 800b180:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b182:	7bfb      	ldrb	r3, [r7, #15]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	460b      	mov	r3, r1
 800b196:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d007      	beq.n	800b1b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	78fa      	ldrb	r2, [r7, #3]
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	4798      	blx	r3
  }

  return USBD_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 ff90 	bl	800c0f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b1f0:	f003 031f 	and.w	r3, r3, #31
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	d01a      	beq.n	800b22e <USBD_LL_SetupStage+0x72>
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d822      	bhi.n	800b242 <USBD_LL_SetupStage+0x86>
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d002      	beq.n	800b206 <USBD_LL_SetupStage+0x4a>
 800b200:	2b01      	cmp	r3, #1
 800b202:	d00a      	beq.n	800b21a <USBD_LL_SetupStage+0x5e>
 800b204:	e01d      	b.n	800b242 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fa62 	bl	800b6d8 <USBD_StdDevReq>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]
      break;
 800b218:	e020      	b.n	800b25c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fac6 	bl	800b7b4 <USBD_StdItfReq>
 800b228:	4603      	mov	r3, r0
 800b22a:	73fb      	strb	r3, [r7, #15]
      break;
 800b22c:	e016      	b.n	800b25c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b234:	4619      	mov	r1, r3
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fb05 	bl	800b846 <USBD_StdEPReq>
 800b23c:	4603      	mov	r3, r0
 800b23e:	73fb      	strb	r3, [r7, #15]
      break;
 800b240:	e00c      	b.n	800b25c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b248:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f001 fd8b 	bl	800cd6c <USBD_LL_StallEP>
 800b256:	4603      	mov	r3, r0
 800b258:	73fb      	strb	r3, [r7, #15]
      break;
 800b25a:	bf00      	nop
  }

  return ret;
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b086      	sub	sp, #24
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	460b      	mov	r3, r1
 800b270:	607a      	str	r2, [r7, #4]
 800b272:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b274:	7afb      	ldrb	r3, [r7, #11]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d138      	bne.n	800b2ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b280:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d14a      	bne.n	800b322 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	689a      	ldr	r2, [r3, #8]
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	429a      	cmp	r2, r3
 800b296:	d913      	bls.n	800b2c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	689a      	ldr	r2, [r3, #8]
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	1ad2      	subs	r2, r2, r3
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	68da      	ldr	r2, [r3, #12]
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	bf28      	it	cs
 800b2b2:	4613      	movcs	r3, r2
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	6879      	ldr	r1, [r7, #4]
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f000 fff2 	bl	800c2a2 <USBD_CtlContinueRx>
 800b2be:	e030      	b.n	800b322 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	2b03      	cmp	r3, #3
 800b2ca:	d10b      	bne.n	800b2e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d005      	beq.n	800b2e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2de:	691b      	ldr	r3, [r3, #16]
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	f000 ffed 	bl	800c2c4 <USBD_CtlSendStatus>
 800b2ea:	e01a      	b.n	800b322 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	2b03      	cmp	r3, #3
 800b2f6:	d114      	bne.n	800b322 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2fe:	699b      	ldr	r3, [r3, #24]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00e      	beq.n	800b322 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	7afa      	ldrb	r2, [r7, #11]
 800b30e:	4611      	mov	r1, r2
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	4798      	blx	r3
 800b314:	4603      	mov	r3, r0
 800b316:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b318:	7dfb      	ldrb	r3, [r7, #23]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d001      	beq.n	800b322 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
 800b320:	e000      	b.n	800b324 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3718      	adds	r7, #24
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b086      	sub	sp, #24
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	460b      	mov	r3, r1
 800b336:	607a      	str	r2, [r7, #4]
 800b338:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b33a:	7afb      	ldrb	r3, [r7, #11]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d16b      	bne.n	800b418 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	3314      	adds	r3, #20
 800b344:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d156      	bne.n	800b3fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	689a      	ldr	r2, [r3, #8]
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d914      	bls.n	800b386 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	689a      	ldr	r2, [r3, #8]
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	1ad2      	subs	r2, r2, r3
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	461a      	mov	r2, r3
 800b370:	6879      	ldr	r1, [r7, #4]
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f000 ff84 	bl	800c280 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b378:	2300      	movs	r3, #0
 800b37a:	2200      	movs	r2, #0
 800b37c:	2100      	movs	r1, #0
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f001 fdfa 	bl	800cf78 <USBD_LL_PrepareReceive>
 800b384:	e03b      	b.n	800b3fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	68da      	ldr	r2, [r3, #12]
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d11c      	bne.n	800b3cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	685a      	ldr	r2, [r3, #4]
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d316      	bcc.n	800b3cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d20f      	bcs.n	800b3cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f000 ff65 	bl	800c280 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3be:	2300      	movs	r3, #0
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f001 fdd7 	bl	800cf78 <USBD_LL_PrepareReceive>
 800b3ca:	e018      	b.n	800b3fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b03      	cmp	r3, #3
 800b3d6:	d10b      	bne.n	800b3f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d005      	beq.n	800b3f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3f0:	2180      	movs	r1, #128	; 0x80
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f001 fcba 	bl	800cd6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 ff76 	bl	800c2ea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b404:	2b01      	cmp	r3, #1
 800b406:	d122      	bne.n	800b44e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f7ff fe98 	bl	800b13e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2200      	movs	r2, #0
 800b412:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b416:	e01a      	b.n	800b44e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b03      	cmp	r3, #3
 800b422:	d114      	bne.n	800b44e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b42a:	695b      	ldr	r3, [r3, #20]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00e      	beq.n	800b44e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b436:	695b      	ldr	r3, [r3, #20]
 800b438:	7afa      	ldrb	r2, [r7, #11]
 800b43a:	4611      	mov	r1, r2
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	4798      	blx	r3
 800b440:	4603      	mov	r3, r0
 800b442:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b444:	7dfb      	ldrb	r3, [r7, #23]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d001      	beq.n	800b44e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b44a:	7dfb      	ldrb	r3, [r7, #23]
 800b44c:	e000      	b.n	800b450 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3718      	adds	r7, #24
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b488:	2303      	movs	r3, #3
 800b48a:	e02f      	b.n	800b4ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00f      	beq.n	800b4b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d009      	beq.n	800b4b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	6852      	ldr	r2, [r2, #4]
 800b4ae:	b2d2      	uxtb	r2, r2
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4b6:	2340      	movs	r3, #64	; 0x40
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f001 fbab 	bl	800cc18 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2240      	movs	r2, #64	; 0x40
 800b4ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4d2:	2340      	movs	r3, #64	; 0x40
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	2180      	movs	r1, #128	; 0x80
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f001 fb9d 	bl	800cc18 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2240      	movs	r2, #64	; 0x40
 800b4e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3708      	adds	r7, #8
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	78fa      	ldrb	r2, [r7, #3]
 800b504:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b522:	b2da      	uxtb	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2204      	movs	r2, #4
 800b52e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	2b04      	cmp	r3, #4
 800b552:	d106      	bne.n	800b562 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b55a:	b2da      	uxtb	r2, r3
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d101      	bne.n	800b586 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b582:	2303      	movs	r3, #3
 800b584:	e012      	b.n	800b5ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d10b      	bne.n	800b5aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d005      	beq.n	800b5aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5a4:	69db      	ldr	r3, [r3, #28]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e014      	b.n	800b5f8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	2b03      	cmp	r3, #3
 800b5d8:	d10d      	bne.n	800b5f6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5e0:	6a1b      	ldr	r3, [r3, #32]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d007      	beq.n	800b5f6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	78fa      	ldrb	r2, [r7, #3]
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3708      	adds	r7, #8
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	460b      	mov	r3, r1
 800b60a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b612:	2b00      	cmp	r3, #0
 800b614:	d101      	bne.n	800b61a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b616:	2303      	movs	r3, #3
 800b618:	e014      	b.n	800b644 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b620:	b2db      	uxtb	r3, r3
 800b622:	2b03      	cmp	r3, #3
 800b624:	d10d      	bne.n	800b642 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d007      	beq.n	800b642 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63a:	78fa      	ldrb	r2, [r7, #3]
 800b63c:	4611      	mov	r1, r2
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d009      	beq.n	800b690 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	6852      	ldr	r2, [r2, #4]
 800b688:	b2d2      	uxtb	r2, r2
 800b68a:	4611      	mov	r1, r2
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	4798      	blx	r3
  }

  return USBD_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b087      	sub	sp, #28
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b6b8:	8a3b      	ldrh	r3, [r7, #16]
 800b6ba:	021b      	lsls	r3, r3, #8
 800b6bc:	b21a      	sxth	r2, r3
 800b6be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	b21b      	sxth	r3, r3
 800b6c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b6c8:	89fb      	ldrh	r3, [r7, #14]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	371c      	adds	r7, #28
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr
	...

0800b6d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6ee:	2b40      	cmp	r3, #64	; 0x40
 800b6f0:	d005      	beq.n	800b6fe <USBD_StdDevReq+0x26>
 800b6f2:	2b40      	cmp	r3, #64	; 0x40
 800b6f4:	d853      	bhi.n	800b79e <USBD_StdDevReq+0xc6>
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00b      	beq.n	800b712 <USBD_StdDevReq+0x3a>
 800b6fa:	2b20      	cmp	r3, #32
 800b6fc:	d14f      	bne.n	800b79e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	4798      	blx	r3
 800b70c:	4603      	mov	r3, r0
 800b70e:	73fb      	strb	r3, [r7, #15]
      break;
 800b710:	e04a      	b.n	800b7a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	785b      	ldrb	r3, [r3, #1]
 800b716:	2b09      	cmp	r3, #9
 800b718:	d83b      	bhi.n	800b792 <USBD_StdDevReq+0xba>
 800b71a:	a201      	add	r2, pc, #4	; (adr r2, 800b720 <USBD_StdDevReq+0x48>)
 800b71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b720:	0800b775 	.word	0x0800b775
 800b724:	0800b789 	.word	0x0800b789
 800b728:	0800b793 	.word	0x0800b793
 800b72c:	0800b77f 	.word	0x0800b77f
 800b730:	0800b793 	.word	0x0800b793
 800b734:	0800b753 	.word	0x0800b753
 800b738:	0800b749 	.word	0x0800b749
 800b73c:	0800b793 	.word	0x0800b793
 800b740:	0800b76b 	.word	0x0800b76b
 800b744:	0800b75d 	.word	0x0800b75d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b748:	6839      	ldr	r1, [r7, #0]
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f9de 	bl	800bb0c <USBD_GetDescriptor>
          break;
 800b750:	e024      	b.n	800b79c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b752:	6839      	ldr	r1, [r7, #0]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fb43 	bl	800bde0 <USBD_SetAddress>
          break;
 800b75a:	e01f      	b.n	800b79c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 fb82 	bl	800be68 <USBD_SetConfig>
 800b764:	4603      	mov	r3, r0
 800b766:	73fb      	strb	r3, [r7, #15]
          break;
 800b768:	e018      	b.n	800b79c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fc21 	bl	800bfb4 <USBD_GetConfig>
          break;
 800b772:	e013      	b.n	800b79c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b774:	6839      	ldr	r1, [r7, #0]
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 fc52 	bl	800c020 <USBD_GetStatus>
          break;
 800b77c:	e00e      	b.n	800b79c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fc81 	bl	800c088 <USBD_SetFeature>
          break;
 800b786:	e009      	b.n	800b79c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b788:	6839      	ldr	r1, [r7, #0]
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 fc90 	bl	800c0b0 <USBD_ClrFeature>
          break;
 800b790:	e004      	b.n	800b79c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fce7 	bl	800c168 <USBD_CtlError>
          break;
 800b79a:	bf00      	nop
      }
      break;
 800b79c:	e004      	b.n	800b7a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 fce1 	bl	800c168 <USBD_CtlError>
      break;
 800b7a6:	bf00      	nop
  }

  return ret;
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop

0800b7b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7ca:	2b40      	cmp	r3, #64	; 0x40
 800b7cc:	d005      	beq.n	800b7da <USBD_StdItfReq+0x26>
 800b7ce:	2b40      	cmp	r3, #64	; 0x40
 800b7d0:	d82f      	bhi.n	800b832 <USBD_StdItfReq+0x7e>
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d001      	beq.n	800b7da <USBD_StdItfReq+0x26>
 800b7d6:	2b20      	cmp	r3, #32
 800b7d8:	d12b      	bne.n	800b832 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d81d      	bhi.n	800b824 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	889b      	ldrh	r3, [r3, #4]
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d813      	bhi.n	800b81a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	6839      	ldr	r1, [r7, #0]
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	4798      	blx	r3
 800b800:	4603      	mov	r3, r0
 800b802:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	88db      	ldrh	r3, [r3, #6]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d110      	bne.n	800b82e <USBD_StdItfReq+0x7a>
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10d      	bne.n	800b82e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fd56 	bl	800c2c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b818:	e009      	b.n	800b82e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 fca3 	bl	800c168 <USBD_CtlError>
          break;
 800b822:	e004      	b.n	800b82e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b824:	6839      	ldr	r1, [r7, #0]
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fc9e 	bl	800c168 <USBD_CtlError>
          break;
 800b82c:	e000      	b.n	800b830 <USBD_StdItfReq+0x7c>
          break;
 800b82e:	bf00      	nop
      }
      break;
 800b830:	e004      	b.n	800b83c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b832:	6839      	ldr	r1, [r7, #0]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fc97 	bl	800c168 <USBD_CtlError>
      break;
 800b83a:	bf00      	nop
  }

  return ret;
 800b83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b084      	sub	sp, #16
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
 800b84e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b850:	2300      	movs	r3, #0
 800b852:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	889b      	ldrh	r3, [r3, #4]
 800b858:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b862:	2b40      	cmp	r3, #64	; 0x40
 800b864:	d007      	beq.n	800b876 <USBD_StdEPReq+0x30>
 800b866:	2b40      	cmp	r3, #64	; 0x40
 800b868:	f200 8145 	bhi.w	800baf6 <USBD_StdEPReq+0x2b0>
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00c      	beq.n	800b88a <USBD_StdEPReq+0x44>
 800b870:	2b20      	cmp	r3, #32
 800b872:	f040 8140 	bne.w	800baf6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	6839      	ldr	r1, [r7, #0]
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	4798      	blx	r3
 800b884:	4603      	mov	r3, r0
 800b886:	73fb      	strb	r3, [r7, #15]
      break;
 800b888:	e13a      	b.n	800bb00 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	785b      	ldrb	r3, [r3, #1]
 800b88e:	2b03      	cmp	r3, #3
 800b890:	d007      	beq.n	800b8a2 <USBD_StdEPReq+0x5c>
 800b892:	2b03      	cmp	r3, #3
 800b894:	f300 8129 	bgt.w	800baea <USBD_StdEPReq+0x2a4>
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d07f      	beq.n	800b99c <USBD_StdEPReq+0x156>
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d03c      	beq.n	800b91a <USBD_StdEPReq+0xd4>
 800b8a0:	e123      	b.n	800baea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d002      	beq.n	800b8b4 <USBD_StdEPReq+0x6e>
 800b8ae:	2b03      	cmp	r3, #3
 800b8b0:	d016      	beq.n	800b8e0 <USBD_StdEPReq+0x9a>
 800b8b2:	e02c      	b.n	800b90e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8b4:	7bbb      	ldrb	r3, [r7, #14]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00d      	beq.n	800b8d6 <USBD_StdEPReq+0x90>
 800b8ba:	7bbb      	ldrb	r3, [r7, #14]
 800b8bc:	2b80      	cmp	r3, #128	; 0x80
 800b8be:	d00a      	beq.n	800b8d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8c0:	7bbb      	ldrb	r3, [r7, #14]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f001 fa51 	bl	800cd6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8ca:	2180      	movs	r1, #128	; 0x80
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f001 fa4d 	bl	800cd6c <USBD_LL_StallEP>
 800b8d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8d4:	e020      	b.n	800b918 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fc45 	bl	800c168 <USBD_CtlError>
              break;
 800b8de:	e01b      	b.n	800b918 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	885b      	ldrh	r3, [r3, #2]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10e      	bne.n	800b906 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8e8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00b      	beq.n	800b906 <USBD_StdEPReq+0xc0>
 800b8ee:	7bbb      	ldrb	r3, [r7, #14]
 800b8f0:	2b80      	cmp	r3, #128	; 0x80
 800b8f2:	d008      	beq.n	800b906 <USBD_StdEPReq+0xc0>
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	88db      	ldrh	r3, [r3, #6]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d104      	bne.n	800b906 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8fc:	7bbb      	ldrb	r3, [r7, #14]
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f001 fa33 	bl	800cd6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fcdc 	bl	800c2c4 <USBD_CtlSendStatus>

              break;
 800b90c:	e004      	b.n	800b918 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fc29 	bl	800c168 <USBD_CtlError>
              break;
 800b916:	bf00      	nop
          }
          break;
 800b918:	e0ec      	b.n	800baf4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b920:	b2db      	uxtb	r3, r3
 800b922:	2b02      	cmp	r3, #2
 800b924:	d002      	beq.n	800b92c <USBD_StdEPReq+0xe6>
 800b926:	2b03      	cmp	r3, #3
 800b928:	d016      	beq.n	800b958 <USBD_StdEPReq+0x112>
 800b92a:	e030      	b.n	800b98e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b92c:	7bbb      	ldrb	r3, [r7, #14]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d00d      	beq.n	800b94e <USBD_StdEPReq+0x108>
 800b932:	7bbb      	ldrb	r3, [r7, #14]
 800b934:	2b80      	cmp	r3, #128	; 0x80
 800b936:	d00a      	beq.n	800b94e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b938:	7bbb      	ldrb	r3, [r7, #14]
 800b93a:	4619      	mov	r1, r3
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f001 fa15 	bl	800cd6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b942:	2180      	movs	r1, #128	; 0x80
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f001 fa11 	bl	800cd6c <USBD_LL_StallEP>
 800b94a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b94c:	e025      	b.n	800b99a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b94e:	6839      	ldr	r1, [r7, #0]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fc09 	bl	800c168 <USBD_CtlError>
              break;
 800b956:	e020      	b.n	800b99a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	885b      	ldrh	r3, [r3, #2]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d11b      	bne.n	800b998 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b960:	7bbb      	ldrb	r3, [r7, #14]
 800b962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b966:	2b00      	cmp	r3, #0
 800b968:	d004      	beq.n	800b974 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b96a:	7bbb      	ldrb	r3, [r7, #14]
 800b96c:	4619      	mov	r1, r3
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f001 fa32 	bl	800cdd8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fca5 	bl	800c2c4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	6839      	ldr	r1, [r7, #0]
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	4798      	blx	r3
 800b988:	4603      	mov	r3, r0
 800b98a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b98c:	e004      	b.n	800b998 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b98e:	6839      	ldr	r1, [r7, #0]
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 fbe9 	bl	800c168 <USBD_CtlError>
              break;
 800b996:	e000      	b.n	800b99a <USBD_StdEPReq+0x154>
              break;
 800b998:	bf00      	nop
          }
          break;
 800b99a:	e0ab      	b.n	800baf4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d002      	beq.n	800b9ae <USBD_StdEPReq+0x168>
 800b9a8:	2b03      	cmp	r3, #3
 800b9aa:	d032      	beq.n	800ba12 <USBD_StdEPReq+0x1cc>
 800b9ac:	e097      	b.n	800bade <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9ae:	7bbb      	ldrb	r3, [r7, #14]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d007      	beq.n	800b9c4 <USBD_StdEPReq+0x17e>
 800b9b4:	7bbb      	ldrb	r3, [r7, #14]
 800b9b6:	2b80      	cmp	r3, #128	; 0x80
 800b9b8:	d004      	beq.n	800b9c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b9ba:	6839      	ldr	r1, [r7, #0]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fbd3 	bl	800c168 <USBD_CtlError>
                break;
 800b9c2:	e091      	b.n	800bae8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	da0b      	bge.n	800b9e4 <USBD_StdEPReq+0x19e>
 800b9cc:	7bbb      	ldrb	r3, [r7, #14]
 800b9ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	3310      	adds	r3, #16
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	4413      	add	r3, r2
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	e00b      	b.n	800b9fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9e4:	7bbb      	ldrb	r3, [r7, #14]
 800b9e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	4413      	add	r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2200      	movs	r2, #0
 800ba02:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	2202      	movs	r2, #2
 800ba08:	4619      	mov	r1, r3
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 fc1d 	bl	800c24a <USBD_CtlSendData>
              break;
 800ba10:	e06a      	b.n	800bae8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	da11      	bge.n	800ba3e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba1a:	7bbb      	ldrb	r3, [r7, #14]
 800ba1c:	f003 020f 	and.w	r2, r3, #15
 800ba20:	6879      	ldr	r1, [r7, #4]
 800ba22:	4613      	mov	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4413      	add	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	440b      	add	r3, r1
 800ba2c:	3324      	adds	r3, #36	; 0x24
 800ba2e:	881b      	ldrh	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d117      	bne.n	800ba64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ba34:	6839      	ldr	r1, [r7, #0]
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 fb96 	bl	800c168 <USBD_CtlError>
                  break;
 800ba3c:	e054      	b.n	800bae8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba3e:	7bbb      	ldrb	r3, [r7, #14]
 800ba40:	f003 020f 	and.w	r2, r3, #15
 800ba44:	6879      	ldr	r1, [r7, #4]
 800ba46:	4613      	mov	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4413      	add	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	440b      	add	r3, r1
 800ba50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba54:	881b      	ldrh	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d104      	bne.n	800ba64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fb83 	bl	800c168 <USBD_CtlError>
                  break;
 800ba62:	e041      	b.n	800bae8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	da0b      	bge.n	800ba84 <USBD_StdEPReq+0x23e>
 800ba6c:	7bbb      	ldrb	r3, [r7, #14]
 800ba6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba72:	4613      	mov	r3, r2
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	4413      	add	r3, r2
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	3310      	adds	r3, #16
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	4413      	add	r3, r2
 800ba80:	3304      	adds	r3, #4
 800ba82:	e00b      	b.n	800ba9c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba84:	7bbb      	ldrb	r3, [r7, #14]
 800ba86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	4413      	add	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	4413      	add	r3, r2
 800ba9a:	3304      	adds	r3, #4
 800ba9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba9e:	7bbb      	ldrb	r3, [r7, #14]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d002      	beq.n	800baaa <USBD_StdEPReq+0x264>
 800baa4:	7bbb      	ldrb	r3, [r7, #14]
 800baa6:	2b80      	cmp	r3, #128	; 0x80
 800baa8:	d103      	bne.n	800bab2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	2200      	movs	r2, #0
 800baae:	601a      	str	r2, [r3, #0]
 800bab0:	e00e      	b.n	800bad0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f001 f9c4 	bl	800ce44 <USBD_LL_IsStallEP>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d003      	beq.n	800baca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	2201      	movs	r2, #1
 800bac6:	601a      	str	r2, [r3, #0]
 800bac8:	e002      	b.n	800bad0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	2200      	movs	r2, #0
 800bace:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2202      	movs	r2, #2
 800bad4:	4619      	mov	r1, r3
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 fbb7 	bl	800c24a <USBD_CtlSendData>
              break;
 800badc:	e004      	b.n	800bae8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bade:	6839      	ldr	r1, [r7, #0]
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fb41 	bl	800c168 <USBD_CtlError>
              break;
 800bae6:	bf00      	nop
          }
          break;
 800bae8:	e004      	b.n	800baf4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800baea:	6839      	ldr	r1, [r7, #0]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fb3b 	bl	800c168 <USBD_CtlError>
          break;
 800baf2:	bf00      	nop
      }
      break;
 800baf4:	e004      	b.n	800bb00 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fb35 	bl	800c168 <USBD_CtlError>
      break;
 800bafe:	bf00      	nop
  }

  return ret;
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
	...

0800bb0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb16:	2300      	movs	r3, #0
 800bb18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	885b      	ldrh	r3, [r3, #2]
 800bb26:	0a1b      	lsrs	r3, r3, #8
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	2b06      	cmp	r3, #6
 800bb2e:	f200 8128 	bhi.w	800bd82 <USBD_GetDescriptor+0x276>
 800bb32:	a201      	add	r2, pc, #4	; (adr r2, 800bb38 <USBD_GetDescriptor+0x2c>)
 800bb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb38:	0800bb55 	.word	0x0800bb55
 800bb3c:	0800bb6d 	.word	0x0800bb6d
 800bb40:	0800bbad 	.word	0x0800bbad
 800bb44:	0800bd83 	.word	0x0800bd83
 800bb48:	0800bd83 	.word	0x0800bd83
 800bb4c:	0800bd23 	.word	0x0800bd23
 800bb50:	0800bd4f 	.word	0x0800bd4f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	7c12      	ldrb	r2, [r2, #16]
 800bb60:	f107 0108 	add.w	r1, r7, #8
 800bb64:	4610      	mov	r0, r2
 800bb66:	4798      	blx	r3
 800bb68:	60f8      	str	r0, [r7, #12]
      break;
 800bb6a:	e112      	b.n	800bd92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	7c1b      	ldrb	r3, [r3, #16]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d10d      	bne.n	800bb90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb7c:	f107 0208 	add.w	r2, r7, #8
 800bb80:	4610      	mov	r0, r2
 800bb82:	4798      	blx	r3
 800bb84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	2202      	movs	r2, #2
 800bb8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb8e:	e100      	b.n	800bd92 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb98:	f107 0208 	add.w	r2, r7, #8
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	4798      	blx	r3
 800bba0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3301      	adds	r3, #1
 800bba6:	2202      	movs	r2, #2
 800bba8:	701a      	strb	r2, [r3, #0]
      break;
 800bbaa:	e0f2      	b.n	800bd92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	885b      	ldrh	r3, [r3, #2]
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b05      	cmp	r3, #5
 800bbb4:	f200 80ac 	bhi.w	800bd10 <USBD_GetDescriptor+0x204>
 800bbb8:	a201      	add	r2, pc, #4	; (adr r2, 800bbc0 <USBD_GetDescriptor+0xb4>)
 800bbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbbe:	bf00      	nop
 800bbc0:	0800bbd9 	.word	0x0800bbd9
 800bbc4:	0800bc0d 	.word	0x0800bc0d
 800bbc8:	0800bc41 	.word	0x0800bc41
 800bbcc:	0800bc75 	.word	0x0800bc75
 800bbd0:	0800bca9 	.word	0x0800bca9
 800bbd4:	0800bcdd 	.word	0x0800bcdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00b      	beq.n	800bbfc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	7c12      	ldrb	r2, [r2, #16]
 800bbf0:	f107 0108 	add.w	r1, r7, #8
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	4798      	blx	r3
 800bbf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbfa:	e091      	b.n	800bd20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbfc:	6839      	ldr	r1, [r7, #0]
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 fab2 	bl	800c168 <USBD_CtlError>
            err++;
 800bc04:	7afb      	ldrb	r3, [r7, #11]
 800bc06:	3301      	adds	r3, #1
 800bc08:	72fb      	strb	r3, [r7, #11]
          break;
 800bc0a:	e089      	b.n	800bd20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00b      	beq.n	800bc30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	7c12      	ldrb	r2, [r2, #16]
 800bc24:	f107 0108 	add.w	r1, r7, #8
 800bc28:	4610      	mov	r0, r2
 800bc2a:	4798      	blx	r3
 800bc2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc2e:	e077      	b.n	800bd20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 fa98 	bl	800c168 <USBD_CtlError>
            err++;
 800bc38:	7afb      	ldrb	r3, [r7, #11]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc3e:	e06f      	b.n	800bd20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00b      	beq.n	800bc64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	7c12      	ldrb	r2, [r2, #16]
 800bc58:	f107 0108 	add.w	r1, r7, #8
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	4798      	blx	r3
 800bc60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc62:	e05d      	b.n	800bd20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fa7e 	bl	800c168 <USBD_CtlError>
            err++;
 800bc6c:	7afb      	ldrb	r3, [r7, #11]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	72fb      	strb	r3, [r7, #11]
          break;
 800bc72:	e055      	b.n	800bd20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00b      	beq.n	800bc98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	7c12      	ldrb	r2, [r2, #16]
 800bc8c:	f107 0108 	add.w	r1, r7, #8
 800bc90:	4610      	mov	r0, r2
 800bc92:	4798      	blx	r3
 800bc94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc96:	e043      	b.n	800bd20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc98:	6839      	ldr	r1, [r7, #0]
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 fa64 	bl	800c168 <USBD_CtlError>
            err++;
 800bca0:	7afb      	ldrb	r3, [r7, #11]
 800bca2:	3301      	adds	r3, #1
 800bca4:	72fb      	strb	r3, [r7, #11]
          break;
 800bca6:	e03b      	b.n	800bd20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcae:	695b      	ldr	r3, [r3, #20]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00b      	beq.n	800bccc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcba:	695b      	ldr	r3, [r3, #20]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	7c12      	ldrb	r2, [r2, #16]
 800bcc0:	f107 0108 	add.w	r1, r7, #8
 800bcc4:	4610      	mov	r0, r2
 800bcc6:	4798      	blx	r3
 800bcc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcca:	e029      	b.n	800bd20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bccc:	6839      	ldr	r1, [r7, #0]
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fa4a 	bl	800c168 <USBD_CtlError>
            err++;
 800bcd4:	7afb      	ldrb	r3, [r7, #11]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	72fb      	strb	r3, [r7, #11]
          break;
 800bcda:	e021      	b.n	800bd20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00b      	beq.n	800bd00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	7c12      	ldrb	r2, [r2, #16]
 800bcf4:	f107 0108 	add.w	r1, r7, #8
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	4798      	blx	r3
 800bcfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcfe:	e00f      	b.n	800bd20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 fa30 	bl	800c168 <USBD_CtlError>
            err++;
 800bd08:	7afb      	ldrb	r3, [r7, #11]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd0e:	e007      	b.n	800bd20 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bd10:	6839      	ldr	r1, [r7, #0]
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fa28 	bl	800c168 <USBD_CtlError>
          err++;
 800bd18:	7afb      	ldrb	r3, [r7, #11]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bd1e:	bf00      	nop
      }
      break;
 800bd20:	e037      	b.n	800bd92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	7c1b      	ldrb	r3, [r3, #16]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d109      	bne.n	800bd3e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd32:	f107 0208 	add.w	r2, r7, #8
 800bd36:	4610      	mov	r0, r2
 800bd38:	4798      	blx	r3
 800bd3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd3c:	e029      	b.n	800bd92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fa11 	bl	800c168 <USBD_CtlError>
        err++;
 800bd46:	7afb      	ldrb	r3, [r7, #11]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	72fb      	strb	r3, [r7, #11]
      break;
 800bd4c:	e021      	b.n	800bd92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	7c1b      	ldrb	r3, [r3, #16]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d10d      	bne.n	800bd72 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd5e:	f107 0208 	add.w	r2, r7, #8
 800bd62:	4610      	mov	r0, r2
 800bd64:	4798      	blx	r3
 800bd66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	2207      	movs	r2, #7
 800bd6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd70:	e00f      	b.n	800bd92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd72:	6839      	ldr	r1, [r7, #0]
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 f9f7 	bl	800c168 <USBD_CtlError>
        err++;
 800bd7a:	7afb      	ldrb	r3, [r7, #11]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd80:	e007      	b.n	800bd92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bd82:	6839      	ldr	r1, [r7, #0]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 f9ef 	bl	800c168 <USBD_CtlError>
      err++;
 800bd8a:	7afb      	ldrb	r3, [r7, #11]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd90:	bf00      	nop
  }

  if (err != 0U)
 800bd92:	7afb      	ldrb	r3, [r7, #11]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d11e      	bne.n	800bdd6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	88db      	ldrh	r3, [r3, #6]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d016      	beq.n	800bdce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bda0:	893b      	ldrh	r3, [r7, #8]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00e      	beq.n	800bdc4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	88da      	ldrh	r2, [r3, #6]
 800bdaa:	893b      	ldrh	r3, [r7, #8]
 800bdac:	4293      	cmp	r3, r2
 800bdae:	bf28      	it	cs
 800bdb0:	4613      	movcs	r3, r2
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bdb6:	893b      	ldrh	r3, [r7, #8]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	68f9      	ldr	r1, [r7, #12]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fa44 	bl	800c24a <USBD_CtlSendData>
 800bdc2:	e009      	b.n	800bdd8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 f9ce 	bl	800c168 <USBD_CtlError>
 800bdcc:	e004      	b.n	800bdd8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fa78 	bl	800c2c4 <USBD_CtlSendStatus>
 800bdd4:	e000      	b.n	800bdd8 <USBD_GetDescriptor+0x2cc>
    return;
 800bdd6:	bf00      	nop
  }
}
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop

0800bde0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	889b      	ldrh	r3, [r3, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d131      	bne.n	800be56 <USBD_SetAddress+0x76>
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	88db      	ldrh	r3, [r3, #6]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d12d      	bne.n	800be56 <USBD_SetAddress+0x76>
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	885b      	ldrh	r3, [r3, #2]
 800bdfe:	2b7f      	cmp	r3, #127	; 0x7f
 800be00:	d829      	bhi.n	800be56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	885b      	ldrh	r3, [r3, #2]
 800be06:	b2db      	uxtb	r3, r3
 800be08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be14:	b2db      	uxtb	r3, r3
 800be16:	2b03      	cmp	r3, #3
 800be18:	d104      	bne.n	800be24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 f9a3 	bl	800c168 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be22:	e01d      	b.n	800be60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7bfa      	ldrb	r2, [r7, #15]
 800be28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be2c:	7bfb      	ldrb	r3, [r7, #15]
 800be2e:	4619      	mov	r1, r3
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f001 f833 	bl	800ce9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fa44 	bl	800c2c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be3c:	7bfb      	ldrb	r3, [r7, #15]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d004      	beq.n	800be4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2202      	movs	r2, #2
 800be46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be4a:	e009      	b.n	800be60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2201      	movs	r2, #1
 800be50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be54:	e004      	b.n	800be60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 f985 	bl	800c168 <USBD_CtlError>
  }
}
 800be5e:	bf00      	nop
 800be60:	bf00      	nop
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be72:	2300      	movs	r3, #0
 800be74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	885b      	ldrh	r3, [r3, #2]
 800be7a:	b2da      	uxtb	r2, r3
 800be7c:	4b4c      	ldr	r3, [pc, #304]	; (800bfb0 <USBD_SetConfig+0x148>)
 800be7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be80:	4b4b      	ldr	r3, [pc, #300]	; (800bfb0 <USBD_SetConfig+0x148>)
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d905      	bls.n	800be94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be88:	6839      	ldr	r1, [r7, #0]
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 f96c 	bl	800c168 <USBD_CtlError>
    return USBD_FAIL;
 800be90:	2303      	movs	r3, #3
 800be92:	e088      	b.n	800bfa6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d002      	beq.n	800bea6 <USBD_SetConfig+0x3e>
 800bea0:	2b03      	cmp	r3, #3
 800bea2:	d025      	beq.n	800bef0 <USBD_SetConfig+0x88>
 800bea4:	e071      	b.n	800bf8a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bea6:	4b42      	ldr	r3, [pc, #264]	; (800bfb0 <USBD_SetConfig+0x148>)
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d01c      	beq.n	800bee8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800beae:	4b40      	ldr	r3, [pc, #256]	; (800bfb0 <USBD_SetConfig+0x148>)
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	461a      	mov	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800beb8:	4b3d      	ldr	r3, [pc, #244]	; (800bfb0 <USBD_SetConfig+0x148>)
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	4619      	mov	r1, r3
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7ff f948 	bl	800b154 <USBD_SetClassConfig>
 800bec4:	4603      	mov	r3, r0
 800bec6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bec8:	7bfb      	ldrb	r3, [r7, #15]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d004      	beq.n	800bed8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 f949 	bl	800c168 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bed6:	e065      	b.n	800bfa4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 f9f3 	bl	800c2c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2203      	movs	r2, #3
 800bee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bee6:	e05d      	b.n	800bfa4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f9eb 	bl	800c2c4 <USBD_CtlSendStatus>
      break;
 800beee:	e059      	b.n	800bfa4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bef0:	4b2f      	ldr	r3, [pc, #188]	; (800bfb0 <USBD_SetConfig+0x148>)
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d112      	bne.n	800bf1e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2202      	movs	r2, #2
 800befc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bf00:	4b2b      	ldr	r3, [pc, #172]	; (800bfb0 <USBD_SetConfig+0x148>)
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	461a      	mov	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf0a:	4b29      	ldr	r3, [pc, #164]	; (800bfb0 <USBD_SetConfig+0x148>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	4619      	mov	r1, r3
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f7ff f93b 	bl	800b18c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 f9d4 	bl	800c2c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf1c:	e042      	b.n	800bfa4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bf1e:	4b24      	ldr	r3, [pc, #144]	; (800bfb0 <USBD_SetConfig+0x148>)
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	461a      	mov	r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d02a      	beq.n	800bf82 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7ff f929 	bl	800b18c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf3a:	4b1d      	ldr	r3, [pc, #116]	; (800bfb0 <USBD_SetConfig+0x148>)
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf44:	4b1a      	ldr	r3, [pc, #104]	; (800bfb0 <USBD_SetConfig+0x148>)
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	4619      	mov	r1, r3
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff f902 	bl	800b154 <USBD_SetClassConfig>
 800bf50:	4603      	mov	r3, r0
 800bf52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bf54:	7bfb      	ldrb	r3, [r7, #15]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00f      	beq.n	800bf7a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bf5a:	6839      	ldr	r1, [r7, #0]
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 f903 	bl	800c168 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	4619      	mov	r1, r3
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7ff f90e 	bl	800b18c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2202      	movs	r2, #2
 800bf74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf78:	e014      	b.n	800bfa4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 f9a2 	bl	800c2c4 <USBD_CtlSendStatus>
      break;
 800bf80:	e010      	b.n	800bfa4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 f99e 	bl	800c2c4 <USBD_CtlSendStatus>
      break;
 800bf88:	e00c      	b.n	800bfa4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bf8a:	6839      	ldr	r1, [r7, #0]
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 f8eb 	bl	800c168 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf92:	4b07      	ldr	r3, [pc, #28]	; (800bfb0 <USBD_SetConfig+0x148>)
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	4619      	mov	r1, r3
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff f8f7 	bl	800b18c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	73fb      	strb	r3, [r7, #15]
      break;
 800bfa2:	bf00      	nop
  }

  return ret;
 800bfa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	2000042c 	.word	0x2000042c

0800bfb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	88db      	ldrh	r3, [r3, #6]
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d004      	beq.n	800bfd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bfc6:	6839      	ldr	r1, [r7, #0]
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f8cd 	bl	800c168 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bfce:	e023      	b.n	800c018 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	2b02      	cmp	r3, #2
 800bfda:	dc02      	bgt.n	800bfe2 <USBD_GetConfig+0x2e>
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	dc03      	bgt.n	800bfe8 <USBD_GetConfig+0x34>
 800bfe0:	e015      	b.n	800c00e <USBD_GetConfig+0x5a>
 800bfe2:	2b03      	cmp	r3, #3
 800bfe4:	d00b      	beq.n	800bffe <USBD_GetConfig+0x4a>
 800bfe6:	e012      	b.n	800c00e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	3308      	adds	r3, #8
 800bff2:	2201      	movs	r2, #1
 800bff4:	4619      	mov	r1, r3
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f927 	bl	800c24a <USBD_CtlSendData>
        break;
 800bffc:	e00c      	b.n	800c018 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	3304      	adds	r3, #4
 800c002:	2201      	movs	r2, #1
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f91f 	bl	800c24a <USBD_CtlSendData>
        break;
 800c00c:	e004      	b.n	800c018 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f8a9 	bl	800c168 <USBD_CtlError>
        break;
 800c016:	bf00      	nop
}
 800c018:	bf00      	nop
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c030:	b2db      	uxtb	r3, r3
 800c032:	3b01      	subs	r3, #1
 800c034:	2b02      	cmp	r3, #2
 800c036:	d81e      	bhi.n	800c076 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	88db      	ldrh	r3, [r3, #6]
 800c03c:	2b02      	cmp	r3, #2
 800c03e:	d004      	beq.n	800c04a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f890 	bl	800c168 <USBD_CtlError>
        break;
 800c048:	e01a      	b.n	800c080 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2201      	movs	r2, #1
 800c04e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c056:	2b00      	cmp	r3, #0
 800c058:	d005      	beq.n	800c066 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	f043 0202 	orr.w	r2, r3, #2
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	330c      	adds	r3, #12
 800c06a:	2202      	movs	r2, #2
 800c06c:	4619      	mov	r1, r3
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f8eb 	bl	800c24a <USBD_CtlSendData>
      break;
 800c074:	e004      	b.n	800c080 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c076:	6839      	ldr	r1, [r7, #0]
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 f875 	bl	800c168 <USBD_CtlError>
      break;
 800c07e:	bf00      	nop
  }
}
 800c080:	bf00      	nop
 800c082:	3708      	adds	r7, #8
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	885b      	ldrh	r3, [r3, #2]
 800c096:	2b01      	cmp	r3, #1
 800c098:	d106      	bne.n	800c0a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2201      	movs	r2, #1
 800c09e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 f90e 	bl	800c2c4 <USBD_CtlSendStatus>
  }
}
 800c0a8:	bf00      	nop
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d80b      	bhi.n	800c0e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	885b      	ldrh	r3, [r3, #2]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d10c      	bne.n	800c0ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f8f3 	bl	800c2c4 <USBD_CtlSendStatus>
      }
      break;
 800c0de:	e004      	b.n	800c0ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c0e0:	6839      	ldr	r1, [r7, #0]
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f840 	bl	800c168 <USBD_CtlError>
      break;
 800c0e8:	e000      	b.n	800c0ec <USBD_ClrFeature+0x3c>
      break;
 800c0ea:	bf00      	nop
  }
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	781a      	ldrb	r2, [r3, #0]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	3301      	adds	r3, #1
 800c10e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	781a      	ldrb	r2, [r3, #0]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	3301      	adds	r3, #1
 800c11c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f7ff fabb 	bl	800b69a <SWAPBYTE>
 800c124:	4603      	mov	r3, r0
 800c126:	461a      	mov	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3301      	adds	r3, #1
 800c130:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	3301      	adds	r3, #1
 800c136:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c138:	68f8      	ldr	r0, [r7, #12]
 800c13a:	f7ff faae 	bl	800b69a <SWAPBYTE>
 800c13e:	4603      	mov	r3, r0
 800c140:	461a      	mov	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	3301      	adds	r3, #1
 800c14a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	3301      	adds	r3, #1
 800c150:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f7ff faa1 	bl	800b69a <SWAPBYTE>
 800c158:	4603      	mov	r3, r0
 800c15a:	461a      	mov	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	80da      	strh	r2, [r3, #6]
}
 800c160:	bf00      	nop
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c172:	2180      	movs	r1, #128	; 0x80
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 fdf9 	bl	800cd6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c17a:	2100      	movs	r1, #0
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fdf5 	bl	800cd6c <USBD_LL_StallEP>
}
 800c182:	bf00      	nop
 800c184:	3708      	adds	r7, #8
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b086      	sub	sp, #24
 800c18e:	af00      	add	r7, sp, #0
 800c190:	60f8      	str	r0, [r7, #12]
 800c192:	60b9      	str	r1, [r7, #8]
 800c194:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c196:	2300      	movs	r3, #0
 800c198:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d036      	beq.n	800c20e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c1a4:	6938      	ldr	r0, [r7, #16]
 800c1a6:	f000 f836 	bl	800c216 <USBD_GetLen>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	005b      	lsls	r3, r3, #1
 800c1b2:	b29a      	uxth	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c1b8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	4413      	add	r3, r2
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	7812      	ldrb	r2, [r2, #0]
 800c1c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1c4:	7dfb      	ldrb	r3, [r7, #23]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c1ca:	7dfb      	ldrb	r3, [r7, #23]
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	2203      	movs	r2, #3
 800c1d2:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1d4:	7dfb      	ldrb	r3, [r7, #23]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c1da:	e013      	b.n	800c204 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c1dc:	7dfb      	ldrb	r3, [r7, #23]
 800c1de:	68ba      	ldr	r2, [r7, #8]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	693a      	ldr	r2, [r7, #16]
 800c1e4:	7812      	ldrb	r2, [r2, #0]
 800c1e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	613b      	str	r3, [r7, #16]
    idx++;
 800c1ee:	7dfb      	ldrb	r3, [r7, #23]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c1f4:	7dfb      	ldrb	r3, [r7, #23]
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	701a      	strb	r2, [r3, #0]
    idx++;
 800c1fe:	7dfb      	ldrb	r3, [r7, #23]
 800c200:	3301      	adds	r3, #1
 800c202:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1e7      	bne.n	800c1dc <USBD_GetString+0x52>
 800c20c:	e000      	b.n	800c210 <USBD_GetString+0x86>
    return;
 800c20e:	bf00      	nop
  }
}
 800c210:	3718      	adds	r7, #24
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c216:	b480      	push	{r7}
 800c218:	b085      	sub	sp, #20
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c21e:	2300      	movs	r3, #0
 800c220:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c226:	e005      	b.n	800c234 <USBD_GetLen+0x1e>
  {
    len++;
 800c228:	7bfb      	ldrb	r3, [r7, #15]
 800c22a:	3301      	adds	r3, #1
 800c22c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	3301      	adds	r3, #1
 800c232:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d1f5      	bne.n	800c228 <USBD_GetLen+0x12>
  }

  return len;
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3714      	adds	r7, #20
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b084      	sub	sp, #16
 800c24e:	af00      	add	r7, sp, #0
 800c250:	60f8      	str	r0, [r7, #12]
 800c252:	60b9      	str	r1, [r7, #8]
 800c254:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2202      	movs	r2, #2
 800c25a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	2100      	movs	r1, #0
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f000 fe49 	bl	800cf08 <USBD_LL_Transmit>

  return USBD_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	60b9      	str	r1, [r7, #8]
 800c28a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	2100      	movs	r1, #0
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f000 fe38 	bl	800cf08 <USBD_LL_Transmit>

  return USBD_OK;
 800c298:	2300      	movs	r3, #0
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3710      	adds	r7, #16
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}

0800c2a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b084      	sub	sp, #16
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	60f8      	str	r0, [r7, #12]
 800c2aa:	60b9      	str	r1, [r7, #8]
 800c2ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	68ba      	ldr	r2, [r7, #8]
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f000 fe5f 	bl	800cf78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3710      	adds	r7, #16
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2204      	movs	r2, #4
 800c2d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	2100      	movs	r1, #0
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fe14 	bl	800cf08 <USBD_LL_Transmit>

  return USBD_OK;
 800c2e0:	2300      	movs	r3, #0
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3708      	adds	r7, #8
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b082      	sub	sp, #8
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2205      	movs	r2, #5
 800c2f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	2100      	movs	r1, #0
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 fe39 	bl	800cf78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c314:	2200      	movs	r2, #0
 800c316:	4912      	ldr	r1, [pc, #72]	; (800c360 <MX_USB_DEVICE_Init+0x50>)
 800c318:	4812      	ldr	r0, [pc, #72]	; (800c364 <MX_USB_DEVICE_Init+0x54>)
 800c31a:	f7fe fead 	bl	800b078 <USBD_Init>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d001      	beq.n	800c328 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c324:	f7f4 fe75 	bl	8001012 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800c328:	490f      	ldr	r1, [pc, #60]	; (800c368 <MX_USB_DEVICE_Init+0x58>)
 800c32a:	480e      	ldr	r0, [pc, #56]	; (800c364 <MX_USB_DEVICE_Init+0x54>)
 800c32c:	f7fe fed4 	bl	800b0d8 <USBD_RegisterClass>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d001      	beq.n	800c33a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c336:	f7f4 fe6c 	bl	8001012 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c33a:	490c      	ldr	r1, [pc, #48]	; (800c36c <MX_USB_DEVICE_Init+0x5c>)
 800c33c:	4809      	ldr	r0, [pc, #36]	; (800c364 <MX_USB_DEVICE_Init+0x54>)
 800c33e:	f7fd f9a3 	bl	8009688 <USBD_MSC_RegisterStorage>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d001      	beq.n	800c34c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c348:	f7f4 fe63 	bl	8001012 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c34c:	4805      	ldr	r0, [pc, #20]	; (800c364 <MX_USB_DEVICE_Init+0x54>)
 800c34e:	f7fe feea 	bl	800b126 <USBD_Start>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d001      	beq.n	800c35c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c358:	f7f4 fe5b 	bl	8001012 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c35c:	bf00      	nop
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	20000134 	.word	0x20000134
 800c364:	20000430 	.word	0x20000430
 800c368:	2000004c 	.word	0x2000004c
 800c36c:	20000184 	.word	0x20000184

0800c370 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	4603      	mov	r3, r0
 800c378:	6039      	str	r1, [r7, #0]
 800c37a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	2212      	movs	r2, #18
 800c380:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c382:	4b03      	ldr	r3, [pc, #12]	; (800c390 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c384:	4618      	mov	r0, r3
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr
 800c390:	20000150 	.word	0x20000150

0800c394 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	4603      	mov	r3, r0
 800c39c:	6039      	str	r1, [r7, #0]
 800c39e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	2204      	movs	r2, #4
 800c3a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c3a6:	4b03      	ldr	r3, [pc, #12]	; (800c3b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr
 800c3b4:	20000164 	.word	0x20000164

0800c3b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	4603      	mov	r3, r0
 800c3c0:	6039      	str	r1, [r7, #0]
 800c3c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c3c4:	79fb      	ldrb	r3, [r7, #7]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d105      	bne.n	800c3d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	4907      	ldr	r1, [pc, #28]	; (800c3ec <USBD_FS_ProductStrDescriptor+0x34>)
 800c3ce:	4808      	ldr	r0, [pc, #32]	; (800c3f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c3d0:	f7ff fedb 	bl	800c18a <USBD_GetString>
 800c3d4:	e004      	b.n	800c3e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c3d6:	683a      	ldr	r2, [r7, #0]
 800c3d8:	4904      	ldr	r1, [pc, #16]	; (800c3ec <USBD_FS_ProductStrDescriptor+0x34>)
 800c3da:	4805      	ldr	r0, [pc, #20]	; (800c3f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c3dc:	f7ff fed5 	bl	800c18a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3e0:	4b02      	ldr	r3, [pc, #8]	; (800c3ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20000700 	.word	0x20000700
 800c3f0:	0800d0bc 	.word	0x0800d0bc

0800c3f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	6039      	str	r1, [r7, #0]
 800c3fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c400:	683a      	ldr	r2, [r7, #0]
 800c402:	4904      	ldr	r1, [pc, #16]	; (800c414 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c404:	4804      	ldr	r0, [pc, #16]	; (800c418 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c406:	f7ff fec0 	bl	800c18a <USBD_GetString>
  return USBD_StrDesc;
 800c40a:	4b02      	ldr	r3, [pc, #8]	; (800c414 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	20000700 	.word	0x20000700
 800c418:	0800d0d0 	.word	0x0800d0d0

0800c41c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	4603      	mov	r3, r0
 800c424:	6039      	str	r1, [r7, #0]
 800c426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	221a      	movs	r2, #26
 800c42c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c42e:	f000 f843 	bl	800c4b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c432:	4b02      	ldr	r3, [pc, #8]	; (800c43c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c434:	4618      	mov	r0, r3
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	20000168 	.word	0x20000168

0800c440 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	4603      	mov	r3, r0
 800c448:	6039      	str	r1, [r7, #0]
 800c44a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c44c:	79fb      	ldrb	r3, [r7, #7]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d105      	bne.n	800c45e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c452:	683a      	ldr	r2, [r7, #0]
 800c454:	4907      	ldr	r1, [pc, #28]	; (800c474 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c456:	4808      	ldr	r0, [pc, #32]	; (800c478 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c458:	f7ff fe97 	bl	800c18a <USBD_GetString>
 800c45c:	e004      	b.n	800c468 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	4904      	ldr	r1, [pc, #16]	; (800c474 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c462:	4805      	ldr	r0, [pc, #20]	; (800c478 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c464:	f7ff fe91 	bl	800c18a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c468:	4b02      	ldr	r3, [pc, #8]	; (800c474 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3708      	adds	r7, #8
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20000700 	.word	0x20000700
 800c478:	0800d0e4 	.word	0x0800d0e4

0800c47c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	4603      	mov	r3, r0
 800c484:	6039      	str	r1, [r7, #0]
 800c486:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c488:	79fb      	ldrb	r3, [r7, #7]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d105      	bne.n	800c49a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c48e:	683a      	ldr	r2, [r7, #0]
 800c490:	4907      	ldr	r1, [pc, #28]	; (800c4b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c492:	4808      	ldr	r0, [pc, #32]	; (800c4b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c494:	f7ff fe79 	bl	800c18a <USBD_GetString>
 800c498:	e004      	b.n	800c4a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	4904      	ldr	r1, [pc, #16]	; (800c4b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c49e:	4805      	ldr	r0, [pc, #20]	; (800c4b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4a0:	f7ff fe73 	bl	800c18a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4a4:	4b02      	ldr	r3, [pc, #8]	; (800c4b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20000700 	.word	0x20000700
 800c4b4:	0800d0f0 	.word	0x0800d0f0

0800c4b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c4be:	4b0f      	ldr	r3, [pc, #60]	; (800c4fc <Get_SerialNum+0x44>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c4c4:	4b0e      	ldr	r3, [pc, #56]	; (800c500 <Get_SerialNum+0x48>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c4ca:	4b0e      	ldr	r3, [pc, #56]	; (800c504 <Get_SerialNum+0x4c>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c4d0:	68fa      	ldr	r2, [r7, #12]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d009      	beq.n	800c4f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c4de:	2208      	movs	r2, #8
 800c4e0:	4909      	ldr	r1, [pc, #36]	; (800c508 <Get_SerialNum+0x50>)
 800c4e2:	68f8      	ldr	r0, [r7, #12]
 800c4e4:	f000 f814 	bl	800c510 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c4e8:	2204      	movs	r2, #4
 800c4ea:	4908      	ldr	r1, [pc, #32]	; (800c50c <Get_SerialNum+0x54>)
 800c4ec:	68b8      	ldr	r0, [r7, #8]
 800c4ee:	f000 f80f 	bl	800c510 <IntToUnicode>
  }
}
 800c4f2:	bf00      	nop
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	1fff7590 	.word	0x1fff7590
 800c500:	1fff7594 	.word	0x1fff7594
 800c504:	1fff7598 	.word	0x1fff7598
 800c508:	2000016a 	.word	0x2000016a
 800c50c:	2000017a 	.word	0x2000017a

0800c510 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c510:	b480      	push	{r7}
 800c512:	b087      	sub	sp, #28
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	4613      	mov	r3, r2
 800c51c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c51e:	2300      	movs	r3, #0
 800c520:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c522:	2300      	movs	r3, #0
 800c524:	75fb      	strb	r3, [r7, #23]
 800c526:	e027      	b.n	800c578 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	0f1b      	lsrs	r3, r3, #28
 800c52c:	2b09      	cmp	r3, #9
 800c52e:	d80b      	bhi.n	800c548 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	0f1b      	lsrs	r3, r3, #28
 800c534:	b2da      	uxtb	r2, r3
 800c536:	7dfb      	ldrb	r3, [r7, #23]
 800c538:	005b      	lsls	r3, r3, #1
 800c53a:	4619      	mov	r1, r3
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	440b      	add	r3, r1
 800c540:	3230      	adds	r2, #48	; 0x30
 800c542:	b2d2      	uxtb	r2, r2
 800c544:	701a      	strb	r2, [r3, #0]
 800c546:	e00a      	b.n	800c55e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	0f1b      	lsrs	r3, r3, #28
 800c54c:	b2da      	uxtb	r2, r3
 800c54e:	7dfb      	ldrb	r3, [r7, #23]
 800c550:	005b      	lsls	r3, r3, #1
 800c552:	4619      	mov	r1, r3
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	440b      	add	r3, r1
 800c558:	3237      	adds	r2, #55	; 0x37
 800c55a:	b2d2      	uxtb	r2, r2
 800c55c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	011b      	lsls	r3, r3, #4
 800c562:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c564:	7dfb      	ldrb	r3, [r7, #23]
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	3301      	adds	r3, #1
 800c56a:	68ba      	ldr	r2, [r7, #8]
 800c56c:	4413      	add	r3, r2
 800c56e:	2200      	movs	r2, #0
 800c570:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c572:	7dfb      	ldrb	r3, [r7, #23]
 800c574:	3301      	adds	r3, #1
 800c576:	75fb      	strb	r3, [r7, #23]
 800c578:	7dfa      	ldrb	r2, [r7, #23]
 800c57a:	79fb      	ldrb	r3, [r7, #7]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d3d3      	bcc.n	800c528 <IntToUnicode+0x18>
  }
}
 800c580:	bf00      	nop
 800c582:	bf00      	nop
 800c584:	371c      	adds	r7, #28
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr
	...

0800c590 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	4603      	mov	r3, r0
 800c598:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */

  if (BSP_QSPI_GetStatus() != QSPI_OK)
 800c59a:	f7f4 fed3 	bl	8001344 <BSP_QSPI_GetStatus>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d009      	beq.n	800c5b8 <STORAGE_Init_FS+0x28>
  {
    HAL_QSPI_Init(&hqspi);
 800c5a4:	4807      	ldr	r0, [pc, #28]	; (800c5c4 <STORAGE_Init_FS+0x34>)
 800c5a6:	f7f8 fc9f 	bl	8004ee8 <HAL_QSPI_Init>

    if (BSP_QSPI_Init() != QSPI_OK)
 800c5aa:	f7f4 fda5 	bl	80010f8 <BSP_QSPI_Init>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d001      	beq.n	800c5b8 <STORAGE_Init_FS+0x28>
    {
      return (USBD_FAIL);
 800c5b4:	2303      	movs	r3, #3
 800c5b6:	e000      	b.n	800c5ba <STORAGE_Init_FS+0x2a>
    }
  }

  return (USBD_OK);
 800c5b8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	200002a0 	.word	0x200002a0

0800c5c8 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b08a      	sub	sp, #40	; 0x28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
 800c5d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  QSPI_Info info;

  BSP_QSPI_GetInfo(&info);
 800c5d6:	f107 0314 	add.w	r3, r7, #20
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7f4 ff00 	bl	80013e0 <BSP_QSPI_GetInfo>
  *block_num = (info.FlashSize)/STORAGE_BLK_SIZ_USER;
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	0b1a      	lsrs	r2, r3, #12
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ_USER;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c5ee:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 800c5f0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3728      	adds	r7, #40	; 0x28
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b084      	sub	sp, #16
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	4603      	mov	r3, r0
 800c602:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */

  uint8_t status = QSPI_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	73bb      	strb	r3, [r7, #14]
  int8_t ret = USBD_FAIL;
 800c608:	2303      	movs	r3, #3
 800c60a:	73fb      	strb	r3, [r7, #15]

  status = BSP_QSPI_GetStatus();
 800c60c:	f7f4 fe9a 	bl	8001344 <BSP_QSPI_GetStatus>
 800c610:	4603      	mov	r3, r0
 800c612:	73bb      	strb	r3, [r7, #14]

  switch(status)
 800c614:	7bbb      	ldrb	r3, [r7, #14]
 800c616:	2b02      	cmp	r3, #2
 800c618:	d009      	beq.n	800c62e <STORAGE_IsReady_FS+0x34>
 800c61a:	2b02      	cmp	r3, #2
 800c61c:	dc0d      	bgt.n	800c63a <STORAGE_IsReady_FS+0x40>
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d002      	beq.n	800c628 <STORAGE_IsReady_FS+0x2e>
 800c622:	2b01      	cmp	r3, #1
 800c624:	d006      	beq.n	800c634 <STORAGE_IsReady_FS+0x3a>
 800c626:	e008      	b.n	800c63a <STORAGE_IsReady_FS+0x40>
  {
  case QSPI_OK:
    ret = USBD_OK;
 800c628:	2300      	movs	r3, #0
 800c62a:	73fb      	strb	r3, [r7, #15]
    break;
 800c62c:	e008      	b.n	800c640 <STORAGE_IsReady_FS+0x46>
  case QSPI_BUSY:
    ret = USBD_BUSY;
 800c62e:	2301      	movs	r3, #1
 800c630:	73fb      	strb	r3, [r7, #15]
    break;
 800c632:	e005      	b.n	800c640 <STORAGE_IsReady_FS+0x46>
  case QSPI_ERROR:
    ret = USBD_FAIL;
 800c634:	2303      	movs	r3, #3
 800c636:	73fb      	strb	r3, [r7, #15]
    break;
 800c638:	e002      	b.n	800c640 <STORAGE_IsReady_FS+0x46>
  default:
    ret = USBD_FAIL;
 800c63a:	2303      	movs	r3, #3
 800c63c:	73fb      	strb	r3, [r7, #15]
    break;
 800c63e:	bf00      	nop
  }

  return ret;
 800c640:	f997 300f 	ldrsb.w	r3, [r7, #15]

  /* USER CODE END 4 */
}
 800c644:	4618      	mov	r0, r3
 800c646:	3710      	adds	r7, #16
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	4603      	mov	r3, r0
 800c654:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c656:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c658:	4618      	mov	r0, r3
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b088      	sub	sp, #32
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60b9      	str	r1, [r7, #8]
 800c66c:	607a      	str	r2, [r7, #4]
 800c66e:	461a      	mov	r2, r3
 800c670:	4603      	mov	r3, r0
 800c672:	73fb      	strb	r3, [r7, #15]
 800c674:	4613      	mov	r3, r2
 800c676:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  uint32_t erasedSector = 1;
 800c678:	2301      	movs	r3, #1
 800c67a:	61fb      	str	r3, [r7, #28]
  BSP_QSPI_Read(QSPI_ReadBuffer, blk_addr * STORAGE_BLK_SIZ_USER, blk_len * STORAGE_BLK_SIZ_USER);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	0319      	lsls	r1, r3, #12
 800c680:	89bb      	ldrh	r3, [r7, #12]
 800c682:	031b      	lsls	r3, r3, #12
 800c684:	461a      	mov	r2, r3
 800c686:	4820      	ldr	r0, [pc, #128]	; (800c708 <STORAGE_Read_FS+0xa4>)
 800c688:	f7f4 fd4e 	bl	8001128 <BSP_QSPI_Read>

  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c68c:	2300      	movs	r3, #0
 800c68e:	61bb      	str	r3, [r7, #24]
 800c690:	e00b      	b.n	800c6aa <STORAGE_Read_FS+0x46>
  {
    if (QSPI_ReadBuffer[i] != 0xFF)
 800c692:	4a1d      	ldr	r2, [pc, #116]	; (800c708 <STORAGE_Read_FS+0xa4>)
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	4413      	add	r3, r2
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	2bff      	cmp	r3, #255	; 0xff
 800c69c:	d002      	beq.n	800c6a4 <STORAGE_Read_FS+0x40>
    {
      erasedSector = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	61fb      	str	r3, [r7, #28]
      break;
 800c6a2:	e006      	b.n	800c6b2 <STORAGE_Read_FS+0x4e>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	61bb      	str	r3, [r7, #24]
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6b0:	d3ef      	bcc.n	800c692 <STORAGE_Read_FS+0x2e>
    }
  }
  if (erasedSector == 1)
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d10f      	bne.n	800c6d8 <STORAGE_Read_FS+0x74>
  {
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	617b      	str	r3, [r7, #20]
 800c6bc:	e007      	b.n	800c6ce <STORAGE_Read_FS+0x6a>
    {
      buf[i] = 0x00;
 800c6be:	68ba      	ldr	r2, [r7, #8]
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	617b      	str	r3, [r7, #20]
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6d4:	d3f3      	bcc.n	800c6be <STORAGE_Read_FS+0x5a>
 800c6d6:	e011      	b.n	800c6fc <STORAGE_Read_FS+0x98>
    }
  }
  else {
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c6d8:	2300      	movs	r3, #0
 800c6da:	613b      	str	r3, [r7, #16]
 800c6dc:	e00a      	b.n	800c6f4 <STORAGE_Read_FS+0x90>
    {
      buf[i] = QSPI_ReadBuffer[i];
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	4908      	ldr	r1, [pc, #32]	; (800c708 <STORAGE_Read_FS+0xa4>)
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	440a      	add	r2, r1
 800c6ea:	7812      	ldrb	r2, [r2, #0]
 800c6ec:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	613b      	str	r3, [r7, #16]
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6fa:	d3f0      	bcc.n	800c6de <STORAGE_Read_FS+0x7a>
    }
  }
  return (USBD_OK);
 800c6fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3720      	adds	r7, #32
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	20000900 	.word	0x20000900

0800c70c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b088      	sub	sp, #32
 800c710:	af00      	add	r7, sp, #0
 800c712:	60b9      	str	r1, [r7, #8]
 800c714:	607a      	str	r2, [r7, #4]
 800c716:	461a      	mov	r2, r3
 800c718:	4603      	mov	r3, r0
 800c71a:	73fb      	strb	r3, [r7, #15]
 800c71c:	4613      	mov	r3, r2
 800c71e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  uint32_t needErase = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	61fb      	str	r3, [r7, #28]
  uint32_t eraseOperation = 1;
 800c724:	2301      	movs	r3, #1
 800c726:	61bb      	str	r3, [r7, #24]
  BSP_QSPI_Read(QSPI_ReadBuffer, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	031b      	lsls	r3, r3, #12
 800c72c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c730:	4619      	mov	r1, r3
 800c732:	483f      	ldr	r0, [pc, #252]	; (800c830 <STORAGE_Write_FS+0x124>)
 800c734:	f7f4 fcf8 	bl	8001128 <BSP_QSPI_Read>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c738:	2300      	movs	r3, #0
 800c73a:	617b      	str	r3, [r7, #20]
 800c73c:	e00b      	b.n	800c756 <STORAGE_Write_FS+0x4a>
  {
    if (buf[i] != 0x00)
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	4413      	add	r3, r2
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d002      	beq.n	800c750 <STORAGE_Write_FS+0x44>
    {
      eraseOperation = 0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	61bb      	str	r3, [r7, #24]
      break;
 800c74e:	e006      	b.n	800c75e <STORAGE_Write_FS+0x52>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	3301      	adds	r3, #1
 800c754:	617b      	str	r3, [r7, #20]
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c75c:	d3ef      	bcc.n	800c73e <STORAGE_Write_FS+0x32>
    }
  }
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c75e:	2300      	movs	r3, #0
 800c760:	613b      	str	r3, [r7, #16]
 800c762:	e00b      	b.n	800c77c <STORAGE_Write_FS+0x70>
  {
    if (QSPI_ReadBuffer[i] != 0xFF)
 800c764:	4a32      	ldr	r2, [pc, #200]	; (800c830 <STORAGE_Write_FS+0x124>)
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	4413      	add	r3, r2
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	2bff      	cmp	r3, #255	; 0xff
 800c76e:	d002      	beq.n	800c776 <STORAGE_Write_FS+0x6a>
    {
      needErase = 1;
 800c770:	2301      	movs	r3, #1
 800c772:	61fb      	str	r3, [r7, #28]
      break;
 800c774:	e006      	b.n	800c784 <STORAGE_Write_FS+0x78>
  for (uint32_t i = 0; i < STORAGE_BLK_SIZ_USER; i++)
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	3301      	adds	r3, #1
 800c77a:	613b      	str	r3, [r7, #16]
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c782:	d3ef      	bcc.n	800c764 <STORAGE_Write_FS+0x58>
    }
  }
  if (eraseOperation == 1)
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	2b01      	cmp	r3, #1
 800c788:	d112      	bne.n	800c7b0 <STORAGE_Write_FS+0xa4>
  {
    if (needErase == 1)
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d14a      	bne.n	800c826 <STORAGE_Write_FS+0x11a>
    {
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800c790:	2201      	movs	r2, #1
 800c792:	2104      	movs	r1, #4
 800c794:	4827      	ldr	r0, [pc, #156]	; (800c834 <STORAGE_Write_FS+0x128>)
 800c796:	f7f6 fc69 	bl	800306c <HAL_GPIO_WritePin>
      BSP_QSPI_Erase_Block(blk_addr * STORAGE_BLK_SIZ_USER);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	031b      	lsls	r3, r3, #12
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7f4 fd8c 	bl	80012bc <BSP_QSPI_Erase_Block>
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	2104      	movs	r1, #4
 800c7a8:	4822      	ldr	r0, [pc, #136]	; (800c834 <STORAGE_Write_FS+0x128>)
 800c7aa:	f7f6 fc5f 	bl	800306c <HAL_GPIO_WritePin>
 800c7ae:	e03a      	b.n	800c826 <STORAGE_Write_FS+0x11a>
    }
  }
  else {
    if (needErase == 1)
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d123      	bne.n	800c7fe <STORAGE_Write_FS+0xf2>
    {
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	2104      	movs	r1, #4
 800c7ba:	481e      	ldr	r0, [pc, #120]	; (800c834 <STORAGE_Write_FS+0x128>)
 800c7bc:	f7f6 fc56 	bl	800306c <HAL_GPIO_WritePin>
      BSP_QSPI_Erase_Block(blk_addr * STORAGE_BLK_SIZ_USER);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	031b      	lsls	r3, r3, #12
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7f4 fd79 	bl	80012bc <BSP_QSPI_Erase_Block>
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	2104      	movs	r1, #4
 800c7ce:	4819      	ldr	r0, [pc, #100]	; (800c834 <STORAGE_Write_FS+0x128>)
 800c7d0:	f7f6 fc4c 	bl	800306c <HAL_GPIO_WritePin>

      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c7da:	4817      	ldr	r0, [pc, #92]	; (800c838 <STORAGE_Write_FS+0x12c>)
 800c7dc:	f7f6 fc46 	bl	800306c <HAL_GPIO_WritePin>
      BSP_QSPI_Write(buf, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	031b      	lsls	r3, r3, #12
 800c7e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	68b8      	ldr	r0, [r7, #8]
 800c7ec:	f7f4 fcde 	bl	80011ac <BSP_QSPI_Write>
      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c7f6:	4810      	ldr	r0, [pc, #64]	; (800c838 <STORAGE_Write_FS+0x12c>)
 800c7f8:	f7f6 fc38 	bl	800306c <HAL_GPIO_WritePin>
 800c7fc:	e013      	b.n	800c826 <STORAGE_Write_FS+0x11a>
    }
    else {
      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800c7fe:	2201      	movs	r2, #1
 800c800:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c804:	480c      	ldr	r0, [pc, #48]	; (800c838 <STORAGE_Write_FS+0x12c>)
 800c806:	f7f6 fc31 	bl	800306c <HAL_GPIO_WritePin>
      BSP_QSPI_Write(buf, blk_addr * STORAGE_BLK_SIZ_USER, STORAGE_BLK_SIZ_USER);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	031b      	lsls	r3, r3, #12
 800c80e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c812:	4619      	mov	r1, r3
 800c814:	68b8      	ldr	r0, [r7, #8]
 800c816:	f7f4 fcc9 	bl	80011ac <BSP_QSPI_Write>
      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800c81a:	2200      	movs	r2, #0
 800c81c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c820:	4805      	ldr	r0, [pc, #20]	; (800c838 <STORAGE_Write_FS+0x12c>)
 800c822:	f7f6 fc23 	bl	800306c <HAL_GPIO_WritePin>
    }
  }

  return (USBD_OK);
 800c826:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3720      	adds	r7, #32
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	20000900 	.word	0x20000900
 800c834:	48000400 	.word	0x48000400
 800c838:	48001000 	.word	0x48001000

0800c83c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c83c:	b480      	push	{r7}
 800c83e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c840:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c842:	4618      	mov	r0, r3
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b08a      	sub	sp, #40	; 0x28
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c854:	f107 0314 	add.w	r3, r7, #20
 800c858:	2200      	movs	r2, #0
 800c85a:	601a      	str	r2, [r3, #0]
 800c85c:	605a      	str	r2, [r3, #4]
 800c85e:	609a      	str	r2, [r3, #8]
 800c860:	60da      	str	r2, [r3, #12]
 800c862:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c86c:	d14e      	bne.n	800c90c <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c86e:	4b29      	ldr	r3, [pc, #164]	; (800c914 <HAL_PCD_MspInit+0xc8>)
 800c870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c872:	4a28      	ldr	r2, [pc, #160]	; (800c914 <HAL_PCD_MspInit+0xc8>)
 800c874:	f043 0301 	orr.w	r3, r3, #1
 800c878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c87a:	4b26      	ldr	r3, [pc, #152]	; (800c914 <HAL_PCD_MspInit+0xc8>)
 800c87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c87e:	f003 0301 	and.w	r3, r3, #1
 800c882:	613b      	str	r3, [r7, #16]
 800c884:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800c886:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c88a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c88c:	2302      	movs	r3, #2
 800c88e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c890:	2300      	movs	r3, #0
 800c892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c894:	2303      	movs	r3, #3
 800c896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c898:	230a      	movs	r3, #10
 800c89a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c89c:	f107 0314 	add.w	r3, r7, #20
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c8a6:	f7f6 f943 	bl	8002b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c8aa:	4b1a      	ldr	r3, [pc, #104]	; (800c914 <HAL_PCD_MspInit+0xc8>)
 800c8ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8ae:	4a19      	ldr	r2, [pc, #100]	; (800c914 <HAL_PCD_MspInit+0xc8>)
 800c8b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c8b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c8b6:	4b17      	ldr	r3, [pc, #92]	; (800c914 <HAL_PCD_MspInit+0xc8>)
 800c8b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c8be:	60fb      	str	r3, [r7, #12]
 800c8c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c8c2:	4b14      	ldr	r3, [pc, #80]	; (800c914 <HAL_PCD_MspInit+0xc8>)
 800c8c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d114      	bne.n	800c8f8 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c8ce:	4b11      	ldr	r3, [pc, #68]	; (800c914 <HAL_PCD_MspInit+0xc8>)
 800c8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d2:	4a10      	ldr	r2, [pc, #64]	; (800c914 <HAL_PCD_MspInit+0xc8>)
 800c8d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8d8:	6593      	str	r3, [r2, #88]	; 0x58
 800c8da:	4b0e      	ldr	r3, [pc, #56]	; (800c914 <HAL_PCD_MspInit+0xc8>)
 800c8dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8e2:	60bb      	str	r3, [r7, #8]
 800c8e4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800c8e6:	f7f8 facf 	bl	8004e88 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c8ea:	4b0a      	ldr	r3, [pc, #40]	; (800c914 <HAL_PCD_MspInit+0xc8>)
 800c8ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ee:	4a09      	ldr	r2, [pc, #36]	; (800c914 <HAL_PCD_MspInit+0xc8>)
 800c8f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8f4:	6593      	str	r3, [r2, #88]	; 0x58
 800c8f6:	e001      	b.n	800c8fc <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800c8f8:	f7f8 fac6 	bl	8004e88 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	2100      	movs	r1, #0
 800c900:	2043      	movs	r0, #67	; 0x43
 800c902:	f7f5 fcb0 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c906:	2043      	movs	r0, #67	; 0x43
 800c908:	f7f5 fcc9 	bl	800229e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c90c:	bf00      	nop
 800c90e:	3728      	adds	r7, #40	; 0x28
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	40021000 	.word	0x40021000

0800c918 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c92c:	4619      	mov	r1, r3
 800c92e:	4610      	mov	r0, r2
 800c930:	f7fe fc44 	bl	800b1bc <USBD_LL_SetupStage>
}
 800c934:	bf00      	nop
 800c936:	3708      	adds	r7, #8
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	460b      	mov	r3, r1
 800c946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c94e:	78fa      	ldrb	r2, [r7, #3]
 800c950:	6879      	ldr	r1, [r7, #4]
 800c952:	4613      	mov	r3, r2
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	1a9b      	subs	r3, r3, r2
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	440b      	add	r3, r1
 800c95c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	78fb      	ldrb	r3, [r7, #3]
 800c964:	4619      	mov	r1, r3
 800c966:	f7fe fc7e 	bl	800b266 <USBD_LL_DataOutStage>
}
 800c96a:	bf00      	nop
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b082      	sub	sp, #8
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
 800c97a:	460b      	mov	r3, r1
 800c97c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c984:	78fa      	ldrb	r2, [r7, #3]
 800c986:	6879      	ldr	r1, [r7, #4]
 800c988:	4613      	mov	r3, r2
 800c98a:	00db      	lsls	r3, r3, #3
 800c98c:	1a9b      	subs	r3, r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	440b      	add	r3, r1
 800c992:	3348      	adds	r3, #72	; 0x48
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	78fb      	ldrb	r3, [r7, #3]
 800c998:	4619      	mov	r1, r3
 800c99a:	f7fe fcc7 	bl	800b32c <USBD_LL_DataInStage>
}
 800c99e:	bf00      	nop
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b082      	sub	sp, #8
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7fe fddb 	bl	800b570 <USBD_LL_SOF>
}
 800c9ba:	bf00      	nop
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b084      	sub	sp, #16
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	2b02      	cmp	r3, #2
 800c9d4:	d001      	beq.n	800c9da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c9d6:	f7f4 fb1c 	bl	8001012 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9e0:	7bfa      	ldrb	r2, [r7, #15]
 800c9e2:	4611      	mov	r1, r2
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fe fd85 	bl	800b4f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7fe fd31 	bl	800b458 <USBD_LL_Reset>
}
 800c9f6:	bf00      	nop
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
	...

0800ca00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	6812      	ldr	r2, [r2, #0]
 800ca16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca1a:	f043 0301 	orr.w	r3, r3, #1
 800ca1e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fe fd74 	bl	800b514 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6a1b      	ldr	r3, [r3, #32]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d005      	beq.n	800ca40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca34:	4b04      	ldr	r3, [pc, #16]	; (800ca48 <HAL_PCD_SuspendCallback+0x48>)
 800ca36:	691b      	ldr	r3, [r3, #16]
 800ca38:	4a03      	ldr	r2, [pc, #12]	; (800ca48 <HAL_PCD_SuspendCallback+0x48>)
 800ca3a:	f043 0306 	orr.w	r3, r3, #6
 800ca3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca40:	bf00      	nop
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	e000ed00 	.word	0xe000ed00

0800ca4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	6812      	ldr	r2, [r2, #0]
 800ca62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca66:	f023 0301 	bic.w	r3, r3, #1
 800ca6a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6a1b      	ldr	r3, [r3, #32]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d007      	beq.n	800ca84 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca74:	4b08      	ldr	r3, [pc, #32]	; (800ca98 <HAL_PCD_ResumeCallback+0x4c>)
 800ca76:	691b      	ldr	r3, [r3, #16]
 800ca78:	4a07      	ldr	r2, [pc, #28]	; (800ca98 <HAL_PCD_ResumeCallback+0x4c>)
 800ca7a:	f023 0306 	bic.w	r3, r3, #6
 800ca7e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ca80:	f000 fade 	bl	800d040 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7fe fd58 	bl	800b540 <USBD_LL_Resume>
}
 800ca90:	bf00      	nop
 800ca92:	3708      	adds	r7, #8
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	e000ed00 	.word	0xe000ed00

0800ca9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	460b      	mov	r3, r1
 800caa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800caae:	78fa      	ldrb	r2, [r7, #3]
 800cab0:	4611      	mov	r1, r2
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fe fda4 	bl	800b600 <USBD_LL_IsoOUTIncomplete>
}
 800cab8:	bf00      	nop
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	460b      	mov	r3, r1
 800caca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cad2:	78fa      	ldrb	r2, [r7, #3]
 800cad4:	4611      	mov	r1, r2
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7fe fd6c 	bl	800b5b4 <USBD_LL_IsoINIncomplete>
}
 800cadc:	bf00      	nop
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fe fdaa 	bl	800b64c <USBD_LL_DevConnected>
}
 800caf8:	bf00      	nop
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fe fda7 	bl	800b662 <USBD_LL_DevDisconnected>
}
 800cb14:	bf00      	nop
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d13c      	bne.n	800cba6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cb2c:	4a20      	ldr	r2, [pc, #128]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a1e      	ldr	r2, [pc, #120]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb38:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cb3c:	4b1c      	ldr	r3, [pc, #112]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cb42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800cb44:	4b1a      	ldr	r3, [pc, #104]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb46:	2206      	movs	r2, #6
 800cb48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cb4a:	4b19      	ldr	r3, [pc, #100]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb4c:	2202      	movs	r2, #2
 800cb4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb50:	4b17      	ldr	r3, [pc, #92]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb52:	2202      	movs	r2, #2
 800cb54:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cb56:	4b16      	ldr	r3, [pc, #88]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cb5c:	4b14      	ldr	r3, [pc, #80]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb5e:	2200      	movs	r2, #0
 800cb60:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cb62:	4b13      	ldr	r3, [pc, #76]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800cb68:	4b11      	ldr	r3, [pc, #68]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cb6e:	4b10      	ldr	r3, [pc, #64]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb70:	2200      	movs	r2, #0
 800cb72:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cb74:	4b0e      	ldr	r3, [pc, #56]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cb7a:	480d      	ldr	r0, [pc, #52]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb7c:	f7f7 f842 	bl	8003c04 <HAL_PCD_Init>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cb86:	f7f4 fa44 	bl	8001012 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cb8a:	2180      	movs	r1, #128	; 0x80
 800cb8c:	4808      	ldr	r0, [pc, #32]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb8e:	f7f8 f8c6 	bl	8004d1e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cb92:	2240      	movs	r2, #64	; 0x40
 800cb94:	2100      	movs	r1, #0
 800cb96:	4806      	ldr	r0, [pc, #24]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cb98:	f7f8 f87a 	bl	8004c90 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cb9c:	2280      	movs	r2, #128	; 0x80
 800cb9e:	2101      	movs	r1, #1
 800cba0:	4803      	ldr	r0, [pc, #12]	; (800cbb0 <USBD_LL_Init+0x94>)
 800cba2:	f7f8 f875 	bl	8004c90 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	20001900 	.word	0x20001900

0800cbb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7f7 f93e 	bl	8003e4c <HAL_PCD_Start>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cbd4:	7bbb      	ldrb	r3, [r7, #14]
 800cbd6:	2b03      	cmp	r3, #3
 800cbd8:	d816      	bhi.n	800cc08 <USBD_LL_Start+0x54>
 800cbda:	a201      	add	r2, pc, #4	; (adr r2, 800cbe0 <USBD_LL_Start+0x2c>)
 800cbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe0:	0800cbf1 	.word	0x0800cbf1
 800cbe4:	0800cbf7 	.word	0x0800cbf7
 800cbe8:	0800cbfd 	.word	0x0800cbfd
 800cbec:	0800cc03 	.word	0x0800cc03
    case HAL_OK :
      usb_status = USBD_OK;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbf4:	e00b      	b.n	800cc0e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbf6:	2303      	movs	r3, #3
 800cbf8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbfa:	e008      	b.n	800cc0e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	73fb      	strb	r3, [r7, #15]
    break;
 800cc00:	e005      	b.n	800cc0e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc02:	2303      	movs	r3, #3
 800cc04:	73fb      	strb	r3, [r7, #15]
    break;
 800cc06:	e002      	b.n	800cc0e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800cc08:	2303      	movs	r3, #3
 800cc0a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc0c:	bf00      	nop
  }
  return usb_status;
 800cc0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	4608      	mov	r0, r1
 800cc22:	4611      	mov	r1, r2
 800cc24:	461a      	mov	r2, r3
 800cc26:	4603      	mov	r3, r0
 800cc28:	70fb      	strb	r3, [r7, #3]
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	70bb      	strb	r3, [r7, #2]
 800cc2e:	4613      	mov	r3, r2
 800cc30:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cc40:	78bb      	ldrb	r3, [r7, #2]
 800cc42:	883a      	ldrh	r2, [r7, #0]
 800cc44:	78f9      	ldrb	r1, [r7, #3]
 800cc46:	f7f7 fcee 	bl	8004626 <HAL_PCD_EP_Open>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc4e:	7bbb      	ldrb	r3, [r7, #14]
 800cc50:	2b03      	cmp	r3, #3
 800cc52:	d817      	bhi.n	800cc84 <USBD_LL_OpenEP+0x6c>
 800cc54:	a201      	add	r2, pc, #4	; (adr r2, 800cc5c <USBD_LL_OpenEP+0x44>)
 800cc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc5a:	bf00      	nop
 800cc5c:	0800cc6d 	.word	0x0800cc6d
 800cc60:	0800cc73 	.word	0x0800cc73
 800cc64:	0800cc79 	.word	0x0800cc79
 800cc68:	0800cc7f 	.word	0x0800cc7f
    case HAL_OK :
      usb_status = USBD_OK;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc70:	e00b      	b.n	800cc8a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc72:	2303      	movs	r3, #3
 800cc74:	73fb      	strb	r3, [r7, #15]
    break;
 800cc76:	e008      	b.n	800cc8a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc7c:	e005      	b.n	800cc8a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc7e:	2303      	movs	r3, #3
 800cc80:	73fb      	strb	r3, [r7, #15]
    break;
 800cc82:	e002      	b.n	800cc8a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cc84:	2303      	movs	r3, #3
 800cc86:	73fb      	strb	r3, [r7, #15]
    break;
 800cc88:	bf00      	nop
  }
  return usb_status;
 800cc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca0:	2300      	movs	r3, #0
 800cca2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccae:	78fa      	ldrb	r2, [r7, #3]
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7f7 fd1f 	bl	80046f6 <HAL_PCD_EP_Close>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ccbc:	7bbb      	ldrb	r3, [r7, #14]
 800ccbe:	2b03      	cmp	r3, #3
 800ccc0:	d816      	bhi.n	800ccf0 <USBD_LL_CloseEP+0x5c>
 800ccc2:	a201      	add	r2, pc, #4	; (adr r2, 800ccc8 <USBD_LL_CloseEP+0x34>)
 800ccc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc8:	0800ccd9 	.word	0x0800ccd9
 800cccc:	0800ccdf 	.word	0x0800ccdf
 800ccd0:	0800cce5 	.word	0x0800cce5
 800ccd4:	0800cceb 	.word	0x0800cceb
    case HAL_OK :
      usb_status = USBD_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	73fb      	strb	r3, [r7, #15]
    break;
 800ccdc:	e00b      	b.n	800ccf6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccde:	2303      	movs	r3, #3
 800cce0:	73fb      	strb	r3, [r7, #15]
    break;
 800cce2:	e008      	b.n	800ccf6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cce4:	2301      	movs	r3, #1
 800cce6:	73fb      	strb	r3, [r7, #15]
    break;
 800cce8:	e005      	b.n	800ccf6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccea:	2303      	movs	r3, #3
 800ccec:	73fb      	strb	r3, [r7, #15]
    break;
 800ccee:	e002      	b.n	800ccf6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ccf0:	2303      	movs	r3, #3
 800ccf2:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf4:	bf00      	nop
  }
  return usb_status;
 800ccf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd1a:	78fa      	ldrb	r2, [r7, #3]
 800cd1c:	4611      	mov	r1, r2
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7f7 fe7e 	bl	8004a20 <HAL_PCD_EP_Flush>
 800cd24:	4603      	mov	r3, r0
 800cd26:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd28:	7bbb      	ldrb	r3, [r7, #14]
 800cd2a:	2b03      	cmp	r3, #3
 800cd2c:	d816      	bhi.n	800cd5c <USBD_LL_FlushEP+0x5c>
 800cd2e:	a201      	add	r2, pc, #4	; (adr r2, 800cd34 <USBD_LL_FlushEP+0x34>)
 800cd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd34:	0800cd45 	.word	0x0800cd45
 800cd38:	0800cd4b 	.word	0x0800cd4b
 800cd3c:	0800cd51 	.word	0x0800cd51
 800cd40:	0800cd57 	.word	0x0800cd57
    case HAL_OK :
      usb_status = USBD_OK;
 800cd44:	2300      	movs	r3, #0
 800cd46:	73fb      	strb	r3, [r7, #15]
    break;
 800cd48:	e00b      	b.n	800cd62 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd4a:	2303      	movs	r3, #3
 800cd4c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd4e:	e008      	b.n	800cd62 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd50:	2301      	movs	r3, #1
 800cd52:	73fb      	strb	r3, [r7, #15]
    break;
 800cd54:	e005      	b.n	800cd62 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd56:	2303      	movs	r3, #3
 800cd58:	73fb      	strb	r3, [r7, #15]
    break;
 800cd5a:	e002      	b.n	800cd62 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cd5c:	2303      	movs	r3, #3
 800cd5e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd60:	bf00      	nop
  }
  return usb_status;
 800cd62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	460b      	mov	r3, r1
 800cd76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd86:	78fa      	ldrb	r2, [r7, #3]
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7f7 fd90 	bl	80048b0 <HAL_PCD_EP_SetStall>
 800cd90:	4603      	mov	r3, r0
 800cd92:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd94:	7bbb      	ldrb	r3, [r7, #14]
 800cd96:	2b03      	cmp	r3, #3
 800cd98:	d816      	bhi.n	800cdc8 <USBD_LL_StallEP+0x5c>
 800cd9a:	a201      	add	r2, pc, #4	; (adr r2, 800cda0 <USBD_LL_StallEP+0x34>)
 800cd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda0:	0800cdb1 	.word	0x0800cdb1
 800cda4:	0800cdb7 	.word	0x0800cdb7
 800cda8:	0800cdbd 	.word	0x0800cdbd
 800cdac:	0800cdc3 	.word	0x0800cdc3
    case HAL_OK :
      usb_status = USBD_OK;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	73fb      	strb	r3, [r7, #15]
    break;
 800cdb4:	e00b      	b.n	800cdce <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdb6:	2303      	movs	r3, #3
 800cdb8:	73fb      	strb	r3, [r7, #15]
    break;
 800cdba:	e008      	b.n	800cdce <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc0:	e005      	b.n	800cdce <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdc2:	2303      	movs	r3, #3
 800cdc4:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc6:	e002      	b.n	800cdce <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cdc8:	2303      	movs	r3, #3
 800cdca:	73fb      	strb	r3, [r7, #15]
    break;
 800cdcc:	bf00      	nop
  }
  return usb_status;
 800cdce:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	460b      	mov	r3, r1
 800cde2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cdf2:	78fa      	ldrb	r2, [r7, #3]
 800cdf4:	4611      	mov	r1, r2
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7f7 fdbc 	bl	8004974 <HAL_PCD_EP_ClrStall>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ce00:	7bbb      	ldrb	r3, [r7, #14]
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	d816      	bhi.n	800ce34 <USBD_LL_ClearStallEP+0x5c>
 800ce06:	a201      	add	r2, pc, #4	; (adr r2, 800ce0c <USBD_LL_ClearStallEP+0x34>)
 800ce08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce0c:	0800ce1d 	.word	0x0800ce1d
 800ce10:	0800ce23 	.word	0x0800ce23
 800ce14:	0800ce29 	.word	0x0800ce29
 800ce18:	0800ce2f 	.word	0x0800ce2f
    case HAL_OK :
      usb_status = USBD_OK;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce20:	e00b      	b.n	800ce3a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce22:	2303      	movs	r3, #3
 800ce24:	73fb      	strb	r3, [r7, #15]
    break;
 800ce26:	e008      	b.n	800ce3a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce2c:	e005      	b.n	800ce3a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce2e:	2303      	movs	r3, #3
 800ce30:	73fb      	strb	r3, [r7, #15]
    break;
 800ce32:	e002      	b.n	800ce3a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ce34:	2303      	movs	r3, #3
 800ce36:	73fb      	strb	r3, [r7, #15]
    break;
 800ce38:	bf00      	nop
  }
  return usb_status;
 800ce3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3710      	adds	r7, #16
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ce58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	da0b      	bge.n	800ce78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ce60:	78fb      	ldrb	r3, [r7, #3]
 800ce62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce66:	68f9      	ldr	r1, [r7, #12]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	1a9b      	subs	r3, r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	440b      	add	r3, r1
 800ce72:	333e      	adds	r3, #62	; 0x3e
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	e00b      	b.n	800ce90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce78:	78fb      	ldrb	r3, [r7, #3]
 800ce7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce7e:	68f9      	ldr	r1, [r7, #12]
 800ce80:	4613      	mov	r3, r2
 800ce82:	00db      	lsls	r3, r3, #3
 800ce84:	1a9b      	subs	r3, r3, r2
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	440b      	add	r3, r1
 800ce8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ceb6:	78fa      	ldrb	r2, [r7, #3]
 800ceb8:	4611      	mov	r1, r2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7f7 fb8e 	bl	80045dc <HAL_PCD_SetAddress>
 800cec0:	4603      	mov	r3, r0
 800cec2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cec4:	7bbb      	ldrb	r3, [r7, #14]
 800cec6:	2b03      	cmp	r3, #3
 800cec8:	d816      	bhi.n	800cef8 <USBD_LL_SetUSBAddress+0x5c>
 800ceca:	a201      	add	r2, pc, #4	; (adr r2, 800ced0 <USBD_LL_SetUSBAddress+0x34>)
 800cecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced0:	0800cee1 	.word	0x0800cee1
 800ced4:	0800cee7 	.word	0x0800cee7
 800ced8:	0800ceed 	.word	0x0800ceed
 800cedc:	0800cef3 	.word	0x0800cef3
    case HAL_OK :
      usb_status = USBD_OK;
 800cee0:	2300      	movs	r3, #0
 800cee2:	73fb      	strb	r3, [r7, #15]
    break;
 800cee4:	e00b      	b.n	800cefe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cee6:	2303      	movs	r3, #3
 800cee8:	73fb      	strb	r3, [r7, #15]
    break;
 800ceea:	e008      	b.n	800cefe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ceec:	2301      	movs	r3, #1
 800ceee:	73fb      	strb	r3, [r7, #15]
    break;
 800cef0:	e005      	b.n	800cefe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cef2:	2303      	movs	r3, #3
 800cef4:	73fb      	strb	r3, [r7, #15]
    break;
 800cef6:	e002      	b.n	800cefe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800cef8:	2303      	movs	r3, #3
 800cefa:	73fb      	strb	r3, [r7, #15]
    break;
 800cefc:	bf00      	nop
  }
  return usb_status;
 800cefe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3710      	adds	r7, #16
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b086      	sub	sp, #24
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	607a      	str	r2, [r7, #4]
 800cf12:	603b      	str	r3, [r7, #0]
 800cf14:	460b      	mov	r3, r1
 800cf16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cf26:	7af9      	ldrb	r1, [r7, #11]
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	f7f7 fc83 	bl	8004836 <HAL_PCD_EP_Transmit>
 800cf30:	4603      	mov	r3, r0
 800cf32:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cf34:	7dbb      	ldrb	r3, [r7, #22]
 800cf36:	2b03      	cmp	r3, #3
 800cf38:	d816      	bhi.n	800cf68 <USBD_LL_Transmit+0x60>
 800cf3a:	a201      	add	r2, pc, #4	; (adr r2, 800cf40 <USBD_LL_Transmit+0x38>)
 800cf3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf40:	0800cf51 	.word	0x0800cf51
 800cf44:	0800cf57 	.word	0x0800cf57
 800cf48:	0800cf5d 	.word	0x0800cf5d
 800cf4c:	0800cf63 	.word	0x0800cf63
    case HAL_OK :
      usb_status = USBD_OK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	75fb      	strb	r3, [r7, #23]
    break;
 800cf54:	e00b      	b.n	800cf6e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf56:	2303      	movs	r3, #3
 800cf58:	75fb      	strb	r3, [r7, #23]
    break;
 800cf5a:	e008      	b.n	800cf6e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	75fb      	strb	r3, [r7, #23]
    break;
 800cf60:	e005      	b.n	800cf6e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf62:	2303      	movs	r3, #3
 800cf64:	75fb      	strb	r3, [r7, #23]
    break;
 800cf66:	e002      	b.n	800cf6e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800cf68:	2303      	movs	r3, #3
 800cf6a:	75fb      	strb	r3, [r7, #23]
    break;
 800cf6c:	bf00      	nop
  }
  return usb_status;
 800cf6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3718      	adds	r7, #24
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	607a      	str	r2, [r7, #4]
 800cf82:	603b      	str	r3, [r7, #0]
 800cf84:	460b      	mov	r3, r1
 800cf86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cf96:	7af9      	ldrb	r1, [r7, #11]
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	f7f7 fbf5 	bl	800478a <HAL_PCD_EP_Receive>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cfa4:	7dbb      	ldrb	r3, [r7, #22]
 800cfa6:	2b03      	cmp	r3, #3
 800cfa8:	d816      	bhi.n	800cfd8 <USBD_LL_PrepareReceive+0x60>
 800cfaa:	a201      	add	r2, pc, #4	; (adr r2, 800cfb0 <USBD_LL_PrepareReceive+0x38>)
 800cfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb0:	0800cfc1 	.word	0x0800cfc1
 800cfb4:	0800cfc7 	.word	0x0800cfc7
 800cfb8:	0800cfcd 	.word	0x0800cfcd
 800cfbc:	0800cfd3 	.word	0x0800cfd3
    case HAL_OK :
      usb_status = USBD_OK;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	75fb      	strb	r3, [r7, #23]
    break;
 800cfc4:	e00b      	b.n	800cfde <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	75fb      	strb	r3, [r7, #23]
    break;
 800cfca:	e008      	b.n	800cfde <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	75fb      	strb	r3, [r7, #23]
    break;
 800cfd0:	e005      	b.n	800cfde <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cfd2:	2303      	movs	r3, #3
 800cfd4:	75fb      	strb	r3, [r7, #23]
    break;
 800cfd6:	e002      	b.n	800cfde <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800cfd8:	2303      	movs	r3, #3
 800cfda:	75fb      	strb	r3, [r7, #23]
    break;
 800cfdc:	bf00      	nop
  }
  return usb_status;
 800cfde:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3718      	adds	r7, #24
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	460b      	mov	r3, r1
 800cff2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cffa:	78fa      	ldrb	r2, [r7, #3]
 800cffc:	4611      	mov	r1, r2
 800cffe:	4618      	mov	r0, r3
 800d000:	f7f7 fc01 	bl	8004806 <HAL_PCD_EP_GetRxCount>
 800d004:	4603      	mov	r3, r0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
	...

0800d010 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d018:	4b03      	ldr	r3, [pc, #12]	; (800d028 <USBD_static_malloc+0x18>)
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	370c      	adds	r7, #12
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	20001d08 	.word	0x20001d08

0800d02c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]

}
 800d034:	bf00      	nop
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d044:	f7f3 ff56 	bl	8000ef4 <SystemClock_Config>
}
 800d048:	bf00      	nop
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <__libc_init_array>:
 800d04c:	b570      	push	{r4, r5, r6, lr}
 800d04e:	4d0d      	ldr	r5, [pc, #52]	; (800d084 <__libc_init_array+0x38>)
 800d050:	4c0d      	ldr	r4, [pc, #52]	; (800d088 <__libc_init_array+0x3c>)
 800d052:	1b64      	subs	r4, r4, r5
 800d054:	10a4      	asrs	r4, r4, #2
 800d056:	2600      	movs	r6, #0
 800d058:	42a6      	cmp	r6, r4
 800d05a:	d109      	bne.n	800d070 <__libc_init_array+0x24>
 800d05c:	4d0b      	ldr	r5, [pc, #44]	; (800d08c <__libc_init_array+0x40>)
 800d05e:	4c0c      	ldr	r4, [pc, #48]	; (800d090 <__libc_init_array+0x44>)
 800d060:	f000 f820 	bl	800d0a4 <_init>
 800d064:	1b64      	subs	r4, r4, r5
 800d066:	10a4      	asrs	r4, r4, #2
 800d068:	2600      	movs	r6, #0
 800d06a:	42a6      	cmp	r6, r4
 800d06c:	d105      	bne.n	800d07a <__libc_init_array+0x2e>
 800d06e:	bd70      	pop	{r4, r5, r6, pc}
 800d070:	f855 3b04 	ldr.w	r3, [r5], #4
 800d074:	4798      	blx	r3
 800d076:	3601      	adds	r6, #1
 800d078:	e7ee      	b.n	800d058 <__libc_init_array+0xc>
 800d07a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d07e:	4798      	blx	r3
 800d080:	3601      	adds	r6, #1
 800d082:	e7f2      	b.n	800d06a <__libc_init_array+0x1e>
 800d084:	0800d170 	.word	0x0800d170
 800d088:	0800d170 	.word	0x0800d170
 800d08c:	0800d170 	.word	0x0800d170
 800d090:	0800d174 	.word	0x0800d174

0800d094 <memset>:
 800d094:	4402      	add	r2, r0
 800d096:	4603      	mov	r3, r0
 800d098:	4293      	cmp	r3, r2
 800d09a:	d100      	bne.n	800d09e <memset+0xa>
 800d09c:	4770      	bx	lr
 800d09e:	f803 1b01 	strb.w	r1, [r3], #1
 800d0a2:	e7f9      	b.n	800d098 <memset+0x4>

0800d0a4 <_init>:
 800d0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a6:	bf00      	nop
 800d0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0aa:	bc08      	pop	{r3}
 800d0ac:	469e      	mov	lr, r3
 800d0ae:	4770      	bx	lr

0800d0b0 <_fini>:
 800d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b2:	bf00      	nop
 800d0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0b6:	bc08      	pop	{r3}
 800d0b8:	469e      	mov	lr, r3
 800d0ba:	4770      	bx	lr
